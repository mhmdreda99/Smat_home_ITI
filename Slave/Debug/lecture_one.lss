
lecture_one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000033fc  00003490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  0080008a  0080008a  000034ba  2**0
                  ALLOC
  3 .stab         000032ac  00000000  00000000  000034bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017e1  00000000  00000000  00006768  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000080a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a27d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c300  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c480  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c742  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cfd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 08 11 	call	0x2210	; 0x2210 <main>
      8a:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 19 	jmp	0x33c2	; 0x33c2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d5 19 	jmp	0x33aa	; 0x33aa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Create_Task>:
 * @param periodicity periodicity time of the task
 * @param PTR call back function
 * @return Std_ReturnType function executed correctly or not
 */
Std_ReturnType Create_Task(u8 Priority, u16 periodicity,u8 First_delay ,void(*ptr)(void))
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	27 97       	sbiw	r28, 0x07	; 7
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8a 83       	std	Y+2, r24	; 0x02
     cb4:	7c 83       	std	Y+4, r23	; 0x04
     cb6:	6b 83       	std	Y+3, r22	; 0x03
     cb8:	4d 83       	std	Y+5, r20	; 0x05
     cba:	3f 83       	std	Y+7, r19	; 0x07
     cbc:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType Status=E_NOT_OK;
     cbe:	19 82       	std	Y+1, r1	; 0x01
	if(Tasks[Priority].pf!=NULL)
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	c9 01       	movw	r24, r18
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	82 1b       	sub	r24, r18
     cd6:	93 0b       	sbc	r25, r19
     cd8:	fc 01       	movw	r30, r24
     cda:	e6 57       	subi	r30, 0x76	; 118
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	19 f0       	breq	.+6      	; 0xcec <Create_Task+0x4e>
	{
		Status=E_RESERVED;
     ce6:	83 e0       	ldi	r24, 0x03	; 3
     ce8:	89 83       	std	Y+1, r24	; 0x01
     cea:	5a c0       	rjmp	.+180    	; 0xda0 <Create_Task+0x102>
	}
	else
	{
		Tasks[Priority].periodicity= periodicity;
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	c9 01       	movw	r24, r18
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	82 1b       	sub	r24, r18
     d02:	93 0b       	sbc	r25, r19
     d04:	fc 01       	movw	r30, r24
     d06:	e3 57       	subi	r30, 0x73	; 115
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	91 83       	std	Z+1, r25	; 0x01
     d10:	80 83       	st	Z, r24
		Tasks[Priority].pf=ptr;
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	c9 01       	movw	r24, r18
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	82 1b       	sub	r24, r18
     d28:	93 0b       	sbc	r25, r19
     d2a:	fc 01       	movw	r30, r24
     d2c:	e6 57       	subi	r30, 0x76	; 118
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	8e 81       	ldd	r24, Y+6	; 0x06
     d32:	9f 81       	ldd	r25, Y+7	; 0x07
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 83       	st	Z, r24
		Tasks[Priority].priority=Priority;
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	c9 01       	movw	r24, r18
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	82 1b       	sub	r24, r18
     d4e:	93 0b       	sbc	r25, r19
     d50:	fc 01       	movw	r30, r24
     d52:	e4 57       	subi	r30, 0x74	; 116
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	80 83       	st	Z, r24
		Tasks[Priority].F_Delay=First_delay;
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	c9 01       	movw	r24, r18
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	82 1b       	sub	r24, r18
     d70:	93 0b       	sbc	r25, r19
     d72:	fc 01       	movw	r30, r24
     d74:	e0 57       	subi	r30, 0x70	; 112
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
     d7a:	80 83       	st	Z, r24
		Tasks[Priority].state=TASK_IDLE;
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	c9 01       	movw	r24, r18
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	82 1b       	sub	r24, r18
     d92:	93 0b       	sbc	r25, r19
     d94:	fc 01       	movw	r30, r24
     d96:	e1 57       	subi	r30, 0x71	; 113
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	10 82       	st	Z, r1
		Status=E_OK;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Status;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
}
     da2:	27 96       	adiw	r28, 0x07	; 7
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <RTOS_START>:

void RTOS_START(void)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
	TIMER0_SETCALLBACK(&Schedular);
     dbc:	8e e3       	ldi	r24, 0x3E	; 62
     dbe:	97 e0       	ldi	r25, 0x07	; 7
     dc0:	0e 94 37 08 	call	0x106e	; 0x106e <TIMER0_SETCALLBACK>
	Enable_Global_Interrupt();
     dc4:	af e5       	ldi	r26, 0x5F	; 95
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	ef e5       	ldi	r30, 0x5F	; 95
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	80 68       	ori	r24, 0x80	; 128
     dd0:	8c 93       	st	X, r24
	MTIMER0_VoidInit();
     dd2:	0e 94 df 07 	call	0xfbe	; 0xfbe <MTIMER0_VoidInit>
}
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <Task_Suspend>:
/***************************************/
void Task_Suspend(u8 Priority)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	0f 92       	push	r0
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	89 83       	std	Y+1, r24	; 0x01
	Tasks[Priority].state=TASK_SUSPENDED;
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	c9 01       	movw	r24, r18
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	82 1b       	sub	r24, r18
     dfe:	93 0b       	sbc	r25, r19
     e00:	fc 01       	movw	r30, r24
     e02:	e1 57       	subi	r30, 0x71	; 113
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	80 83       	st	Z, r24
}
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <Task_Resume>:
/***************************************/
void Task_Resume(u8 Priority)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	0f 92       	push	r0
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
	Tasks[Priority].state=TASK_IDLE;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	c9 01       	movw	r24, r18
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	82 1b       	sub	r24, r18
     e34:	93 0b       	sbc	r25, r19
     e36:	fc 01       	movw	r30, r24
     e38:	e1 57       	subi	r30, 0x71	; 113
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	10 82       	st	Z, r1
}
     e3e:	0f 90       	pop	r0
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <Task_Delete>:
/***************************************/
void Task_Delete(u8 Priority)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	0f 92       	push	r0
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	89 83       	std	Y+1, r24	; 0x01
	Tasks[Priority].pf=NULL;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	c9 01       	movw	r24, r18
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	82 1b       	sub	r24, r18
     e68:	93 0b       	sbc	r25, r19
     e6a:	fc 01       	movw	r30, r24
     e6c:	e6 57       	subi	r30, 0x76	; 118
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	11 82       	std	Z+1, r1	; 0x01
     e72:	10 82       	st	Z, r1
}
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <Schedular>:
/***************************************/

void Schedular(void)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	0f 92       	push	r0
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
 	u8 Task_Counter=0;
     e86:	19 82       	std	Y+1, r1	; 0x01

	for(Task_Counter=0;Task_Counter<TASK_MAX_NUMBER;Task_Counter++)
     e88:	19 82       	std	Y+1, r1	; 0x01
     e8a:	91 c0       	rjmp	.+290    	; 0xfae <Schedular+0x132>
	{
		if(Tasks[Task_Counter].state==TASK_IDLE)
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	c9 01       	movw	r24, r18
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	82 1b       	sub	r24, r18
     ea2:	93 0b       	sbc	r25, r19
     ea4:	fc 01       	movw	r30, r24
     ea6:	e1 57       	subi	r30, 0x71	; 113
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	80 81       	ld	r24, Z
     eac:	88 23       	and	r24, r24
     eae:	09 f0       	breq	.+2      	; 0xeb2 <Schedular+0x36>
     eb0:	7b c0       	rjmp	.+246    	; 0xfa8 <Schedular+0x12c>
		{
			if(NULL!=Tasks[Task_Counter].pf)
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	c9 01       	movw	r24, r18
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	82 1b       	sub	r24, r18
     ec8:	93 0b       	sbc	r25, r19
     eca:	fc 01       	movw	r30, r24
     ecc:	e6 57       	subi	r30, 0x76	; 118
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	80 81       	ld	r24, Z
     ed2:	91 81       	ldd	r25, Z+1	; 0x01
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	09 f4       	brne	.+2      	; 0xeda <Schedular+0x5e>
     ed8:	67 c0       	rjmp	.+206    	; 0xfa8 <Schedular+0x12c>
			{
				// if(counter_ticks%Tasks[Task_Counter].periodicity==0)
				if(Tasks[Task_Counter].F_Delay==0)
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	c9 01       	movw	r24, r18
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	82 1b       	sub	r24, r18
     ef0:	93 0b       	sbc	r25, r19
     ef2:	fc 01       	movw	r30, r24
     ef4:	e0 57       	subi	r30, 0x70	; 112
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 81       	ld	r24, Z
     efa:	88 23       	and	r24, r24
     efc:	b1 f5       	brne	.+108    	; 0xf6a <Schedular+0xee>
				{
					Tasks[Task_Counter].pf();
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	c9 01       	movw	r24, r18
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	82 1b       	sub	r24, r18
     f14:	93 0b       	sbc	r25, r19
     f16:	fc 01       	movw	r30, r24
     f18:	e6 57       	subi	r30, 0x76	; 118
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	01 90       	ld	r0, Z+
     f1e:	f0 81       	ld	r31, Z
     f20:	e0 2d       	mov	r30, r0
     f22:	09 95       	icall
					Tasks[Task_Counter].F_Delay=Tasks[Task_Counter].periodicity;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	48 2f       	mov	r20, r24
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	c9 01       	movw	r24, r18
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	82 1b       	sub	r24, r18
     f40:	93 0b       	sbc	r25, r19
     f42:	fc 01       	movw	r30, r24
     f44:	e3 57       	subi	r30, 0x73	; 115
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	28 2f       	mov	r18, r24
     f4e:	ca 01       	movw	r24, r20
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	84 1b       	sub	r24, r20
     f5e:	95 0b       	sbc	r25, r21
     f60:	fc 01       	movw	r30, r24
     f62:	e0 57       	subi	r30, 0x70	; 112
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	20 83       	st	Z, r18
     f68:	1f c0       	rjmp	.+62     	; 0xfa8 <Schedular+0x12c>
				}
				else
				{
					Tasks[Task_Counter].F_Delay--;
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	c9 01       	movw	r24, r18
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	82 1b       	sub	r24, r18
     f80:	93 0b       	sbc	r25, r19
     f82:	fc 01       	movw	r30, r24
     f84:	e0 57       	subi	r30, 0x70	; 112
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	41 50       	subi	r20, 0x01	; 1
     f8e:	c9 01       	movw	r24, r18
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	82 1b       	sub	r24, r18
     f9e:	93 0b       	sbc	r25, r19
     fa0:	fc 01       	movw	r30, r24
     fa2:	e0 57       	subi	r30, 0x70	; 112
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	40 83       	st	Z, r20

void Schedular(void)
{
 	u8 Task_Counter=0;

	for(Task_Counter=0;Task_Counter<TASK_MAX_NUMBER;Task_Counter++)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	85 30       	cpi	r24, 0x05	; 5
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <Schedular+0x13a>
     fb4:	6b cf       	rjmp	.-298    	; 0xe8c <Schedular+0x10>
			/*DO NOTHING*/
		}


	}
}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <MTIMER0_VoidInit>:
/********************************************/
void (*TIMER0_CALLBACK)(void)=NULL;
/********************************************/

void MTIMER0_VoidInit(void)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62

#elif TIMER_0_MODE==Timer0_CTC_Mode
/****************select wave generation mode as CTC Mode***************/

/****************set compare match CTC Mode***************/
Timer0_Enable_CTC_MODE();
     fc6:	a3 e5       	ldi	r26, 0x53	; 83
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e3 e5       	ldi	r30, 0x53	; 83
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	88 60       	ori	r24, 0x08	; 8
     fd2:	8c 93       	st	X, r24
     fd4:	a3 e5       	ldi	r26, 0x53	; 83
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e3 e5       	ldi	r30, 0x53	; 83
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 7b       	andi	r24, 0xBF	; 191
     fe0:	8c 93       	st	X, r24

/************Enable TIMER0 ctc INTERRUPT***************/

TIMER0_ENABLE_COMPARE_MODE_MATCH_INTERRUPT();
     fe2:	a9 e5       	ldi	r26, 0x59	; 89
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e9 e5       	ldi	r30, 0x59	; 89
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	82 60       	ori	r24, 0x02	; 2
     fee:	8c 93       	st	X, r24

OCR0=Compared_value;
     ff0:	ec e5       	ldi	r30, 0x5C	; 92
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	10 82       	st	Z, r1

#elif TIMER0_CLOCK_SOURCE_VALUE == TIMER0_PRESCALE_8_CLOCK_SOURCE
TIMER0_SELECT_CLOCK_SOURCE(TIMER0_PRESCALE_8_CLOCK_SOURCE);

#elif TIMER0_CLOCK_SOURCE_VALUE == TIMER0_PRESCALE_64_CLOCK_SOURCE
TIMER0_SELECT_CLOCK_SOURCE(TIMER0_PRESCALE_64_CLOCK_SOURCE);
     ff6:	a3 e5       	ldi	r26, 0x53	; 83
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e3 e5       	ldi	r30, 0x53	; 83
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 7f       	andi	r24, 0xF8	; 248
    1002:	83 60       	ori	r24, 0x03	; 3
    1004:	8c 93       	st	X, r24
#else
#error "INVALID CLOCK SETTINGS CHECK THE TIMER0_CNFG"
#endif
/*************select compare match putput mode**************/

Enable_Global_Interrupt();
    1006:	af e5       	ldi	r26, 0x5F	; 95
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ef e5       	ldi	r30, 0x5F	; 95
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 68       	ori	r24, 0x80	; 128
    1012:	8c 93       	st	X, r24

}
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <MTIMER0_VoidDisable>:


void MTIMER0_VoidDisable(void)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	/****************disable clock*************/
	TIMER0_SELECT_CLOCK_SOURCE(TIMER0_DISABLE_CLOCK_SOURCE);
    1022:	a3 e5       	ldi	r26, 0x53	; 83
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e3 e5       	ldi	r30, 0x53	; 83
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 7f       	andi	r24, 0xF8	; 248
    102e:	8c 93       	st	X, r24

}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <MTIMER0_VoidSetPreLoad>:
void MTIMER0_VoidSetPreLoad(u8 Preload)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	0f 92       	push	r0
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	89 83       	std	Y+1, r24	; 0x01
TCNT0=Preload;
    1042:	e2 e5       	ldi	r30, 0x52	; 82
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	80 83       	st	Z, r24
}
    104a:	0f 90       	pop	r0
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <TIMER_0_SET_DUTYCYCLE>:

void TIMER_0_SET_DUTYCYCLE(u8 Duty)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	0f 92       	push	r0
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	89 83       	std	Y+1, r24	; 0x01

 OCR0=Duty;
    105e:	ec e5       	ldi	r30, 0x5C	; 92
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	80 83       	st	Z, r24
}
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <TIMER0_SETCALLBACK>:


void TIMER0_SETCALLBACK(void(*ptr)(void))
{
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	00 d0       	rcall	.+0      	; 0x1074 <TIMER0_SETCALLBACK+0x6>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_CALLBACK=ptr;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	90 93 ae 00 	sts	0x00AE, r25
    1084:	80 93 ad 00 	sts	0x00AD, r24


}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <__vector_10>:
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CALLBACK();
    10bc:	e0 91 ad 00 	lds	r30, 0x00AD
    10c0:	f0 91 ae 00 	lds	r31, 0x00AE
    10c4:	09 95       	icall

}
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	ff 91       	pop	r31
    10cc:	ef 91       	pop	r30
    10ce:	bf 91       	pop	r27
    10d0:	af 91       	pop	r26
    10d2:	9f 91       	pop	r25
    10d4:	8f 91       	pop	r24
    10d6:	7f 91       	pop	r23
    10d8:	6f 91       	pop	r22
    10da:	5f 91       	pop	r21
    10dc:	4f 91       	pop	r20
    10de:	3f 91       	pop	r19
    10e0:	2f 91       	pop	r18
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <MSPI_Init>:
/***
 * @brief this function is used to initialize the spi for both master and slave
 * @param ptr is the call back function if interrupt is used if not just send (NULL)
 */
void MSPI_Init(void (*ptr)(void))
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <MSPI_Init+0x6>
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01
/**********SET PIN DIRECTION DEPEND ON CONFIGURATIONS IN CNFG.h*************/
SET_DIRECTIONS();
    10fa:	0e 94 17 09 	call	0x122e	; 0x122e <SET_DIRECTIONS>
#else
#error "WRONG CONFIGURATION FOR SPI CLOCK SPEED"
#endif
SPI_ENABLE_MASTER_MODE();
#elif SPI_MODE==SLAVE
SPI_ENABLE_SLAVE_MODE();
    10fe:	ad e2       	ldi	r26, 0x2D	; 45
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	ed e2       	ldi	r30, 0x2D	; 45
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7e       	andi	r24, 0xEF	; 239
    110a:	8c 93       	st	X, r24
#endif


/*********select LSB***********/
#if SPI_SEND_FORMAT==SPI_SEND_LSB_BIT_FIRST
SPI_SEND_LSB_FIRST();
    110c:	ad e2       	ldi	r26, 0x2D	; 45
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ed e2       	ldi	r30, 0x2D	; 45
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	80 62       	ori	r24, 0x20	; 32
    1118:	8c 93       	st	X, r24
#error "WRONG SPI DATA FORMAT"
#endif

/***********select clock polarity as leading edge raising*********/
#if SPI_CLOCK_POLARITY==SPI_ENABLE_IDLE_LOGIC_LOW
SPI_ENABLE_ILDE_LOW();
    111a:	ad e2       	ldi	r26, 0x2D	; 45
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ed e2       	ldi	r30, 0x2D	; 45
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	87 7f       	andi	r24, 0xF7	; 247
    1126:	8c 93       	st	X, r24
#endif
/***********select clock phase as leading Setup*********/
#if SPI_SAMPLE_CNFG==SPI_SAMPLE_AT_TRAILLING_EDGE
SPI_SAMPLE_AT_TRAILLING();
#elif SPI_SAMPLE_CNFG==SPI_SAMPLE_AT_LEADING_EDGE
SPI_SAMPLE_AT_LEADING();
    1128:	ad e2       	ldi	r26, 0x2D	; 45
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ed e2       	ldi	r30, 0x2D	; 45
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8b 7f       	andi	r24, 0xFB	; 251
    1134:	8c 93       	st	X, r24
#error "WRONG SPI CLOCK PHASE CNFG"
#endif
/**********************INTERRUPT CNFG***********************/
#if SPI_INTERRUPT==SPI_INTERRUPT_ENABLE
/**********set the SPI call back***********/
	if(NULL!=ptr)
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	31 f0       	breq	.+12     	; 0x114a <MSPI_Init+0x5e>
	{
	UART_SPI_CALLBACK=ptr;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	90 93 b0 00 	sts	0x00B0, r25
    1146:	80 93 af 00 	sts	0x00AF, r24
	}
	else{}
/**********enable the global interrupt************/
Enable_Global_Interrupt();
    114a:	af e5       	ldi	r26, 0x5F	; 95
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	ef e5       	ldi	r30, 0x5F	; 95
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	80 68       	ori	r24, 0x80	; 128
    1156:	8c 93       	st	X, r24
/*************enable SPI interrupt****************/
SPI_ENABLE_INTERRUPT();
    1158:	ad e2       	ldi	r26, 0x2D	; 45
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ed e2       	ldi	r30, 0x2D	; 45
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 68       	ori	r24, 0x80	; 128
    1164:	8c 93       	st	X, r24
#else
#error "WRONG SPI INTERRUPT CNFG"
#endif
//clearing the wcol
/*********Enable SPi***********/
SPI_ENABLE();
    1166:	ad e2       	ldi	r26, 0x2D	; 45
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	ed e2       	ldi	r30, 0x2D	; 45
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 64       	ori	r24, 0x40	; 64
    1172:	8c 93       	st	X, r24
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <MSPI_TRANSCIEVE_BLOCKING>:
 * brief this function is used to send and receive data neither you act as master or slave (blocking means with out interrupts)
 * @param Data is the data the device going to send
 * @return the value which is received
 */
u8 MSPI_TRANSCIEVE_BLOCKING(u8 Data)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	0f 92       	push	r0
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	89 83       	std	Y+1, r24	; 0x01
SPDR=Data;
    118a:	ef e2       	ldi	r30, 0x2F	; 47
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	80 83       	st	Z, r24
while(!(GET_BIT(SPSR,SPSR_SPIF)));
    1192:	ee e2       	ldi	r30, 0x2E	; 46
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	88 23       	and	r24, r24
    119a:	dc f7       	brge	.-10     	; 0x1192 <MSPI_TRANSCIEVE_BLOCKING+0x14>
return SPDR;
    119c:	ef e2       	ldi	r30, 0x2F	; 47
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
}
    11a2:	0f 90       	pop	r0
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <SPI_TRANSCIEVE>:
 * @brief this function is used to transcieve data using interrupt
 * @param Data is data going to send
 * @return return the received data
 */
u8 SPI_TRANSCIEVE(u8 Data)
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <SPI_TRANSCIEVE+0x6>
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	8a 83       	std	Y+2, r24	; 0x02
u8 L_READ=0;
    11b6:	19 82       	std	Y+1, r1	; 0x01
//interrupt happen when transmitting first time is already happen
L_READ=SPDR;
    11b8:	ef e2       	ldi	r30, 0x2F	; 47
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	89 83       	std	Y+1, r24	; 0x01
//after we read the received data we set the new data into the data line
SPDR=Data;
    11c0:	ef e2       	ldi	r30, 0x2F	; 47
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	80 83       	st	Z, r24
return L_READ;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <SPI_MASTER_INIT>:
void SPI_MASTER_INIT(void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62

	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<5)|(1<<7);
    11dc:	e7 e3       	ldi	r30, 0x37	; 55
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 ea       	ldi	r24, 0xA0	; 160
    11e2:	80 83       	st	Z, r24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPCR_SPE)|(1<<SPCR_MSTR)|(1<<SPCR_SPR0);
    11e4:	ed e2       	ldi	r30, 0x2D	; 45
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	81 e5       	ldi	r24, 0x51	; 81
    11ea:	80 83       	st	Z, r24
}
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <SPI_SLAVE_INIT>:
void SPI_SLAVE_INIT(void)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62

	/* Set MOSI and SCK output, all others input */
	/* Set MISO output, all others input */
	DDRB = (1<<6);
    11fa:	e7 e3       	ldi	r30, 0x37	; 55
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 e4       	ldi	r24, 0x40	; 64
    1200:	80 83       	st	Z, r24
	/* Enable SPI */
	SPCR = (1<<SPCR_SPE);
    1202:	ed e2       	ldi	r30, 0x2D	; 45
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 e4       	ldi	r24, 0x40	; 64
    1208:	80 83       	st	Z, r24
}
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <SPI_SLAVE_RECE>:
u8 SPI_SLAVE_RECE(void)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62

	/* Wait for reception complete */
	while(!(SPSR & (1<<SPSR_SPIF)))
    1218:	ee e2       	ldi	r30, 0x2E	; 46
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	88 23       	and	r24, r24
    1220:	dc f7       	brge	.-10     	; 0x1218 <SPI_SLAVE_RECE+0x8>
	;
	/* Return data register */
	return SPDR;
    1222:	ef e2       	ldi	r30, 0x2F	; 47
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
}
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <SET_DIRECTIONS>:

/***
 * @brief this function is used to initiallize the direction of pins master or slave
 */
static inline void SET_DIRECTIONS(void)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
				//set the MISO as INPUT
				DIO_PIN_DIRECTION_INIT_M(PORTB_,pin6,DIRECTION_INPUT);
				break;
	case SLAVE  :
				//set the SCK as OUTPUT
				DIO_PIN_DIRECTION_INIT_M(PORTB_,pin7,DIRECTION_INPUT);
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	67 e0       	ldi	r22, 0x07	; 7
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	0e 94 5f 0a 	call	0x14be	; 0x14be <DIO_PIN_DIRECTION_INIT_M>
				//set the MOSI as OUTPUT
				DIO_PIN_DIRECTION_INIT_M(PORTB_,pin5,DIRECTION_INPUT);
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	65 e0       	ldi	r22, 0x05	; 5
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	0e 94 5f 0a 	call	0x14be	; 0x14be <DIO_PIN_DIRECTION_INIT_M>
				//set the SS as output
				DIO_PIN_DIRECTION_INIT_M(PORTB_,pin4,DIRECTION_INPUT);
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	64 e0       	ldi	r22, 0x04	; 4
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	0e 94 5f 0a 	call	0x14be	; 0x14be <DIO_PIN_DIRECTION_INIT_M>
				//set the MISO as INPUT
				DIO_PIN_DIRECTION_INIT_M(PORTB_,pin6,DIRECTION_OUTPUT);
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	66 e0       	ldi	r22, 0x06	; 6
    1258:	41 e0       	ldi	r20, 0x01	; 1
    125a:	0e 94 5f 0a 	call	0x14be	; 0x14be <DIO_PIN_DIRECTION_INIT_M>
				break;
	default :break;
	}
}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <__vector_12>:
 */


void __vector_12(void)  __attribute__((signal));
void __vector_12(void)
{
    1264:	1f 92       	push	r1
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	2f 93       	push	r18
    1270:	3f 93       	push	r19
    1272:	4f 93       	push	r20
    1274:	5f 93       	push	r21
    1276:	6f 93       	push	r22
    1278:	7f 93       	push	r23
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	af 93       	push	r26
    1280:	bf 93       	push	r27
    1282:	ef 93       	push	r30
    1284:	ff 93       	push	r31
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62

	UART_SPI_CALLBACK();
    128e:	e0 91 af 00 	lds	r30, 0x00AF
    1292:	f0 91 b0 00 	lds	r31, 0x00B0
    1296:	09 95       	icall
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	ff 91       	pop	r31
    129e:	ef 91       	pop	r30
    12a0:	bf 91       	pop	r27
    12a2:	af 91       	pop	r26
    12a4:	9f 91       	pop	r25
    12a6:	8f 91       	pop	r24
    12a8:	7f 91       	pop	r23
    12aa:	6f 91       	pop	r22
    12ac:	5f 91       	pop	r21
    12ae:	4f 91       	pop	r20
    12b0:	3f 91       	pop	r19
    12b2:	2f 91       	pop	r18
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	0f 90       	pop	r0
    12ba:	1f 90       	pop	r1
    12bc:	18 95       	reti

000012be <DIO_PIN_WRITE_LOGIC_M>:

/**********using macros ***********/


void DIO_PIN_WRITE_LOGIC_M(u8 port ,u8 pin,u8 Pin_Logic)
{
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	27 97       	sbiw	r28, 0x07	; 7
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	6a 83       	std	Y+2, r22	; 0x02
    12d6:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN_HIGH==Pin_Logic)
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <DIO_PIN_WRITE_LOGIC_M+0x22>
    12de:	6f c0       	rjmp	.+222    	; 0x13be <DIO_PIN_WRITE_LOGIC_M+0x100>
	{
		switch(port)
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	3f 83       	std	Y+7, r19	; 0x07
    12e8:	2e 83       	std	Y+6, r18	; 0x06
    12ea:	8e 81       	ldd	r24, Y+6	; 0x06
    12ec:	9f 81       	ldd	r25, Y+7	; 0x07
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	91 05       	cpc	r25, r1
    12f2:	49 f1       	breq	.+82     	; 0x1346 <DIO_PIN_WRITE_LOGIC_M+0x88>
    12f4:	2e 81       	ldd	r18, Y+6	; 0x06
    12f6:	3f 81       	ldd	r19, Y+7	; 0x07
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	2c f4       	brge	.+10     	; 0x1308 <DIO_PIN_WRITE_LOGIC_M+0x4a>
    12fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1300:	9f 81       	ldd	r25, Y+7	; 0x07
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	61 f0       	breq	.+24     	; 0x131e <DIO_PIN_WRITE_LOGIC_M+0x60>
    1306:	d2 c0       	rjmp	.+420    	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
    1308:	2e 81       	ldd	r18, Y+6	; 0x06
    130a:	3f 81       	ldd	r19, Y+7	; 0x07
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	71 f1       	breq	.+92     	; 0x136e <DIO_PIN_WRITE_LOGIC_M+0xb0>
    1312:	8e 81       	ldd	r24, Y+6	; 0x06
    1314:	9f 81       	ldd	r25, Y+7	; 0x07
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	91 05       	cpc	r25, r1
    131a:	e9 f1       	breq	.+122    	; 0x1396 <DIO_PIN_WRITE_LOGIC_M+0xd8>
    131c:	c7 c0       	rjmp	.+398    	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		{

		case PORTA_:  SET_BIT(PORTA,pin); break;
    131e:	ab e3       	ldi	r26, 0x3B	; 59
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	eb e3       	ldi	r30, 0x3B	; 59
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_PIN_WRITE_LOGIC_M+0x7e>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_PIN_WRITE_LOGIC_M+0x7a>
    1340:	84 2b       	or	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	b3 c0       	rjmp	.+358    	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		case PORTB_ : SET_BIT(PORTB,pin); break;
    1346:	a8 e3       	ldi	r26, 0x38	; 56
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e8 e3       	ldi	r30, 0x38	; 56
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_PIN_WRITE_LOGIC_M+0xa6>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_PIN_WRITE_LOGIC_M+0xa2>
    1368:	84 2b       	or	r24, r20
    136a:	8c 93       	st	X, r24
    136c:	9f c0       	rjmp	.+318    	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		case PORTC_ : SET_BIT(PORTC,pin); break;
    136e:	a5 e3       	ldi	r26, 0x35	; 53
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e3       	ldi	r30, 0x35	; 53
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <DIO_PIN_WRITE_LOGIC_M+0xce>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <DIO_PIN_WRITE_LOGIC_M+0xca>
    1390:	84 2b       	or	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	8b c0       	rjmp	.+278    	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		case PORTD_ : SET_BIT(PORTD,pin); break;
    1396:	a2 e3       	ldi	r26, 0x32	; 50
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e2 e3       	ldi	r30, 0x32	; 50
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_PIN_WRITE_LOGIC_M+0xf6>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_PIN_WRITE_LOGIC_M+0xf2>
    13b8:	84 2b       	or	r24, r20
    13ba:	8c 93       	st	X, r24
    13bc:	77 c0       	rjmp	.+238    	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		default  	: break;
		}
	}
	else if(PIN_LOW==Pin_Logic)
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	88 23       	and	r24, r24
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <DIO_PIN_WRITE_LOGIC_M+0x108>
    13c4:	73 c0       	rjmp	.+230    	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
	{
		switch(port)
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3d 83       	std	Y+5, r19	; 0x05
    13ce:	2c 83       	std	Y+4, r18	; 0x04
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	91 05       	cpc	r25, r1
    13d8:	59 f1       	breq	.+86     	; 0x1430 <DIO_PIN_WRITE_LOGIC_M+0x172>
    13da:	2c 81       	ldd	r18, Y+4	; 0x04
    13dc:	3d 81       	ldd	r19, Y+5	; 0x05
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	2c f4       	brge	.+10     	; 0x13ee <DIO_PIN_WRITE_LOGIC_M+0x130>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	69 f0       	breq	.+26     	; 0x1406 <DIO_PIN_WRITE_LOGIC_M+0x148>
    13ec:	5f c0       	rjmp	.+190    	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 05       	cpc	r19, r1
    13f6:	89 f1       	breq	.+98     	; 0x145a <DIO_PIN_WRITE_LOGIC_M+0x19c>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	91 05       	cpc	r25, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <DIO_PIN_WRITE_LOGIC_M+0x146>
    1402:	40 c0       	rjmp	.+128    	; 0x1484 <DIO_PIN_WRITE_LOGIC_M+0x1c6>
    1404:	53 c0       	rjmp	.+166    	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				{

				case PORTA_:  CLEAR_BIT(PORTA,pin); break;
    1406:	ab e3       	ldi	r26, 0x3B	; 59
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	eb e3       	ldi	r30, 0x3B	; 59
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_PIN_WRITE_LOGIC_M+0x166>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_PIN_WRITE_LOGIC_M+0x162>
    1428:	80 95       	com	r24
    142a:	84 23       	and	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	3e c0       	rjmp	.+124    	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				case PORTB_ : CLEAR_BIT(PORTB,pin); break;
    1430:	a8 e3       	ldi	r26, 0x38	; 56
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e8 e3       	ldi	r30, 0x38	; 56
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_PIN_WRITE_LOGIC_M+0x190>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_PIN_WRITE_LOGIC_M+0x18c>
    1452:	80 95       	com	r24
    1454:	84 23       	and	r24, r20
    1456:	8c 93       	st	X, r24
    1458:	29 c0       	rjmp	.+82     	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				case PORTC_ : CLEAR_BIT(PORTC,pin); break;
    145a:	a5 e3       	ldi	r26, 0x35	; 53
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e5 e3       	ldi	r30, 0x35	; 53
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_PIN_WRITE_LOGIC_M+0x1ba>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_PIN_WRITE_LOGIC_M+0x1b6>
    147c:	80 95       	com	r24
    147e:	84 23       	and	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				case PORTD_ : CLEAR_BIT(PORTD,pin); break;
    1484:	a2 e3       	ldi	r26, 0x32	; 50
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e2 e3       	ldi	r30, 0x32	; 50
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_PIN_WRITE_LOGIC_M+0x1e4>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_PIN_WRITE_LOGIC_M+0x1e0>
    14a6:	80 95       	com	r24
    14a8:	84 23       	and	r24, r20
    14aa:	8c 93       	st	X, r24
				default  	: break;
				}
	}
	else{}

}
    14ac:	27 96       	adiw	r28, 0x07	; 7
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <DIO_PIN_DIRECTION_INIT_M>:

/***********************/

void DIO_PIN_DIRECTION_INIT_M(u8 port ,u8 pin,u8 Direction)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	27 97       	sbiw	r28, 0x07	; 7
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	6a 83       	std	Y+2, r22	; 0x02
    14d6:	4b 83       	std	Y+3, r20	; 0x03
	if(DIRECTION_OUTPUT==Direction)
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <DIO_PIN_DIRECTION_INIT_M+0x22>
    14de:	6f c0       	rjmp	.+222    	; 0x15be <DIO_PIN_DIRECTION_INIT_M+0x100>
	{
		switch(port)
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	3f 83       	std	Y+7, r19	; 0x07
    14e8:	2e 83       	std	Y+6, r18	; 0x06
    14ea:	8e 81       	ldd	r24, Y+6	; 0x06
    14ec:	9f 81       	ldd	r25, Y+7	; 0x07
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	91 05       	cpc	r25, r1
    14f2:	49 f1       	breq	.+82     	; 0x1546 <DIO_PIN_DIRECTION_INIT_M+0x88>
    14f4:	2e 81       	ldd	r18, Y+6	; 0x06
    14f6:	3f 81       	ldd	r19, Y+7	; 0x07
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	2c f4       	brge	.+10     	; 0x1508 <DIO_PIN_DIRECTION_INIT_M+0x4a>
    14fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1500:	9f 81       	ldd	r25, Y+7	; 0x07
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	61 f0       	breq	.+24     	; 0x151e <DIO_PIN_DIRECTION_INIT_M+0x60>
    1506:	ce c0       	rjmp	.+412    	; 0x16a4 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
    1508:	2e 81       	ldd	r18, Y+6	; 0x06
    150a:	3f 81       	ldd	r19, Y+7	; 0x07
    150c:	22 30       	cpi	r18, 0x02	; 2
    150e:	31 05       	cpc	r19, r1
    1510:	71 f1       	breq	.+92     	; 0x156e <DIO_PIN_DIRECTION_INIT_M+0xb0>
    1512:	8e 81       	ldd	r24, Y+6	; 0x06
    1514:	9f 81       	ldd	r25, Y+7	; 0x07
    1516:	83 30       	cpi	r24, 0x03	; 3
    1518:	91 05       	cpc	r25, r1
    151a:	e9 f1       	breq	.+122    	; 0x1596 <DIO_PIN_DIRECTION_INIT_M+0xd8>
    151c:	c3 c0       	rjmp	.+390    	; 0x16a4 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		{

		case PORTA_:  SET_BIT(DDRA,pin); break;
    151e:	aa e3       	ldi	r26, 0x3A	; 58
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	ea e3       	ldi	r30, 0x3A	; 58
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_PIN_DIRECTION_INIT_M+0x7e>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_PIN_DIRECTION_INIT_M+0x7a>
    1540:	84 2b       	or	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	af c0       	rjmp	.+350    	; 0x16a4 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		case PORTB_ : SET_BIT(DDRB,pin); break;
    1546:	a7 e3       	ldi	r26, 0x37	; 55
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e7 e3       	ldi	r30, 0x37	; 55
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_PIN_DIRECTION_INIT_M+0xa6>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_PIN_DIRECTION_INIT_M+0xa2>
    1568:	84 2b       	or	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	9b c0       	rjmp	.+310    	; 0x16a4 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		case PORTC_ : SET_BIT(DDRC,pin); break;
    156e:	a4 e3       	ldi	r26, 0x34	; 52
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e4 e3       	ldi	r30, 0x34	; 52
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_PIN_DIRECTION_INIT_M+0xce>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <DIO_PIN_DIRECTION_INIT_M+0xca>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	87 c0       	rjmp	.+270    	; 0x16a4 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		case PORTD_ : SET_BIT(DDRD,pin); break;
    1596:	a1 e3       	ldi	r26, 0x31	; 49
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e1 e3       	ldi	r30, 0x31	; 49
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_PIN_DIRECTION_INIT_M+0xf6>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_PIN_DIRECTION_INIT_M+0xf2>
    15b8:	84 2b       	or	r24, r20
    15ba:	8c 93       	st	X, r24
    15bc:	73 c0       	rjmp	.+230    	; 0x16a4 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		default  	: break;
		}
	}
	else if(PIN_LOW==DIRECTION_INPUT)
	{
		switch(port)
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	3d 83       	std	Y+5, r19	; 0x05
    15c6:	2c 83       	std	Y+4, r18	; 0x04
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	91 05       	cpc	r25, r1
    15d0:	59 f1       	breq	.+86     	; 0x1628 <DIO_PIN_DIRECTION_INIT_M+0x16a>
    15d2:	2c 81       	ldd	r18, Y+4	; 0x04
    15d4:	3d 81       	ldd	r19, Y+5	; 0x05
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	2c f4       	brge	.+10     	; 0x15e6 <DIO_PIN_DIRECTION_INIT_M+0x128>
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	69 f0       	breq	.+26     	; 0x15fe <DIO_PIN_DIRECTION_INIT_M+0x140>
    15e4:	5f c0       	rjmp	.+190    	; 0x16a4 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
    15e6:	2c 81       	ldd	r18, Y+4	; 0x04
    15e8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	89 f1       	breq	.+98     	; 0x1652 <DIO_PIN_DIRECTION_INIT_M+0x194>
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	09 f4       	brne	.+2      	; 0x15fc <DIO_PIN_DIRECTION_INIT_M+0x13e>
    15fa:	40 c0       	rjmp	.+128    	; 0x167c <DIO_PIN_DIRECTION_INIT_M+0x1be>
    15fc:	53 c0       	rjmp	.+166    	; 0x16a4 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				{

				case PORTA_:  CLEAR_BIT(DDRA,pin); break;
    15fe:	aa e3       	ldi	r26, 0x3A	; 58
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	ea e3       	ldi	r30, 0x3A	; 58
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_PIN_DIRECTION_INIT_M+0x15e>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_PIN_DIRECTION_INIT_M+0x15a>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	3e c0       	rjmp	.+124    	; 0x16a4 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				case PORTB_ : CLEAR_BIT(DDRB,pin); break;
    1628:	a7 e3       	ldi	r26, 0x37	; 55
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e7 e3       	ldi	r30, 0x37	; 55
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_PIN_DIRECTION_INIT_M+0x188>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_PIN_DIRECTION_INIT_M+0x184>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	29 c0       	rjmp	.+82     	; 0x16a4 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				case PORTC_ : CLEAR_BIT(DDRC,pin); break;
    1652:	a4 e3       	ldi	r26, 0x34	; 52
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e4 e3       	ldi	r30, 0x34	; 52
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_PIN_DIRECTION_INIT_M+0x1b2>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_PIN_DIRECTION_INIT_M+0x1ae>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				case PORTD_ : CLEAR_BIT(DDRD,pin); break;
    167c:	a1 e3       	ldi	r26, 0x31	; 49
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e1 e3       	ldi	r30, 0x31	; 49
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_PIN_DIRECTION_INIT_M+0x1dc>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_PIN_DIRECTION_INIT_M+0x1d8>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
				default  	: break;
				}
	}
	else{}

}
    16a4:	27 96       	adiw	r28, 0x07	; 7
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <DIO_PIN_TOGGLE_LOGIC_M>:

/***********************/

void DIO_PIN_TOGGLE_LOGIC_M(u8 port ,u8 pin)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <DIO_PIN_TOGGLE_LOGIC_M+0x6>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <DIO_PIN_TOGGLE_LOGIC_M+0x8>
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	3c 83       	std	Y+4, r19	; 0x04
    16ce:	2b 83       	std	Y+3, r18	; 0x03
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	91 05       	cpc	r25, r1
    16d8:	49 f1       	breq	.+82     	; 0x172c <DIO_PIN_TOGGLE_LOGIC_M+0x76>
    16da:	2b 81       	ldd	r18, Y+3	; 0x03
    16dc:	3c 81       	ldd	r19, Y+4	; 0x04
    16de:	22 30       	cpi	r18, 0x02	; 2
    16e0:	31 05       	cpc	r19, r1
    16e2:	2c f4       	brge	.+10     	; 0x16ee <DIO_PIN_TOGGLE_LOGIC_M+0x38>
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	61 f0       	breq	.+24     	; 0x1704 <DIO_PIN_TOGGLE_LOGIC_M+0x4e>
    16ec:	5a c0       	rjmp	.+180    	; 0x17a2 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
    16ee:	2b 81       	ldd	r18, Y+3	; 0x03
    16f0:	3c 81       	ldd	r19, Y+4	; 0x04
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	31 05       	cpc	r19, r1
    16f6:	71 f1       	breq	.+92     	; 0x1754 <DIO_PIN_TOGGLE_LOGIC_M+0x9e>
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	83 30       	cpi	r24, 0x03	; 3
    16fe:	91 05       	cpc	r25, r1
    1700:	e9 f1       	breq	.+122    	; 0x177c <DIO_PIN_TOGGLE_LOGIC_M+0xc6>
    1702:	4f c0       	rjmp	.+158    	; 0x17a2 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	{
	case PORTA_:  TOGGLE_BIT(PORTA,pin); break;
    1704:	ab e3       	ldi	r26, 0x3B	; 59
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	eb e3       	ldi	r30, 0x3B	; 59
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_PIN_TOGGLE_LOGIC_M+0x6c>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_PIN_TOGGLE_LOGIC_M+0x68>
    1726:	84 27       	eor	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	3b c0       	rjmp	.+118    	; 0x17a2 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	case PORTB_ : TOGGLE_BIT(PORTB,pin); break;
    172c:	a8 e3       	ldi	r26, 0x38	; 56
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e8 e3       	ldi	r30, 0x38	; 56
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_PIN_TOGGLE_LOGIC_M+0x94>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_PIN_TOGGLE_LOGIC_M+0x90>
    174e:	84 27       	eor	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	27 c0       	rjmp	.+78     	; 0x17a2 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	case PORTC_ : TOGGLE_BIT(PORTC,pin); break;
    1754:	a5 e3       	ldi	r26, 0x35	; 53
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e5 e3       	ldi	r30, 0x35	; 53
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_PIN_TOGGLE_LOGIC_M+0xbc>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_PIN_TOGGLE_LOGIC_M+0xb8>
    1776:	84 27       	eor	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	13 c0       	rjmp	.+38     	; 0x17a2 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	case PORTD_ : TOGGLE_BIT(PORTD,pin); break;
    177c:	a2 e3       	ldi	r26, 0x32	; 50
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e2 e3       	ldi	r30, 0x32	; 50
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <DIO_PIN_TOGGLE_LOGIC_M+0xe4>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <DIO_PIN_TOGGLE_LOGIC_M+0xe0>
    179e:	84 27       	eor	r24, r20
    17a0:	8c 93       	st	X, r24
	default : break;
	}
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <DIO_PIN_READ_LOGIC_LEVEL_M>:

/***********************************/
u8 DIO_PIN_READ_LOGIC_LEVEL_M(u8 port ,u8 pin)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <DIO_PIN_READ_LOGIC_LEVEL_M+0x6>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <DIO_PIN_READ_LOGIC_LEVEL_M+0x8>
    17b8:	0f 92       	push	r0
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	8a 83       	std	Y+2, r24	; 0x02
    17c0:	6b 83       	std	Y+3, r22	; 0x03
u8 x;
	switch(port)
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3d 83       	std	Y+5, r19	; 0x05
    17ca:	2c 83       	std	Y+4, r18	; 0x04
    17cc:	4c 81       	ldd	r20, Y+4	; 0x04
    17ce:	5d 81       	ldd	r21, Y+5	; 0x05
    17d0:	41 30       	cpi	r20, 0x01	; 1
    17d2:	51 05       	cpc	r21, r1
    17d4:	41 f1       	breq	.+80     	; 0x1826 <DIO_PIN_READ_LOGIC_LEVEL_M+0x76>
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	9d 81       	ldd	r25, Y+5	; 0x05
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	91 05       	cpc	r25, r1
    17de:	34 f4       	brge	.+12     	; 0x17ec <DIO_PIN_READ_LOGIC_LEVEL_M+0x3c>
    17e0:	2c 81       	ldd	r18, Y+4	; 0x04
    17e2:	3d 81       	ldd	r19, Y+5	; 0x05
    17e4:	21 15       	cp	r18, r1
    17e6:	31 05       	cpc	r19, r1
    17e8:	61 f0       	breq	.+24     	; 0x1802 <DIO_PIN_READ_LOGIC_LEVEL_M+0x52>
    17ea:	52 c0       	rjmp	.+164    	; 0x1890 <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
    17ec:	4c 81       	ldd	r20, Y+4	; 0x04
    17ee:	5d 81       	ldd	r21, Y+5	; 0x05
    17f0:	42 30       	cpi	r20, 0x02	; 2
    17f2:	51 05       	cpc	r21, r1
    17f4:	51 f1       	breq	.+84     	; 0x184a <DIO_PIN_READ_LOGIC_LEVEL_M+0x9a>
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
    17f8:	9d 81       	ldd	r25, Y+5	; 0x05
    17fa:	83 30       	cpi	r24, 0x03	; 3
    17fc:	91 05       	cpc	r25, r1
    17fe:	b9 f1       	breq	.+110    	; 0x186e <DIO_PIN_READ_LOGIC_LEVEL_M+0xbe>
    1800:	47 c0       	rjmp	.+142    	; 0x1890 <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	{
	case PORTA_ : x= (GET_BIT(PINA,pin)); break;
    1802:	e9 e3       	ldi	r30, 0x39	; 57
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a9 01       	movw	r20, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_PIN_READ_LOGIC_LEVEL_M+0x6a>
    1816:	55 95       	asr	r21
    1818:	47 95       	ror	r20
    181a:	8a 95       	dec	r24
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <DIO_PIN_READ_LOGIC_LEVEL_M+0x66>
    181e:	ca 01       	movw	r24, r20
    1820:	81 70       	andi	r24, 0x01	; 1
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	35 c0       	rjmp	.+106    	; 0x1890 <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	case PORTB_ : x= (GET_BIT(PINB,pin));break;
    1826:	e6 e3       	ldi	r30, 0x36	; 54
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	a9 01       	movw	r20, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <DIO_PIN_READ_LOGIC_LEVEL_M+0x8e>
    183a:	55 95       	asr	r21
    183c:	47 95       	ror	r20
    183e:	8a 95       	dec	r24
    1840:	e2 f7       	brpl	.-8      	; 0x183a <DIO_PIN_READ_LOGIC_LEVEL_M+0x8a>
    1842:	ca 01       	movw	r24, r20
    1844:	81 70       	andi	r24, 0x01	; 1
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	23 c0       	rjmp	.+70     	; 0x1890 <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	case PORTC_ : x= (GET_BIT(PINC,pin));break;
    184a:	e3 e3       	ldi	r30, 0x33	; 51
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	88 2f       	mov	r24, r24
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a9 01       	movw	r20, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <DIO_PIN_READ_LOGIC_LEVEL_M+0xb2>
    185e:	55 95       	asr	r21
    1860:	47 95       	ror	r20
    1862:	8a 95       	dec	r24
    1864:	e2 f7       	brpl	.-8      	; 0x185e <DIO_PIN_READ_LOGIC_LEVEL_M+0xae>
    1866:	ca 01       	movw	r24, r20
    1868:	81 70       	andi	r24, 0x01	; 1
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	11 c0       	rjmp	.+34     	; 0x1890 <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	case PORTD_ :x= (GET_BIT(PIND,pin));	break;
    186e:	e0 e3       	ldi	r30, 0x30	; 48
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a9 01       	movw	r20, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_PIN_READ_LOGIC_LEVEL_M+0xd6>
    1882:	55 95       	asr	r21
    1884:	47 95       	ror	r20
    1886:	8a 95       	dec	r24
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_PIN_READ_LOGIC_LEVEL_M+0xd2>
    188a:	ca 01       	movw	r24, r20
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01
	default : break;
	}
return x;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	08 95       	ret

000018a2 <DIO_PORT_WRITE_LOGIC_M>:
/***********************************/

/******************************/
void DIO_PORT_WRITE_LOGIC_M(u8 port ,u8 Port_val)
{
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <DIO_PORT_WRITE_LOGIC_M+0x6>
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <DIO_PORT_WRITE_LOGIC_M+0x8>
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	6a 83       	std	Y+2, r22	; 0x02
	  switch(port)
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	3c 83       	std	Y+4, r19	; 0x04
    18ba:	2b 83       	std	Y+3, r18	; 0x03
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	91 05       	cpc	r25, r1
    18c4:	d1 f0       	breq	.+52     	; 0x18fa <DIO_PORT_WRITE_LOGIC_M+0x58>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	2c f4       	brge	.+10     	; 0x18da <DIO_PORT_WRITE_LOGIC_M+0x38>
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	61 f0       	breq	.+24     	; 0x18f0 <DIO_PORT_WRITE_LOGIC_M+0x4e>
    18d8:	1e c0       	rjmp	.+60     	; 0x1916 <DIO_PORT_WRITE_LOGIC_M+0x74>
    18da:	2b 81       	ldd	r18, Y+3	; 0x03
    18dc:	3c 81       	ldd	r19, Y+4	; 0x04
    18de:	22 30       	cpi	r18, 0x02	; 2
    18e0:	31 05       	cpc	r19, r1
    18e2:	81 f0       	breq	.+32     	; 0x1904 <DIO_PORT_WRITE_LOGIC_M+0x62>
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	83 30       	cpi	r24, 0x03	; 3
    18ea:	91 05       	cpc	r25, r1
    18ec:	81 f0       	breq	.+32     	; 0x190e <DIO_PORT_WRITE_LOGIC_M+0x6c>
    18ee:	13 c0       	rjmp	.+38     	; 0x1916 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  {
	  case PORTA_: PORTA = Port_val;break;
    18f0:	eb e3       	ldi	r30, 0x3B	; 59
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	80 83       	st	Z, r24
    18f8:	0e c0       	rjmp	.+28     	; 0x1916 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  case PORTB_: PORTB = Port_val;break;
    18fa:	e8 e3       	ldi	r30, 0x38	; 56
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	80 83       	st	Z, r24
    1902:	09 c0       	rjmp	.+18     	; 0x1916 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  case PORTC_: PORTC = Port_val;break;
    1904:	e5 e3       	ldi	r30, 0x35	; 53
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	80 83       	st	Z, r24
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  case PORTD_: PORTD = Port_val;break;
    190e:	e2 e3       	ldi	r30, 0x32	; 50
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	80 83       	st	Z, r24
	  default : break;
	  }
}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <DIO_PORT_SET_DIRECTION_M>:
void DIO_PORT_SET_DIRECTION_M(u8 port ,u8 DIRECTION_VALUE)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <DIO_PORT_SET_DIRECTION_M+0x6>
    192a:	00 d0       	rcall	.+0      	; 0x192c <DIO_PORT_SET_DIRECTION_M+0x8>
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	6a 83       	std	Y+2, r22	; 0x02
	  switch(port)
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	3c 83       	std	Y+4, r19	; 0x04
    193c:	2b 83       	std	Y+3, r18	; 0x03
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	91 05       	cpc	r25, r1
    1946:	d1 f0       	breq	.+52     	; 0x197c <DIO_PORT_SET_DIRECTION_M+0x58>
    1948:	2b 81       	ldd	r18, Y+3	; 0x03
    194a:	3c 81       	ldd	r19, Y+4	; 0x04
    194c:	22 30       	cpi	r18, 0x02	; 2
    194e:	31 05       	cpc	r19, r1
    1950:	2c f4       	brge	.+10     	; 0x195c <DIO_PORT_SET_DIRECTION_M+0x38>
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	61 f0       	breq	.+24     	; 0x1972 <DIO_PORT_SET_DIRECTION_M+0x4e>
    195a:	1e c0       	rjmp	.+60     	; 0x1998 <DIO_PORT_SET_DIRECTION_M+0x74>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	81 f0       	breq	.+32     	; 0x1986 <DIO_PORT_SET_DIRECTION_M+0x62>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	91 05       	cpc	r25, r1
    196e:	81 f0       	breq	.+32     	; 0x1990 <DIO_PORT_SET_DIRECTION_M+0x6c>
    1970:	13 c0       	rjmp	.+38     	; 0x1998 <DIO_PORT_SET_DIRECTION_M+0x74>
	  {
		  case PORTA_: DDRA = DIRECTION_VALUE;break;
    1972:	ea e3       	ldi	r30, 0x3A	; 58
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	80 83       	st	Z, r24
    197a:	0e c0       	rjmp	.+28     	; 0x1998 <DIO_PORT_SET_DIRECTION_M+0x74>
		  case PORTB_: DDRB = DIRECTION_VALUE;break;
    197c:	e7 e3       	ldi	r30, 0x37	; 55
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	80 83       	st	Z, r24
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <DIO_PORT_SET_DIRECTION_M+0x74>
		  case PORTC_: DDRC = DIRECTION_VALUE;break;
    1986:	e4 e3       	ldi	r30, 0x34	; 52
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	80 83       	st	Z, r24
    198e:	04 c0       	rjmp	.+8      	; 0x1998 <DIO_PORT_SET_DIRECTION_M+0x74>
		  case PORTD_: DDRD = DIRECTION_VALUE;break;
    1990:	e1 e3       	ldi	r30, 0x31	; 49
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	80 83       	st	Z, r24
		  default : break;
	  }
}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <PORT_DIRECTION_INIT>:


/***********************/

void PORT_DIRECTION_INIT(void)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    19ae:	ea e3       	ldi	r30, 0x3A	; 58
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    19b6:	e7 e3       	ldi	r30, 0x37	; 55
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8f e4       	ldi	r24, 0x4F	; 79
    19bc:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    19be:	e4 e3       	ldi	r30, 0x34	; 52
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    19c6:	e1 e3       	ldi	r30, 0x31	; 49
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    19cc:	80 83       	st	Z, r24
}
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <PORT_LOGICLEVEL_INIT>:
void PORT_LOGICLEVEL_INIT(void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	PORTA=PORTA_LOGIC;
    19dc:	eb e3       	ldi	r30, 0x3B	; 59
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	10 82       	st	Z, r1
	PORTB=PORTB_LOGIC;
    19e2:	e8 e3       	ldi	r30, 0x38	; 56
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	10 82       	st	Z, r1
	PORTC=PORTC_LOGIC;
    19e8:	e5 e3       	ldi	r30, 0x35	; 53
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	10 82       	st	Z, r1
	PORTD=PORTD_LOGIC;
    19ee:	e2 e3       	ldi	r30, 0x32	; 50
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	10 82       	st	Z, r1
}
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <HAL_LED_ON>:

/**
 * @describe -> this function is used to set led high
 */
void HAL_LED_ON(u8 port_ , u8 pin)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <HAL_LED_ON+0x6>
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	6a 83       	std	Y+2, r22	; 0x02
	DIO_PIN_WRITE_LOGIC_M(port_,pin,PIN_HIGH);
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	6a 81       	ldd	r22, Y+2	; 0x02
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
}
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <HAL_LED_OFF>:
/**************************************************/
/**
 * @describe -> this function is used to set led low
 */
void HAL_LED_OFF(u8 port_ , u8 pin)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <HAL_LED_OFF+0x6>
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	6a 83       	std	Y+2, r22	; 0x02
	DIO_PIN_WRITE_LOGIC_M(port_,pin,PIN_LOW);
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	6a 81       	ldd	r22, Y+2	; 0x02
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
}
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <HAL_LED_TOGGLE>:
/**************************************************/
/**
 * @describe -> this function is used to set led low
 */
void HAL_LED_TOGGLE(u8 port_ , u8 pin)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <HAL_LED_TOGGLE+0x6>
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_PIN_TOGGLE_LOGIC_M(port_,pin);
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1a50:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_PIN_TOGGLE_LOGIC_M>
}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <keypad_read>:
//        {'#', '0', '=', '+'}   \
//    }

/*this function is used to scan and read the pressed buttons of keypad*/
void keypad_read(char *button_pos_ )
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	ac 97       	sbiw	r28, 0x2c	; 44
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	9c a7       	std	Y+44, r25	; 0x2c
    1a74:	8b a7       	std	Y+43, r24	; 0x2b
	u8 l_row_counter=0;
    1a76:	1a a6       	std	Y+42, r1	; 0x2a
	u8 l_column_counter=0;
    1a78:	19 a6       	std	Y+41, r1	; 0x29
	u8 counter=0;
    1a7a:	18 a6       	std	Y+40, r1	; 0x28
	u8 buttonn =0;
    1a7c:	1f a2       	std	Y+39, r1	; 0x27

	*button_pos_=0;
    1a7e:	eb a5       	ldd	r30, Y+43	; 0x2b
    1a80:	fc a5       	ldd	r31, Y+44	; 0x2c
    1a82:	10 82       	st	Z, r1

	for(l_row_counter=0 ;l_row_counter<keypad_columns;l_row_counter++)
    1a84:	1a a6       	std	Y+42, r1	; 0x2a
    1a86:	79 c1       	rjmp	.+754    	; 0x1d7a <keypad_read+0x31c>
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_rows_PORT,row_port_pins[l_row_counter],PIN_HIGH);
    1a88:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a8a:	88 2f       	mov	r24, r24
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	fc 01       	movw	r30, r24
    1a90:	e4 59       	subi	r30, 0x94	; 148
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	90 81       	ld	r25, Z
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	69 2f       	mov	r22, r25
    1a9a:	41 e0       	ldi	r20, 0x01	; 1
    1a9c:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a8 e4       	ldi	r26, 0x48	; 72
    1aa6:	b2 e4       	ldi	r27, 0x42	; 66
    1aa8:	8b a3       	std	Y+35, r24	; 0x23
    1aaa:	9c a3       	std	Y+36, r25	; 0x24
    1aac:	ad a3       	std	Y+37, r26	; 0x25
    1aae:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ab0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab8:	2b ea       	ldi	r18, 0xAB	; 171
    1aba:	3a ea       	ldi	r19, 0xAA	; 170
    1abc:	4a e2       	ldi	r20, 0x2A	; 42
    1abe:	50 e4       	ldi	r21, 0x40	; 64
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8f 8f       	std	Y+31, r24	; 0x1f
    1aca:	98 a3       	std	Y+32, r25	; 0x20
    1acc:	a9 a3       	std	Y+33, r26	; 0x21
    1ace:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ad0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ad2:	78 a1       	ldd	r23, Y+32	; 0x20
    1ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e8       	ldi	r20, 0x80	; 128
    1ade:	5f e3       	ldi	r21, 0x3F	; 63
    1ae0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae4:	88 23       	and	r24, r24
    1ae6:	1c f4       	brge	.+6      	; 0x1aee <keypad_read+0x90>
		__ticks = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	8e 8f       	std	Y+30, r24	; 0x1e
    1aec:	91 c0       	rjmp	.+290    	; 0x1c10 <keypad_read+0x1b2>
	else if (__tmp > 255)
    1aee:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1af0:	78 a1       	ldd	r23, Y+32	; 0x20
    1af2:	89 a1       	ldd	r24, Y+33	; 0x21
    1af4:	9a a1       	ldd	r25, Y+34	; 0x22
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	53 e4       	ldi	r21, 0x43	; 67
    1afe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	0c f0       	brlt	.+2      	; 0x1b08 <keypad_read+0xaa>
    1b06:	7b c0       	rjmp	.+246    	; 0x1bfe <keypad_read+0x1a0>
	{
		_delay_ms(__us / 1000.0);
    1b08:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a e7       	ldi	r20, 0x7A	; 122
    1b16:	54 e4       	ldi	r21, 0x44	; 68
    1b18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	8a 8f       	std	Y+26, r24	; 0x1a
    1b22:	9b 8f       	std	Y+27, r25	; 0x1b
    1b24:	ac 8f       	std	Y+28, r26	; 0x1c
    1b26:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b28:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b2a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b2e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	4a ef       	ldi	r20, 0xFA	; 250
    1b36:	54 e4       	ldi	r21, 0x44	; 68
    1b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	8e 8b       	std	Y+22, r24	; 0x16
    1b42:	9f 8b       	std	Y+23, r25	; 0x17
    1b44:	a8 8f       	std	Y+24, r26	; 0x18
    1b46:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b48:	6e 89       	ldd	r22, Y+22	; 0x16
    1b4a:	7f 89       	ldd	r23, Y+23	; 0x17
    1b4c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b4e:	99 8d       	ldd	r25, Y+25	; 0x19
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e8       	ldi	r20, 0x80	; 128
    1b56:	5f e3       	ldi	r21, 0x3F	; 63
    1b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b5c:	88 23       	and	r24, r24
    1b5e:	2c f4       	brge	.+10     	; 0x1b6a <keypad_read+0x10c>
		__ticks = 1;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9d 8b       	std	Y+21, r25	; 0x15
    1b66:	8c 8b       	std	Y+20, r24	; 0x14
    1b68:	3f c0       	rjmp	.+126    	; 0x1be8 <keypad_read+0x18a>
	else if (__tmp > 65535)
    1b6a:	6e 89       	ldd	r22, Y+22	; 0x16
    1b6c:	7f 89       	ldd	r23, Y+23	; 0x17
    1b6e:	88 8d       	ldd	r24, Y+24	; 0x18
    1b70:	99 8d       	ldd	r25, Y+25	; 0x19
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	3f ef       	ldi	r19, 0xFF	; 255
    1b76:	4f e7       	ldi	r20, 0x7F	; 127
    1b78:	57 e4       	ldi	r21, 0x47	; 71
    1b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b7e:	18 16       	cp	r1, r24
    1b80:	4c f5       	brge	.+82     	; 0x1bd4 <keypad_read+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b82:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b84:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b86:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b88:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	51 e4       	ldi	r21, 0x41	; 65
    1b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	9d 8b       	std	Y+21, r25	; 0x15
    1ba8:	8c 8b       	std	Y+20, r24	; 0x14
    1baa:	0f c0       	rjmp	.+30     	; 0x1bca <keypad_read+0x16c>
    1bac:	88 ec       	ldi	r24, 0xC8	; 200
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9b 8b       	std	Y+19, r25	; 0x13
    1bb2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bb4:	8a 89       	ldd	r24, Y+18	; 0x12
    1bb6:	9b 89       	ldd	r25, Y+19	; 0x13
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <keypad_read+0x15a>
    1bbc:	9b 8b       	std	Y+19, r25	; 0x13
    1bbe:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc0:	8c 89       	ldd	r24, Y+20	; 0x14
    1bc2:	9d 89       	ldd	r25, Y+21	; 0x15
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	9d 8b       	std	Y+21, r25	; 0x15
    1bc8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bca:	8c 89       	ldd	r24, Y+20	; 0x14
    1bcc:	9d 89       	ldd	r25, Y+21	; 0x15
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	69 f7       	brne	.-38     	; 0x1bac <keypad_read+0x14e>
    1bd2:	24 c0       	rjmp	.+72     	; 0x1c1c <keypad_read+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd4:	6e 89       	ldd	r22, Y+22	; 0x16
    1bd6:	7f 89       	ldd	r23, Y+23	; 0x17
    1bd8:	88 8d       	ldd	r24, Y+24	; 0x18
    1bda:	99 8d       	ldd	r25, Y+25	; 0x19
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9d 8b       	std	Y+21, r25	; 0x15
    1be6:	8c 8b       	std	Y+20, r24	; 0x14
    1be8:	8c 89       	ldd	r24, Y+20	; 0x14
    1bea:	9d 89       	ldd	r25, Y+21	; 0x15
    1bec:	99 8b       	std	Y+17, r25	; 0x11
    1bee:	88 8b       	std	Y+16, r24	; 0x10
    1bf0:	88 89       	ldd	r24, Y+16	; 0x10
    1bf2:	99 89       	ldd	r25, Y+17	; 0x11
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <keypad_read+0x196>
    1bf8:	99 8b       	std	Y+17, r25	; 0x11
    1bfa:	88 8b       	std	Y+16, r24	; 0x10
    1bfc:	0f c0       	rjmp	.+30     	; 0x1c1c <keypad_read+0x1be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bfe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c00:	78 a1       	ldd	r23, Y+32	; 0x20
    1c02:	89 a1       	ldd	r24, Y+33	; 0x21
    1c04:	9a a1       	ldd	r25, Y+34	; 0x22
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	8e 8f       	std	Y+30, r24	; 0x1e
    1c10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c12:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c16:	8a 95       	dec	r24
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <keypad_read+0x1b8>
    1c1a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(50);
		for(l_column_counter=0 ; l_column_counter<keypad_columns;l_column_counter++)
    1c1c:	19 a6       	std	Y+41, r1	; 0x29
    1c1e:	a6 c0       	rjmp	.+332    	; 0x1d6c <keypad_read+0x30e>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_columns_PORT,column_port_pins[l_column_counter]);
    1c20:	89 a5       	ldd	r24, Y+41	; 0x29
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	fc 01       	movw	r30, r24
    1c28:	e8 59       	subi	r30, 0x98	; 152
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	90 81       	ld	r25, Z
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	69 2f       	mov	r22, r25
    1c32:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DIO_PIN_READ_LOGIC_LEVEL_M>
    1c36:	8f a3       	std	Y+39, r24	; 0x27
			if(PIN_HIGH==buttonn)
    1c38:	8f a1       	ldd	r24, Y+39	; 0x27
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <keypad_read+0x1e2>
    1c3e:	93 c0       	rjmp	.+294    	; 0x1d66 <keypad_read+0x308>
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a8 e4       	ldi	r26, 0x48	; 72
    1c46:	b2 e4       	ldi	r27, 0x42	; 66
    1c48:	8b 87       	std	Y+11, r24	; 0x0b
    1c4a:	9c 87       	std	Y+12, r25	; 0x0c
    1c4c:	ad 87       	std	Y+13, r26	; 0x0d
    1c4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a ef       	ldi	r20, 0xFA	; 250
    1c5e:	54 e4       	ldi	r21, 0x44	; 68
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8f 83       	std	Y+7, r24	; 0x07
    1c6a:	98 87       	std	Y+8, r25	; 0x08
    1c6c:	a9 87       	std	Y+9, r26	; 0x09
    1c6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c70:	6f 81       	ldd	r22, Y+7	; 0x07
    1c72:	78 85       	ldd	r23, Y+8	; 0x08
    1c74:	89 85       	ldd	r24, Y+9	; 0x09
    1c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e8       	ldi	r20, 0x80	; 128
    1c7e:	5f e3       	ldi	r21, 0x3F	; 63
    1c80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c84:	88 23       	and	r24, r24
    1c86:	2c f4       	brge	.+10     	; 0x1c92 <keypad_read+0x234>
		__ticks = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	3f c0       	rjmp	.+126    	; 0x1d10 <keypad_read+0x2b2>
	else if (__tmp > 65535)
    1c92:	6f 81       	ldd	r22, Y+7	; 0x07
    1c94:	78 85       	ldd	r23, Y+8	; 0x08
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	3f ef       	ldi	r19, 0xFF	; 255
    1c9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ca0:	57 e4       	ldi	r21, 0x47	; 71
    1ca2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ca6:	18 16       	cp	r1, r24
    1ca8:	4c f5       	brge	.+82     	; 0x1cfc <keypad_read+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e2       	ldi	r20, 0x20	; 32
    1cb8:	51 e4       	ldi	r21, 0x41	; 65
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
    1cd2:	0f c0       	rjmp	.+30     	; 0x1cf2 <keypad_read+0x294>
    1cd4:	88 ec       	ldi	r24, 0xC8	; 200
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9c 83       	std	Y+4, r25	; 0x04
    1cda:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <keypad_read+0x282>
    1ce4:	9c 83       	std	Y+4, r25	; 0x04
    1ce6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	69 f7       	brne	.-38     	; 0x1cd4 <keypad_read+0x276>
    1cfa:	14 c0       	rjmp	.+40     	; 0x1d24 <keypad_read+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfe:	78 85       	ldd	r23, Y+8	; 0x08
    1d00:	89 85       	ldd	r24, Y+9	; 0x09
    1d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	9a 83       	std	Y+2, r25	; 0x02
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <keypad_read+0x2be>
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				*button_pos_=button_pos[l_row_counter][l_row_counter];
    1d24:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d26:	48 2f       	mov	r20, r24
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	ca 01       	movw	r24, r20
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	82 0f       	add	r24, r18
    1d3c:	93 1f       	adc	r25, r19
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e0 59       	subi	r30, 0x90	; 144
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	eb a5       	ldd	r30, Y+43	; 0x2b
    1d48:	fc a5       	ldd	r31, Y+44	; 0x2c
    1d4a:	80 83       	st	Z, r24
				DIO_PIN_WRITE_LOGIC_M(keypad_rows_PORT,row_port_pins[counter],PIN_LOW);
    1d4c:	88 a5       	ldd	r24, Y+40	; 0x28
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	fc 01       	movw	r30, r24
    1d54:	e4 59       	subi	r30, 0x94	; 148
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	90 81       	ld	r25, Z
    1d5a:	83 e0       	ldi	r24, 0x03	; 3
    1d5c:	69 2f       	mov	r22, r25
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    1d64:	07 c0       	rjmp	.+14     	; 0x1d74 <keypad_read+0x316>

	for(l_row_counter=0 ;l_row_counter<keypad_columns;l_row_counter++)
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_rows_PORT,row_port_pins[l_row_counter],PIN_HIGH);
		_delay_us(50);
		for(l_column_counter=0 ; l_column_counter<keypad_columns;l_column_counter++)
    1d66:	89 a5       	ldd	r24, Y+41	; 0x29
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	89 a7       	std	Y+41, r24	; 0x29
    1d6c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d6e:	84 30       	cpi	r24, 0x04	; 4
    1d70:	08 f4       	brcc	.+2      	; 0x1d74 <keypad_read+0x316>
    1d72:	56 cf       	rjmp	.-340    	; 0x1c20 <keypad_read+0x1c2>
	u8 counter=0;
	u8 buttonn =0;

	*button_pos_=0;

	for(l_row_counter=0 ;l_row_counter<keypad_columns;l_row_counter++)
    1d74:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d76:	8f 5f       	subi	r24, 0xFF	; 255
    1d78:	8a a7       	std	Y+42, r24	; 0x2a
    1d7a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d7c:	84 30       	cpi	r24, 0x04	; 4
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <keypad_read+0x324>
    1d80:	83 ce       	rjmp	.-762    	; 0x1a88 <keypad_read+0x2a>
				break;
			}
		}
	}

}
    1d82:	ac 96       	adiw	r28, 0x2c	; 44
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <keypad_read_1>:
/******************/
void keypad_read_1(char *button_pos_ )
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	63 97       	sbiw	r28, 0x13	; 19
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	9b 8b       	std	Y+19, r25	; 0x13
    1daa:	8a 8b       	std	Y+18, r24	; 0x12
	u8 l_row_counter=0;
    1dac:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_column_counter=0;
    1dae:	18 8a       	std	Y+16, r1	; 0x10

	u8 buttonn =0;
    1db0:	1f 86       	std	Y+15, r1	; 0x0f
	*button_pos_=0;
    1db2:	ea 89       	ldd	r30, Y+18	; 0x12
    1db4:	fb 89       	ldd	r31, Y+19	; 0x13
    1db6:	10 82       	st	Z, r1

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    1db8:	18 8a       	std	Y+16, r1	; 0x10
    1dba:	bb c0       	rjmp	.+374    	; 0x1f32 <keypad_read_1+0x19e>
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    1dbc:	88 89       	ldd	r24, Y+16	; 0x10
    1dbe:	88 2f       	mov	r24, r24
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	e8 59       	subi	r30, 0x98	; 152
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	90 81       	ld	r25, Z
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	69 2f       	mov	r22, r25
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    1dd4:	19 8a       	std	Y+17, r1	; 0x11
    1dd6:	a6 c0       	rjmp	.+332    	; 0x1f24 <keypad_read_1+0x190>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    1dd8:	89 89       	ldd	r24, Y+17	; 0x11
    1dda:	88 2f       	mov	r24, r24
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	fc 01       	movw	r30, r24
    1de0:	e4 59       	subi	r30, 0x94	; 148
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	90 81       	ld	r25, Z
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	69 2f       	mov	r22, r25
    1dea:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DIO_PIN_READ_LOGIC_LEVEL_M>
    1dee:	8f 87       	std	Y+15, r24	; 0x0f
			if(PIN_LOW==buttonn)
    1df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df2:	88 23       	and	r24, r24
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <keypad_read_1+0x64>
    1df6:	93 c0       	rjmp	.+294    	; 0x1f1e <keypad_read_1+0x18a>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	a8 e4       	ldi	r26, 0x48	; 72
    1dfe:	b2 e4       	ldi	r27, 0x42	; 66
    1e00:	8b 87       	std	Y+11, r24	; 0x0b
    1e02:	9c 87       	std	Y+12, r25	; 0x0c
    1e04:	ad 87       	std	Y+13, r26	; 0x0d
    1e06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a ef       	ldi	r20, 0xFA	; 250
    1e16:	54 e4       	ldi	r21, 0x44	; 68
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8f 83       	std	Y+7, r24	; 0x07
    1e22:	98 87       	std	Y+8, r25	; 0x08
    1e24:	a9 87       	std	Y+9, r26	; 0x09
    1e26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e28:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2a:	78 85       	ldd	r23, Y+8	; 0x08
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <keypad_read_1+0xb6>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	8d 83       	std	Y+5, r24	; 0x05
    1e48:	3f c0       	rjmp	.+126    	; 0x1ec8 <keypad_read_1+0x134>
	else if (__tmp > 65535)
    1e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4c:	78 85       	ldd	r23, Y+8	; 0x08
    1e4e:	89 85       	ldd	r24, Y+9	; 0x09
    1e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	57 e4       	ldi	r21, 0x47	; 71
    1e5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e5e:	18 16       	cp	r1, r24
    1e60:	4c f5       	brge	.+82     	; 0x1eb4 <keypad_read_1+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	0f c0       	rjmp	.+30     	; 0x1eaa <keypad_read_1+0x116>
    1e8c:	88 ec       	ldi	r24, 0xC8	; 200
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9c 83       	std	Y+4, r25	; 0x04
    1e92:	8b 83       	std	Y+3, r24	; 0x03
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	9c 81       	ldd	r25, Y+4	; 0x04
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <keypad_read_1+0x104>
    1e9c:	9c 83       	std	Y+4, r25	; 0x04
    1e9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	9e 81       	ldd	r25, Y+6	; 0x06
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	69 f7       	brne	.-38     	; 0x1e8c <keypad_read_1+0xf8>
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <keypad_read_1+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb6:	78 85       	ldd	r23, Y+8	; 0x08
    1eb8:	89 85       	ldd	r24, Y+9	; 0x09
    1eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <keypad_read_1+0x140>
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    1edc:	89 89       	ldd	r24, Y+17	; 0x11
    1ede:	48 2f       	mov	r20, r24
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	88 89       	ldd	r24, Y+16	; 0x10
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	ca 01       	movw	r24, r20
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	82 0f       	add	r24, r18
    1ef4:	93 1f       	adc	r25, r19
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	e0 59       	subi	r30, 0x90	; 144
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	80 81       	ld	r24, Z
    1efe:	ea 89       	ldd	r30, Y+18	; 0x12
    1f00:	fb 89       	ldd	r31, Y+19	; 0x13
    1f02:	80 83       	st	Z, r24
				DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    1f04:	88 89       	ldd	r24, Y+16	; 0x10
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	e8 59       	subi	r30, 0x98	; 152
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	90 81       	ld	r25, Z
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	69 2f       	mov	r22, r25
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    1f1c:	07 c0       	rjmp	.+14     	; 0x1f2c <keypad_read_1+0x198>
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    1f1e:	89 89       	ldd	r24, Y+17	; 0x11
    1f20:	8f 5f       	subi	r24, 0xFF	; 255
    1f22:	89 8b       	std	Y+17, r24	; 0x11
    1f24:	89 89       	ldd	r24, Y+17	; 0x11
    1f26:	84 30       	cpi	r24, 0x04	; 4
    1f28:	08 f4       	brcc	.+2      	; 0x1f2c <keypad_read_1+0x198>
    1f2a:	56 cf       	rjmp	.-340    	; 0x1dd8 <keypad_read_1+0x44>
	u8 l_column_counter=0;

	u8 buttonn =0;
	*button_pos_=0;

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    1f2c:	88 89       	ldd	r24, Y+16	; 0x10
    1f2e:	8f 5f       	subi	r24, 0xFF	; 255
    1f30:	88 8b       	std	Y+16, r24	; 0x10
    1f32:	88 89       	ldd	r24, Y+16	; 0x10
    1f34:	84 30       	cpi	r24, 0x04	; 4
    1f36:	08 f4       	brcc	.+2      	; 0x1f3a <keypad_read_1+0x1a6>
    1f38:	41 cf       	rjmp	.-382    	; 0x1dbc <keypad_read_1+0x28>
			}
			else
			{}
		}
	}
}
    1f3a:	63 96       	adiw	r28, 0x13	; 19
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <keypad_read_2>:

/******************/
void keypad_read_2(char *button_pos_ )
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <keypad_read_2+0x6>
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <keypad_read_2+0x8>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <keypad_read_2+0xa>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
	u8 l_row_counter=0;
    1f5e:	1c 82       	std	Y+4, r1	; 0x04
	u8 l_column_counter=0;
    1f60:	1b 82       	std	Y+3, r1	; 0x03
	u8 buttonn =0;
    1f62:	1a 82       	std	Y+2, r1	; 0x02
	*button_pos_=0;
    1f64:	ed 81       	ldd	r30, Y+5	; 0x05
    1f66:	fe 81       	ldd	r31, Y+6	; 0x06
    1f68:	10 82       	st	Z, r1
	u8 flag=0;
    1f6a:	19 82       	std	Y+1, r1	; 0x01

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    1f6c:	1b 82       	std	Y+3, r1	; 0x03
    1f6e:	4c c0       	rjmp	.+152    	; 0x2008 <keypad_read_2+0xbc>
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	fc 01       	movw	r30, r24
    1f78:	e8 59       	subi	r30, 0x98	; 152
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	90 81       	ld	r25, Z
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	69 2f       	mov	r22, r25
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    1f88:	1c 82       	std	Y+4, r1	; 0x04
    1f8a:	29 c0       	rjmp	.+82     	; 0x1fde <keypad_read_2+0x92>
		{
			buttonn= DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	fc 01       	movw	r30, r24
    1f94:	e4 59       	subi	r30, 0x94	; 148
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	90 81       	ld	r25, Z
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	69 2f       	mov	r22, r25
    1f9e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DIO_PIN_READ_LOGIC_LEVEL_M>
    1fa2:	8a 83       	std	Y+2, r24	; 0x02
			if(PIN_LOW==buttonn)
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	88 23       	and	r24, r24
    1fa8:	b9 f4       	brne	.+46     	; 0x1fd8 <keypad_read_2+0x8c>
			{
				flag=1;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	89 83       	std	Y+1, r24	; 0x01
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    1fae:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb0:	48 2f       	mov	r20, r24
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	ca 01       	movw	r24, r20
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	82 0f       	add	r24, r18
    1fc6:	93 1f       	adc	r25, r19
    1fc8:	fc 01       	movw	r30, r24
    1fca:	e0 59       	subi	r30, 0x90	; 144
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 81       	ld	r24, Z
    1fd0:	ed 81       	ldd	r30, Y+5	; 0x05
    1fd2:	fe 81       	ldd	r31, Y+6	; 0x06
    1fd4:	80 83       	st	Z, r24
    1fd6:	06 c0       	rjmp	.+12     	; 0x1fe4 <keypad_read_2+0x98>
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	8f 5f       	subi	r24, 0xFF	; 255
    1fdc:	8c 83       	std	Y+4, r24	; 0x04
    1fde:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe0:	84 30       	cpi	r24, 0x04	; 4
    1fe2:	a0 f2       	brcs	.-88     	; 0x1f8c <keypad_read_2+0x40>
				break;
			}
			else
			{}
		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	88 2f       	mov	r24, r24
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	fc 01       	movw	r30, r24
    1fec:	e8 59       	subi	r30, 0x98	; 152
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	90 81       	ld	r25, Z
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	69 2f       	mov	r22, r25
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>

		if(1==flag)
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	39 f0       	breq	.+14     	; 0x2010 <keypad_read_2+0xc4>
	u8 l_column_counter=0;
	u8 buttonn =0;
	*button_pos_=0;
	u8 flag=0;

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	8f 5f       	subi	r24, 0xFF	; 255
    2006:	8b 83       	std	Y+3, r24	; 0x03
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	84 30       	cpi	r24, 0x04	; 4
    200c:	08 f4       	brcc	.+2      	; 0x2010 <keypad_read_2+0xc4>
    200e:	b0 cf       	rjmp	.-160    	; 0x1f70 <keypad_read_2+0x24>
		{
			break;
		}

	}
}
    2010:	26 96       	adiw	r28, 0x06	; 6
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <keypad_read_4>:

/******************/
void keypad_read_4(char *button_pos_ )
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	00 d0       	rcall	.+0      	; 0x2028 <keypad_read_4+0x6>
    2028:	00 d0       	rcall	.+0      	; 0x202a <keypad_read_4+0x8>
    202a:	0f 92       	push	r0
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	9d 83       	std	Y+5, r25	; 0x05
    2032:	8c 83       	std	Y+4, r24	; 0x04
	u8 l_row_counter=0;
    2034:	1b 82       	std	Y+3, r1	; 0x03
	u8 l_column_counter=0;
    2036:	1a 82       	std	Y+2, r1	; 0x02

	u8 buttonn =0;
    2038:	19 82       	std	Y+1, r1	; 0x01
	*button_pos_=0;
    203a:	ec 81       	ldd	r30, Y+4	; 0x04
    203c:	fd 81       	ldd	r31, Y+5	; 0x05
    203e:	10 82       	st	Z, r1

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    2040:	1a 82       	std	Y+2, r1	; 0x02
    2042:	57 c0       	rjmp	.+174    	; 0x20f2 <keypad_read_4+0xd0>
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	fc 01       	movw	r30, r24
    204c:	e8 59       	subi	r30, 0x98	; 152
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	90 81       	ld	r25, Z
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	69 2f       	mov	r22, r25
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    205c:	1b 82       	std	Y+3, r1	; 0x03
    205e:	37 c0       	rjmp	.+110    	; 0x20ce <keypad_read_4+0xac>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	fc 01       	movw	r30, r24
    2068:	e4 59       	subi	r30, 0x94	; 148
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	90 81       	ld	r25, Z
    206e:	83 e0       	ldi	r24, 0x03	; 3
    2070:	69 2f       	mov	r22, r25
    2072:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DIO_PIN_READ_LOGIC_LEVEL_M>
    2076:	89 83       	std	Y+1, r24	; 0x01
			if(PIN_LOW==buttonn)
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	88 23       	and	r24, r24
    207c:	29 f5       	brne	.+74     	; 0x20c8 <keypad_read_4+0xa6>
    207e:	0c c0       	rjmp	.+24     	; 0x2098 <keypad_read_4+0x76>
			{
				while(PIN_LOW!=buttonn)
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	88 2f       	mov	r24, r24
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	fc 01       	movw	r30, r24
    2088:	e4 59       	subi	r30, 0x94	; 148
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	90 81       	ld	r25, Z
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	69 2f       	mov	r22, r25
    2092:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DIO_PIN_READ_LOGIC_LEVEL_M>
    2096:	89 83       	std	Y+1, r24	; 0x01
		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
			if(PIN_LOW==buttonn)
			{
				while(PIN_LOW!=buttonn)
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	88 23       	and	r24, r24
    209c:	89 f7       	brne	.-30     	; 0x2080 <keypad_read_4+0x5e>
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
				}
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	48 2f       	mov	r20, r24
    20a2:	50 e0       	ldi	r21, 0x00	; 0
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	ca 01       	movw	r24, r20
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	82 0f       	add	r24, r18
    20b6:	93 1f       	adc	r25, r19
    20b8:	fc 01       	movw	r30, r24
    20ba:	e0 59       	subi	r30, 0x90	; 144
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	ec 81       	ldd	r30, Y+4	; 0x04
    20c2:	fd 81       	ldd	r31, Y+5	; 0x05
    20c4:	80 83       	st	Z, r24
    20c6:	06 c0       	rjmp	.+12     	; 0x20d4 <keypad_read_4+0xb2>

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	8b 83       	std	Y+3, r24	; 0x03
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	30 f2       	brcs	.-116    	; 0x2060 <keypad_read_4+0x3e>
				break;
			}
			else
			{}
		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	fc 01       	movw	r30, r24
    20dc:	e8 59       	subi	r30, 0x98	; 152
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	90 81       	ld	r25, Z
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	69 2f       	mov	r22, r25
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
	u8 l_column_counter=0;

	u8 buttonn =0;
	*button_pos_=0;

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	8f 5f       	subi	r24, 0xFF	; 255
    20f0:	8a 83       	std	Y+2, r24	; 0x02
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	84 30       	cpi	r24, 0x04	; 4
    20f6:	08 f4       	brcc	.+2      	; 0x20fa <keypad_read_4+0xd8>
    20f8:	a5 cf       	rjmp	.-182    	; 0x2044 <keypad_read_4+0x22>
		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);

	}

}
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <keypad_readd>:

/************************/

/******************/
button_state_t keypad_readd(char *button_pos_ )
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	27 97       	sbiw	r28, 0x07	; 7
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	9f 83       	std	Y+7, r25	; 0x07
    2120:	8e 83       	std	Y+6, r24	; 0x06
	button_state_t button_state=BUTTON_RELEASED;
    2122:	1d 82       	std	Y+5, r1	; 0x05
	u8 l_row_counter=0;
    2124:	1c 82       	std	Y+4, r1	; 0x04
	u8 l_column_counter=0;
    2126:	1b 82       	std	Y+3, r1	; 0x03

	u8 buttonn =0;
    2128:	1a 82       	std	Y+2, r1	; 0x02
	*button_pos_=0;
    212a:	ee 81       	ldd	r30, Y+6	; 0x06
    212c:	ff 81       	ldd	r31, Y+7	; 0x07
    212e:	10 82       	st	Z, r1
	u8 flag=0;
    2130:	19 82       	std	Y+1, r1	; 0x01
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    2132:	1b 82       	std	Y+3, r1	; 0x03
    2134:	5f c0       	rjmp	.+190    	; 0x21f4 <keypad_readd+0xea>
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	fc 01       	movw	r30, r24
    213e:	e8 59       	subi	r30, 0x98	; 152
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	90 81       	ld	r25, Z
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	69 2f       	mov	r22, r25
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    214e:	1c 82       	std	Y+4, r1	; 0x04
    2150:	3c c0       	rjmp	.+120    	; 0x21ca <keypad_readd+0xc0>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    2152:	8c 81       	ldd	r24, Y+4	; 0x04
    2154:	88 2f       	mov	r24, r24
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	fc 01       	movw	r30, r24
    215a:	e4 59       	subi	r30, 0x94	; 148
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	90 81       	ld	r25, Z
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	69 2f       	mov	r22, r25
    2164:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DIO_PIN_READ_LOGIC_LEVEL_M>
    2168:	8a 83       	std	Y+2, r24	; 0x02
			if(0==buttonn)
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	88 23       	and	r24, r24
    216e:	49 f5       	brne	.+82     	; 0x21c2 <keypad_readd+0xb8>
			{
				button_state=BUTTON_PRESSED;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	8d 83       	std	Y+5, r24	; 0x05
				flag=1;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	0c c0       	rjmp	.+24     	; 0x2192 <keypad_readd+0x88>
				while(0==buttonn)
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	88 2f       	mov	r24, r24
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	fc 01       	movw	r30, r24
    2182:	e4 59       	subi	r30, 0x94	; 148
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	90 81       	ld	r25, Z
    2188:	83 e0       	ldi	r24, 0x03	; 3
    218a:	69 2f       	mov	r22, r25
    218c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <DIO_PIN_READ_LOGIC_LEVEL_M>
    2190:	8a 83       	std	Y+2, r24	; 0x02
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
			if(0==buttonn)
			{
				button_state=BUTTON_PRESSED;
				flag=1;
				while(0==buttonn)
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	88 23       	and	r24, r24
    2196:	89 f3       	breq	.-30     	; 0x217a <keypad_readd+0x70>
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
				}
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    2198:	8c 81       	ldd	r24, Y+4	; 0x04
    219a:	48 2f       	mov	r20, r24
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	ca 01       	movw	r24, r20
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	82 0f       	add	r24, r18
    21b0:	93 1f       	adc	r25, r19
    21b2:	fc 01       	movw	r30, r24
    21b4:	e0 59       	subi	r30, 0x90	; 144
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	80 81       	ld	r24, Z
    21ba:	ee 81       	ldd	r30, Y+6	; 0x06
    21bc:	ff 81       	ldd	r31, Y+7	; 0x07
    21be:	80 83       	st	Z, r24
    21c0:	07 c0       	rjmp	.+14     	; 0x21d0 <keypad_readd+0xc6>
				break;
			}
			else
			{ button_state=BUTTON_RELEASED;}
    21c2:	1d 82       	std	Y+5, r1	; 0x05
	*button_pos_=0;
	u8 flag=0;
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	8c 83       	std	Y+4, r24	; 0x04
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	84 30       	cpi	r24, 0x04	; 4
    21ce:	08 f2       	brcs	.-126    	; 0x2152 <keypad_readd+0x48>
			}
			else
			{ button_state=BUTTON_RELEASED;}

		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	88 2f       	mov	r24, r24
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	fc 01       	movw	r30, r24
    21d8:	e8 59       	subi	r30, 0x98	; 152
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	90 81       	ld	r25, Z
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	69 2f       	mov	r22, r25
    21e2:	41 e0       	ldi	r20, 0x01	; 1
    21e4:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		if(1==flag)
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	39 f0       	breq	.+14     	; 0x21fc <keypad_readd+0xf2>
	u8 l_column_counter=0;

	u8 buttonn =0;
	*button_pos_=0;
	u8 flag=0;
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	8f 5f       	subi	r24, 0xFF	; 255
    21f2:	8b 83       	std	Y+3, r24	; 0x03
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	84 30       	cpi	r24, 0x04	; 4
    21f8:	08 f4       	brcc	.+2      	; 0x21fc <keypad_readd+0xf2>
    21fa:	9d cf       	rjmp	.-198    	; 0x2136 <keypad_readd+0x2c>

			break;
		}
	}

	return button_state;
    21fc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21fe:	27 96       	adiw	r28, 0x07	; 7
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <main>:
		0x7F, // 8
		0x6F  // 9
};
/**********FUNCTION DECLERATION*********/
int main()
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
	PORT_DIRECTION_INIT();
    2218:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <PORT_DIRECTION_INIT>
	PORT_LOGICLEVEL_INIT();
    221c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <PORT_LOGICLEVEL_INIT>
	MSPI_Init(READ_SPI);
    2220:	82 e2       	ldi	r24, 0x22	; 34
    2222:	91 e1       	ldi	r25, 0x11	; 17
    2224:	0e 94 76 08 	call	0x10ec	; 0x10ec <MSPI_Init>
	TIMER0_SETCALLBACK(MTIMER0_ISR);
    2228:	85 e1       	ldi	r24, 0x15	; 21
    222a:	92 e1       	ldi	r25, 0x12	; 18
    222c:	0e 94 37 08 	call	0x106e	; 0x106e <TIMER0_SETCALLBACK>
	MTIMER0_VoidInit();
    2230:	0e 94 df 07 	call	0xfbe	; 0xfbe <MTIMER0_VoidInit>

	while(1)
	{

		seg_display(onesDigit,tensDigit);
    2234:	80 91 b4 00 	lds	r24, 0x00B4
    2238:	90 91 b3 00 	lds	r25, 0x00B3
    223c:	69 2f       	mov	r22, r25
    223e:	0e 94 b9 11 	call	0x2372	; 0x2372 <seg_display>
    2242:	f8 cf       	rjmp	.-16     	; 0x2234 <main+0x24>

00002244 <READ_SPI>:
	}


}
void READ_SPI(void)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
	Receive_Data=SPDR;
    224c:	ef e2       	ldi	r30, 0x2F	; 47
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	80 93 b1 00 	sts	0x00B1, r24

	if(adc_flag==1)
    2256:	80 91 b2 00 	lds	r24, 0x00B2
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	69 f4       	brne	.+26     	; 0x2278 <READ_SPI+0x34>
	{
		Receive_Data=SPDR;
    225e:	ef e2       	ldi	r30, 0x2F	; 47
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	80 93 b1 00 	sts	0x00B1, r24
		PORTD=Receive_Data;
    2268:	e2 e3       	ldi	r30, 0x32	; 50
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 91 b1 00 	lds	r24, 0x00B1
    2270:	80 83       	st	Z, r24
		adc_flag=0;
    2272:	10 92 b2 00 	sts	0x00B2, r1
    2276:	7a c0       	rjmp	.+244    	; 0x236c <READ_SPI+0x128>
	}
	else if(adc_flag==2)
    2278:	80 91 b2 00 	lds	r24, 0x00B2
    227c:	82 30       	cpi	r24, 0x02	; 2
    227e:	11 f5       	brne	.+68     	; 0x22c4 <READ_SPI+0x80>
	{
		Receive_Data=SPDR;
    2280:	ef e2       	ldi	r30, 0x2F	; 47
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	80 93 b1 00 	sts	0x00B1, r24
		tensDigit = Receive_Data / 10;
    228a:	80 91 b1 00 	lds	r24, 0x00B1
    228e:	9a e0       	ldi	r25, 0x0A	; 10
    2290:	69 2f       	mov	r22, r25
    2292:	0e 94 b9 19 	call	0x3372	; 0x3372 <__udivmodqi4>
    2296:	80 93 b3 00 	sts	0x00B3, r24
		onesDigit = Receive_Data % 10;
    229a:	80 91 b1 00 	lds	r24, 0x00B1
    229e:	9a e0       	ldi	r25, 0x0A	; 10
    22a0:	69 2f       	mov	r22, r25
    22a2:	0e 94 b9 19 	call	0x3372	; 0x3372 <__udivmodqi4>
    22a6:	89 2f       	mov	r24, r25
    22a8:	80 93 b4 00 	sts	0x00B4, r24

		if(Receive_Data>40)
    22ac:	80 91 b1 00 	lds	r24, 0x00B1
    22b0:	89 32       	cpi	r24, 0x29	; 41
    22b2:	18 f0       	brcs	.+6      	; 0x22ba <READ_SPI+0x76>
		{
			FAN_START();
    22b4:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <FAN_START>
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <READ_SPI+0x7a>
		}
		else
		{
			FAN_STOP();
    22ba:	0e 94 04 12 	call	0x2408	; 0x2408 <FAN_STOP>
		}
		adc_flag=0;
    22be:	10 92 b2 00 	sts	0x00B2, r1
    22c2:	54 c0       	rjmp	.+168    	; 0x236c <READ_SPI+0x128>

	}
	else if(adc_flag==0)
    22c4:	80 91 b2 00 	lds	r24, 0x00B2
    22c8:	88 23       	and	r24, r24
    22ca:	09 f0       	breq	.+2      	; 0x22ce <READ_SPI+0x8a>
    22cc:	4f c0       	rjmp	.+158    	; 0x236c <READ_SPI+0x128>
	{
		if('9'==Receive_Data) //light
    22ce:	80 91 b1 00 	lds	r24, 0x00B1
    22d2:	89 33       	cpi	r24, 0x39	; 57
    22d4:	21 f4       	brne	.+8      	; 0x22de <READ_SPI+0x9a>
		{
			adc_flag=1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	80 93 b2 00 	sts	0x00B2, r24
    22dc:	47 c0       	rjmp	.+142    	; 0x236c <READ_SPI+0x128>
		}
		else if('A'==Receive_Data)
    22de:	80 91 b1 00 	lds	r24, 0x00B1
    22e2:	81 34       	cpi	r24, 0x41	; 65
    22e4:	21 f4       	brne	.+8      	; 0x22ee <READ_SPI+0xaa>
		{
			adc_flag=2;
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	80 93 b2 00 	sts	0x00B2, r24
    22ec:	3f c0       	rjmp	.+126    	; 0x236c <READ_SPI+0x128>
		}
		else if('1'==Receive_Data)
    22ee:	80 91 b1 00 	lds	r24, 0x00B1
    22f2:	81 33       	cpi	r24, 0x31	; 49
    22f4:	29 f4       	brne	.+10     	; 0x2300 <READ_SPI+0xbc>
		{
			OCR0=254;
    22f6:	ec e5       	ldi	r30, 0x5C	; 92
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8e ef       	ldi	r24, 0xFE	; 254
    22fc:	80 83       	st	Z, r24
    22fe:	36 c0       	rjmp	.+108    	; 0x236c <READ_SPI+0x128>

		}
		else if('2'==Receive_Data)
    2300:	80 91 b1 00 	lds	r24, 0x00B1
    2304:	82 33       	cpi	r24, 0x32	; 50
    2306:	21 f4       	brne	.+8      	; 0x2310 <READ_SPI+0xcc>
		{

			OCR0=0;
    2308:	ec e5       	ldi	r30, 0x5C	; 92
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	10 82       	st	Z, r1
    230e:	2e c0       	rjmp	.+92     	; 0x236c <READ_SPI+0x128>


		}
		else if('3'==Receive_Data)
    2310:	80 91 b1 00 	lds	r24, 0x00B1
    2314:	83 33       	cpi	r24, 0x33	; 51
    2316:	19 f4       	brne	.+6      	; 0x231e <READ_SPI+0xda>
		{
			FAN_START();
    2318:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <FAN_START>
    231c:	27 c0       	rjmp	.+78     	; 0x236c <READ_SPI+0x128>
		}
		else if('4'==Receive_Data)
    231e:	80 91 b1 00 	lds	r24, 0x00B1
    2322:	84 33       	cpi	r24, 0x34	; 52
    2324:	19 f4       	brne	.+6      	; 0x232c <READ_SPI+0xe8>
		{
			FAN_STOP();
    2326:	0e 94 04 12 	call	0x2408	; 0x2408 <FAN_STOP>
    232a:	20 c0       	rjmp	.+64     	; 0x236c <READ_SPI+0x128>
		}
		else if('5'==Receive_Data)
    232c:	80 91 b1 00 	lds	r24, 0x00B1
    2330:	85 33       	cpi	r24, 0x35	; 53
    2332:	21 f4       	brne	.+8      	; 0x233c <READ_SPI+0xf8>
		{
			Stepper_Go(GO_360);
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	0e 94 20 12 	call	0x2440	; 0x2440 <Stepper_Go>
    233a:	18 c0       	rjmp	.+48     	; 0x236c <READ_SPI+0x128>
		}
		else if('6'==Receive_Data)
    233c:	80 91 b1 00 	lds	r24, 0x00B1
    2340:	86 33       	cpi	r24, 0x36	; 54
    2342:	21 f4       	brne	.+8      	; 0x234c <READ_SPI+0x108>
		{
			Stepper_Go(GO_0);
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	0e 94 20 12 	call	0x2440	; 0x2440 <Stepper_Go>
    234a:	10 c0       	rjmp	.+32     	; 0x236c <READ_SPI+0x128>

		}
		else if('7'==Receive_Data)
    234c:	80 91 b1 00 	lds	r24, 0x00B1
    2350:	87 33       	cpi	r24, 0x37	; 55
    2352:	21 f4       	brne	.+8      	; 0x235c <READ_SPI+0x118>
		{
			PORTD=0x00;
    2354:	e2 e3       	ldi	r30, 0x32	; 50
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	10 82       	st	Z, r1
    235a:	08 c0       	rjmp	.+16     	; 0x236c <READ_SPI+0x128>
		}
		else if('8'==Receive_Data)
    235c:	80 91 b1 00 	lds	r24, 0x00B1
    2360:	88 33       	cpi	r24, 0x38	; 56
    2362:	21 f4       	brne	.+8      	; 0x236c <READ_SPI+0x128>
		{
			PORTD=0xFF;
    2364:	e2 e3       	ldi	r30, 0x32	; 50
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	8f ef       	ldi	r24, 0xFF	; 255
    236a:	80 83       	st	Z, r24





}
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <seg_display>:
void seg_display(u8 tens, u8 ones)
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	00 d0       	rcall	.+0      	; 0x2378 <seg_display+0x6>
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	6a 83       	std	Y+2, r22	; 0x02
	//left
	DIO_PIN_WRITE_LOGIC_M(PORTA_,pin0,PIN_HIGH);
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(PORTA_,pin1,PIN_LOW);
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
	PORTC=0;
    2394:	e5 e3       	ldi	r30, 0x35	; 53
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	10 82       	st	Z, r1

	PORTC=sevenSegDigits[tens];
    239a:	a5 e3       	ldi	r26, 0x35	; 53
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	fc 01       	movw	r30, r24
    23a6:	e0 58       	subi	r30, 0x80	; 128
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	8c 93       	st	X, r24

	DIO_PIN_WRITE_LOGIC_M(PORTA_,pin0,PIN_LOW);
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(PORTA_,pin1,PIN_HIGH);
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
	PORTC=0;
    23c2:	e5 e3       	ldi	r30, 0x35	; 53
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	10 82       	st	Z, r1
	PORTC=sevenSegDigits[ones];
    23c8:	a5 e3       	ldi	r26, 0x35	; 53
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	fc 01       	movw	r30, r24
    23d4:	e0 58       	subi	r30, 0x80	; 128
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	8c 93       	st	X, r24


}
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <FAN_START>:
void FAN_START(void)
{
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
	DIO_PIN_WRITE_LOGIC_M(PORTA_,pin2,PIN_HIGH);
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	62 e0       	ldi	r22, 0x02	; 2
    23f2:	41 e0       	ldi	r20, 0x01	; 1
    23f4:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(PORTA_,pin3,PIN_LOW);
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	63 e0       	ldi	r22, 0x03	; 3
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
}
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <FAN_STOP>:
void FAN_STOP(void)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
	DIO_PIN_WRITE_LOGIC_M(PORTA_,pin2,PIN_LOW);
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	62 e0       	ldi	r22, 0x02	; 2
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(PORTA_,pin3,PIN_LOW);
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	63 e0       	ldi	r22, 0x03	; 3
    241e:	40 e0       	ldi	r20, 0x00	; 0
    2420:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
}
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <MTIMER0_ISR>:
void MTIMER0_ISR(void)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
	DIO_PIN_TOGGLE_LOGIC_M(PORTA_,pin4);
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	64 e0       	ldi	r22, 0x04	; 4
    2436:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_PIN_TOGGLE_LOGIC_M>

}
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <Stepper_Go>:
void Stepper_Go(u8 POS)
{
    2440:	0f 93       	push	r16
    2442:	1f 93       	push	r17
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	cd 59       	subi	r28, 0x9D	; 157
    244e:	d0 40       	sbci	r29, 0x00	; 0
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	fe 01       	movw	r30, r28
    245c:	e5 56       	subi	r30, 0x65	; 101
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 83       	st	Z, r24
	switch(POS)
    2462:	fe 01       	movw	r30, r28
    2464:	e5 56       	subi	r30, 0x65	; 101
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	c4 56       	subi	r28, 0x64	; 100
    2470:	df 4f       	sbci	r29, 0xFF	; 255
    2472:	39 83       	std	Y+1, r19	; 0x01
    2474:	28 83       	st	Y, r18
    2476:	cc 59       	subi	r28, 0x9C	; 156
    2478:	d0 40       	sbci	r29, 0x00	; 0
    247a:	c4 56       	subi	r28, 0x64	; 100
    247c:	df 4f       	sbci	r29, 0xFF	; 255
    247e:	88 81       	ld	r24, Y
    2480:	99 81       	ldd	r25, Y+1	; 0x01
    2482:	cc 59       	subi	r28, 0x9C	; 156
    2484:	d0 40       	sbci	r29, 0x00	; 0
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	09 f4       	brne	.+2      	; 0x248c <Stepper_Go+0x4c>
    248a:	ef c3       	rjmp	.+2014   	; 0x2c6a <Stepper_Go+0x82a>
    248c:	c4 56       	subi	r28, 0x64	; 100
    248e:	df 4f       	sbci	r29, 0xFF	; 255
    2490:	e8 81       	ld	r30, Y
    2492:	f9 81       	ldd	r31, Y+1	; 0x01
    2494:	cc 59       	subi	r28, 0x9C	; 156
    2496:	d0 40       	sbci	r29, 0x00	; 0
    2498:	e1 30       	cpi	r30, 0x01	; 1
    249a:	f1 05       	cpc	r31, r1
    249c:	09 f0       	breq	.+2      	; 0x24a0 <Stepper_Go+0x60>
    249e:	5d c7       	rjmp	.+3770   	; 0x335a <Stepper_Go+0xf1a>
	{
	case GO_360 :

		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin0, PIN_HIGH);
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	41 e0       	ldi	r20, 0x01	; 1
    24a6:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin1, PIN_LOW);
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	61 e0       	ldi	r22, 0x01	; 1
    24ae:	40 e0       	ldi	r20, 0x00	; 0
    24b0:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin2, PIN_LOW);
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	62 e0       	ldi	r22, 0x02	; 2
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin3, PIN_LOW);
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	63 e0       	ldi	r22, 0x03	; 3
    24c2:	40 e0       	ldi	r20, 0x00	; 0
    24c4:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    24c8:	fe 01       	movw	r30, r28
    24ca:	e9 56       	subi	r30, 0x69	; 105
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	a0 ea       	ldi	r26, 0xA0	; 160
    24d4:	b0 e4       	ldi	r27, 0x40	; 64
    24d6:	80 83       	st	Z, r24
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	a2 83       	std	Z+2, r26	; 0x02
    24dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24de:	8e 01       	movw	r16, r28
    24e0:	0d 56       	subi	r16, 0x6D	; 109
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	fe 01       	movw	r30, r28
    24e6:	e9 56       	subi	r30, 0x69	; 105
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	f8 01       	movw	r30, r16
    2504:	80 83       	st	Z, r24
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	a2 83       	std	Z+2, r26	; 0x02
    250a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    250c:	fe 01       	movw	r30, r28
    250e:	ed 56       	subi	r30, 0x6D	; 109
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e8       	ldi	r20, 0x80	; 128
    2520:	5f e3       	ldi	r21, 0x3F	; 63
    2522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2526:	88 23       	and	r24, r24
    2528:	44 f4       	brge	.+16     	; 0x253a <Stepper_Go+0xfa>
		__ticks = 1;
    252a:	fe 01       	movw	r30, r28
    252c:	ef 56       	subi	r30, 0x6F	; 111
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
    2538:	64 c0       	rjmp	.+200    	; 0x2602 <Stepper_Go+0x1c2>
	else if (__tmp > 65535)
    253a:	fe 01       	movw	r30, r28
    253c:	ed 56       	subi	r30, 0x6D	; 109
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	60 81       	ld	r22, Z
    2542:	71 81       	ldd	r23, Z+1	; 0x01
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	3f ef       	ldi	r19, 0xFF	; 255
    254c:	4f e7       	ldi	r20, 0x7F	; 127
    254e:	57 e4       	ldi	r21, 0x47	; 71
    2550:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2554:	18 16       	cp	r1, r24
    2556:	0c f0       	brlt	.+2      	; 0x255a <Stepper_Go+0x11a>
    2558:	43 c0       	rjmp	.+134    	; 0x25e0 <Stepper_Go+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255a:	fe 01       	movw	r30, r28
    255c:	e9 56       	subi	r30, 0x69	; 105
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	60 81       	ld	r22, Z
    2562:	71 81       	ldd	r23, Z+1	; 0x01
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	93 81       	ldd	r25, Z+3	; 0x03
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	8e 01       	movw	r16, r28
    257a:	0f 56       	subi	r16, 0x6F	; 111
    257c:	1f 4f       	sbci	r17, 0xFF	; 255
    257e:	bc 01       	movw	r22, r24
    2580:	cd 01       	movw	r24, r26
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	f8 01       	movw	r30, r16
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	80 83       	st	Z, r24
    2590:	1f c0       	rjmp	.+62     	; 0x25d0 <Stepper_Go+0x190>
    2592:	fe 01       	movw	r30, r28
    2594:	e1 57       	subi	r30, 0x71	; 113
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	88 ec       	ldi	r24, 0xC8	; 200
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	80 83       	st	Z, r24
    25a0:	fe 01       	movw	r30, r28
    25a2:	e1 57       	subi	r30, 0x71	; 113
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <Stepper_Go+0x16a>
    25ae:	fe 01       	movw	r30, r28
    25b0:	e1 57       	subi	r30, 0x71	; 113
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	de 01       	movw	r26, r28
    25ba:	af 56       	subi	r26, 0x6F	; 111
    25bc:	bf 4f       	sbci	r27, 0xFF	; 255
    25be:	fe 01       	movw	r30, r28
    25c0:	ef 56       	subi	r30, 0x6F	; 111
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 81       	ld	r24, Z
    25c6:	91 81       	ldd	r25, Z+1	; 0x01
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	11 96       	adiw	r26, 0x01	; 1
    25cc:	9c 93       	st	X, r25
    25ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	fe 01       	movw	r30, r28
    25d2:	ef 56       	subi	r30, 0x6F	; 111
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	d1 f6       	brne	.-76     	; 0x2592 <Stepper_Go+0x152>
    25de:	27 c0       	rjmp	.+78     	; 0x262e <Stepper_Go+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	8e 01       	movw	r16, r28
    25e2:	0f 56       	subi	r16, 0x6F	; 111
    25e4:	1f 4f       	sbci	r17, 0xFF	; 255
    25e6:	fe 01       	movw	r30, r28
    25e8:	ed 56       	subi	r30, 0x6D	; 109
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	60 81       	ld	r22, Z
    25ee:	71 81       	ldd	r23, Z+1	; 0x01
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	93 81       	ldd	r25, Z+3	; 0x03
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	f8 01       	movw	r30, r16
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	80 83       	st	Z, r24
    2602:	de 01       	movw	r26, r28
    2604:	a3 57       	subi	r26, 0x73	; 115
    2606:	bf 4f       	sbci	r27, 0xFF	; 255
    2608:	fe 01       	movw	r30, r28
    260a:	ef 56       	subi	r30, 0x6F	; 111
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	8d 93       	st	X+, r24
    2614:	9c 93       	st	X, r25
    2616:	fe 01       	movw	r30, r28
    2618:	e3 57       	subi	r30, 0x73	; 115
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <Stepper_Go+0x1e0>
    2624:	fe 01       	movw	r30, r28
    2626:	e3 57       	subi	r30, 0x73	; 115
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24
		_delay_ms(5);
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin0,PIN_LOW);
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin1,PIN_HIGH);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	61 e0       	ldi	r22, 0x01	; 1
    263c:	41 e0       	ldi	r20, 0x01	; 1
    263e:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin3,PIN_LOW);
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	63 e0       	ldi	r22, 0x03	; 3
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin2,PIN_LOW);
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	62 e0       	ldi	r22, 0x02	; 2
    2650:	40 e0       	ldi	r20, 0x00	; 0
    2652:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    2656:	fe 01       	movw	r30, r28
    2658:	e7 57       	subi	r30, 0x77	; 119
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	a0 ea       	ldi	r26, 0xA0	; 160
    2662:	b0 e4       	ldi	r27, 0x40	; 64
    2664:	80 83       	st	Z, r24
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	a2 83       	std	Z+2, r26	; 0x02
    266a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266c:	8e 01       	movw	r16, r28
    266e:	0b 57       	subi	r16, 0x7B	; 123
    2670:	1f 4f       	sbci	r17, 0xFF	; 255
    2672:	fe 01       	movw	r30, r28
    2674:	e7 57       	subi	r30, 0x77	; 119
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4a ef       	ldi	r20, 0xFA	; 250
    2686:	54 e4       	ldi	r21, 0x44	; 68
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	f8 01       	movw	r30, r16
    2692:	80 83       	st	Z, r24
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	a2 83       	std	Z+2, r26	; 0x02
    2698:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    269a:	fe 01       	movw	r30, r28
    269c:	eb 57       	subi	r30, 0x7B	; 123
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	60 81       	ld	r22, Z
    26a2:	71 81       	ldd	r23, Z+1	; 0x01
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	93 81       	ldd	r25, Z+3	; 0x03
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e8       	ldi	r20, 0x80	; 128
    26ae:	5f e3       	ldi	r21, 0x3F	; 63
    26b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26b4:	88 23       	and	r24, r24
    26b6:	44 f4       	brge	.+16     	; 0x26c8 <Stepper_Go+0x288>
		__ticks = 1;
    26b8:	fe 01       	movw	r30, r28
    26ba:	ed 57       	subi	r30, 0x7D	; 125
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	80 83       	st	Z, r24
    26c6:	64 c0       	rjmp	.+200    	; 0x2790 <Stepper_Go+0x350>
	else if (__tmp > 65535)
    26c8:	fe 01       	movw	r30, r28
    26ca:	eb 57       	subi	r30, 0x7B	; 123
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	3f ef       	ldi	r19, 0xFF	; 255
    26da:	4f e7       	ldi	r20, 0x7F	; 127
    26dc:	57 e4       	ldi	r21, 0x47	; 71
    26de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e2:	18 16       	cp	r1, r24
    26e4:	0c f0       	brlt	.+2      	; 0x26e8 <Stepper_Go+0x2a8>
    26e6:	43 c0       	rjmp	.+134    	; 0x276e <Stepper_Go+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e8:	fe 01       	movw	r30, r28
    26ea:	e7 57       	subi	r30, 0x77	; 119
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	40 e2       	ldi	r20, 0x20	; 32
    26fc:	51 e4       	ldi	r21, 0x41	; 65
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	8e 01       	movw	r16, r28
    2708:	0d 57       	subi	r16, 0x7D	; 125
    270a:	1f 4f       	sbci	r17, 0xFF	; 255
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	f8 01       	movw	r30, r16
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
    271e:	1f c0       	rjmp	.+62     	; 0x275e <Stepper_Go+0x31e>
    2720:	fe 01       	movw	r30, r28
    2722:	ef 57       	subi	r30, 0x7F	; 127
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	88 ec       	ldi	r24, 0xC8	; 200
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	80 83       	st	Z, r24
    272e:	fe 01       	movw	r30, r28
    2730:	ef 57       	subi	r30, 0x7F	; 127
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <Stepper_Go+0x2f8>
    273c:	fe 01       	movw	r30, r28
    273e:	ef 57       	subi	r30, 0x7F	; 127
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2746:	de 01       	movw	r26, r28
    2748:	ad 57       	subi	r26, 0x7D	; 125
    274a:	bf 4f       	sbci	r27, 0xFF	; 255
    274c:	fe 01       	movw	r30, r28
    274e:	ed 57       	subi	r30, 0x7D	; 125
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 81       	ld	r24, Z
    2754:	91 81       	ldd	r25, Z+1	; 0x01
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	11 96       	adiw	r26, 0x01	; 1
    275a:	9c 93       	st	X, r25
    275c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275e:	fe 01       	movw	r30, r28
    2760:	ed 57       	subi	r30, 0x7D	; 125
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 81       	ld	r24, Z
    2766:	91 81       	ldd	r25, Z+1	; 0x01
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	d1 f6       	brne	.-76     	; 0x2720 <Stepper_Go+0x2e0>
    276c:	27 c0       	rjmp	.+78     	; 0x27bc <Stepper_Go+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	8e 01       	movw	r16, r28
    2770:	0d 57       	subi	r16, 0x7D	; 125
    2772:	1f 4f       	sbci	r17, 0xFF	; 255
    2774:	fe 01       	movw	r30, r28
    2776:	eb 57       	subi	r30, 0x7B	; 123
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	60 81       	ld	r22, Z
    277c:	71 81       	ldd	r23, Z+1	; 0x01
    277e:	82 81       	ldd	r24, Z+2	; 0x02
    2780:	93 81       	ldd	r25, Z+3	; 0x03
    2782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	f8 01       	movw	r30, r16
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
    2790:	de 01       	movw	r26, r28
    2792:	a1 58       	subi	r26, 0x81	; 129
    2794:	bf 4f       	sbci	r27, 0xFF	; 255
    2796:	fe 01       	movw	r30, r28
    2798:	ed 57       	subi	r30, 0x7D	; 125
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 81       	ld	r24, Z
    279e:	91 81       	ldd	r25, Z+1	; 0x01
    27a0:	8d 93       	st	X+, r24
    27a2:	9c 93       	st	X, r25
    27a4:	fe 01       	movw	r30, r28
    27a6:	e1 58       	subi	r30, 0x81	; 129
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	91 81       	ldd	r25, Z+1	; 0x01
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <Stepper_Go+0x36e>
    27b2:	fe 01       	movw	r30, r28
    27b4:	e1 58       	subi	r30, 0x81	; 129
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
		_delay_ms(5);

		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin0,PIN_LOW);
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	60 e0       	ldi	r22, 0x00	; 0
    27c0:	40 e0       	ldi	r20, 0x00	; 0
    27c2:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin1,PIN_LOW);
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin3,PIN_LOW);
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	63 e0       	ldi	r22, 0x03	; 3
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin2,PIN_HIGH);
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	62 e0       	ldi	r22, 0x02	; 2
    27de:	41 e0       	ldi	r20, 0x01	; 1
    27e0:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    27e4:	fe 01       	movw	r30, r28
    27e6:	e5 58       	subi	r30, 0x85	; 133
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	a0 ea       	ldi	r26, 0xA0	; 160
    27f0:	b0 e4       	ldi	r27, 0x40	; 64
    27f2:	80 83       	st	Z, r24
    27f4:	91 83       	std	Z+1, r25	; 0x01
    27f6:	a2 83       	std	Z+2, r26	; 0x02
    27f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fa:	8e 01       	movw	r16, r28
    27fc:	09 58       	subi	r16, 0x89	; 137
    27fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2800:	fe 01       	movw	r30, r28
    2802:	e5 58       	subi	r30, 0x85	; 133
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	4a ef       	ldi	r20, 0xFA	; 250
    2814:	54 e4       	ldi	r21, 0x44	; 68
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	f8 01       	movw	r30, r16
    2820:	80 83       	st	Z, r24
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	a2 83       	std	Z+2, r26	; 0x02
    2826:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2828:	fe 01       	movw	r30, r28
    282a:	e9 58       	subi	r30, 0x89	; 137
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	60 81       	ld	r22, Z
    2830:	71 81       	ldd	r23, Z+1	; 0x01
    2832:	82 81       	ldd	r24, Z+2	; 0x02
    2834:	93 81       	ldd	r25, Z+3	; 0x03
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e8       	ldi	r20, 0x80	; 128
    283c:	5f e3       	ldi	r21, 0x3F	; 63
    283e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2842:	88 23       	and	r24, r24
    2844:	44 f4       	brge	.+16     	; 0x2856 <Stepper_Go+0x416>
		__ticks = 1;
    2846:	fe 01       	movw	r30, r28
    2848:	eb 58       	subi	r30, 0x8B	; 139
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	80 83       	st	Z, r24
    2854:	64 c0       	rjmp	.+200    	; 0x291e <Stepper_Go+0x4de>
	else if (__tmp > 65535)
    2856:	fe 01       	movw	r30, r28
    2858:	e9 58       	subi	r30, 0x89	; 137
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	60 81       	ld	r22, Z
    285e:	71 81       	ldd	r23, Z+1	; 0x01
    2860:	82 81       	ldd	r24, Z+2	; 0x02
    2862:	93 81       	ldd	r25, Z+3	; 0x03
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	3f ef       	ldi	r19, 0xFF	; 255
    2868:	4f e7       	ldi	r20, 0x7F	; 127
    286a:	57 e4       	ldi	r21, 0x47	; 71
    286c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2870:	18 16       	cp	r1, r24
    2872:	0c f0       	brlt	.+2      	; 0x2876 <Stepper_Go+0x436>
    2874:	43 c0       	rjmp	.+134    	; 0x28fc <Stepper_Go+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2876:	fe 01       	movw	r30, r28
    2878:	e5 58       	subi	r30, 0x85	; 133
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e2       	ldi	r20, 0x20	; 32
    288a:	51 e4       	ldi	r21, 0x41	; 65
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	8e 01       	movw	r16, r28
    2896:	0b 58       	subi	r16, 0x8B	; 139
    2898:	1f 4f       	sbci	r17, 0xFF	; 255
    289a:	bc 01       	movw	r22, r24
    289c:	cd 01       	movw	r24, r26
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	f8 01       	movw	r30, r16
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
    28ac:	1f c0       	rjmp	.+62     	; 0x28ec <Stepper_Go+0x4ac>
    28ae:	fe 01       	movw	r30, r28
    28b0:	ed 58       	subi	r30, 0x8D	; 141
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	88 ec       	ldi	r24, 0xC8	; 200
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	91 83       	std	Z+1, r25	; 0x01
    28ba:	80 83       	st	Z, r24
    28bc:	fe 01       	movw	r30, r28
    28be:	ed 58       	subi	r30, 0x8D	; 141
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 81       	ld	r24, Z
    28c4:	91 81       	ldd	r25, Z+1	; 0x01
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <Stepper_Go+0x486>
    28ca:	fe 01       	movw	r30, r28
    28cc:	ed 58       	subi	r30, 0x8D	; 141
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d4:	de 01       	movw	r26, r28
    28d6:	ab 58       	subi	r26, 0x8B	; 139
    28d8:	bf 4f       	sbci	r27, 0xFF	; 255
    28da:	fe 01       	movw	r30, r28
    28dc:	eb 58       	subi	r30, 0x8B	; 139
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	80 81       	ld	r24, Z
    28e2:	91 81       	ldd	r25, Z+1	; 0x01
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	11 96       	adiw	r26, 0x01	; 1
    28e8:	9c 93       	st	X, r25
    28ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ec:	fe 01       	movw	r30, r28
    28ee:	eb 58       	subi	r30, 0x8B	; 139
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	d1 f6       	brne	.-76     	; 0x28ae <Stepper_Go+0x46e>
    28fa:	27 c0       	rjmp	.+78     	; 0x294a <Stepper_Go+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fc:	8e 01       	movw	r16, r28
    28fe:	0b 58       	subi	r16, 0x8B	; 139
    2900:	1f 4f       	sbci	r17, 0xFF	; 255
    2902:	fe 01       	movw	r30, r28
    2904:	e9 58       	subi	r30, 0x89	; 137
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	60 81       	ld	r22, Z
    290a:	71 81       	ldd	r23, Z+1	; 0x01
    290c:	82 81       	ldd	r24, Z+2	; 0x02
    290e:	93 81       	ldd	r25, Z+3	; 0x03
    2910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	f8 01       	movw	r30, r16
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	80 83       	st	Z, r24
    291e:	de 01       	movw	r26, r28
    2920:	af 58       	subi	r26, 0x8F	; 143
    2922:	bf 4f       	sbci	r27, 0xFF	; 255
    2924:	fe 01       	movw	r30, r28
    2926:	eb 58       	subi	r30, 0x8B	; 139
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	80 81       	ld	r24, Z
    292c:	91 81       	ldd	r25, Z+1	; 0x01
    292e:	8d 93       	st	X+, r24
    2930:	9c 93       	st	X, r25
    2932:	fe 01       	movw	r30, r28
    2934:	ef 58       	subi	r30, 0x8F	; 143
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 81       	ld	r24, Z
    293a:	91 81       	ldd	r25, Z+1	; 0x01
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <Stepper_Go+0x4fc>
    2940:	fe 01       	movw	r30, r28
    2942:	ef 58       	subi	r30, 0x8F	; 143
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
		_delay_ms(5);
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin0,PIN_LOW);
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin1,PIN_LOW);
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	40 e0       	ldi	r20, 0x00	; 0
    295a:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin3,PIN_HIGH);
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	63 e0       	ldi	r22, 0x03	; 3
    2962:	41 e0       	ldi	r20, 0x01	; 1
    2964:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin2,PIN_LOW);
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	62 e0       	ldi	r22, 0x02	; 2
    296c:	40 e0       	ldi	r20, 0x00	; 0
    296e:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    2972:	fe 01       	movw	r30, r28
    2974:	e3 59       	subi	r30, 0x93	; 147
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 ea       	ldi	r26, 0xA0	; 160
    297e:	b0 e4       	ldi	r27, 0x40	; 64
    2980:	80 83       	st	Z, r24
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	a2 83       	std	Z+2, r26	; 0x02
    2986:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	8e 01       	movw	r16, r28
    298a:	07 59       	subi	r16, 0x97	; 151
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	fe 01       	movw	r30, r28
    2990:	e3 59       	subi	r30, 0x93	; 147
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	93 81       	ldd	r25, Z+3	; 0x03
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4a ef       	ldi	r20, 0xFA	; 250
    29a2:	54 e4       	ldi	r21, 0x44	; 68
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	f8 01       	movw	r30, r16
    29ae:	80 83       	st	Z, r24
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	a2 83       	std	Z+2, r26	; 0x02
    29b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b6:	fe 01       	movw	r30, r28
    29b8:	e7 59       	subi	r30, 0x97	; 151
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	44 f4       	brge	.+16     	; 0x29e4 <Stepper_Go+0x5a4>
		__ticks = 1;
    29d4:	fe 01       	movw	r30, r28
    29d6:	e9 59       	subi	r30, 0x99	; 153
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
    29e2:	64 c0       	rjmp	.+200    	; 0x2aac <Stepper_Go+0x66c>
	else if (__tmp > 65535)
    29e4:	fe 01       	movw	r30, r28
    29e6:	e7 59       	subi	r30, 0x97	; 151
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	57 e4       	ldi	r21, 0x47	; 71
    29fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	0c f0       	brlt	.+2      	; 0x2a04 <Stepper_Go+0x5c4>
    2a02:	43 c0       	rjmp	.+134    	; 0x2a8a <Stepper_Go+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	fe 01       	movw	r30, r28
    2a06:	e3 59       	subi	r30, 0x93	; 147
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e2       	ldi	r20, 0x20	; 32
    2a18:	51 e4       	ldi	r21, 0x41	; 65
    2a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	8e 01       	movw	r16, r28
    2a24:	09 59       	subi	r16, 0x99	; 153
    2a26:	1f 4f       	sbci	r17, 0xFF	; 255
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	f8 01       	movw	r30, r16
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	1f c0       	rjmp	.+62     	; 0x2a7a <Stepper_Go+0x63a>
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	eb 59       	subi	r30, 0x9B	; 155
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	88 ec       	ldi	r24, 0xC8	; 200
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	80 83       	st	Z, r24
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	eb 59       	subi	r30, 0x9B	; 155
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <Stepper_Go+0x614>
    2a58:	fe 01       	movw	r30, r28
    2a5a:	eb 59       	subi	r30, 0x9B	; 155
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a62:	de 01       	movw	r26, r28
    2a64:	a9 59       	subi	r26, 0x99	; 153
    2a66:	bf 4f       	sbci	r27, 0xFF	; 255
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e9 59       	subi	r30, 0x99	; 153
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	11 96       	adiw	r26, 0x01	; 1
    2a76:	9c 93       	st	X, r25
    2a78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e9 59       	subi	r30, 0x99	; 153
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	91 81       	ldd	r25, Z+1	; 0x01
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	d1 f6       	brne	.-76     	; 0x2a3c <Stepper_Go+0x5fc>
    2a88:	27 c0       	rjmp	.+78     	; 0x2ad8 <Stepper_Go+0x698>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8a:	8e 01       	movw	r16, r28
    2a8c:	09 59       	subi	r16, 0x99	; 153
    2a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a90:	fe 01       	movw	r30, r28
    2a92:	e7 59       	subi	r30, 0x97	; 151
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	60 81       	ld	r22, Z
    2a98:	71 81       	ldd	r23, Z+1	; 0x01
    2a9a:	82 81       	ldd	r24, Z+2	; 0x02
    2a9c:	93 81       	ldd	r25, Z+3	; 0x03
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	de 01       	movw	r26, r28
    2aae:	ad 59       	subi	r26, 0x9D	; 157
    2ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e9 59       	subi	r30, 0x99	; 153
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	8d 93       	st	X+, r24
    2abe:	9c 93       	st	X, r25
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	ed 59       	subi	r30, 0x9D	; 157
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	91 81       	ldd	r25, Z+1	; 0x01
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <Stepper_Go+0x68a>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ed 59       	subi	r30, 0x9D	; 157
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	80 83       	st	Z, r24
		_delay_ms(5);
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin0, PIN_HIGH);
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	41 e0       	ldi	r20, 0x01	; 1
    2ade:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin1, PIN_LOW);
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	61 e0       	ldi	r22, 0x01	; 1
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin2, PIN_LOW);
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	62 e0       	ldi	r22, 0x02	; 2
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin3, PIN_LOW);
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	63 e0       	ldi	r22, 0x03	; 3
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    2b00:	fe 01       	movw	r30, r28
    2b02:	e1 5a       	subi	r30, 0xA1	; 161
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a0 ea       	ldi	r26, 0xA0	; 160
    2b0c:	b0 e4       	ldi	r27, 0x40	; 64
    2b0e:	80 83       	st	Z, r24
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	a2 83       	std	Z+2, r26	; 0x02
    2b14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	8e 01       	movw	r16, r28
    2b18:	05 5a       	subi	r16, 0xA5	; 165
    2b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	e1 5a       	subi	r30, 0xA1	; 161
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	60 81       	ld	r22, Z
    2b24:	71 81       	ldd	r23, Z+1	; 0x01
    2b26:	82 81       	ldd	r24, Z+2	; 0x02
    2b28:	93 81       	ldd	r25, Z+3	; 0x03
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	4a ef       	ldi	r20, 0xFA	; 250
    2b30:	54 e4       	ldi	r21, 0x44	; 68
    2b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	f8 01       	movw	r30, r16
    2b3c:	80 83       	st	Z, r24
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	a2 83       	std	Z+2, r26	; 0x02
    2b42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b44:	fe 01       	movw	r30, r28
    2b46:	e5 5a       	subi	r30, 0xA5	; 165
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	60 81       	ld	r22, Z
    2b4c:	71 81       	ldd	r23, Z+1	; 0x01
    2b4e:	82 81       	ldd	r24, Z+2	; 0x02
    2b50:	93 81       	ldd	r25, Z+3	; 0x03
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e8       	ldi	r20, 0x80	; 128
    2b58:	5f e3       	ldi	r21, 0x3F	; 63
    2b5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b5e:	88 23       	and	r24, r24
    2b60:	44 f4       	brge	.+16     	; 0x2b72 <Stepper_Go+0x732>
		__ticks = 1;
    2b62:	fe 01       	movw	r30, r28
    2b64:	e7 5a       	subi	r30, 0xA7	; 167
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	91 83       	std	Z+1, r25	; 0x01
    2b6e:	80 83       	st	Z, r24
    2b70:	64 c0       	rjmp	.+200    	; 0x2c3a <Stepper_Go+0x7fa>
	else if (__tmp > 65535)
    2b72:	fe 01       	movw	r30, r28
    2b74:	e5 5a       	subi	r30, 0xA5	; 165
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	60 81       	ld	r22, Z
    2b7a:	71 81       	ldd	r23, Z+1	; 0x01
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	3f ef       	ldi	r19, 0xFF	; 255
    2b84:	4f e7       	ldi	r20, 0x7F	; 127
    2b86:	57 e4       	ldi	r21, 0x47	; 71
    2b88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b8c:	18 16       	cp	r1, r24
    2b8e:	0c f0       	brlt	.+2      	; 0x2b92 <Stepper_Go+0x752>
    2b90:	43 c0       	rjmp	.+134    	; 0x2c18 <Stepper_Go+0x7d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b92:	fe 01       	movw	r30, r28
    2b94:	e1 5a       	subi	r30, 0xA1	; 161
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	60 81       	ld	r22, Z
    2b9a:	71 81       	ldd	r23, Z+1	; 0x01
    2b9c:	82 81       	ldd	r24, Z+2	; 0x02
    2b9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e2       	ldi	r20, 0x20	; 32
    2ba6:	51 e4       	ldi	r21, 0x41	; 65
    2ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	8e 01       	movw	r16, r28
    2bb2:	07 5a       	subi	r16, 0xA7	; 167
    2bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	cd 01       	movw	r24, r26
    2bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	f8 01       	movw	r30, r16
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	80 83       	st	Z, r24
    2bc8:	1f c0       	rjmp	.+62     	; 0x2c08 <Stepper_Go+0x7c8>
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e9 5a       	subi	r30, 0xA9	; 169
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	88 ec       	ldi	r24, 0xC8	; 200
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	91 83       	std	Z+1, r25	; 0x01
    2bd6:	80 83       	st	Z, r24
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e9 5a       	subi	r30, 0xA9	; 169
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <Stepper_Go+0x7a2>
    2be6:	fe 01       	movw	r30, r28
    2be8:	e9 5a       	subi	r30, 0xA9	; 169
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf0:	de 01       	movw	r26, r28
    2bf2:	a7 5a       	subi	r26, 0xA7	; 167
    2bf4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	e7 5a       	subi	r30, 0xA7	; 167
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	80 81       	ld	r24, Z
    2bfe:	91 81       	ldd	r25, Z+1	; 0x01
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	11 96       	adiw	r26, 0x01	; 1
    2c04:	9c 93       	st	X, r25
    2c06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e7 5a       	subi	r30, 0xA7	; 167
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	91 81       	ldd	r25, Z+1	; 0x01
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	d1 f6       	brne	.-76     	; 0x2bca <Stepper_Go+0x78a>
    2c16:	a1 c3       	rjmp	.+1858   	; 0x335a <Stepper_Go+0xf1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c18:	8e 01       	movw	r16, r28
    2c1a:	07 5a       	subi	r16, 0xA7	; 167
    2c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e5 5a       	subi	r30, 0xA5	; 165
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	f8 01       	movw	r30, r16
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	80 83       	st	Z, r24
    2c3a:	de 01       	movw	r26, r28
    2c3c:	ab 5a       	subi	r26, 0xAB	; 171
    2c3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c40:	fe 01       	movw	r30, r28
    2c42:	e7 5a       	subi	r30, 0xA7	; 167
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	80 81       	ld	r24, Z
    2c48:	91 81       	ldd	r25, Z+1	; 0x01
    2c4a:	11 96       	adiw	r26, 0x01	; 1
    2c4c:	9c 93       	st	X, r25
    2c4e:	8e 93       	st	-X, r24
    2c50:	fe 01       	movw	r30, r28
    2c52:	eb 5a       	subi	r30, 0xAB	; 171
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	91 81       	ldd	r25, Z+1	; 0x01
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <Stepper_Go+0x81a>
    2c5e:	fe 01       	movw	r30, r28
    2c60:	eb 5a       	subi	r30, 0xAB	; 171
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
    2c68:	78 c3       	rjmp	.+1776   	; 0x335a <Stepper_Go+0xf1a>

		break;
	case GO_0 :


		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin0, PIN_HIGH);
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	41 e0       	ldi	r20, 0x01	; 1
    2c70:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin1, PIN_LOW);
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	61 e0       	ldi	r22, 0x01	; 1
    2c78:	40 e0       	ldi	r20, 0x00	; 0
    2c7a:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin2, PIN_LOW);
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	62 e0       	ldi	r22, 0x02	; 2
    2c82:	40 e0       	ldi	r20, 0x00	; 0
    2c84:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin3, PIN_LOW);
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	63 e0       	ldi	r22, 0x03	; 3
    2c8c:	40 e0       	ldi	r20, 0x00	; 0
    2c8e:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    2c92:	fe 01       	movw	r30, r28
    2c94:	ef 5a       	subi	r30, 0xAF	; 175
    2c96:	ff 4f       	sbci	r31, 0xFF	; 255
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	a0 ea       	ldi	r26, 0xA0	; 160
    2c9e:	b0 e4       	ldi	r27, 0x40	; 64
    2ca0:	80 83       	st	Z, r24
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	a2 83       	std	Z+2, r26	; 0x02
    2ca6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca8:	8e 01       	movw	r16, r28
    2caa:	03 5b       	subi	r16, 0xB3	; 179
    2cac:	1f 4f       	sbci	r17, 0xFF	; 255
    2cae:	fe 01       	movw	r30, r28
    2cb0:	ef 5a       	subi	r30, 0xAF	; 175
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	60 81       	ld	r22, Z
    2cb6:	71 81       	ldd	r23, Z+1	; 0x01
    2cb8:	82 81       	ldd	r24, Z+2	; 0x02
    2cba:	93 81       	ldd	r25, Z+3	; 0x03
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	4a ef       	ldi	r20, 0xFA	; 250
    2cc2:	54 e4       	ldi	r21, 0x44	; 68
    2cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	f8 01       	movw	r30, r16
    2cce:	80 83       	st	Z, r24
    2cd0:	91 83       	std	Z+1, r25	; 0x01
    2cd2:	a2 83       	std	Z+2, r26	; 0x02
    2cd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	e3 5b       	subi	r30, 0xB3	; 179
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	60 81       	ld	r22, Z
    2cde:	71 81       	ldd	r23, Z+1	; 0x01
    2ce0:	82 81       	ldd	r24, Z+2	; 0x02
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e8       	ldi	r20, 0x80	; 128
    2cea:	5f e3       	ldi	r21, 0x3F	; 63
    2cec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf0:	88 23       	and	r24, r24
    2cf2:	44 f4       	brge	.+16     	; 0x2d04 <Stepper_Go+0x8c4>
		__ticks = 1;
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e5 5b       	subi	r30, 0xB5	; 181
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	91 83       	std	Z+1, r25	; 0x01
    2d00:	80 83       	st	Z, r24
    2d02:	64 c0       	rjmp	.+200    	; 0x2dcc <Stepper_Go+0x98c>
	else if (__tmp > 65535)
    2d04:	fe 01       	movw	r30, r28
    2d06:	e3 5b       	subi	r30, 0xB3	; 179
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	60 81       	ld	r22, Z
    2d0c:	71 81       	ldd	r23, Z+1	; 0x01
    2d0e:	82 81       	ldd	r24, Z+2	; 0x02
    2d10:	93 81       	ldd	r25, Z+3	; 0x03
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	3f ef       	ldi	r19, 0xFF	; 255
    2d16:	4f e7       	ldi	r20, 0x7F	; 127
    2d18:	57 e4       	ldi	r21, 0x47	; 71
    2d1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d1e:	18 16       	cp	r1, r24
    2d20:	0c f0       	brlt	.+2      	; 0x2d24 <Stepper_Go+0x8e4>
    2d22:	43 c0       	rjmp	.+134    	; 0x2daa <Stepper_Go+0x96a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d24:	fe 01       	movw	r30, r28
    2d26:	ef 5a       	subi	r30, 0xAF	; 175
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	60 81       	ld	r22, Z
    2d2c:	71 81       	ldd	r23, Z+1	; 0x01
    2d2e:	82 81       	ldd	r24, Z+2	; 0x02
    2d30:	93 81       	ldd	r25, Z+3	; 0x03
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e2       	ldi	r20, 0x20	; 32
    2d38:	51 e4       	ldi	r21, 0x41	; 65
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	8e 01       	movw	r16, r28
    2d44:	05 5b       	subi	r16, 0xB5	; 181
    2d46:	1f 4f       	sbci	r17, 0xFF	; 255
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	f8 01       	movw	r30, r16
    2d56:	91 83       	std	Z+1, r25	; 0x01
    2d58:	80 83       	st	Z, r24
    2d5a:	1f c0       	rjmp	.+62     	; 0x2d9a <Stepper_Go+0x95a>
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e7 5b       	subi	r30, 0xB7	; 183
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	88 ec       	ldi	r24, 0xC8	; 200
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	80 83       	st	Z, r24
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	e7 5b       	subi	r30, 0xB7	; 183
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 81       	ld	r24, Z
    2d72:	91 81       	ldd	r25, Z+1	; 0x01
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <Stepper_Go+0x934>
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e7 5b       	subi	r30, 0xB7	; 183
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	91 83       	std	Z+1, r25	; 0x01
    2d80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d82:	de 01       	movw	r26, r28
    2d84:	a5 5b       	subi	r26, 0xB5	; 181
    2d86:	bf 4f       	sbci	r27, 0xFF	; 255
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e5 5b       	subi	r30, 0xB5	; 181
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	80 81       	ld	r24, Z
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	11 96       	adiw	r26, 0x01	; 1
    2d96:	9c 93       	st	X, r25
    2d98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e5 5b       	subi	r30, 0xB5	; 181
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	80 81       	ld	r24, Z
    2da2:	91 81       	ldd	r25, Z+1	; 0x01
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	d1 f6       	brne	.-76     	; 0x2d5c <Stepper_Go+0x91c>
    2da8:	27 c0       	rjmp	.+78     	; 0x2df8 <Stepper_Go+0x9b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2daa:	8e 01       	movw	r16, r28
    2dac:	05 5b       	subi	r16, 0xB5	; 181
    2dae:	1f 4f       	sbci	r17, 0xFF	; 255
    2db0:	fe 01       	movw	r30, r28
    2db2:	e3 5b       	subi	r30, 0xB3	; 179
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	60 81       	ld	r22, Z
    2db8:	71 81       	ldd	r23, Z+1	; 0x01
    2dba:	82 81       	ldd	r24, Z+2	; 0x02
    2dbc:	93 81       	ldd	r25, Z+3	; 0x03
    2dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	f8 01       	movw	r30, r16
    2dc8:	91 83       	std	Z+1, r25	; 0x01
    2dca:	80 83       	st	Z, r24
    2dcc:	de 01       	movw	r26, r28
    2dce:	a9 5b       	subi	r26, 0xB9	; 185
    2dd0:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	e5 5b       	subi	r30, 0xB5	; 181
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	80 81       	ld	r24, Z
    2dda:	91 81       	ldd	r25, Z+1	; 0x01
    2ddc:	8d 93       	st	X+, r24
    2dde:	9c 93       	st	X, r25
    2de0:	fe 01       	movw	r30, r28
    2de2:	e9 5b       	subi	r30, 0xB9	; 185
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	80 81       	ld	r24, Z
    2de8:	91 81       	ldd	r25, Z+1	; 0x01
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <Stepper_Go+0x9aa>
    2dee:	fe 01       	movw	r30, r28
    2df0:	e9 5b       	subi	r30, 0xB9	; 185
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	80 83       	st	Z, r24
		_delay_ms(5);
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin0,PIN_LOW);
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	60 e0       	ldi	r22, 0x00	; 0
    2dfc:	40 e0       	ldi	r20, 0x00	; 0
    2dfe:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin1,PIN_LOW);
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	61 e0       	ldi	r22, 0x01	; 1
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin3,PIN_HIGH);
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	63 e0       	ldi	r22, 0x03	; 3
    2e10:	41 e0       	ldi	r20, 0x01	; 1
    2e12:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin2,PIN_LOW);
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	62 e0       	ldi	r22, 0x02	; 2
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    2e20:	fe 01       	movw	r30, r28
    2e22:	ed 5b       	subi	r30, 0xBD	; 189
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	a0 ea       	ldi	r26, 0xA0	; 160
    2e2c:	b0 e4       	ldi	r27, 0x40	; 64
    2e2e:	80 83       	st	Z, r24
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	a2 83       	std	Z+2, r26	; 0x02
    2e34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e36:	8e 01       	movw	r16, r28
    2e38:	01 5c       	subi	r16, 0xC1	; 193
    2e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	ed 5b       	subi	r30, 0xBD	; 189
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	60 81       	ld	r22, Z
    2e44:	71 81       	ldd	r23, Z+1	; 0x01
    2e46:	82 81       	ldd	r24, Z+2	; 0x02
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	4a ef       	ldi	r20, 0xFA	; 250
    2e50:	54 e4       	ldi	r21, 0x44	; 68
    2e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	f8 01       	movw	r30, r16
    2e5c:	80 83       	st	Z, r24
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	a2 83       	std	Z+2, r26	; 0x02
    2e62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e64:	fe 01       	movw	r30, r28
    2e66:	ff 96       	adiw	r30, 0x3f	; 63
    2e68:	60 81       	ld	r22, Z
    2e6a:	71 81       	ldd	r23, Z+1	; 0x01
    2e6c:	82 81       	ldd	r24, Z+2	; 0x02
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e8       	ldi	r20, 0x80	; 128
    2e76:	5f e3       	ldi	r21, 0x3F	; 63
    2e78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e7c:	88 23       	and	r24, r24
    2e7e:	2c f4       	brge	.+10     	; 0x2e8a <Stepper_Go+0xa4a>
		__ticks = 1;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	9e af       	std	Y+62, r25	; 0x3e
    2e86:	8d af       	std	Y+61, r24	; 0x3d
    2e88:	46 c0       	rjmp	.+140    	; 0x2f16 <Stepper_Go+0xad6>
	else if (__tmp > 65535)
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	ff 96       	adiw	r30, 0x3f	; 63
    2e8e:	60 81       	ld	r22, Z
    2e90:	71 81       	ldd	r23, Z+1	; 0x01
    2e92:	82 81       	ldd	r24, Z+2	; 0x02
    2e94:	93 81       	ldd	r25, Z+3	; 0x03
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	3f ef       	ldi	r19, 0xFF	; 255
    2e9a:	4f e7       	ldi	r20, 0x7F	; 127
    2e9c:	57 e4       	ldi	r21, 0x47	; 71
    2e9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ea2:	18 16       	cp	r1, r24
    2ea4:	64 f5       	brge	.+88     	; 0x2efe <Stepper_Go+0xabe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ed 5b       	subi	r30, 0xBD	; 189
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e2       	ldi	r20, 0x20	; 32
    2eba:	51 e4       	ldi	r21, 0x41	; 65
    2ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	bc 01       	movw	r22, r24
    2ec6:	cd 01       	movw	r24, r26
    2ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	9e af       	std	Y+62, r25	; 0x3e
    2ed2:	8d af       	std	Y+61, r24	; 0x3d
    2ed4:	0f c0       	rjmp	.+30     	; 0x2ef4 <Stepper_Go+0xab4>
    2ed6:	88 ec       	ldi	r24, 0xC8	; 200
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	9c af       	std	Y+60, r25	; 0x3c
    2edc:	8b af       	std	Y+59, r24	; 0x3b
    2ede:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ee0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	f1 f7       	brne	.-4      	; 0x2ee2 <Stepper_Go+0xaa2>
    2ee6:	9c af       	std	Y+60, r25	; 0x3c
    2ee8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eea:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eec:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	9e af       	std	Y+62, r25	; 0x3e
    2ef2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ef6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	69 f7       	brne	.-38     	; 0x2ed6 <Stepper_Go+0xa96>
    2efc:	16 c0       	rjmp	.+44     	; 0x2f2a <Stepper_Go+0xaea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2efe:	fe 01       	movw	r30, r28
    2f00:	ff 96       	adiw	r30, 0x3f	; 63
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	9e af       	std	Y+62, r25	; 0x3e
    2f14:	8d af       	std	Y+61, r24	; 0x3d
    2f16:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f18:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f1a:	9a af       	std	Y+58, r25	; 0x3a
    2f1c:	89 af       	std	Y+57, r24	; 0x39
    2f1e:	89 ad       	ldd	r24, Y+57	; 0x39
    2f20:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <Stepper_Go+0xae2>
    2f26:	9a af       	std	Y+58, r25	; 0x3a
    2f28:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(5);

		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin0,PIN_LOW);
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	40 e0       	ldi	r20, 0x00	; 0
    2f30:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin1,PIN_LOW);
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	61 e0       	ldi	r22, 0x01	; 1
    2f38:	40 e0       	ldi	r20, 0x00	; 0
    2f3a:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin3,PIN_LOW);
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	63 e0       	ldi	r22, 0x03	; 3
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin2,PIN_HIGH);
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	62 e0       	ldi	r22, 0x02	; 2
    2f4c:	41 e0       	ldi	r20, 0x01	; 1
    2f4e:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a0 ea       	ldi	r26, 0xA0	; 160
    2f58:	b0 e4       	ldi	r27, 0x40	; 64
    2f5a:	8d ab       	std	Y+53, r24	; 0x35
    2f5c:	9e ab       	std	Y+54, r25	; 0x36
    2f5e:	af ab       	std	Y+55, r26	; 0x37
    2f60:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f62:	6d a9       	ldd	r22, Y+53	; 0x35
    2f64:	7e a9       	ldd	r23, Y+54	; 0x36
    2f66:	8f a9       	ldd	r24, Y+55	; 0x37
    2f68:	98 ad       	ldd	r25, Y+56	; 0x38
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	4a ef       	ldi	r20, 0xFA	; 250
    2f70:	54 e4       	ldi	r21, 0x44	; 68
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	89 ab       	std	Y+49, r24	; 0x31
    2f7c:	9a ab       	std	Y+50, r25	; 0x32
    2f7e:	ab ab       	std	Y+51, r26	; 0x33
    2f80:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f82:	69 a9       	ldd	r22, Y+49	; 0x31
    2f84:	7a a9       	ldd	r23, Y+50	; 0x32
    2f86:	8b a9       	ldd	r24, Y+51	; 0x33
    2f88:	9c a9       	ldd	r25, Y+52	; 0x34
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	5f e3       	ldi	r21, 0x3F	; 63
    2f92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f96:	88 23       	and	r24, r24
    2f98:	2c f4       	brge	.+10     	; 0x2fa4 <Stepper_Go+0xb64>
		__ticks = 1;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	98 ab       	std	Y+48, r25	; 0x30
    2fa0:	8f a7       	std	Y+47, r24	; 0x2f
    2fa2:	3f c0       	rjmp	.+126    	; 0x3022 <Stepper_Go+0xbe2>
	else if (__tmp > 65535)
    2fa4:	69 a9       	ldd	r22, Y+49	; 0x31
    2fa6:	7a a9       	ldd	r23, Y+50	; 0x32
    2fa8:	8b a9       	ldd	r24, Y+51	; 0x33
    2faa:	9c a9       	ldd	r25, Y+52	; 0x34
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	3f ef       	ldi	r19, 0xFF	; 255
    2fb0:	4f e7       	ldi	r20, 0x7F	; 127
    2fb2:	57 e4       	ldi	r21, 0x47	; 71
    2fb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fb8:	18 16       	cp	r1, r24
    2fba:	4c f5       	brge	.+82     	; 0x300e <Stepper_Go+0xbce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbc:	6d a9       	ldd	r22, Y+53	; 0x35
    2fbe:	7e a9       	ldd	r23, Y+54	; 0x36
    2fc0:	8f a9       	ldd	r24, Y+55	; 0x37
    2fc2:	98 ad       	ldd	r25, Y+56	; 0x38
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e2       	ldi	r20, 0x20	; 32
    2fca:	51 e4       	ldi	r21, 0x41	; 65
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	98 ab       	std	Y+48, r25	; 0x30
    2fe2:	8f a7       	std	Y+47, r24	; 0x2f
    2fe4:	0f c0       	rjmp	.+30     	; 0x3004 <Stepper_Go+0xbc4>
    2fe6:	88 ec       	ldi	r24, 0xC8	; 200
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9e a7       	std	Y+46, r25	; 0x2e
    2fec:	8d a7       	std	Y+45, r24	; 0x2d
    2fee:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ff0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <Stepper_Go+0xbb2>
    2ff6:	9e a7       	std	Y+46, r25	; 0x2e
    2ff8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ffc:	98 a9       	ldd	r25, Y+48	; 0x30
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	98 ab       	std	Y+48, r25	; 0x30
    3002:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3004:	8f a5       	ldd	r24, Y+47	; 0x2f
    3006:	98 a9       	ldd	r25, Y+48	; 0x30
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	69 f7       	brne	.-38     	; 0x2fe6 <Stepper_Go+0xba6>
    300c:	14 c0       	rjmp	.+40     	; 0x3036 <Stepper_Go+0xbf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300e:	69 a9       	ldd	r22, Y+49	; 0x31
    3010:	7a a9       	ldd	r23, Y+50	; 0x32
    3012:	8b a9       	ldd	r24, Y+51	; 0x33
    3014:	9c a9       	ldd	r25, Y+52	; 0x34
    3016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	98 ab       	std	Y+48, r25	; 0x30
    3020:	8f a7       	std	Y+47, r24	; 0x2f
    3022:	8f a5       	ldd	r24, Y+47	; 0x2f
    3024:	98 a9       	ldd	r25, Y+48	; 0x30
    3026:	9c a7       	std	Y+44, r25	; 0x2c
    3028:	8b a7       	std	Y+43, r24	; 0x2b
    302a:	8b a5       	ldd	r24, Y+43	; 0x2b
    302c:	9c a5       	ldd	r25, Y+44	; 0x2c
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <Stepper_Go+0xbee>
    3032:	9c a7       	std	Y+44, r25	; 0x2c
    3034:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);

		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin0,PIN_LOW);
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	40 e0       	ldi	r20, 0x00	; 0
    303c:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin1,PIN_HIGH);
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	61 e0       	ldi	r22, 0x01	; 1
    3044:	41 e0       	ldi	r20, 0x01	; 1
    3046:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin3,PIN_LOW);
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	63 e0       	ldi	r22, 0x03	; 3
    304e:	40 e0       	ldi	r20, 0x00	; 0
    3050:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_,pin2,PIN_LOW);
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	62 e0       	ldi	r22, 0x02	; 2
    3058:	40 e0       	ldi	r20, 0x00	; 0
    305a:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	a0 ea       	ldi	r26, 0xA0	; 160
    3064:	b0 e4       	ldi	r27, 0x40	; 64
    3066:	8f a3       	std	Y+39, r24	; 0x27
    3068:	98 a7       	std	Y+40, r25	; 0x28
    306a:	a9 a7       	std	Y+41, r26	; 0x29
    306c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306e:	6f a1       	ldd	r22, Y+39	; 0x27
    3070:	78 a5       	ldd	r23, Y+40	; 0x28
    3072:	89 a5       	ldd	r24, Y+41	; 0x29
    3074:	9a a5       	ldd	r25, Y+42	; 0x2a
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	4a ef       	ldi	r20, 0xFA	; 250
    307c:	54 e4       	ldi	r21, 0x44	; 68
    307e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	8b a3       	std	Y+35, r24	; 0x23
    3088:	9c a3       	std	Y+36, r25	; 0x24
    308a:	ad a3       	std	Y+37, r26	; 0x25
    308c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    308e:	6b a1       	ldd	r22, Y+35	; 0x23
    3090:	7c a1       	ldd	r23, Y+36	; 0x24
    3092:	8d a1       	ldd	r24, Y+37	; 0x25
    3094:	9e a1       	ldd	r25, Y+38	; 0x26
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	40 e8       	ldi	r20, 0x80	; 128
    309c:	5f e3       	ldi	r21, 0x3F	; 63
    309e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a2:	88 23       	and	r24, r24
    30a4:	2c f4       	brge	.+10     	; 0x30b0 <Stepper_Go+0xc70>
		__ticks = 1;
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	9a a3       	std	Y+34, r25	; 0x22
    30ac:	89 a3       	std	Y+33, r24	; 0x21
    30ae:	3f c0       	rjmp	.+126    	; 0x312e <Stepper_Go+0xcee>
	else if (__tmp > 65535)
    30b0:	6b a1       	ldd	r22, Y+35	; 0x23
    30b2:	7c a1       	ldd	r23, Y+36	; 0x24
    30b4:	8d a1       	ldd	r24, Y+37	; 0x25
    30b6:	9e a1       	ldd	r25, Y+38	; 0x26
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	3f ef       	ldi	r19, 0xFF	; 255
    30bc:	4f e7       	ldi	r20, 0x7F	; 127
    30be:	57 e4       	ldi	r21, 0x47	; 71
    30c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c4:	18 16       	cp	r1, r24
    30c6:	4c f5       	brge	.+82     	; 0x311a <Stepper_Go+0xcda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c8:	6f a1       	ldd	r22, Y+39	; 0x27
    30ca:	78 a5       	ldd	r23, Y+40	; 0x28
    30cc:	89 a5       	ldd	r24, Y+41	; 0x29
    30ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e2       	ldi	r20, 0x20	; 32
    30d6:	51 e4       	ldi	r21, 0x41	; 65
    30d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	bc 01       	movw	r22, r24
    30e2:	cd 01       	movw	r24, r26
    30e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	9a a3       	std	Y+34, r25	; 0x22
    30ee:	89 a3       	std	Y+33, r24	; 0x21
    30f0:	0f c0       	rjmp	.+30     	; 0x3110 <Stepper_Go+0xcd0>
    30f2:	88 ec       	ldi	r24, 0xC8	; 200
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	98 a3       	std	Y+32, r25	; 0x20
    30f8:	8f 8f       	std	Y+31, r24	; 0x1f
    30fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30fc:	98 a1       	ldd	r25, Y+32	; 0x20
    30fe:	01 97       	sbiw	r24, 0x01	; 1
    3100:	f1 f7       	brne	.-4      	; 0x30fe <Stepper_Go+0xcbe>
    3102:	98 a3       	std	Y+32, r25	; 0x20
    3104:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3106:	89 a1       	ldd	r24, Y+33	; 0x21
    3108:	9a a1       	ldd	r25, Y+34	; 0x22
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	9a a3       	std	Y+34, r25	; 0x22
    310e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3110:	89 a1       	ldd	r24, Y+33	; 0x21
    3112:	9a a1       	ldd	r25, Y+34	; 0x22
    3114:	00 97       	sbiw	r24, 0x00	; 0
    3116:	69 f7       	brne	.-38     	; 0x30f2 <Stepper_Go+0xcb2>
    3118:	14 c0       	rjmp	.+40     	; 0x3142 <Stepper_Go+0xd02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311a:	6b a1       	ldd	r22, Y+35	; 0x23
    311c:	7c a1       	ldd	r23, Y+36	; 0x24
    311e:	8d a1       	ldd	r24, Y+37	; 0x25
    3120:	9e a1       	ldd	r25, Y+38	; 0x26
    3122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	9a a3       	std	Y+34, r25	; 0x22
    312c:	89 a3       	std	Y+33, r24	; 0x21
    312e:	89 a1       	ldd	r24, Y+33	; 0x21
    3130:	9a a1       	ldd	r25, Y+34	; 0x22
    3132:	9e 8f       	std	Y+30, r25	; 0x1e
    3134:	8d 8f       	std	Y+29, r24	; 0x1d
    3136:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3138:	9e 8d       	ldd	r25, Y+30	; 0x1e
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <Stepper_Go+0xcfa>
    313e:	9e 8f       	std	Y+30, r25	; 0x1e
    3140:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin0, PIN_HIGH);
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	60 e0       	ldi	r22, 0x00	; 0
    3146:	41 e0       	ldi	r20, 0x01	; 1
    3148:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin1, PIN_LOW);
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	61 e0       	ldi	r22, 0x01	; 1
    3150:	40 e0       	ldi	r20, 0x00	; 0
    3152:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin2, PIN_LOW);
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	62 e0       	ldi	r22, 0x02	; 2
    315a:	40 e0       	ldi	r20, 0x00	; 0
    315c:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin3, PIN_LOW);
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	63 e0       	ldi	r22, 0x03	; 3
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	a0 ea       	ldi	r26, 0xA0	; 160
    3170:	b0 e4       	ldi	r27, 0x40	; 64
    3172:	89 8f       	std	Y+25, r24	; 0x19
    3174:	9a 8f       	std	Y+26, r25	; 0x1a
    3176:	ab 8f       	std	Y+27, r26	; 0x1b
    3178:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317a:	69 8d       	ldd	r22, Y+25	; 0x19
    317c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    317e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3180:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	4a ef       	ldi	r20, 0xFA	; 250
    3188:	54 e4       	ldi	r21, 0x44	; 68
    318a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	8d 8b       	std	Y+21, r24	; 0x15
    3194:	9e 8b       	std	Y+22, r25	; 0x16
    3196:	af 8b       	std	Y+23, r26	; 0x17
    3198:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    319a:	6d 89       	ldd	r22, Y+21	; 0x15
    319c:	7e 89       	ldd	r23, Y+22	; 0x16
    319e:	8f 89       	ldd	r24, Y+23	; 0x17
    31a0:	98 8d       	ldd	r25, Y+24	; 0x18
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	40 e8       	ldi	r20, 0x80	; 128
    31a8:	5f e3       	ldi	r21, 0x3F	; 63
    31aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ae:	88 23       	and	r24, r24
    31b0:	2c f4       	brge	.+10     	; 0x31bc <Stepper_Go+0xd7c>
		__ticks = 1;
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	9c 8b       	std	Y+20, r25	; 0x14
    31b8:	8b 8b       	std	Y+19, r24	; 0x13
    31ba:	3f c0       	rjmp	.+126    	; 0x323a <Stepper_Go+0xdfa>
	else if (__tmp > 65535)
    31bc:	6d 89       	ldd	r22, Y+21	; 0x15
    31be:	7e 89       	ldd	r23, Y+22	; 0x16
    31c0:	8f 89       	ldd	r24, Y+23	; 0x17
    31c2:	98 8d       	ldd	r25, Y+24	; 0x18
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	3f ef       	ldi	r19, 0xFF	; 255
    31c8:	4f e7       	ldi	r20, 0x7F	; 127
    31ca:	57 e4       	ldi	r21, 0x47	; 71
    31cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d0:	18 16       	cp	r1, r24
    31d2:	4c f5       	brge	.+82     	; 0x3226 <Stepper_Go+0xde6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d4:	69 8d       	ldd	r22, Y+25	; 0x19
    31d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e2       	ldi	r20, 0x20	; 32
    31e2:	51 e4       	ldi	r21, 0x41	; 65
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	bc 01       	movw	r22, r24
    31ee:	cd 01       	movw	r24, r26
    31f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	9c 8b       	std	Y+20, r25	; 0x14
    31fa:	8b 8b       	std	Y+19, r24	; 0x13
    31fc:	0f c0       	rjmp	.+30     	; 0x321c <Stepper_Go+0xddc>
    31fe:	88 ec       	ldi	r24, 0xC8	; 200
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	9a 8b       	std	Y+18, r25	; 0x12
    3204:	89 8b       	std	Y+17, r24	; 0x11
    3206:	89 89       	ldd	r24, Y+17	; 0x11
    3208:	9a 89       	ldd	r25, Y+18	; 0x12
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	f1 f7       	brne	.-4      	; 0x320a <Stepper_Go+0xdca>
    320e:	9a 8b       	std	Y+18, r25	; 0x12
    3210:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3212:	8b 89       	ldd	r24, Y+19	; 0x13
    3214:	9c 89       	ldd	r25, Y+20	; 0x14
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	9c 8b       	std	Y+20, r25	; 0x14
    321a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321c:	8b 89       	ldd	r24, Y+19	; 0x13
    321e:	9c 89       	ldd	r25, Y+20	; 0x14
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	69 f7       	brne	.-38     	; 0x31fe <Stepper_Go+0xdbe>
    3224:	14 c0       	rjmp	.+40     	; 0x324e <Stepper_Go+0xe0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3226:	6d 89       	ldd	r22, Y+21	; 0x15
    3228:	7e 89       	ldd	r23, Y+22	; 0x16
    322a:	8f 89       	ldd	r24, Y+23	; 0x17
    322c:	98 8d       	ldd	r25, Y+24	; 0x18
    322e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	9c 8b       	std	Y+20, r25	; 0x14
    3238:	8b 8b       	std	Y+19, r24	; 0x13
    323a:	8b 89       	ldd	r24, Y+19	; 0x13
    323c:	9c 89       	ldd	r25, Y+20	; 0x14
    323e:	98 8b       	std	Y+16, r25	; 0x10
    3240:	8f 87       	std	Y+15, r24	; 0x0f
    3242:	8f 85       	ldd	r24, Y+15	; 0x0f
    3244:	98 89       	ldd	r25, Y+16	; 0x10
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <Stepper_Go+0xe06>
    324a:	98 8b       	std	Y+16, r25	; 0x10
    324c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin0, PIN_HIGH);
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	60 e0       	ldi	r22, 0x00	; 0
    3252:	41 e0       	ldi	r20, 0x01	; 1
    3254:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin1, PIN_LOW);
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	61 e0       	ldi	r22, 0x01	; 1
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin2, PIN_LOW);
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	62 e0       	ldi	r22, 0x02	; 2
    3266:	40 e0       	ldi	r20, 0x00	; 0
    3268:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(PORTB_, pin3, PIN_HIGH);
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	63 e0       	ldi	r22, 0x03	; 3
    3270:	41 e0       	ldi	r20, 0x01	; 1
    3272:	0e 94 5f 09 	call	0x12be	; 0x12be <DIO_PIN_WRITE_LOGIC_M>
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	a0 ea       	ldi	r26, 0xA0	; 160
    327c:	b0 e4       	ldi	r27, 0x40	; 64
    327e:	8b 87       	std	Y+11, r24	; 0x0b
    3280:	9c 87       	std	Y+12, r25	; 0x0c
    3282:	ad 87       	std	Y+13, r26	; 0x0d
    3284:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3286:	6b 85       	ldd	r22, Y+11	; 0x0b
    3288:	7c 85       	ldd	r23, Y+12	; 0x0c
    328a:	8d 85       	ldd	r24, Y+13	; 0x0d
    328c:	9e 85       	ldd	r25, Y+14	; 0x0e
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	4a ef       	ldi	r20, 0xFA	; 250
    3294:	54 e4       	ldi	r21, 0x44	; 68
    3296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	8f 83       	std	Y+7, r24	; 0x07
    32a0:	98 87       	std	Y+8, r25	; 0x08
    32a2:	a9 87       	std	Y+9, r26	; 0x09
    32a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32a6:	6f 81       	ldd	r22, Y+7	; 0x07
    32a8:	78 85       	ldd	r23, Y+8	; 0x08
    32aa:	89 85       	ldd	r24, Y+9	; 0x09
    32ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e8       	ldi	r20, 0x80	; 128
    32b4:	5f e3       	ldi	r21, 0x3F	; 63
    32b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ba:	88 23       	and	r24, r24
    32bc:	2c f4       	brge	.+10     	; 0x32c8 <Stepper_Go+0xe88>
		__ticks = 1;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	9e 83       	std	Y+6, r25	; 0x06
    32c4:	8d 83       	std	Y+5, r24	; 0x05
    32c6:	3f c0       	rjmp	.+126    	; 0x3346 <Stepper_Go+0xf06>
	else if (__tmp > 65535)
    32c8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ca:	78 85       	ldd	r23, Y+8	; 0x08
    32cc:	89 85       	ldd	r24, Y+9	; 0x09
    32ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	3f ef       	ldi	r19, 0xFF	; 255
    32d4:	4f e7       	ldi	r20, 0x7F	; 127
    32d6:	57 e4       	ldi	r21, 0x47	; 71
    32d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32dc:	18 16       	cp	r1, r24
    32de:	4c f5       	brge	.+82     	; 0x3332 <Stepper_Go+0xef2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	40 e2       	ldi	r20, 0x20	; 32
    32ee:	51 e4       	ldi	r21, 0x41	; 65
    32f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	bc 01       	movw	r22, r24
    32fa:	cd 01       	movw	r24, r26
    32fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	9e 83       	std	Y+6, r25	; 0x06
    3306:	8d 83       	std	Y+5, r24	; 0x05
    3308:	0f c0       	rjmp	.+30     	; 0x3328 <Stepper_Go+0xee8>
    330a:	88 ec       	ldi	r24, 0xC8	; 200
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	9c 83       	std	Y+4, r25	; 0x04
    3310:	8b 83       	std	Y+3, r24	; 0x03
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	9c 81       	ldd	r25, Y+4	; 0x04
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <Stepper_Go+0xed6>
    331a:	9c 83       	std	Y+4, r25	; 0x04
    331c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331e:	8d 81       	ldd	r24, Y+5	; 0x05
    3320:	9e 81       	ldd	r25, Y+6	; 0x06
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	9e 83       	std	Y+6, r25	; 0x06
    3326:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3328:	8d 81       	ldd	r24, Y+5	; 0x05
    332a:	9e 81       	ldd	r25, Y+6	; 0x06
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	69 f7       	brne	.-38     	; 0x330a <Stepper_Go+0xeca>
    3330:	14 c0       	rjmp	.+40     	; 0x335a <Stepper_Go+0xf1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3332:	6f 81       	ldd	r22, Y+7	; 0x07
    3334:	78 85       	ldd	r23, Y+8	; 0x08
    3336:	89 85       	ldd	r24, Y+9	; 0x09
    3338:	9a 85       	ldd	r25, Y+10	; 0x0a
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9e 83       	std	Y+6, r25	; 0x06
    3344:	8d 83       	std	Y+5, r24	; 0x05
    3346:	8d 81       	ldd	r24, Y+5	; 0x05
    3348:	9e 81       	ldd	r25, Y+6	; 0x06
    334a:	9a 83       	std	Y+2, r25	; 0x02
    334c:	89 83       	std	Y+1, r24	; 0x01
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	9a 81       	ldd	r25, Y+2	; 0x02
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <Stepper_Go+0xf12>
    3356:	9a 83       	std	Y+2, r25	; 0x02
    3358:	89 83       	std	Y+1, r24	; 0x01


		break;

	}
}
    335a:	c3 56       	subi	r28, 0x63	; 99
    335c:	df 4f       	sbci	r29, 0xFF	; 255
    335e:	0f b6       	in	r0, 0x3f	; 63
    3360:	f8 94       	cli
    3362:	de bf       	out	0x3e, r29	; 62
    3364:	0f be       	out	0x3f, r0	; 63
    3366:	cd bf       	out	0x3d, r28	; 61
    3368:	cf 91       	pop	r28
    336a:	df 91       	pop	r29
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
    3370:	08 95       	ret

00003372 <__udivmodqi4>:
    3372:	99 1b       	sub	r25, r25
    3374:	79 e0       	ldi	r23, 0x09	; 9
    3376:	04 c0       	rjmp	.+8      	; 0x3380 <__udivmodqi4_ep>

00003378 <__udivmodqi4_loop>:
    3378:	99 1f       	adc	r25, r25
    337a:	96 17       	cp	r25, r22
    337c:	08 f0       	brcs	.+2      	; 0x3380 <__udivmodqi4_ep>
    337e:	96 1b       	sub	r25, r22

00003380 <__udivmodqi4_ep>:
    3380:	88 1f       	adc	r24, r24
    3382:	7a 95       	dec	r23
    3384:	c9 f7       	brne	.-14     	; 0x3378 <__udivmodqi4_loop>
    3386:	80 95       	com	r24
    3388:	08 95       	ret

0000338a <__prologue_saves__>:
    338a:	2f 92       	push	r2
    338c:	3f 92       	push	r3
    338e:	4f 92       	push	r4
    3390:	5f 92       	push	r5
    3392:	6f 92       	push	r6
    3394:	7f 92       	push	r7
    3396:	8f 92       	push	r8
    3398:	9f 92       	push	r9
    339a:	af 92       	push	r10
    339c:	bf 92       	push	r11
    339e:	cf 92       	push	r12
    33a0:	df 92       	push	r13
    33a2:	ef 92       	push	r14
    33a4:	ff 92       	push	r15
    33a6:	0f 93       	push	r16
    33a8:	1f 93       	push	r17
    33aa:	cf 93       	push	r28
    33ac:	df 93       	push	r29
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
    33b2:	ca 1b       	sub	r28, r26
    33b4:	db 0b       	sbc	r29, r27
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	09 94       	ijmp

000033c2 <__epilogue_restores__>:
    33c2:	2a 88       	ldd	r2, Y+18	; 0x12
    33c4:	39 88       	ldd	r3, Y+17	; 0x11
    33c6:	48 88       	ldd	r4, Y+16	; 0x10
    33c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    33ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    33cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    33ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    33d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    33d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    33d4:	b9 84       	ldd	r11, Y+9	; 0x09
    33d6:	c8 84       	ldd	r12, Y+8	; 0x08
    33d8:	df 80       	ldd	r13, Y+7	; 0x07
    33da:	ee 80       	ldd	r14, Y+6	; 0x06
    33dc:	fd 80       	ldd	r15, Y+5	; 0x05
    33de:	0c 81       	ldd	r16, Y+4	; 0x04
    33e0:	1b 81       	ldd	r17, Y+3	; 0x03
    33e2:	aa 81       	ldd	r26, Y+2	; 0x02
    33e4:	b9 81       	ldd	r27, Y+1	; 0x01
    33e6:	ce 0f       	add	r28, r30
    33e8:	d1 1d       	adc	r29, r1
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	f8 94       	cli
    33ee:	de bf       	out	0x3e, r29	; 62
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	cd bf       	out	0x3d, r28	; 61
    33f4:	ed 01       	movw	r28, r26
    33f6:	08 95       	ret

000033f8 <_exit>:
    33f8:	f8 94       	cli

000033fa <__stop_program>:
    33fa:	ff cf       	rjmp	.-2      	; 0x33fa <__stop_program>
