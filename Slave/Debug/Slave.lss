
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  00003f5c  00003ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800104  00800104  00004094  2**0
                  ALLOC
  3 .stab         00004d94  00000000  00000000  00004094  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d0c  00000000  00000000  00008e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ab34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ac74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ade4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ca2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000eab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_1>
       8:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 30       	cpi	r26, 0x0D	; 13
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 87 1c 	call	0x390e	; 0x390e <main>
      8a:	0c 94 ac 1f 	jmp	0x3f58	; 0x3f58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ee       	ldi	r26, 0xE9	; 233
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ee       	ldi	r24, 0xE9	; 233
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 85 1f 	jmp	0x3f0a	; 0x3f0a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MWTD_voidEnable>:
#include "WTD_interface .h"
#include "WTD_config.h"
#include "WTD_private.h"

void MWTD_voidEnable()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    /*Set The WDE bit to Enable*/
    SET_BIT(WDTCR,WDTCR_WDE) ;
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24

}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <MWTD_voidSleep>:

void MWTD_voidSleep(u8 Copy_u8TimerOut)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	0f 92       	push	r0
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8TimerOut <= 7)
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	88 30       	cpi	r24, 0x08	; 8
     b72:	78 f4       	brcc	.+30     	; 0xb92 <MWTD_voidSleep+0x30>
    {
        WDTCR &= WDTCR_PREMASK   ;
     b74:	a1 e4       	ldi	r26, 0x41	; 65
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	e1 e4       	ldi	r30, 0x41	; 65
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	88 7f       	andi	r24, 0xF8	; 248
     b80:	8c 93       	st	X, r24
        WDTCR |= Copy_u8TimerOut ;
     b82:	a1 e4       	ldi	r26, 0x41	; 65
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e1 e4       	ldi	r30, 0x41	; 65
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	90 81       	ld	r25, Z
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	89 2b       	or	r24, r25
     b90:	8c 93       	st	X, r24
    }
}
     b92:	0f 90       	pop	r0
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <MWTD_voidDisable>:

void MWTD_voidDisable()
{
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
    /* 1-Write 1 to WDE & WDTOE in same operation */
    WDTCR = (1<<WDTCR_WDE) | (1<<WDTCR_WDTOE) ;
     ba2:	e1 e4       	ldi	r30, 0x41	; 65
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	88 e1       	ldi	r24, 0x18	; 24
     ba8:	80 83       	st	Z, r24
    /* 2- within the next four cycles write 0 to WDE */
    WDTCR = 0x00 ;
     baa:	e1 e4       	ldi	r30, 0x41	; 65
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	10 82       	st	Z, r1

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <MUSART_voidInit>:
#include "UART_private.h"
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"

void MUSART_voidInit(void)
 {
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62

 	 u8 Local_u8UCSRCTemp = 0 ;
     bc0:	19 82       	std	Y+1, r1	; 0x01
    /* Enable Tx And Rx */
    SET_BIT(UCSRB,USCRB_RXEN) ;
     bc2:	aa e2       	ldi	r26, 0x2A	; 42
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	ea e2       	ldi	r30, 0x2A	; 42
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	80 61       	ori	r24, 0x10	; 16
     bce:	8c 93       	st	X, r24
    SET_BIT(UCSRB,USCRB_TXEN) ;
     bd0:	aa e2       	ldi	r26, 0x2A	; 42
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ea e2       	ldi	r30, 0x2A	; 42
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	88 60       	ori	r24, 0x08	; 8
     bdc:	8c 93       	st	X, r24

    /*Set character size */
    SET_BIT(Local_u8UCSRCTemp,UCSRC_UCSZ0) ;
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	82 60       	ori	r24, 0x02	; 2
     be2:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8UCSRCTemp,UCSRC_UCSZ1) ;
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	84 60       	ori	r24, 0x04	; 4
     be8:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(UCSRB , USCRB_UCSZ2)         ;
     bea:	aa e2       	ldi	r26, 0x2A	; 42
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	ea e2       	ldi	r30, 0x2A	; 42
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8b 7f       	andi	r24, 0xFB	; 251
     bf6:	8c 93       	st	X, r24

    /* 1 Stop Bit */
    CLEAR_BIT(Local_u8UCSRCTemp,UCSRC_USBS);
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	89 83       	std	Y+1, r24	; 0x01

    /* Parity Disable */
    CLEAR_BIT(Local_u8UCSRCTemp,UCSRC_UPM0);
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	8f 7e       	andi	r24, 0xEF	; 239
     c02:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(Local_u8UCSRCTemp,UCSRC_UPM1);
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	8f 7d       	andi	r24, 0xDF	; 223
     c08:	89 83       	std	Y+1, r24	; 0x01

    /*   */
    CLEAR_BIT(UCSRC,UCSRC_UMSEL) ;
     c0a:	a0 e4       	ldi	r26, 0x40	; 64
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e0 e4       	ldi	r30, 0x40	; 64
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	8f 7b       	andi	r24, 0xBF	; 191
     c16:	8c 93       	st	X, r24

    /* Select USCRC Register */
    SET_BIT(Local_u8UCSRCTemp,UCSRC_URSEL) ;
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	80 68       	ori	r24, 0x80	; 128
     c1c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data in register */
    UCSRC = Local_u8UCSRCTemp ;
     c1e:	e0 e4       	ldi	r30, 0x40	; 64
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	80 83       	st	Z, r24

    /* Set baudRate to be 1200 */
    UBRRL = 112 ;
     c26:	e9 e2       	ldi	r30, 0x29	; 41
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 e7       	ldi	r24, 0x70	; 112
     c2c:	80 83       	st	Z, r24
    CLEAR_BIT(UBRRH,UBRRH_URSEL) ;
     c2e:	a0 e4       	ldi	r26, 0x40	; 64
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e0 e4       	ldi	r30, 0x40	; 64
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8f 77       	andi	r24, 0x7F	; 127
     c3a:	8c 93       	st	X, r24
    UBRRH = 2 					;
     c3c:	e0 e4       	ldi	r30, 0x40	; 64
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	80 83       	st	Z, r24
}
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <MUSART_voidTransmitDataSync>:

void MUSART_voidTransmitDataSync ( u8 Copy_u8Data )
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	0f 92       	push	r0
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	89 83       	std	Y+1, r24	; 0x01
    /* Check if buffer is empty */
    while( GET_BIT(UCSRA,USCRA_UDRE) == 0 ) ;
     c58:	eb e2       	ldi	r30, 0x2B	; 43
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	82 95       	swap	r24
     c60:	86 95       	lsr	r24
     c62:	87 70       	andi	r24, 0x07	; 7
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	81 70       	andi	r24, 0x01	; 1
     c6a:	90 70       	andi	r25, 0x00	; 0
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	a1 f3       	breq	.-24     	; 0xc58 <MUSART_voidTransmitDataSync+0xc>
    /* Set data to UDR Register */
    UDR = Copy_u8Data ;
     c70:	ec e2       	ldi	r30, 0x2C	; 44
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	80 83       	st	Z, r24
    /* Polling on sending flag */
    while ( GET_BIT(UCSRA,USCRA_TXC) == 0) ;
     c78:	eb e2       	ldi	r30, 0x2B	; 43
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	82 95       	swap	r24
     c80:	86 95       	lsr	r24
     c82:	86 95       	lsr	r24
     c84:	83 70       	andi	r24, 0x03	; 3
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	81 70       	andi	r24, 0x01	; 1
     c8c:	90 70       	andi	r25, 0x00	; 0
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	99 f3       	breq	.-26     	; 0xc78 <MUSART_voidTransmitDataSync+0x2c>
}
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <MUSART_voidReceiveDataSync>:

void  MUSART_voidReceiveDataSync(u8 *Copy_pu8ReceivedData)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <MUSART_voidReceiveDataSync+0x6>
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
    /* Polling till receiving data */
    while ( GET_BIT(UCSRA,USCRA_RXC) == 0) ;
     ca8:	eb e2       	ldi	r30, 0x2B	; 43
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	88 23       	and	r24, r24
     cb0:	dc f7       	brge	.-10     	; 0xca8 <MUSART_voidReceiveDataSync+0xe>
    /* Putting data in pointer */
    *Copy_pu8ReceivedData = UDR ;
     cb2:	ec e2       	ldi	r30, 0x2C	; 44
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	e9 81       	ldd	r30, Y+1	; 0x01
     cba:	fa 81       	ldd	r31, Y+2	; 0x02
     cbc:	80 83       	st	Z, r24
}
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <MUSART_voidSendNumber>:


void MUSART_voidSendNumber( u32 Copy_u32Number)
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	2d 97       	sbiw	r28, 0x0d	; 13
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	9d 87       	std	Y+13, r25	; 0x0d
     cde:	8c 87       	std	Y+12, r24	; 0x0c
	u16 Local_u16Temp=Copy_u32Number ;
     ce0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ce2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ce4:	9d 83       	std	Y+5, r25	; 0x05
     ce6:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8CharArr[6]={} ;
     ce8:	86 e0       	ldi	r24, 0x06	; 6
     cea:	fe 01       	movw	r30, r28
     cec:	36 96       	adiw	r30, 0x06	; 6
     cee:	df 01       	movw	r26, r30
     cf0:	98 2f       	mov	r25, r24
     cf2:	1d 92       	st	X+, r1
     cf4:	9a 95       	dec	r25
     cf6:	e9 f7       	brne	.-6      	; 0xcf2 <MUSART_voidSendNumber+0x2a>
	s8 Local_u8NumOfDigits = -1 ;
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ArryCounter = 0 ;
     cfc:	1a 82       	std	Y+2, r1	; 0x02
     cfe:	38 c0       	rjmp	.+112    	; 0xd70 <MUSART_voidSendNumber+0xa8>
	s8 Local_u8LoopCounter ;
	while(Copy_u32Number != 0)
	{
		Local_u16Temp =Copy_u32Number  ;
     d00:	8c 85       	ldd	r24, Y+12	; 0x0c
     d02:	9d 85       	ldd	r25, Y+13	; 0x0d
     d04:	9d 83       	std	Y+5, r25	; 0x05
     d06:	8c 83       	std	Y+4, r24	; 0x04
		Local_u16Temp %= 10 ;
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	9d 81       	ldd	r25, Y+5	; 0x05
     d0c:	2a e0       	ldi	r18, 0x0A	; 10
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	b9 01       	movw	r22, r18
     d12:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__udivmodhi4>
     d16:	9d 83       	std	Y+5, r25	; 0x05
     d18:	8c 83       	std	Y+4, r24	; 0x04

		if(Local_u16Temp==0)
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	59 f4       	brne	.+22     	; 0xd38 <MUSART_voidSendNumber+0x70>
		{
			Local_u8CharArr[Local_u8ArryCounter] = 48 ;
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	ce 01       	movw	r24, r28
     d2a:	06 96       	adiw	r24, 0x06	; 6
     d2c:	fc 01       	movw	r30, r24
     d2e:	e2 0f       	add	r30, r18
     d30:	f3 1f       	adc	r31, r19
     d32:	80 e3       	ldi	r24, 0x30	; 48
     d34:	80 83       	st	Z, r24
     d36:	0c c0       	rjmp	.+24     	; 0xd50 <MUSART_voidSendNumber+0x88>
		}
		else
		{
			Local_u8CharArr[Local_u8ArryCounter] = Local_u16Temp+48 ;
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	8c 81       	ldd	r24, Y+4	; 0x04
     d40:	48 2f       	mov	r20, r24
     d42:	40 5d       	subi	r20, 0xD0	; 208
     d44:	ce 01       	movw	r24, r28
     d46:	06 96       	adiw	r24, 0x06	; 6
     d48:	fc 01       	movw	r30, r24
     d4a:	e2 0f       	add	r30, r18
     d4c:	f3 1f       	adc	r31, r19
     d4e:	40 83       	st	Z, r20
		}
		Local_u8NumOfDigits++ ;
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	8f 5f       	subi	r24, 0xFF	; 255
     d54:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8ArryCounter++ ;
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u32Number /= 10 ;
     d5c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d5e:	9d 85       	ldd	r25, Y+13	; 0x0d
     d60:	2a e0       	ldi	r18, 0x0A	; 10
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	b9 01       	movw	r22, r18
     d66:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__udivmodhi4>
     d6a:	cb 01       	movw	r24, r22
     d6c:	9d 87       	std	Y+13, r25	; 0x0d
     d6e:	8c 87       	std	Y+12, r24	; 0x0c
	u16 Local_u16Temp=Copy_u32Number ;
	u8 Local_u8CharArr[6]={} ;
	s8 Local_u8NumOfDigits = -1 ;
	u8 Local_u8ArryCounter = 0 ;
	s8 Local_u8LoopCounter ;
	while(Copy_u32Number != 0)
     d70:	8c 85       	ldd	r24, Y+12	; 0x0c
     d72:	9d 85       	ldd	r25, Y+13	; 0x0d
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	21 f6       	brne	.-120    	; 0xd00 <MUSART_voidSendNumber+0x38>
		}
		Local_u8NumOfDigits++ ;
		Local_u8ArryCounter++ ;
		Copy_u32Number /= 10 ;
	}
	for(Local_u8LoopCounter=Local_u8NumOfDigits ; Local_u8LoopCounter>=0 ; Local_u8LoopCounter--)
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	10 c0       	rjmp	.+32     	; 0xd9e <MUSART_voidSendNumber+0xd6>
	{
		MUSART_voidTransmitDataSync(Local_u8CharArr[Local_u8LoopCounter]) ;
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	33 27       	eor	r19, r19
     d84:	27 fd       	sbrc	r18, 7
     d86:	30 95       	com	r19
     d88:	ce 01       	movw	r24, r28
     d8a:	06 96       	adiw	r24, 0x06	; 6
     d8c:	fc 01       	movw	r30, r24
     d8e:	e2 0f       	add	r30, r18
     d90:	f3 1f       	adc	r31, r19
     d92:	80 81       	ld	r24, Z
     d94:	0e 94 26 06 	call	0xc4c	; 0xc4c <MUSART_voidTransmitDataSync>
		}
		Local_u8NumOfDigits++ ;
		Local_u8ArryCounter++ ;
		Copy_u32Number /= 10 ;
	}
	for(Local_u8LoopCounter=Local_u8NumOfDigits ; Local_u8LoopCounter>=0 ; Local_u8LoopCounter--)
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	81 50       	subi	r24, 0x01	; 1
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	88 23       	and	r24, r24
     da2:	6c f7       	brge	.-38     	; 0xd7e <MUSART_voidSendNumber+0xb6>
	{
		MUSART_voidTransmitDataSync(Local_u8CharArr[Local_u8LoopCounter]) ;
	}

}
     da4:	2d 96       	adiw	r28, 0x0d	; 13
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <MUSART_voidSendString>:

void MUSART_voidSendString(u8 *Pointer_u8String)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	00 d0       	rcall	.+0      	; 0xdbc <MUSART_voidSendString+0x6>
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9b 83       	std	Y+3, r25	; 0x03
     dc4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ArryCounter=0 ;
     dc6:	19 82       	std	Y+1, r1	; 0x01
     dc8:	0e c0       	rjmp	.+28     	; 0xde6 <MUSART_voidSendString+0x30>

	while(Pointer_u8String[Local_u8ArryCounter]!='\0')
	{
		MUSART_voidTransmitDataSync(Pointer_u8String[Local_u8ArryCounter]) ;
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	9b 81       	ldd	r25, Y+3	; 0x03
     dd4:	fc 01       	movw	r30, r24
     dd6:	e2 0f       	add	r30, r18
     dd8:	f3 1f       	adc	r31, r19
     dda:	80 81       	ld	r24, Z
     ddc:	0e 94 26 06 	call	0xc4c	; 0xc4c <MUSART_voidTransmitDataSync>
		Local_u8ArryCounter++ ;
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	8f 5f       	subi	r24, 0xFF	; 255
     de4:	89 83       	std	Y+1, r24	; 0x01

void MUSART_voidSendString(u8 *Pointer_u8String)
{
	u8 Local_u8ArryCounter=0 ;

	while(Pointer_u8String[Local_u8ArryCounter]!='\0')
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	9b 81       	ldd	r25, Y+3	; 0x03
     df0:	fc 01       	movw	r30, r24
     df2:	e2 0f       	add	r30, r18
     df4:	f3 1f       	adc	r31, r19
     df6:	80 81       	ld	r24, Z
     df8:	88 23       	and	r24, r24
     dfa:	39 f7       	brne	.-50     	; 0xdca <MUSART_voidSendString+0x14>
	{
		MUSART_voidTransmitDataSync(Pointer_u8String[Local_u8ArryCounter]) ;
		Local_u8ArryCounter++ ;
	}
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <MTWI_voidMasterInit>:
#include "TWI_interface.h"
#include "TWI_private.h"
#include "TWI_config.h"

void MTWI_voidMasterInit(u8 Copy_u8SlaveAddress)
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	0f 92       	push	r0
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge*/
	SET_BIT(TWCR, TWCR_TWEA);
     e14:	a6 e5       	ldi	r26, 0x56	; 86
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e6 e5       	ldi	r30, 0x56	; 86
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 64       	ori	r24, 0x40	; 64
     e20:	8c 93       	st	X, r24

	/*Set SCL Frequency = 100KHz, CPU Clk = 8MHz, TWPS = 0*/
	TWBR = 32;
     e22:	e0 e2       	ldi	r30, 0x20	; 32
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 e2       	ldi	r24, 0x20	; 32
     e28:	80 83       	st	Z, r24
	/*Clear The Prescaler Bit (TWPS0, TWPS1)*/
	CLEAR_BIT(TWSR, TWSR_TWPS0);
     e2a:	a1 e2       	ldi	r26, 0x21	; 33
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e1 e2       	ldi	r30, 0x21	; 33
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8e 7f       	andi	r24, 0xFE	; 254
     e36:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR, TWSR_TWPS1);
     e38:	a1 e2       	ldi	r26, 0x21	; 33
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e1 e2       	ldi	r30, 0x21	; 33
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8d 7f       	andi	r24, 0xFD	; 253
     e44:	8c 93       	st	X, r24
	/*Check if the master node will be addressed or not*/
	if(Copy_u8SlaveAddress == 0)
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 23       	and	r24, r24
     e4a:	29 f0       	breq	.+10     	; 0xe56 <MTWI_voidMasterInit+0x4e>
	{
		/*Do Nothing*/
	}
	else
	{
		TWAR = Copy_u8SlaveAddress << 1;
     e4c:	e2 e2       	ldi	r30, 0x22	; 34
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	88 0f       	add	r24, r24
     e54:	80 83       	st	Z, r24
	}
	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
     e56:	a6 e5       	ldi	r26, 0x56	; 86
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e6 e5       	ldi	r30, 0x56	; 86
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	84 60       	ori	r24, 0x04	; 4
     e62:	8c 93       	st	X, r24
}
     e64:	0f 90       	pop	r0
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <MTWI_voidSlaveInit>:

void MTWI_voidSlaveInit(u8 Copy_u8SlaveAddress)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	0f 92       	push	r0
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Acknowledge*/
	SET_BIT(TWCR, TWCR_TWEA);
     e78:	a6 e5       	ldi	r26, 0x56	; 86
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e6 e5       	ldi	r30, 0x56	; 86
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 64       	ori	r24, 0x40	; 64
     e84:	8c 93       	st	X, r24

	/*Set The Slave Address*/
	TWAR = Copy_u8SlaveAddress << 1;
     e86:	e2 e2       	ldi	r30, 0x22	; 34
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	88 0f       	add	r24, r24
     e8e:	80 83       	st	Z, r24
	
	/*Enable TWI*/
	SET_BIT(TWCR, TWCR_TWEN);
     e90:	a6 e5       	ldi	r26, 0x56	; 86
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e6 e5       	ldi	r30, 0x56	; 86
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	84 60       	ori	r24, 0x04	; 4
     e9c:	8c 93       	st	X, r24
}
     e9e:	0f 90       	pop	r0
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <MTWI_ErrorStatusSendStartCondition>:

TWI_ErrorStatus_t MTWI_ErrorStatusSendStartCondition(void)
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     eb0:	19 82       	std	Y+1, r1	; 0x01
	/*Set The Start Condition Bit*/
	SET_BIT(TWCR, TWCR_TWSTA);
     eb2:	a6 e5       	ldi	r26, 0x56	; 86
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e6 e5       	ldi	r30, 0x56	; 86
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 62       	ori	r24, 0x20	; 32
     ebe:	8c 93       	st	X, r24
	/*Clear The Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     ec0:	a6 e5       	ldi	r26, 0x56	; 86
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e6 e5       	ldi	r30, 0x56	; 86
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	8c 93       	st	X, r24
	/*Polling (Busy Wait) until the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0);
     ece:	e6 e5       	ldi	r30, 0x56	; 86
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 23       	and	r24, r24
     ed6:	dc f7       	brge	.-10     	; 0xece <MTWI_ErrorStatusSendStartCondition+0x28>
	/*Check if the Start Condition is Transmitted*/
	if((TWSR & STATUS_CODE_MASK) != START_ACK)
     ed8:	e1 e2       	ldi	r30, 0x21	; 33
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	88 7f       	andi	r24, 0xF8	; 248
     ee4:	90 70       	andi	r25, 0x00	; 0
     ee6:	88 30       	cpi	r24, 0x08	; 8
     ee8:	91 05       	cpc	r25, r1
     eea:	11 f0       	breq	.+4      	; 0xef0 <MTWI_ErrorStatusSendStartCondition+0x4a>
	{
		Local_ErrorStatus = StartConditionError;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <MTWI_ErrorStatusSendRepeatedStartCondition>:

TWI_ErrorStatus_t MTWI_ErrorStatusSendRepeatedStartCondition(void)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	0f 92       	push	r0
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*Set The Start Condition Bit*/
	SET_BIT(TWCR, TWCR_TWSTA);
     f06:	a6 e5       	ldi	r26, 0x56	; 86
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e6 e5       	ldi	r30, 0x56	; 86
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 62       	ori	r24, 0x20	; 32
     f12:	8c 93       	st	X, r24
	/*Clear The Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     f14:	a6 e5       	ldi	r26, 0x56	; 86
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e6 e5       	ldi	r30, 0x56	; 86
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	8c 93       	st	X, r24
	/*Polling (Busy Wait) until the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0);
     f22:	e6 e5       	ldi	r30, 0x56	; 86
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	88 23       	and	r24, r24
     f2a:	dc f7       	brge	.-10     	; 0xf22 <MTWI_ErrorStatusSendRepeatedStartCondition+0x28>
	/*Check if the Start Condition is Transmitted*/
	if((TWSR & STATUS_CODE_MASK) != REP_START_ACK)
     f2c:	e1 e2       	ldi	r30, 0x21	; 33
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	88 7f       	andi	r24, 0xF8	; 248
     f38:	90 70       	andi	r25, 0x00	; 0
     f3a:	80 31       	cpi	r24, 0x10	; 16
     f3c:	91 05       	cpc	r25, r1
     f3e:	11 f0       	breq	.+4      	; 0xf44 <MTWI_ErrorStatusSendRepeatedStartCondition+0x4a>
	{
		Local_ErrorStatus = RepeatedStartConditionError;
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     f44:	89 81       	ldd	r24, Y+1	; 0x01
}
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <MTWI_ErrorStatusSendSlaveAddressWithWrite>:

TWI_ErrorStatus_t MTWI_ErrorStatusSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <MTWI_ErrorStatusSendSlaveAddressWithWrite+0x6>
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     f5a:	19 82       	std	Y+1, r1	; 0x01
	/*Load The Slave Address To The TWDR Register*/
	TWDR = Copy_u8SlaveAddress << 1;
     f5c:	e3 e2       	ldi	r30, 0x23	; 35
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 0f       	add	r24, r24
     f64:	80 83       	st	Z, r24
	/*Clear The Bit 0 For The Write Request*/
	CLEAR_BIT(TWDR, TWDR_TWD0);
     f66:	a3 e2       	ldi	r26, 0x23	; 35
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e3 e2       	ldi	r30, 0x23	; 35
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8e 7f       	andi	r24, 0xFE	; 254
     f72:	8c 93       	st	X, r24
	/*Clear The Start Condition Bit*/
	CLEAR_BIT(TWCR, TWCR_TWSTA);
     f74:	a6 e5       	ldi	r26, 0x56	; 86
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e6 e5       	ldi	r30, 0x56	; 86
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8f 7d       	andi	r24, 0xDF	; 223
     f80:	8c 93       	st	X, r24
	/*Clear The Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     f82:	a6 e5       	ldi	r26, 0x56	; 86
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e6 e5       	ldi	r30, 0x56	; 86
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	80 68       	ori	r24, 0x80	; 128
     f8e:	8c 93       	st	X, r24
	/*Polling (Busy Wait) until the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0);
     f90:	e6 e5       	ldi	r30, 0x56	; 86
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	88 23       	and	r24, r24
     f98:	dc f7       	brge	.-10     	; 0xf90 <MTWI_ErrorStatusSendSlaveAddressWithWrite+0x42>
	/*Check if the Start Condition is Transmitted*/
	if((TWSR & STATUS_CODE_MASK) != SLAVE_ADD_AND_WR_ACK)
     f9a:	e1 e2       	ldi	r30, 0x21	; 33
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	88 7f       	andi	r24, 0xF8	; 248
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	88 31       	cpi	r24, 0x18	; 24
     faa:	91 05       	cpc	r25, r1
     fac:	11 f0       	breq	.+4      	; 0xfb2 <MTWI_ErrorStatusSendSlaveAddressWithWrite+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithWriteError;
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <MTWI_ErrorStatusSendSlaveAddressWithRead>:



TWI_ErrorStatus_t MTWI_ErrorStatusSendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <MTWI_ErrorStatusSendSlaveAddressWithRead+0x6>
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
     fca:	19 82       	std	Y+1, r1	; 0x01
	/*Load The Slave Address To The TWDR Register*/
	TWDR = Copy_u8SlaveAddress << 1;
     fcc:	e3 e2       	ldi	r30, 0x23	; 35
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	88 0f       	add	r24, r24
     fd4:	80 83       	st	Z, r24
	/*Set The Bit 0 For The Read Request*/
	SET_BIT(TWDR, TWDR_TWD0);
     fd6:	a3 e2       	ldi	r26, 0x23	; 35
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e3 e2       	ldi	r30, 0x23	; 35
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	81 60       	ori	r24, 0x01	; 1
     fe2:	8c 93       	st	X, r24
	/*Clear The Start Condition Bit*/
	CLEAR_BIT(TWCR, TWCR_TWSTA);
     fe4:	a6 e5       	ldi	r26, 0x56	; 86
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e6 e5       	ldi	r30, 0x56	; 86
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8f 7d       	andi	r24, 0xDF	; 223
     ff0:	8c 93       	st	X, r24
	/*Clear The Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
     ff2:	a6 e5       	ldi	r26, 0x56	; 86
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e6 e5       	ldi	r30, 0x56	; 86
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 68       	ori	r24, 0x80	; 128
     ffe:	8c 93       	st	X, r24
	/*Polling (Busy Wait) until the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0);
    1000:	e6 e5       	ldi	r30, 0x56	; 86
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	88 23       	and	r24, r24
    1008:	dc f7       	brge	.-10     	; 0x1000 <MTWI_ErrorStatusSendSlaveAddressWithRead+0x42>
	/*Check if the Start Condition is Transmitted*/
	if((TWSR & STATUS_CODE_MASK) != SLAVE_ADD_AND_RD_ACK)
    100a:	e1 e2       	ldi	r30, 0x21	; 33
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	88 7f       	andi	r24, 0xF8	; 248
    1016:	90 70       	andi	r25, 0x00	; 0
    1018:	80 34       	cpi	r24, 0x40	; 64
    101a:	91 05       	cpc	r25, r1
    101c:	11 f0       	breq	.+4      	; 0x1022 <MTWI_ErrorStatusSendSlaveAddressWithRead+0x64>
	{
		Local_ErrorStatus = SlaveAddressWithReadError;
    101e:	84 e0       	ldi	r24, 0x04	; 4
    1020:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <MTWI_ErrorStatusMasterWriteDataByte>:

TWI_ErrorStatus_t MTWI_ErrorStatusMasterWriteDataByte(u8 Copy_u8Data)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <MTWI_ErrorStatusMasterWriteDataByte+0x6>
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    103a:	19 82       	std	Y+1, r1	; 0x01
	/*Load The Data Into The TWDR Register*/
	TWDR = Copy_u8Data;
    103c:	e3 e2       	ldi	r30, 0x23	; 35
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	80 83       	st	Z, r24
	/*Clear The Flag*/
	SET_BIT(TWCR, TWCR_TWINT);
    1044:	a6 e5       	ldi	r26, 0x56	; 86
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e6 e5       	ldi	r30, 0x56	; 86
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 68       	ori	r24, 0x80	; 128
    1050:	8c 93       	st	X, r24
	/*Polling (Busy Wait) until the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0);
    1052:	e6 e5       	ldi	r30, 0x56	; 86
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 23       	and	r24, r24
    105a:	dc f7       	brge	.-10     	; 0x1052 <MTWI_ErrorStatusMasterWriteDataByte+0x24>
	/*Check if the Start Condition is Transmitted*/
	if((TWSR & STATUS_CODE_MASK) != MSTR_WR_BYTE_ACK)
    105c:	e1 e2       	ldi	r30, 0x21	; 33
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	88 7f       	andi	r24, 0xF8	; 248
    1068:	90 70       	andi	r25, 0x00	; 0
    106a:	88 32       	cpi	r24, 0x28	; 40
    106c:	91 05       	cpc	r25, r1
    106e:	11 f0       	breq	.+4      	; 0x1074 <MTWI_ErrorStatusMasterWriteDataByte+0x46>
	{
		Local_ErrorStatus = MasterWriteByteError;
    1070:	85 e0       	ldi	r24, 0x05	; 5
    1072:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorStatus;
    1074:	89 81       	ldd	r24, Y+1	; 0x01
}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <MTWI_ErrorStatusMasterReadDataByte>:

TWI_ErrorStatus_t MTWI_ErrorStatusMasterReadDataByte(u8 * Copy_pu8ReceivedData)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <MTWI_ErrorStatusMasterReadDataByte+0x6>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	9b 83       	std	Y+3, r25	; 0x03
    108e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorStatus_t Local_ErrorStatus = NoError;
    1090:	19 82       	std	Y+1, r1	; 0x01
	/*Clear The Flag, To Make The Slave Send Its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    1092:	a6 e5       	ldi	r26, 0x56	; 86
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e6 e5       	ldi	r30, 0x56	; 86
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	80 68       	ori	r24, 0x80	; 128
    109e:	8c 93       	st	X, r24
	/*Polling (Busy Wait) until the flag is raised again*/
	while(GET_BIT(TWCR, TWCR_TWINT) == 0);
    10a0:	e6 e5       	ldi	r30, 0x56	; 86
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	88 23       	and	r24, r24
    10a8:	dc f7       	brge	.-10     	; 0x10a0 <MTWI_ErrorStatusMasterReadDataByte+0x20>
	/*Check if the Start Condition is Transmitted*/
	if((TWSR & STATUS_CODE_MASK) != MSTR_RD_BYTE_WITH_ACK)
    10aa:	e1 e2       	ldi	r30, 0x21	; 33
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	88 7f       	andi	r24, 0xF8	; 248
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	80 35       	cpi	r24, 0x50	; 80
    10ba:	91 05       	cpc	r25, r1
    10bc:	19 f0       	breq	.+6      	; 0x10c4 <MTWI_ErrorStatusMasterReadDataByte+0x44>
	{
		Local_ErrorStatus = MasterReadByteError;
    10be:	86 e0       	ldi	r24, 0x06	; 6
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <MTWI_ErrorStatusMasterReadDataByte+0x50>
	}
	else
	{
		/*Get The Received Data*/
		*Copy_pu8ReceivedData = TWDR;
    10c4:	e3 e2       	ldi	r30, 0x23	; 35
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	ea 81       	ldd	r30, Y+2	; 0x02
    10cc:	fb 81       	ldd	r31, Y+3	; 0x03
    10ce:	80 83       	st	Z, r24
	}
	return Local_ErrorStatus;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <MTWI_voidSendStopCondition>:


void MTWI_voidSendStopCondition(void)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
	/*Set The STOP CONDITION Bit*/
	SET_BIT(TWCR, TWCR_TWSTO);
    10e6:	a6 e5       	ldi	r26, 0x56	; 86
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e6 e5       	ldi	r30, 0x56	; 86
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 61       	ori	r24, 0x10	; 16
    10f2:	8c 93       	st	X, r24
	/*Clear The Flag, To Make The Slave Send Its Data*/
	SET_BIT(TWCR, TWCR_TWINT);
    10f4:	a6 e5       	ldi	r26, 0x56	; 86
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e6 e5       	ldi	r30, 0x56	; 86
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	80 68       	ori	r24, 0x80	; 128
    1100:	8c 93       	st	X, r24
}
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <MTIMERS_voidTimer0Init>:
#include "TIM_interface.h"
#include "TIM_private.h"
#include "TIM_config.h"

void MTIMERS_voidTimer0Init(void)			// PreBuild
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
			CLEAR_BIT(TCCR0, TCCR0_WGM01);
		#elif MODE == PHASECORRECT
			SET_BIT(TCCR0  , TCCR0_WGM00);
			CLEAR_BIT(TCCR0, TCCR0_WGM01);
		#elif MODE == FASTPWM
			SET_BIT(TCCR0  , TCCR0_WGM00);
    1110:	a3 e5       	ldi	r26, 0x53	; 83
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e3 e5       	ldi	r30, 0x53	; 83
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	80 64       	ori	r24, 0x40	; 64
    111c:	8c 93       	st	X, r24
			SET_BIT(TCCR0  , TCCR0_WGM01);
    111e:	a3 e5       	ldi	r26, 0x53	; 83
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e3 e5       	ldi	r30, 0x53	; 83
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	88 60       	ori	r24, 0x08	; 8
    112a:	8c 93       	st	X, r24
		#endif
		/*Over Flow Interrupt */
		#if OVERFLOW_INTERRUPT == ENABLE
			SET_BIT(TIMSK, TIMSK_TOIE0);
    112c:	a9 e5       	ldi	r26, 0x59	; 89
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e9 e5       	ldi	r30, 0x59	; 89
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	81 60       	ori	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
		#elif OVERFLOW_INTERRUPT == DSIABLE
			CLEAR_BIT(TIMSK, TIMSK_TOIE0);
		#endif
		/*PresScaler Settings*/
		TCCR0 &= TIM_PRESCALER_MASK ;
    113a:	a3 e5       	ldi	r26, 0x53	; 83
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 e5       	ldi	r30, 0x53	; 83
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	88 7f       	andi	r24, 0xF8	; 248
    1146:	8c 93       	st	X, r24
		#if PRESCALER == 0
		TCCR0 |= 0b1 ;
		#elif PRESCALER == 8
		TCCR0 |= 0b10 ;
    1148:	a3 e5       	ldi	r26, 0x53	; 83
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e3 e5       	ldi	r30, 0x53	; 83
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	82 60       	ori	r24, 0x02	; 2
    1154:	8c 93       	st	X, r24
		/* Setting of Clear / set flags */
		#if COMPARE_OUTPUT == STCC
		CLEAR_BIT(TCCR0,TCCR0_COM00);
		SET_BIT	 (TCCR0,TCCR0_COM01);
		#elif COMPARE_OUTPUT == CTSC
		SET_BIT(TCCR0,TCCR0_COM00);
    1156:	a3 e5       	ldi	r26, 0x53	; 83
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e3 e5       	ldi	r30, 0x53	; 83
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	80 61       	ori	r24, 0x10	; 16
    1162:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	80 62       	ori	r24, 0x20	; 32
    1170:	8c 93       	st	X, r24
		#endif
	#endif
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <MTIMERS_voidTimer1Init>:

void MTIMERS_voidTimer1Init()    				//postBuild
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	/* SET MODE 14 => FAST PWM */
	CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    1180:	af e4       	ldi	r26, 0x4F	; 79
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	ef e4       	ldi	r30, 0x4F	; 79
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8e 7f       	andi	r24, 0xFE	; 254
    118c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A  ,TCCR1A_WGM11);
    118e:	af e4       	ldi	r26, 0x4F	; 79
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ef e4       	ldi	r30, 0x4F	; 79
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	82 60       	ori	r24, 0x02	; 2
    119a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B  ,TCCR1B_WGM12);
    119c:	ae e4       	ldi	r26, 0x4E	; 78
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ee e4       	ldi	r30, 0x4E	; 78
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	88 60       	ori	r24, 0x08	; 8
    11a8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B  ,TCCR1B_WGM13);
    11aa:	ae e4       	ldi	r26, 0x4E	; 78
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	ee e4       	ldi	r30, 0x4E	; 78
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	80 61       	ori	r24, 0x10	; 16
    11b6:	8c 93       	st	X, r24
	/* SET ( SET ON TOP CLEAR ON COMPARE) mode */
	CLEAR_BIT(TCCR1A , TCCR1A_COM1A0);
    11b8:	af e4       	ldi	r26, 0x4F	; 79
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ef e4       	ldi	r30, 0x4F	; 79
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7b       	andi	r24, 0xBF	; 191
    11c4:	8c 93       	st	X, r24
	SET_BIT  (TCCR1A , TCCR1A_COM1A1);
    11c6:	af e4       	ldi	r26, 0x4F	; 79
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ef e4       	ldi	r30, 0x4F	; 79
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 68       	ori	r24, 0x80	; 128
    11d2:	8c 93       	st	X, r24
	/*               SET PreScaler             */
	CLEAR_BIT(TCCR1B,TCCR1B_CS10) ;
    11d4:	ae e4       	ldi	r26, 0x4E	; 78
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ee e4       	ldi	r30, 0x4E	; 78
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	8c 93       	st	X, r24
	SET_BIT  (TCCR1B,TCCR1B_CS11) ;
    11e2:	ae e4       	ldi	r26, 0x4E	; 78
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ee e4       	ldi	r30, 0x4E	; 78
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	82 60       	ori	r24, 0x02	; 2
    11ee:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,TCCR1B_CS12) ;
    11f0:	ae e4       	ldi	r26, 0x4E	; 78
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ee e4       	ldi	r30, 0x4E	; 78
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8b 7f       	andi	r24, 0xFB	; 251
    11fc:	8c 93       	st	X, r24
}
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <MTIMERS_voidTimer2Init>:

void MTIMERS_voidTimer2Init()    				//PreBuild
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
			CLEAR_BIT(TCCR2,TCCR2_WGM21) ;
		#elif MODE2 ==	CTC
			CLEAR_BIT(TCCR2,TCCR2_WGM20) ;
			SET_BIT(TCCR2,TCCR2_WGM21) ;
		#elif MODE2 ==	FASTPWM
			SET_BIT(TCCR2,TCCR2_WGM20) ;
    120c:	a5 e4       	ldi	r26, 0x45	; 69
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e5 e4       	ldi	r30, 0x45	; 69
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	88 60       	ori	r24, 0x08	; 8
    1218:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_WGM21) ;
    121a:	a5 e4       	ldi	r26, 0x45	; 69
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e4       	ldi	r30, 0x45	; 69
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	80 64       	ori	r24, 0x40	; 64
    1226:	8c 93       	st	X, r24
		/* Setting Compare Output Mode */
		#if COMPARE_OUTPUT2 == STCC
			SET_BIT(TCCR2,TCCR2_COM21);
			CLEAR_BIT(TCCR2,TCCR20)  ;
		#elif COMPARE_OUTPUT2 == CTSC
			SET_BIT(TCCR2,TCCR2_COM21)  ;
    1228:	a5 e4       	ldi	r26, 0x45	; 69
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e4       	ldi	r30, 0x45	; 69
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	80 62       	ori	r24, 0x20	; 32
    1234:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_COM20)  ;
    1236:	a5 e4       	ldi	r26, 0x45	; 69
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e5 e4       	ldi	r30, 0x45	; 69
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	80 61       	ori	r24, 0x10	; 16
    1242:	8c 93       	st	X, r24
		#if PRESCALER2 == 0
			CLEAR_BIT(TCCR2,TCCR2_CS20) ;
			CLEAR_BIT(TCCR2,TCCR2_CS21) ;
			SET_BIT(TCCR2,TCCR2_CS22)   ;
		#elif PRESCALER2 == 8
			CLEAR_BIT(TCCR2,TCCR2_CS20) ;
    1244:	a5 e4       	ldi	r26, 0x45	; 69
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e5 e4       	ldi	r30, 0x45	; 69
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8e 7f       	andi	r24, 0xFE	; 254
    1250:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_CS21)   ;
    1252:	a5 e4       	ldi	r26, 0x45	; 69
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e4       	ldi	r30, 0x45	; 69
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	82 60       	ori	r24, 0x02	; 2
    125e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR2,TCCR2_CS22) ;
    1260:	a5 e4       	ldi	r26, 0x45	; 69
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e5 e4       	ldi	r30, 0x45	; 69
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	8b 7f       	andi	r24, 0xFB	; 251
    126c:	8c 93       	st	X, r24
			SET_BIT(TCCR2,TCCR2_CS21)   ;
			SET_BIT(TCCR2,TCCR2_CS22)   ;
		#endif
	#endif

}
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <MTIMERS_voidTimer0SetPreloadValue>:


void MTIMERS_voidTimer0SetPreloadValue(u8 Copy_u8PreloadValue)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	0f 92       	push	r0
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Preload Value In The Timer0 Register*/
	TCNT0 = Copy_u8PreloadValue;
    1280:	e2 e5       	ldi	r30, 0x52	; 82
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	80 83       	st	Z, r24
}
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <MTIMERS_voidTimer2SetPreloadValue>:

void MTIMERS_voidTimer2SetPreloadValue(u8 Copy_u8PreloadValue)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Preload Value In The Timer0 Register*/
	TCNT2 = Copy_u8PreloadValue;
    129c:	e4 e4       	ldi	r30, 0x44	; 68
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	80 83       	st	Z, r24
}
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <MTIMERS_voidTimer1SetTopValue>:

void MTIMERS_voidTimer1SetTopValue(u16 Copy_u16TopValue)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <MTIMERS_voidTimer1SetTopValue+0x6>
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TopValue 		;
    12ba:	e6 e4       	ldi	r30, 0x46	; 70
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	80 83       	st	Z, r24
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <MTIMERS_voidTimer0SetCompareMatchValue>:


void MTIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8CompareMatchValue)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	0f 92       	push	r0
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Compare Match Value In The OCR0 Register*/
	OCR0 = Copy_u8CompareMatchValue;
    12dc:	ec e5       	ldi	r30, 0x5C	; 92
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	80 83       	st	Z, r24
}
    12e4:	0f 90       	pop	r0
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <MTIMERS_voidTimer1SetCompareMatchValue>:
void MTIMERS_voidTimer1SetCompareMatchValue(u16 Copy_u16CompareMatchValue)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <MTIMERS_voidTimer1SetCompareMatchValue+0x6>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
	/*Set compare value in OCR0 Register*/
	OCR1A = Copy_u16CompareMatchValue ;
    12fa:	ea e4       	ldi	r30, 0x4A	; 74
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	80 83       	st	Z, r24
}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <MTIMERS_voidTimer2SetCompareMatchValue>:

void MTIMERS_voidTimer2SetCompareMatchValue(u8 Copy_u8CompareMatchValue)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	0f 92       	push	r0
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	89 83       	std	Y+1, r24	; 0x01
	/*Set The Compare Match Value In The OCR0 Register*/
	OCR2 = Copy_u8CompareMatchValue;
    131c:	e3 e4       	ldi	r30, 0x43	; 67
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	80 83       	st	Z, r24
}
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <MTIMERS_voidSetBusyWait>:


void MTIMERS_voidSetBusyWait(u32 Copy_u32MicroSeconds)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <MTIMERS_voidSetBusyWait+0x6>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <MTIMERS_voidSetBusyWait+0x8>
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	9c 83       	std	Y+4, r25	; 0x04
    133a:	8b 83       	std	Y+3, r24	; 0x03
	*/
	/* Make Sure The Prescaler Is = 8
	   Set The OCR0 (Compare Match Value) = 1
	   Make Sure The Flag Is Cleared
	*/
	OCR0 = 250 ;
    133c:	ec e5       	ldi	r30, 0x5C	; 92
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8a ef       	ldi	r24, 0xFA	; 250
    1342:	80 83       	st	Z, r24

	SET_BIT(TIFR, TIFR_OCF0);
    1344:	a8 e5       	ldi	r26, 0x58	; 88
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e8 e5       	ldi	r30, 0x58	; 88
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	82 60       	ori	r24, 0x02	; 2
    1350:	8c 93       	st	X, r24

	u32 Local_u32TickCounter = 0;
    1352:	1a 82       	std	Y+2, r1	; 0x02
    1354:	19 82       	std	Y+1, r1	; 0x01
    1356:	16 c0       	rjmp	.+44     	; 0x1384 <MTIMERS_voidSetBusyWait+0x58>

	while(Local_u32TickCounter < Copy_u32MicroSeconds*4)
	{
		/*Check if The Flag Is Raised Up Or Not*/
		if(GET_BIT(TIFR, TIFR_OCF0) == 1)
    1358:	e8 e5       	ldi	r30, 0x58	; 88
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	86 95       	lsr	r24
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	81 70       	andi	r24, 0x01	; 1
    1366:	90 70       	andi	r25, 0x00	; 0
    1368:	88 23       	and	r24, r24
    136a:	61 f0       	breq	.+24     	; 0x1384 <MTIMERS_voidSetBusyWait+0x58>
		{
			/*Increment The Counter*/
			Local_u32TickCounter++;
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
			/*Clear The Flag*/
			SET_BIT(TIFR, TIFR_OCF0);
    1376:	a8 e5       	ldi	r26, 0x58	; 88
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e8 e5       	ldi	r30, 0x58	; 88
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	82 60       	ori	r24, 0x02	; 2
    1382:	8c 93       	st	X, r24

	SET_BIT(TIFR, TIFR_OCF0);

	u32 Local_u32TickCounter = 0;

	while(Local_u32TickCounter < Copy_u32MicroSeconds*4)
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	9c 01       	movw	r18, r24
    138a:	22 0f       	add	r18, r18
    138c:	33 1f       	adc	r19, r19
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	82 17       	cp	r24, r18
    1398:	93 07       	cpc	r25, r19
    139a:	f0 f2       	brcs	.-68     	; 0x1358 <MTIMERS_voidSetBusyWait+0x2c>
			Local_u32TickCounter++;
			/*Clear The Flag*/
			SET_BIT(TIFR, TIFR_OCF0);
		}
	}
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <MSPI_voidMasterInit>:
*/
static void (*Global_pvCallBack)(void) = NULL;
u8 MSPI_u8ReceivedData = 0;

void MSPI_voidMasterInit(void)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	/*Set The Node To Be Master*/
	SET_BIT(SPCR, SPCR_MSTR);
    13b2:	ad e2       	ldi	r26, 0x2D	; 45
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	ed e2       	ldi	r30, 0x2D	; 45
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	80 61       	ori	r24, 0x10	; 16
    13be:	8c 93       	st	X, r24
	/*Set MSB First*/
	CLEAR_BIT(SPCR, SPCR_DORD);
    13c0:	ad e2       	ldi	r26, 0x2D	; 45
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	ed e2       	ldi	r30, 0x2D	; 45
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8f 7d       	andi	r24, 0xDF	; 223
    13cc:	8c 93       	st	X, r24
	/*Set Clock Polarity , Leading = Rising Edge*/
	CLEAR_BIT(SPCR, SPCR_CPOL);
    13ce:	ad e2       	ldi	r26, 0x2D	; 45
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ed e2       	ldi	r30, 0x2D	; 45
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	87 7f       	andi	r24, 0xF7	; 247
    13da:	8c 93       	st	X, r24
	/*Set The Clock Phase, Setup (Write) At Leading Edge*/
	SET_BIT(SPCR, SPCR_CPHA);
    13dc:	ad e2       	ldi	r26, 0x2D	; 45
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	ed e2       	ldi	r30, 0x2D	; 45
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	84 60       	ori	r24, 0x04	; 4
    13e8:	8c 93       	st	X, r24
	/*Set Prescaler To Be = 16*/
	SET_BIT(SPCR, SPCR_SPR0);
    13ea:	ad e2       	ldi	r26, 0x2D	; 45
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	ed e2       	ldi	r30, 0x2D	; 45
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	81 60       	ori	r24, 0x01	; 1
    13f6:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR, SPCR_SPR1);
    13f8:	ad e2       	ldi	r26, 0x2D	; 45
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ed e2       	ldi	r30, 0x2D	; 45
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	8d 7f       	andi	r24, 0xFD	; 253
    1404:	8c 93       	st	X, r24
	CLEAR_BIT(SPSR, SPSR_SPI2X);
    1406:	ae e2       	ldi	r26, 0x2E	; 46
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	ee e2       	ldi	r30, 0x2E	; 46
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	8e 7f       	andi	r24, 0xFE	; 254
    1412:	8c 93       	st	X, r24
	/*Enable SPI*/
	SET_BIT(SPCR, SPCR_SPE);
    1414:	ad e2       	ldi	r26, 0x2D	; 45
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	ed e2       	ldi	r30, 0x2D	; 45
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	80 64       	ori	r24, 0x40	; 64
    1420:	8c 93       	st	X, r24
}
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <MSPI_voidSlaveInit>:

void MSPI_voidSlaveInit(void)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	/*Set The Node To Be Slave*/
	CLEAR_BIT(SPCR, SPCR_MSTR);
    1430:	ad e2       	ldi	r26, 0x2D	; 45
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	ed e2       	ldi	r30, 0x2D	; 45
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	8f 7e       	andi	r24, 0xEF	; 239
    143c:	8c 93       	st	X, r24
	/*Set MSB First*/
	CLEAR_BIT(SPCR, SPCR_DORD);
    143e:	ad e2       	ldi	r26, 0x2D	; 45
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	ed e2       	ldi	r30, 0x2D	; 45
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	8f 7d       	andi	r24, 0xDF	; 223
    144a:	8c 93       	st	X, r24
	/*Set Clock Polarity , Leading = Rising Edge*/
	CLEAR_BIT(SPCR, SPCR_CPOL);
    144c:	ad e2       	ldi	r26, 0x2D	; 45
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	ed e2       	ldi	r30, 0x2D	; 45
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	87 7f       	andi	r24, 0xF7	; 247
    1458:	8c 93       	st	X, r24
	/*Set The Clock Phase, Setup (Write) At Leading Edge*/
	SET_BIT(SPCR, SPCR_CPHA);
    145a:	ad e2       	ldi	r26, 0x2D	; 45
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ed e2       	ldi	r30, 0x2D	; 45
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	84 60       	ori	r24, 0x04	; 4
    1466:	8c 93       	st	X, r24
	/*Enable SPI*/
	SET_BIT(SPCR, SPCR_SPE);
    1468:	ad e2       	ldi	r26, 0x2D	; 45
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ed e2       	ldi	r30, 0x2D	; 45
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 64       	ori	r24, 0x40	; 64
    1474:	8c 93       	st	X, r24
	SET_BIT(SPCR, SPCR_SPIE);
    1476:	ad e2       	ldi	r26, 0x2D	; 45
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ed e2       	ldi	r30, 0x2D	; 45
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	80 68       	ori	r24, 0x80	; 128
    1482:	8c 93       	st	X, r24
}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <MSPI_voidTranceiveDataAsync>:


void MSPI_voidTranceiveDataAsync(u8 Copy_u8Data)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	0f 92       	push	r0
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	89 83       	std	Y+1, r24	; 0x01
	/*Set Data In The Data Register SPDR*/
	SPDR = Copy_u8Data;
    1496:	ef e2       	ldi	r30, 0x2F	; 47
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	80 83       	st	Z, r24
	/*Enable Interrupt*/
	SET_BIT(SPCR, SPCR_SPIE);
    149e:	ad e2       	ldi	r26, 0x2D	; 45
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ed e2       	ldi	r30, 0x2D	; 45
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 68       	ori	r24, 0x80	; 128
    14aa:	8c 93       	st	X, r24
}
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <CallBackFunction>:


void CallBackFunction(void *(Copy_Function(void)))
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <CallBackFunction+0x6>
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	89 83       	std	Y+1, r24	; 0x01
	Global_pvCallBack = Copy_Function ;
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	9a 81       	ldd	r25, Y+2	; 0x02
    14c6:	90 93 05 01 	sts	0x0105, r25
    14ca:	80 93 04 01 	sts	0x0104, r24
}
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <__vector_12>:

//ISR For Transfer Complete
void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
    14d8:	1f 92       	push	r1
    14da:	0f 92       	push	r0
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	0f 92       	push	r0
    14e0:	11 24       	eor	r1, r1
    14e2:	2f 93       	push	r18
    14e4:	3f 93       	push	r19
    14e6:	4f 93       	push	r20
    14e8:	5f 93       	push	r21
    14ea:	6f 93       	push	r22
    14ec:	7f 93       	push	r23
    14ee:	8f 93       	push	r24
    14f0:	9f 93       	push	r25
    14f2:	af 93       	push	r26
    14f4:	bf 93       	push	r27
    14f6:	ef 93       	push	r30
    14f8:	ff 93       	push	r31
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
	//Get The Received Data
	MSPI_u8ReceivedData = SPDR;
    1502:	ef e2       	ldi	r30, 0x2F	; 47
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 93 06 01 	sts	0x0106, r24
	if(Global_pvCallBack != NULL)
    150c:	80 91 04 01 	lds	r24, 0x0104
    1510:	90 91 05 01 	lds	r25, 0x0105
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	29 f0       	breq	.+10     	; 0x1522 <__vector_12+0x4a>
	{
		Global_pvCallBack();
    1518:	e0 91 04 01 	lds	r30, 0x0104
    151c:	f0 91 05 01 	lds	r31, 0x0105
    1520:	09 95       	icall
	}
	//Disable Interrupt
	CLEAR_BIT(SPCR, SPCR_SPIE);
    1522:	ad e2       	ldi	r26, 0x2D	; 45
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ed e2       	ldi	r30, 0x2D	; 45
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8f 77       	andi	r24, 0x7F	; 127
    152e:	8c 93       	st	X, r24
}
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <MGIE_voidInit>:
#include "GIE_private.h"
#include "GIE_config.h"


void MGIE_voidInit()
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    #if GIE == ENABLE
        SET_BIT(SREG,GIE_BIT) ;
    155e:	af e5       	ldi	r26, 0x5F	; 95
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	ef e5       	ldi	r30, 0x5F	; 95
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	80 68       	ori	r24, 0x80	; 128
    156a:	8c 93       	st	X, r24
    #else
        CLEAR_BIT(SREG,GIE_BIT) ;
    #endif
}
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <MGIE_voidEnable>:


void MGIE_voidEnable()
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,GIE_BIT) ;
    157a:	af e5       	ldi	r26, 0x5F	; 95
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ef e5       	ldi	r30, 0x5F	; 95
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	80 68       	ori	r24, 0x80	; 128
    1586:	8c 93       	st	X, r24
}
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <MGIE_voidDisable>:


void MGIE_voidDisable()
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    CLEAR_BIT(SREG,GIE_BIT) ;
    1596:	af e5       	ldi	r26, 0x5F	; 95
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	ef e5       	ldi	r30, 0x5F	; 95
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	8f 77       	andi	r24, 0x7F	; 127
    15a2:	8c 93       	st	X, r24
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <MEXTI_voidInit>:

void (*Global_pvInit0CallBack)() = NULL ;
void (*Global_pvInit1CallBack)() = NULL ;

void MEXTI_voidInit(void)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
	#if 	EXTI_INT0_ENABLE == ENABLE
		/*Set Sense Signal*/
		#if 	EXTI_INT0_SENSE_SIGNAL	== FALLING_EDGE
			/*Set Sense Signal To Falling Edge*/
			CLEAR_BIT(MCUCR, MCUCR_ISC00);
    15b2:	a5 e5       	ldi	r26, 0x55	; 85
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e5 e5       	ldi	r30, 0x55	; 85
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8e 7f       	andi	r24, 0xFE	; 254
    15be:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC01);
    15c0:	a5 e5       	ldi	r26, 0x55	; 85
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e5 e5       	ldi	r30, 0x55	; 85
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	82 60       	ori	r24, 0x02	; 2
    15cc:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC01);
		#else
			#error "EXTI_INT0_SENSE_SIGNAL Configuration Error"
		#endif
		/*Enable INT0 Interrupt*/
		SET_BIT(GICR, GICR_INT0);
    15ce:	ab e5       	ldi	r26, 0x5B	; 91
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	eb e5       	ldi	r30, 0x5B	; 91
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 64       	ori	r24, 0x40	; 64
    15da:	8c 93       	st	X, r24
		#endif
		/*Enable INT1 Interrupt*/
		SET_BIT(GICR, GICR_INT1);
	#elif	EXTI_INT1_ENABLE == DISABLE
		/*Disable INT1 Interrupt*/
		CLEAR_BIT(GICR, GICR_INT1);
    15dc:	ab e5       	ldi	r26, 0x5B	; 91
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	eb e5       	ldi	r30, 0x5B	; 91
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8f 77       	andi	r24, 0x7F	; 127
    15e8:	8c 93       	st	X, r24
	#else
		#error "EXTI_INT1_ENABLE Configuration Error"
	#endif
}
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <MEXTI_voidInturrupt>:

s8 MEXTI_voidInturrupt(u8 Copy_u8InterruptValue,u8 Copy_u8State)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <MEXTI_voidInturrupt+0x6>
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <MEXTI_voidInturrupt+0x8>
    15f8:	0f 92       	push	r0
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8InterruptValue)
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	3d 83       	std	Y+5, r19	; 0x05
    160a:	2c 83       	std	Y+4, r18	; 0x04
    160c:	8c 81       	ldd	r24, Y+4	; 0x04
    160e:	9d 81       	ldd	r25, Y+5	; 0x05
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	91 05       	cpc	r25, r1
    1614:	29 f1       	breq	.+74     	; 0x1660 <MEXTI_voidInturrupt+0x70>
    1616:	2c 81       	ldd	r18, Y+4	; 0x04
    1618:	3d 81       	ldd	r19, Y+5	; 0x05
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	d1 f1       	breq	.+116    	; 0x1694 <MEXTI_voidInturrupt+0xa4>
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	9d 81       	ldd	r25, Y+5	; 0x05
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	09 f0       	breq	.+2      	; 0x162a <MEXTI_voidInturrupt+0x3a>
    1628:	4f c0       	rjmp	.+158    	; 0x16c8 <MEXTI_voidInturrupt+0xd8>
	{
		case INT0 :
			if(Copy_u8State == ENABLE)
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	51 f4       	brne	.+20     	; 0x1644 <MEXTI_voidInturrupt+0x54>
			{
				SET_BIT(GICR,GICR_INT0) ;
    1630:	ab e5       	ldi	r26, 0x5B	; 91
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	eb e5       	ldi	r30, 0x5B	; 91
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	80 64       	ori	r24, 0x40	; 64
    163c:	8c 93       	st	X, r24
				return 1;
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	9b 83       	std	Y+3, r25	; 0x03
    1642:	46 c0       	rjmp	.+140    	; 0x16d0 <MEXTI_voidInturrupt+0xe0>
			}
			else if(Copy_u8State == DISABLE)
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	88 23       	and	r24, r24
    1648:	09 f0       	breq	.+2      	; 0x164c <MEXTI_voidInturrupt+0x5c>
    164a:	41 c0       	rjmp	.+130    	; 0x16ce <MEXTI_voidInturrupt+0xde>
			{
				CLEAR_BIT(GICR , GICR_INT0) ;
    164c:	ab e5       	ldi	r26, 0x5B	; 91
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	eb e5       	ldi	r30, 0x5B	; 91
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8f 7b       	andi	r24, 0xBF	; 191
    1658:	8c 93       	st	X, r24
				return 1;
    165a:	21 e0       	ldi	r18, 0x01	; 1
    165c:	2b 83       	std	Y+3, r18	; 0x03
    165e:	38 c0       	rjmp	.+112    	; 0x16d0 <MEXTI_voidInturrupt+0xe0>
			}
			break ;
		case INT1 :
			if(Copy_u8State == ENABLE)
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	51 f4       	brne	.+20     	; 0x167a <MEXTI_voidInturrupt+0x8a>
			{
				SET_BIT(GICR,GICR_INT1) ;
    1666:	ab e5       	ldi	r26, 0x5B	; 91
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	eb e5       	ldi	r30, 0x5B	; 91
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	80 68       	ori	r24, 0x80	; 128
    1672:	8c 93       	st	X, r24
				return 1;
    1674:	31 e0       	ldi	r19, 0x01	; 1
    1676:	3b 83       	std	Y+3, r19	; 0x03
    1678:	2b c0       	rjmp	.+86     	; 0x16d0 <MEXTI_voidInturrupt+0xe0>
			}
			else if(Copy_u8State == DISABLE)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	88 23       	and	r24, r24
    167e:	39 f5       	brne	.+78     	; 0x16ce <MEXTI_voidInturrupt+0xde>
			{
				CLEAR_BIT(GICR , GICR_INT1) ;
    1680:	ab e5       	ldi	r26, 0x5B	; 91
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	eb e5       	ldi	r30, 0x5B	; 91
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	8f 77       	andi	r24, 0x7F	; 127
    168c:	8c 93       	st	X, r24
				return 1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	1e c0       	rjmp	.+60     	; 0x16d0 <MEXTI_voidInturrupt+0xe0>
			}
			break ;
		case INT2 :
			if(Copy_u8State == ENABLE)
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	51 f4       	brne	.+20     	; 0x16ae <MEXTI_voidInturrupt+0xbe>
			{
				SET_BIT(GICR,GICR_INT2) ;
    169a:	ab e5       	ldi	r26, 0x5B	; 91
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	eb e5       	ldi	r30, 0x5B	; 91
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 62       	ori	r24, 0x20	; 32
    16a6:	8c 93       	st	X, r24
				return 1;
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	9b 83       	std	Y+3, r25	; 0x03
    16ac:	11 c0       	rjmp	.+34     	; 0x16d0 <MEXTI_voidInturrupt+0xe0>
			}
			else if(Copy_u8State == DISABLE)
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	88 23       	and	r24, r24
    16b2:	69 f4       	brne	.+26     	; 0x16ce <MEXTI_voidInturrupt+0xde>
			{
				CLEAR_BIT(GICR , GICR_INT2) ;
    16b4:	ab e5       	ldi	r26, 0x5B	; 91
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	eb e5       	ldi	r30, 0x5B	; 91
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	8f 7d       	andi	r24, 0xDF	; 223
    16c0:	8c 93       	st	X, r24
				return 1;
    16c2:	21 e0       	ldi	r18, 0x01	; 1
    16c4:	2b 83       	std	Y+3, r18	; 0x03
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <MEXTI_voidInturrupt+0xe0>
			}
			break ;
		default:
			return -1 ;
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	3b 83       	std	Y+3, r19	; 0x03
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <MEXTI_voidInturrupt+0xe0>
	}
	return 0 ;
    16ce:	1b 82       	std	Y+3, r1	; 0x03
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <MEXTI_voidInt0CallBack>:


/**************************** CALLL BACK AND ISR TO INT0 Interrupt ******************/
void MEXTI_voidInt0CallBack(void (*Copy_pvNotificationFunction)(void))
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <MEXTI_voidInt0CallBack+0x6>
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
	Global_pvInit0CallBack = Copy_pvNotificationFunction ;
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	90 93 08 01 	sts	0x0108, r25
    16f8:	80 93 07 01 	sts	0x0107, r24
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
	Global_pvInit0CallBack() ;
    1730:	e0 91 07 01 	lds	r30, 0x0107
    1734:	f0 91 08 01 	lds	r31, 0x0108
    1738:	09 95       	icall
}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	ff 91       	pop	r31
    1740:	ef 91       	pop	r30
    1742:	bf 91       	pop	r27
    1744:	af 91       	pop	r26
    1746:	9f 91       	pop	r25
    1748:	8f 91       	pop	r24
    174a:	7f 91       	pop	r23
    174c:	6f 91       	pop	r22
    174e:	5f 91       	pop	r21
    1750:	4f 91       	pop	r20
    1752:	3f 91       	pop	r19
    1754:	2f 91       	pop	r18
    1756:	0f 90       	pop	r0
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	0f 90       	pop	r0
    175c:	1f 90       	pop	r1
    175e:	18 95       	reti

00001760 <MEXTI_voidInt1CallBack>:

/**************************** CALLL BACK AND ISR TO INT1 Interrupt ******************/
void MEXTI_voidInt1CallBack(void (*Copy_pvNotificationFunction)(void))
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	00 d0       	rcall	.+0      	; 0x1766 <MEXTI_voidInt1CallBack+0x6>
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01
	Global_pvInit1CallBack = Copy_pvNotificationFunction ;
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	90 93 0a 01 	sts	0x010A, r25
    1776:	80 93 09 01 	sts	0x0109, r24
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    1784:	1f 92       	push	r1
    1786:	0f 92       	push	r0
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	0f 92       	push	r0
    178c:	11 24       	eor	r1, r1
    178e:	2f 93       	push	r18
    1790:	3f 93       	push	r19
    1792:	4f 93       	push	r20
    1794:	5f 93       	push	r21
    1796:	6f 93       	push	r22
    1798:	7f 93       	push	r23
    179a:	8f 93       	push	r24
    179c:	9f 93       	push	r25
    179e:	af 93       	push	r26
    17a0:	bf 93       	push	r27
    17a2:	ef 93       	push	r30
    17a4:	ff 93       	push	r31
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
	Global_pvInit1CallBack() ;
    17ae:	e0 91 09 01 	lds	r30, 0x0109
    17b2:	f0 91 0a 01 	lds	r31, 0x010A
    17b6:	09 95       	icall
}
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	ff 91       	pop	r31
    17be:	ef 91       	pop	r30
    17c0:	bf 91       	pop	r27
    17c2:	af 91       	pop	r26
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	7f 91       	pop	r23
    17ca:	6f 91       	pop	r22
    17cc:	5f 91       	pop	r21
    17ce:	4f 91       	pop	r20
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <MDIO_voidSetPinDirection>:
#include "DIO_config.h"



void MDIO_voidSetPinDirection(u8 Copy_u8PortName , u8 Copy_u8PinNumber , u8 Copy_u8PinDirection ) 
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	2d 97       	sbiw	r28, 0x0d	; 13
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	6a 83       	std	Y+2, r22	; 0x02
    17f6:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinNumber <= 7)
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	88 30       	cpi	r24, 0x08	; 8
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <MDIO_voidSetPinDirection+0x22>
    17fe:	01 c1       	rjmp	.+514    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
	{
		switch(Copy_u8PortName)
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	3d 87       	std	Y+13, r19	; 0x0d
    1808:	2c 87       	std	Y+12, r18	; 0x0c
    180a:	8c 85       	ldd	r24, Y+12	; 0x0c
    180c:	9d 85       	ldd	r25, Y+13	; 0x0d
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	91 05       	cpc	r25, r1
    1812:	09 f4       	brne	.+2      	; 0x1816 <MDIO_voidSetPinDirection+0x38>
    1814:	4f c0       	rjmp	.+158    	; 0x18b4 <MDIO_voidSetPinDirection+0xd6>
    1816:	2c 85       	ldd	r18, Y+12	; 0x0c
    1818:	3d 85       	ldd	r19, Y+13	; 0x0d
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	31 05       	cpc	r19, r1
    181e:	2c f4       	brge	.+10     	; 0x182a <MDIO_voidSetPinDirection+0x4c>
    1820:	8c 85       	ldd	r24, Y+12	; 0x0c
    1822:	9d 85       	ldd	r25, Y+13	; 0x0d
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	71 f0       	breq	.+28     	; 0x1844 <MDIO_voidSetPinDirection+0x66>
    1828:	ec c0       	rjmp	.+472    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
    182a:	2c 85       	ldd	r18, Y+12	; 0x0c
    182c:	3d 85       	ldd	r19, Y+13	; 0x0d
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	09 f4       	brne	.+2      	; 0x1836 <MDIO_voidSetPinDirection+0x58>
    1834:	77 c0       	rjmp	.+238    	; 0x1924 <MDIO_voidSetPinDirection+0x146>
    1836:	8c 85       	ldd	r24, Y+12	; 0x0c
    1838:	9d 85       	ldd	r25, Y+13	; 0x0d
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	91 05       	cpc	r25, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <MDIO_voidSetPinDirection+0x64>
    1840:	a9 c0       	rjmp	.+338    	; 0x1994 <MDIO_voidSetPinDirection+0x1b6>
    1842:	df c0       	rjmp	.+446    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
		{
			case PORTA  :
				

				switch(Copy_u8PinDirection)
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	3b 87       	std	Y+11, r19	; 0x0b
    184c:	2a 87       	std	Y+10, r18	; 0x0a
    184e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1850:	9b 85       	ldd	r25, Y+11	; 0x0b
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	31 f0       	breq	.+12     	; 0x1862 <MDIO_voidSetPinDirection+0x84>
    1856:	2a 85       	ldd	r18, Y+10	; 0x0a
    1858:	3b 85       	ldd	r19, Y+11	; 0x0b
    185a:	21 30       	cpi	r18, 0x01	; 1
    185c:	31 05       	cpc	r19, r1
    185e:	b1 f0       	breq	.+44     	; 0x188c <MDIO_voidSetPinDirection+0xae>
    1860:	d0 c0       	rjmp	.+416    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
				{
					case INPUT :
						CLEAR_BIT(DIO_DDRA,Copy_u8PinNumber) ;
    1862:	aa e3       	ldi	r26, 0x3A	; 58
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	ea e3       	ldi	r30, 0x3A	; 58
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <MDIO_voidSetPinDirection+0xa2>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <MDIO_voidSetPinDirection+0x9e>
    1884:	80 95       	com	r24
    1886:	84 23       	and	r24, r20
    1888:	8c 93       	st	X, r24
    188a:	bb c0       	rjmp	.+374    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
						break ;
						
					case OUTPUT :
						SET_BIT(DIO_DDRA,Copy_u8PinNumber) ;
    188c:	aa e3       	ldi	r26, 0x3A	; 58
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ea e3       	ldi	r30, 0x3A	; 58
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <MDIO_voidSetPinDirection+0xcc>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <MDIO_voidSetPinDirection+0xc8>
    18ae:	84 2b       	or	r24, r20
    18b0:	8c 93       	st	X, r24
    18b2:	a7 c0       	rjmp	.+334    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
				}
		
				break ; 
			
			case PORTB  :
				switch(Copy_u8PinDirection)
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	39 87       	std	Y+9, r19	; 0x09
    18bc:	28 87       	std	Y+8, r18	; 0x08
    18be:	88 85       	ldd	r24, Y+8	; 0x08
    18c0:	99 85       	ldd	r25, Y+9	; 0x09
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	31 f0       	breq	.+12     	; 0x18d2 <MDIO_voidSetPinDirection+0xf4>
    18c6:	28 85       	ldd	r18, Y+8	; 0x08
    18c8:	39 85       	ldd	r19, Y+9	; 0x09
    18ca:	21 30       	cpi	r18, 0x01	; 1
    18cc:	31 05       	cpc	r19, r1
    18ce:	b1 f0       	breq	.+44     	; 0x18fc <MDIO_voidSetPinDirection+0x11e>
    18d0:	98 c0       	rjmp	.+304    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
				{
					case INPUT :
						CLEAR_BIT(DIO_DDRB,Copy_u8PinNumber) ;
    18d2:	a7 e3       	ldi	r26, 0x37	; 55
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e7 e3       	ldi	r30, 0x37	; 55
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <MDIO_voidSetPinDirection+0x112>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <MDIO_voidSetPinDirection+0x10e>
    18f4:	80 95       	com	r24
    18f6:	84 23       	and	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	83 c0       	rjmp	.+262    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
						break ;
						
					case OUTPUT :
						SET_BIT(DIO_DDRB,Copy_u8PinNumber) ;
    18fc:	a7 e3       	ldi	r26, 0x37	; 55
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e7 e3       	ldi	r30, 0x37	; 55
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 2e       	mov	r0, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <MDIO_voidSetPinDirection+0x13c>
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <MDIO_voidSetPinDirection+0x138>
    191e:	84 2b       	or	r24, r20
    1920:	8c 93       	st	X, r24
    1922:	6f c0       	rjmp	.+222    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
				}
				
				break ; 
				
			case PORTC :
				switch(Copy_u8PinDirection)
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	3f 83       	std	Y+7, r19	; 0x07
    192c:	2e 83       	std	Y+6, r18	; 0x06
    192e:	8e 81       	ldd	r24, Y+6	; 0x06
    1930:	9f 81       	ldd	r25, Y+7	; 0x07
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	31 f0       	breq	.+12     	; 0x1942 <MDIO_voidSetPinDirection+0x164>
    1936:	2e 81       	ldd	r18, Y+6	; 0x06
    1938:	3f 81       	ldd	r19, Y+7	; 0x07
    193a:	21 30       	cpi	r18, 0x01	; 1
    193c:	31 05       	cpc	r19, r1
    193e:	b1 f0       	breq	.+44     	; 0x196c <MDIO_voidSetPinDirection+0x18e>
    1940:	60 c0       	rjmp	.+192    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
				{
					case INPUT :
						CLEAR_BIT(DIO_DDRC,Copy_u8PinNumber) ;
    1942:	a4 e3       	ldi	r26, 0x34	; 52
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e4 e3       	ldi	r30, 0x34	; 52
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <MDIO_voidSetPinDirection+0x182>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <MDIO_voidSetPinDirection+0x17e>
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	4b c0       	rjmp	.+150    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
						break ;
						
					case OUTPUT :
						SET_BIT(DIO_DDRC,Copy_u8PinNumber) ;
    196c:	a4 e3       	ldi	r26, 0x34	; 52
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e4 e3       	ldi	r30, 0x34	; 52
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <MDIO_voidSetPinDirection+0x1ac>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <MDIO_voidSetPinDirection+0x1a8>
    198e:	84 2b       	or	r24, r20
    1990:	8c 93       	st	X, r24
    1992:	37 c0       	rjmp	.+110    	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
				}
				
				break ;
				
			case PORTD :
				switch(Copy_u8PinDirection)
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	3d 83       	std	Y+5, r19	; 0x05
    199c:	2c 83       	std	Y+4, r18	; 0x04
    199e:	8c 81       	ldd	r24, Y+4	; 0x04
    19a0:	9d 81       	ldd	r25, Y+5	; 0x05
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	31 f0       	breq	.+12     	; 0x19b2 <MDIO_voidSetPinDirection+0x1d4>
    19a6:	2c 81       	ldd	r18, Y+4	; 0x04
    19a8:	3d 81       	ldd	r19, Y+5	; 0x05
    19aa:	21 30       	cpi	r18, 0x01	; 1
    19ac:	31 05       	cpc	r19, r1
    19ae:	b1 f0       	breq	.+44     	; 0x19dc <MDIO_voidSetPinDirection+0x1fe>
    19b0:	28 c0       	rjmp	.+80     	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
				{
					case INPUT :
						CLEAR_BIT(DIO_DDRD,Copy_u8PinNumber) ;
    19b2:	a1 e3       	ldi	r26, 0x31	; 49
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e1 e3       	ldi	r30, 0x31	; 49
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <MDIO_voidSetPinDirection+0x1f2>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <MDIO_voidSetPinDirection+0x1ee>
    19d4:	80 95       	com	r24
    19d6:	84 23       	and	r24, r20
    19d8:	8c 93       	st	X, r24
    19da:	13 c0       	rjmp	.+38     	; 0x1a02 <MDIO_voidSetPinDirection+0x224>
						break ;
						
					case OUTPUT :
						SET_BIT(DIO_DDRD,Copy_u8PinNumber) ;
    19dc:	a1 e3       	ldi	r26, 0x31	; 49
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e1 e3       	ldi	r30, 0x31	; 49
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	48 2f       	mov	r20, r24
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	02 2e       	mov	r0, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <MDIO_voidSetPinDirection+0x21c>
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	0a 94       	dec	r0
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <MDIO_voidSetPinDirection+0x218>
    19fe:	84 2b       	or	r24, r20
    1a00:	8c 93       	st	X, r24
	}
	else
	{
		/*Return error*/
	}
}
    1a02:	2d 96       	adiw	r28, 0x0d	; 13
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(u8 Copy_u8PortName , u8 Copy_u8PinNumber , u8 Copy_u8PinValue )
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	2d 97       	sbiw	r28, 0x0d	; 13
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	6a 83       	std	Y+2, r22	; 0x02
    1a2c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinNumber <= 7)
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	88 30       	cpi	r24, 0x08	; 8
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <MDIO_voidSetPinValue+0x22>
    1a34:	00 c1       	rjmp	.+512    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
		{
			switch(Copy_u8PortName)
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	3d 87       	std	Y+13, r19	; 0x0d
    1a3e:	2c 87       	std	Y+12, r18	; 0x0c
    1a40:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a42:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	91 05       	cpc	r25, r1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <MDIO_voidSetPinValue+0x38>
    1a4a:	4f c0       	rjmp	.+158    	; 0x1aea <MDIO_voidSetPinValue+0xd6>
    1a4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a4e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <MDIO_voidSetPinValue+0x4c>
    1a56:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a58:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	71 f0       	breq	.+28     	; 0x1a7a <MDIO_voidSetPinValue+0x66>
    1a5e:	eb c0       	rjmp	.+470    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
    1a60:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a62:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a64:	22 30       	cpi	r18, 0x02	; 2
    1a66:	31 05       	cpc	r19, r1
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <MDIO_voidSetPinValue+0x58>
    1a6a:	77 c0       	rjmp	.+238    	; 0x1b5a <MDIO_voidSetPinValue+0x146>
    1a6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	91 05       	cpc	r25, r1
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <MDIO_voidSetPinValue+0x64>
    1a76:	a9 c0       	rjmp	.+338    	; 0x1bca <MDIO_voidSetPinValue+0x1b6>
    1a78:	de c0       	rjmp	.+444    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
			{
				case PORTA  :


					switch(Copy_u8PinValue)
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	3b 87       	std	Y+11, r19	; 0x0b
    1a82:	2a 87       	std	Y+10, r18	; 0x0a
    1a84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	d1 f0       	breq	.+52     	; 0x1ac0 <MDIO_voidSetPinValue+0xac>
    1a8c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a8e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a90:	21 30       	cpi	r18, 0x01	; 1
    1a92:	31 05       	cpc	r19, r1
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <MDIO_voidSetPinValue+0x84>
    1a96:	cf c0       	rjmp	.+414    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
					{
						case HIGH :
							SET_BIT(DIO_PORTA,Copy_u8PinNumber) ;
    1a98:	ab e3       	ldi	r26, 0x3B	; 59
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	eb e3       	ldi	r30, 0x3B	; 59
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <MDIO_voidSetPinValue+0xa2>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <MDIO_voidSetPinValue+0x9e>
    1aba:	84 2b       	or	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	bb c0       	rjmp	.+374    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
							break ;

						case LOW :
							CLEAR_BIT(DIO_PORTA,Copy_u8PinNumber) ;
    1ac0:	ab e3       	ldi	r26, 0x3B	; 59
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	eb e3       	ldi	r30, 0x3B	; 59
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <MDIO_voidSetPinValue+0xca>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <MDIO_voidSetPinValue+0xc6>
    1ae2:	80 95       	com	r24
    1ae4:	84 23       	and	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	a6 c0       	rjmp	.+332    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
					}

					break ;

				case PORTB  :
					switch(Copy_u8PinValue)
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	39 87       	std	Y+9, r19	; 0x09
    1af2:	28 87       	std	Y+8, r18	; 0x08
    1af4:	88 85       	ldd	r24, Y+8	; 0x08
    1af6:	99 85       	ldd	r25, Y+9	; 0x09
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	d1 f0       	breq	.+52     	; 0x1b30 <MDIO_voidSetPinValue+0x11c>
    1afc:	28 85       	ldd	r18, Y+8	; 0x08
    1afe:	39 85       	ldd	r19, Y+9	; 0x09
    1b00:	21 30       	cpi	r18, 0x01	; 1
    1b02:	31 05       	cpc	r19, r1
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <MDIO_voidSetPinValue+0xf4>
    1b06:	97 c0       	rjmp	.+302    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
					{
						case HIGH :
							SET_BIT(DIO_PORTB,Copy_u8PinNumber) ;
    1b08:	a8 e3       	ldi	r26, 0x38	; 56
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e8 e3       	ldi	r30, 0x38	; 56
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <MDIO_voidSetPinValue+0x112>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <MDIO_voidSetPinValue+0x10e>
    1b2a:	84 2b       	or	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	83 c0       	rjmp	.+262    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
							break ;

						case LOW :
							CLEAR_BIT(DIO_PORTB,Copy_u8PinNumber) ;
    1b30:	a8 e3       	ldi	r26, 0x38	; 56
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e8 e3       	ldi	r30, 0x38	; 56
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <MDIO_voidSetPinValue+0x13a>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <MDIO_voidSetPinValue+0x136>
    1b52:	80 95       	com	r24
    1b54:	84 23       	and	r24, r20
    1b56:	8c 93       	st	X, r24
    1b58:	6e c0       	rjmp	.+220    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
					}

					break ;

				case PORTC :
					switch(Copy_u8PinValue)
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	3f 83       	std	Y+7, r19	; 0x07
    1b62:	2e 83       	std	Y+6, r18	; 0x06
    1b64:	8e 81       	ldd	r24, Y+6	; 0x06
    1b66:	9f 81       	ldd	r25, Y+7	; 0x07
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	d1 f0       	breq	.+52     	; 0x1ba0 <MDIO_voidSetPinValue+0x18c>
    1b6c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b6e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b70:	21 30       	cpi	r18, 0x01	; 1
    1b72:	31 05       	cpc	r19, r1
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <MDIO_voidSetPinValue+0x164>
    1b76:	5f c0       	rjmp	.+190    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
					{
						case HIGH :
							SET_BIT(DIO_PORTC,Copy_u8PinNumber) ;
    1b78:	a5 e3       	ldi	r26, 0x35	; 53
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e5 e3       	ldi	r30, 0x35	; 53
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <MDIO_voidSetPinValue+0x182>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <MDIO_voidSetPinValue+0x17e>
    1b9a:	84 2b       	or	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	4b c0       	rjmp	.+150    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
							break ;

						case LOW :
							CLEAR_BIT(DIO_PORTC,Copy_u8PinNumber) ;
    1ba0:	a5 e3       	ldi	r26, 0x35	; 53
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e5 e3       	ldi	r30, 0x35	; 53
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 2e       	mov	r0, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <MDIO_voidSetPinValue+0x1aa>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <MDIO_voidSetPinValue+0x1a6>
    1bc2:	80 95       	com	r24
    1bc4:	84 23       	and	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	36 c0       	rjmp	.+108    	; 0x1c36 <MDIO_voidSetPinValue+0x222>
					}

					break ;

				case PORTD :
					switch(Copy_u8PinValue)
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	3d 83       	std	Y+5, r19	; 0x05
    1bd2:	2c 83       	std	Y+4, r18	; 0x04
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	c9 f0       	breq	.+50     	; 0x1c0e <MDIO_voidSetPinValue+0x1fa>
    1bdc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bde:	3d 81       	ldd	r19, Y+5	; 0x05
    1be0:	21 30       	cpi	r18, 0x01	; 1
    1be2:	31 05       	cpc	r19, r1
    1be4:	41 f5       	brne	.+80     	; 0x1c36 <MDIO_voidSetPinValue+0x222>
					{
						case HIGH :
							SET_BIT(DIO_PORTD,Copy_u8PinNumber) ;
    1be6:	a2 e3       	ldi	r26, 0x32	; 50
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e2 e3       	ldi	r30, 0x32	; 50
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <MDIO_voidSetPinValue+0x1f0>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <MDIO_voidSetPinValue+0x1ec>
    1c08:	84 2b       	or	r24, r20
    1c0a:	8c 93       	st	X, r24
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <MDIO_voidSetPinValue+0x222>
							break ;

						case LOW :
							CLEAR_BIT(DIO_PORTD,Copy_u8PinNumber) ;
    1c0e:	a2 e3       	ldi	r26, 0x32	; 50
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e2 e3       	ldi	r30, 0x32	; 50
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <MDIO_voidSetPinValue+0x218>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <MDIO_voidSetPinValue+0x214>
    1c30:	80 95       	com	r24
    1c32:	84 23       	and	r24, r20
    1c34:	8c 93       	st	X, r24
		{
			/*Return error*/
		}


}
    1c36:	2d 96       	adiw	r28, 0x0d	; 13
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <MDIO_voidSetPort>:

void MDIO_voidSetPort(u8 Copy_u8PortName , u8 Copy_u8PinDirection) 
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <MDIO_voidSetPort+0x6>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <MDIO_voidSetPort+0x8>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	3c 83       	std	Y+4, r19	; 0x04
    1c60:	2b 83       	std	Y+3, r18	; 0x03
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	91 05       	cpc	r25, r1
    1c6a:	09 f1       	breq	.+66     	; 0x1cae <MDIO_voidSetPort+0x66>
    1c6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c70:	22 30       	cpi	r18, 0x02	; 2
    1c72:	31 05       	cpc	r19, r1
    1c74:	2c f4       	brge	.+10     	; 0x1c80 <MDIO_voidSetPort+0x38>
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	61 f0       	breq	.+24     	; 0x1c96 <MDIO_voidSetPort+0x4e>
    1c7e:	3a c0       	rjmp	.+116    	; 0x1cf4 <MDIO_voidSetPort+0xac>
    1c80:	2b 81       	ldd	r18, Y+3	; 0x03
    1c82:	3c 81       	ldd	r19, Y+4	; 0x04
    1c84:	22 30       	cpi	r18, 0x02	; 2
    1c86:	31 05       	cpc	r19, r1
    1c88:	f1 f0       	breq	.+60     	; 0x1cc6 <MDIO_voidSetPort+0x7e>
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	83 30       	cpi	r24, 0x03	; 3
    1c90:	91 05       	cpc	r25, r1
    1c92:	29 f1       	breq	.+74     	; 0x1cde <MDIO_voidSetPort+0x96>
    1c94:	2f c0       	rjmp	.+94     	; 0x1cf4 <MDIO_voidSetPort+0xac>
	{
		case PORTA :
			if(Copy_u8PinDirection == INPUT)
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	88 23       	and	r24, r24
    1c9a:	21 f4       	brne	.+8      	; 0x1ca4 <MDIO_voidSetPort+0x5c>
				DIO_DDRA = ALL_INPUT ; 
    1c9c:	ea e3       	ldi	r30, 0x3A	; 58
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	10 82       	st	Z, r1
    1ca2:	28 c0       	rjmp	.+80     	; 0x1cf4 <MDIO_voidSetPort+0xac>
			else 
				DIO_DDRA = ALL_OUTPUT ;
    1ca4:	ea e3       	ldi	r30, 0x3A	; 58
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	80 83       	st	Z, r24
    1cac:	23 c0       	rjmp	.+70     	; 0x1cf4 <MDIO_voidSetPort+0xac>
			break ;
		case PORTB :
			if(Copy_u8PinDirection == INPUT)
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	88 23       	and	r24, r24
    1cb2:	21 f4       	brne	.+8      	; 0x1cbc <MDIO_voidSetPort+0x74>
				DIO_DDRB = ALL_INPUT ; 
    1cb4:	e7 e3       	ldi	r30, 0x37	; 55
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	10 82       	st	Z, r1
    1cba:	1c c0       	rjmp	.+56     	; 0x1cf4 <MDIO_voidSetPort+0xac>
			else 
				DIO_DDRB = ALL_OUTPUT ;
    1cbc:	e7 e3       	ldi	r30, 0x37	; 55
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	8f ef       	ldi	r24, 0xFF	; 255
    1cc2:	80 83       	st	Z, r24
    1cc4:	17 c0       	rjmp	.+46     	; 0x1cf4 <MDIO_voidSetPort+0xac>
			break ;
		case PORTC :
			if(Copy_u8PinDirection == INPUT)
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	88 23       	and	r24, r24
    1cca:	21 f4       	brne	.+8      	; 0x1cd4 <MDIO_voidSetPort+0x8c>
				DIO_DDRC = ALL_INPUT ; 
    1ccc:	e4 e3       	ldi	r30, 0x34	; 52
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	10 82       	st	Z, r1
    1cd2:	10 c0       	rjmp	.+32     	; 0x1cf4 <MDIO_voidSetPort+0xac>
			else 
				DIO_DDRC = ALL_OUTPUT ;
    1cd4:	e4 e3       	ldi	r30, 0x34	; 52
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	80 83       	st	Z, r24
    1cdc:	0b c0       	rjmp	.+22     	; 0x1cf4 <MDIO_voidSetPort+0xac>
			break ;	
		case PORTD :
			if(Copy_u8PinDirection == INPUT)
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	88 23       	and	r24, r24
    1ce2:	21 f4       	brne	.+8      	; 0x1cec <MDIO_voidSetPort+0xa4>
				DIO_DDRD = ALL_INPUT ; 
    1ce4:	e1 e3       	ldi	r30, 0x31	; 49
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	10 82       	st	Z, r1
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <MDIO_voidSetPort+0xac>
			else 
				DIO_DDRD = ALL_OUTPUT ;
    1cec:	e1 e3       	ldi	r30, 0x31	; 49
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	8f ef       	ldi	r24, 0xFF	; 255
    1cf2:	80 83       	st	Z, r24
			break ;
	}
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <MDIO_voidSetSpecificPortOutPut>:
*						    - PORTC  					  *
*						    - PORTD   					  *
**********************************************************/

void MDIO_voidSetSpecificPortOutPut(u8 Copy_u8PortName , u8 Copy_u8Value) 
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <MDIO_voidSetSpecificPortOutPut+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <MDIO_voidSetSpecificPortOutPut+0x8>
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortName)
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	3c 83       	std	Y+4, r19	; 0x04
    1d1a:	2b 83       	std	Y+3, r18	; 0x03
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	81 30       	cpi	r24, 0x01	; 1
    1d22:	91 05       	cpc	r25, r1
    1d24:	d1 f0       	breq	.+52     	; 0x1d5a <MDIO_voidSetSpecificPortOutPut+0x58>
    1d26:	2b 81       	ldd	r18, Y+3	; 0x03
    1d28:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <MDIO_voidSetSpecificPortOutPut+0x38>
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	61 f0       	breq	.+24     	; 0x1d50 <MDIO_voidSetSpecificPortOutPut+0x4e>
    1d38:	1e c0       	rjmp	.+60     	; 0x1d76 <MDIO_voidSetSpecificPortOutPut+0x74>
    1d3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3e:	22 30       	cpi	r18, 0x02	; 2
    1d40:	31 05       	cpc	r19, r1
    1d42:	81 f0       	breq	.+32     	; 0x1d64 <MDIO_voidSetSpecificPortOutPut+0x62>
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	83 30       	cpi	r24, 0x03	; 3
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	81 f0       	breq	.+32     	; 0x1d6e <MDIO_voidSetSpecificPortOutPut+0x6c>
    1d4e:	13 c0       	rjmp	.+38     	; 0x1d76 <MDIO_voidSetSpecificPortOutPut+0x74>
	{
		case PORTA :
			DIO_PORTA =Copy_u8Value ;
    1d50:	eb e3       	ldi	r30, 0x3B	; 59
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	80 83       	st	Z, r24
    1d58:	0e c0       	rjmp	.+28     	; 0x1d76 <MDIO_voidSetSpecificPortOutPut+0x74>
			break ;
		case PORTB :
			DIO_PORTB =Copy_u8Value ;
    1d5a:	e8 e3       	ldi	r30, 0x38	; 56
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	80 83       	st	Z, r24
    1d62:	09 c0       	rjmp	.+18     	; 0x1d76 <MDIO_voidSetSpecificPortOutPut+0x74>
			break ;
		case PORTC :
			DIO_PORTC =Copy_u8Value ;
    1d64:	e5 e3       	ldi	r30, 0x35	; 53
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	80 83       	st	Z, r24
    1d6c:	04 c0       	rjmp	.+8      	; 0x1d76 <MDIO_voidSetSpecificPortOutPut+0x74>
			break ;
		case PORTD :
			DIO_PORTD =Copy_u8Value ;
    1d6e:	e2 e3       	ldi	r30, 0x32	; 50
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	80 83       	st	Z, r24
			break ;
	}
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <MDIO_u8GetPinValue>:
*						    - PORTB || 	   		    PIN1 /PIN5 *
*						    - PORTC ||		  	    PIN2 /PIN6 *
*						    - PORTD ||  		    PIN3 /PIN7 *
***************************************************************/
u8 MDIO_u8GetPinValue(u8 Copy_u8PortName , u8 Copy_u8PinNumber )
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <MDIO_u8GetPinValue+0x6>
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <MDIO_u8GetPinValue+0x8>
    1d8c:	0f 92       	push	r0
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	8a 83       	std	Y+2, r24	; 0x02
    1d94:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PortValue ;
	if(Copy_u8PinNumber <= 7)
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	88 30       	cpi	r24, 0x08	; 8
    1d9a:	08 f0       	brcs	.+2      	; 0x1d9e <MDIO_u8GetPinValue+0x1a>
    1d9c:	67 c0       	rjmp	.+206    	; 0x1e6c <MDIO_u8GetPinValue+0xe8>
	{
		switch(Copy_u8PortName)
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	3d 83       	std	Y+5, r19	; 0x05
    1da6:	2c 83       	std	Y+4, r18	; 0x04
    1da8:	4c 81       	ldd	r20, Y+4	; 0x04
    1daa:	5d 81       	ldd	r21, Y+5	; 0x05
    1dac:	41 30       	cpi	r20, 0x01	; 1
    1dae:	51 05       	cpc	r21, r1
    1db0:	41 f1       	breq	.+80     	; 0x1e02 <MDIO_u8GetPinValue+0x7e>
    1db2:	8c 81       	ldd	r24, Y+4	; 0x04
    1db4:	9d 81       	ldd	r25, Y+5	; 0x05
    1db6:	82 30       	cpi	r24, 0x02	; 2
    1db8:	91 05       	cpc	r25, r1
    1dba:	34 f4       	brge	.+12     	; 0x1dc8 <MDIO_u8GetPinValue+0x44>
    1dbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc0:	21 15       	cp	r18, r1
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	61 f0       	breq	.+24     	; 0x1dde <MDIO_u8GetPinValue+0x5a>
    1dc6:	52 c0       	rjmp	.+164    	; 0x1e6c <MDIO_u8GetPinValue+0xe8>
    1dc8:	4c 81       	ldd	r20, Y+4	; 0x04
    1dca:	5d 81       	ldd	r21, Y+5	; 0x05
    1dcc:	42 30       	cpi	r20, 0x02	; 2
    1dce:	51 05       	cpc	r21, r1
    1dd0:	51 f1       	breq	.+84     	; 0x1e26 <MDIO_u8GetPinValue+0xa2>
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd6:	83 30       	cpi	r24, 0x03	; 3
    1dd8:	91 05       	cpc	r25, r1
    1dda:	b9 f1       	breq	.+110    	; 0x1e4a <MDIO_u8GetPinValue+0xc6>
    1ddc:	47 c0       	rjmp	.+142    	; 0x1e6c <MDIO_u8GetPinValue+0xe8>
		{
			case PORTA:
				Local_u8PortValue = GET_BIT(DIO_PINA,Copy_u8PinNumber) ;
    1dde:	e9 e3       	ldi	r30, 0x39	; 57
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a9 01       	movw	r20, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <MDIO_u8GetPinValue+0x72>
    1df2:	55 95       	asr	r21
    1df4:	47 95       	ror	r20
    1df6:	8a 95       	dec	r24
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <MDIO_u8GetPinValue+0x6e>
    1dfa:	ca 01       	movw	r24, r20
    1dfc:	81 70       	andi	r24, 0x01	; 1
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	35 c0       	rjmp	.+106    	; 0x1e6c <MDIO_u8GetPinValue+0xe8>
				break ;
			case PORTB:
				Local_u8PortValue = GET_BIT(DIO_PINB,Copy_u8PinNumber) ;
    1e02:	e6 e3       	ldi	r30, 0x36	; 54
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a9 01       	movw	r20, r18
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <MDIO_u8GetPinValue+0x96>
    1e16:	55 95       	asr	r21
    1e18:	47 95       	ror	r20
    1e1a:	8a 95       	dec	r24
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <MDIO_u8GetPinValue+0x92>
    1e1e:	ca 01       	movw	r24, r20
    1e20:	81 70       	andi	r24, 0x01	; 1
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	23 c0       	rjmp	.+70     	; 0x1e6c <MDIO_u8GetPinValue+0xe8>
				break ;
			case PORTC:
				Local_u8PortValue = GET_BIT(DIO_PINC,Copy_u8PinNumber) ;
    1e26:	e3 e3       	ldi	r30, 0x33	; 51
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	88 2f       	mov	r24, r24
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	a9 01       	movw	r20, r18
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <MDIO_u8GetPinValue+0xba>
    1e3a:	55 95       	asr	r21
    1e3c:	47 95       	ror	r20
    1e3e:	8a 95       	dec	r24
    1e40:	e2 f7       	brpl	.-8      	; 0x1e3a <MDIO_u8GetPinValue+0xb6>
    1e42:	ca 01       	movw	r24, r20
    1e44:	81 70       	andi	r24, 0x01	; 1
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	11 c0       	rjmp	.+34     	; 0x1e6c <MDIO_u8GetPinValue+0xe8>
				break ;
			case PORTD:
				Local_u8PortValue = GET_BIT(DIO_PIND,Copy_u8PinNumber) ;
    1e4a:	e0 e3       	ldi	r30, 0x30	; 48
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a9 01       	movw	r20, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <MDIO_u8GetPinValue+0xde>
    1e5e:	55 95       	asr	r21
    1e60:	47 95       	ror	r20
    1e62:	8a 95       	dec	r24
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <MDIO_u8GetPinValue+0xda>
    1e66:	ca 01       	movw	r24, r20
    1e68:	81 70       	andi	r24, 0x01	; 1
    1e6a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Return error*/
	}
	return Local_u8PortValue ;
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <MDIO_u8GetPortValue>:
*						    - PORTD   					       *
* Return : u8							 					   *
***************************************************************/

u8 MDIO_u8GetPortValue(u8 Copy_u8PortName )
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <MDIO_u8GetPortValue+0x6>
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <MDIO_u8GetPortValue+0x8>
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortValue ;
		switch(Copy_u8PortName)
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	3c 83       	std	Y+4, r19	; 0x04
    1e94:	2b 83       	std	Y+3, r18	; 0x03
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	d1 f0       	breq	.+52     	; 0x1ed4 <MDIO_u8GetPortValue+0x56>
    1ea0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea4:	22 30       	cpi	r18, 0x02	; 2
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <MDIO_u8GetPortValue+0x36>
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	61 f0       	breq	.+24     	; 0x1eca <MDIO_u8GetPortValue+0x4c>
    1eb2:	1e c0       	rjmp	.+60     	; 0x1ef0 <MDIO_u8GetPortValue+0x72>
    1eb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb8:	22 30       	cpi	r18, 0x02	; 2
    1eba:	31 05       	cpc	r19, r1
    1ebc:	81 f0       	breq	.+32     	; 0x1ede <MDIO_u8GetPortValue+0x60>
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	83 30       	cpi	r24, 0x03	; 3
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	81 f0       	breq	.+32     	; 0x1ee8 <MDIO_u8GetPortValue+0x6a>
    1ec8:	13 c0       	rjmp	.+38     	; 0x1ef0 <MDIO_u8GetPortValue+0x72>
		{
			case PORTA:
				Local_u8PortValue = DIO_PINA ;
    1eca:	e9 e3       	ldi	r30, 0x39	; 57
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	0e c0       	rjmp	.+28     	; 0x1ef0 <MDIO_u8GetPortValue+0x72>
				break ;
			case PORTB:
				Local_u8PortValue = DIO_PINB ;
    1ed4:	e6 e3       	ldi	r30, 0x36	; 54
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	09 c0       	rjmp	.+18     	; 0x1ef0 <MDIO_u8GetPortValue+0x72>
				break ;
			case PORTC:
				Local_u8PortValue = DIO_PINC ;
    1ede:	e3 e3       	ldi	r30, 0x33	; 51
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	04 c0       	rjmp	.+8      	; 0x1ef0 <MDIO_u8GetPortValue+0x72>
				break ;
			case PORTD:
				Local_u8PortValue = DIO_PIND ;
    1ee8:	e0 e3       	ldi	r30, 0x30	; 48
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	89 83       	std	Y+1, r24	; 0x01
		 		break ;
		}
	return Local_u8PortValue ;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <MAP>:
static void (*Global_pvCallbackFunction)(void ) = NULL;
/* Global variable for ISR to save ADC Data */
u16 Global_u16DigitalValue=10 ;

s16 MAP(s16 Copy_s16InputMin, s16 Copy_s16InputMax, s16 Copy_s16OutputMin, s16 Copy_s16OutputMax, s16 Copy_s16InputValue)
 {
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	62 97       	sbiw	r28, 0x12	; 18
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	9a 87       	std	Y+10, r25	; 0x0a
    1f1a:	89 87       	std	Y+9, r24	; 0x09
    1f1c:	7c 87       	std	Y+12, r23	; 0x0c
    1f1e:	6b 87       	std	Y+11, r22	; 0x0b
    1f20:	5e 87       	std	Y+14, r21	; 0x0e
    1f22:	4d 87       	std	Y+13, r20	; 0x0d
    1f24:	38 8b       	std	Y+16, r19	; 0x10
    1f26:	2f 87       	std	Y+15, r18	; 0x0f
    1f28:	1a 8b       	std	Y+18, r17	; 0x12
    1f2a:	09 8b       	std	Y+17, r16	; 0x11
	/*Local variable to Store in it the return value*/
	 s16 Local_s16ReturnX;
	/*Calculating the slope of the Linear graph*/
     s16 Slope = (Copy_s16InputMax-Copy_s16InputMin)/(Copy_s16OutputMax-Copy_s16OutputMin);
    1f2c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f2e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f34:	a9 01       	movw	r20, r18
    1f36:	48 1b       	sub	r20, r24
    1f38:	59 0b       	sbc	r21, r25
    1f3a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1f3c:	38 89       	ldd	r19, Y+16	; 0x10
    1f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f42:	28 1b       	sub	r18, r24
    1f44:	39 0b       	sbc	r19, r25
    1f46:	ca 01       	movw	r24, r20
    1f48:	b9 01       	movw	r22, r18
    1f4a:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__divmodhi4>
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
	/*Getting the Entered Value in the variable Y*/
     s16 Y = Copy_s16InputValue;
    1f54:	89 89       	ldd	r24, Y+17	; 0x11
    1f56:	9a 89       	ldd	r25, Y+18	; 0x12
    1f58:	9c 83       	std	Y+4, r25	; 0x04
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
	/*Define a variable to store the opposite value on the line*/
     s16 X = 0;
    1f5c:	1a 82       	std	Y+2, r1	; 0x02
    1f5e:	19 82       	std	Y+1, r1	; 0x01

	/*Calculating the wanted oppisite value on the line*/
     X = ((Y - Copy_s16InputMin)/Slope)+Copy_s16OutputMin;
    1f60:	2b 81       	ldd	r18, Y+3	; 0x03
    1f62:	3c 81       	ldd	r19, Y+4	; 0x04
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	a9 01       	movw	r20, r18
    1f6a:	48 1b       	sub	r20, r24
    1f6c:	59 0b       	sbc	r21, r25
    1f6e:	ca 01       	movw	r24, r20
    1f70:	2d 81       	ldd	r18, Y+5	; 0x05
    1f72:	3e 81       	ldd	r19, Y+6	; 0x06
    1f74:	b9 01       	movw	r22, r18
    1f76:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__divmodhi4>
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9c 01       	movw	r18, r24
    1f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f82:	82 0f       	add	r24, r18
    1f84:	93 1f       	adc	r25, r19
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01

	/*Check if the Entered value Smaller than the minimum*/
     if(Copy_s16InputValue < Copy_s16InputMin)
    1f8a:	29 89       	ldd	r18, Y+17	; 0x11
    1f8c:	3a 89       	ldd	r19, Y+18	; 0x12
    1f8e:	89 85       	ldd	r24, Y+9	; 0x09
    1f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f92:	28 17       	cp	r18, r24
    1f94:	39 07       	cpc	r19, r25
    1f96:	2c f4       	brge	.+10     	; 0x1fa2 <MAP+0xa2>
     {
		/*Return the MIN value*/
    	 Local_s16ReturnX = Copy_s16OutputMin;
    1f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9c:	98 87       	std	Y+8, r25	; 0x08
    1f9e:	8f 83       	std	Y+7, r24	; 0x07
    1fa0:	10 c0       	rjmp	.+32     	; 0x1fc2 <MAP+0xc2>
     }
	 /*Check if the Entered value Bigger than the maximum*/
     else if(Copy_s16InputValue > Copy_s16InputMax)
    1fa2:	29 89       	ldd	r18, Y+17	; 0x11
    1fa4:	3a 89       	ldd	r19, Y+18	; 0x12
    1fa6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fa8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1faa:	82 17       	cp	r24, r18
    1fac:	93 07       	cpc	r25, r19
    1fae:	2c f4       	brge	.+10     	; 0x1fba <MAP+0xba>
     {
		/*Return the MAX value*/
    	 Local_s16ReturnX = Copy_s16OutputMax;
    1fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb2:	98 89       	ldd	r25, Y+16	; 0x10
    1fb4:	98 87       	std	Y+8, r25	; 0x08
    1fb6:	8f 83       	std	Y+7, r24	; 0x07
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <MAP+0xc2>
     }
     else
     {
		/*Return the Calculated value*/
    	 Local_s16ReturnX = X;
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	98 87       	std	Y+8, r25	; 0x08
    1fc0:	8f 83       	std	Y+7, r24	; 0x07
     }


    return Local_s16ReturnX;
    1fc2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc4:	98 85       	ldd	r25, Y+8	; 0x08
 }
    1fc6:	62 96       	adiw	r28, 0x12	; 18
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	08 95       	ret

00001fdc <MADC_voidInit>:

void MADC_voidInit()
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
		#if ADC_ENABLE == ENABLE
			CLEAR_BIT(ADMUX,ADMUX_ADLAR) ;
    1fe4:	a7 e2       	ldi	r26, 0x27	; 39
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e7 e2       	ldi	r30, 0x27	; 39
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	8f 7d       	andi	r24, 0xDF	; 223
    1ff0:	8c 93       	st	X, r24
			#if     ADC_REF_SELECTION   ==  AREF
				CLEAR_BIT(ADMUX, ADMUX_REFS0);
				CLEAR_BIT(ADMUX, ADMUX_REFS1);
			#elif   ADC_REF_SELECTION   ==  AVCC
				SET_BIT(ADMUX  , ADMUX_REFS0);
    1ff2:	a7 e2       	ldi	r26, 0x27	; 39
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e7 e2       	ldi	r30, 0x27	; 39
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	80 64       	ori	r24, 0x40	; 64
    1ffe:	8c 93       	st	X, r24
				CLEAR_BIT(ADMUX, ADMUX_REFS1);
    2000:	a7 e2       	ldi	r26, 0x27	; 39
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e7 e2       	ldi	r30, 0x27	; 39
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8f 77       	andi	r24, 0x7F	; 127
    200c:	8c 93       	st	X, r24
				SET_BIT(ADMUX, ADMUX_REFS0);
				SET_BIT(ADMUX, ADMUX_REFS1);
			#else
				#error "NO SELECTION"
			#endif
			ADCSRA &= PRESCALER_MASK ;
    200e:	a6 e2       	ldi	r26, 0x26	; 38
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e6 e2       	ldi	r30, 0x26	; 38
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	88 7f       	andi	r24, 0xF8	; 248
    201a:	8c 93       	st	X, r24
			ADCSRA |= ADC_PRESCALER_VALUE ;
    201c:	a6 e2       	ldi	r26, 0x26	; 38
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e6 e2       	ldi	r30, 0x26	; 38
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	82 60       	ori	r24, 0x02	; 2
    2028:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADEN) ;
    202a:	a6 e2       	ldi	r26, 0x26	; 38
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e6 e2       	ldi	r30, 0x26	; 38
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	80 68       	ori	r24, 0x80	; 128
    2036:	8c 93       	st	X, r24
		#elif  ADC_ENABLE == DISABLE
			CLEAR_BIT(ADCSRA,ADCSRA_ADEN) ;
 		#else
			#error "ADC_ENABLE Config. error"
		#endif
}
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <MADC_u16StartConversionSync>:

u16 MADC_u16StartConversionSync(u8 Copy_u8ChannelNumber)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	0f 92       	push	r0
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= ADMUX_MASK ;
    204a:	a7 e2       	ldi	r26, 0x27	; 39
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e7 e2       	ldi	r30, 0x27	; 39
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	80 7e       	andi	r24, 0xE0	; 224
    2056:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelNumber;
    2058:	a7 e2       	ldi	r26, 0x27	; 39
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e7 e2       	ldi	r30, 0x27	; 39
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	90 81       	ld	r25, Z
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	89 2b       	or	r24, r25
    2066:	8c 93       	st	X, r24

	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC) ;
    2068:	a6 e2       	ldi	r26, 0x26	; 38
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e6 e2       	ldi	r30, 0x26	; 38
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	80 64       	ori	r24, 0x40	; 64
    2074:	8c 93       	st	X, r24
	/*Polling till the flag is raised*/
	while(GET_BIT(ADCSRA,ADCSRA_ADIF) == 0);
    2076:	e6 e2       	ldi	r30, 0x26	; 38
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	82 95       	swap	r24
    207e:	8f 70       	andi	r24, 0x0F	; 15
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	81 70       	andi	r24, 0x01	; 1
    2086:	90 70       	andi	r25, 0x00	; 0
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	a9 f3       	breq	.-22     	; 0x2076 <MADC_u16StartConversionSync+0x38>
	/*Clear Flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    208c:	a6 e2       	ldi	r26, 0x26	; 38
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e6 e2       	ldi	r30, 0x26	; 38
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	80 61       	ori	r24, 0x10	; 16
    2098:	8c 93       	st	X, r24
	return ADC ;
    209a:	e4 e2       	ldi	r30, 0x24	; 36
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
}
    20a2:	0f 90       	pop	r0
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <MADC_voidStartConversionAsync>:

void MADC_voidStartConversionAsync(u8 Copy_u8ChannelNumber)
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	0f 92       	push	r0
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= ADMUX_MASK ;
    20b6:	a7 e2       	ldi	r26, 0x27	; 39
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e7 e2       	ldi	r30, 0x27	; 39
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	80 7e       	andi	r24, 0xE0	; 224
    20c2:	8c 93       	st	X, r24
	ADMUX |= Copy_u8ChannelNumber ;
    20c4:	a7 e2       	ldi	r26, 0x27	; 39
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e7 e2       	ldi	r30, 0x27	; 39
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	90 81       	ld	r25, Z
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	89 2b       	or	r24, r25
    20d2:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC) ;
    20d4:	a6 e2       	ldi	r26, 0x26	; 38
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e6 e2       	ldi	r30, 0x26	; 38
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	80 64       	ori	r24, 0x40	; 64
    20e0:	8c 93       	st	X, r24
	/* ADC ENABLE INTURREPT*/
	SET_BIT(ADCSRA,ADCSRA_ADIE );
    20e2:	a6 e2       	ldi	r26, 0x26	; 38
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e6 e2       	ldi	r30, 0x26	; 38
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	88 60       	ori	r24, 0x08	; 8
    20ee:	8c 93       	st	X, r24
}
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <MADC_voidSetCallback>:


/* ISR And callBack Function to ADC */
void MADC_voidSetCallback(void (*Copy_pvNotificationFunction)(void))
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <MADC_voidSetCallback+0x6>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
	Global_pvCallbackFunction = Copy_pvNotificationFunction ;
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	90 93 0c 01 	sts	0x010C, r25
    210e:	80 93 0b 01 	sts	0x010B, r24
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <__vector_16>:

void __vector_16(void)    __attribute__((signal));
void __vector_16(void)
{
    211c:	1f 92       	push	r1
    211e:	0f 92       	push	r0
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	0f 92       	push	r0
    2124:	11 24       	eor	r1, r1
    2126:	2f 93       	push	r18
    2128:	3f 93       	push	r19
    212a:	4f 93       	push	r20
    212c:	5f 93       	push	r21
    212e:	6f 93       	push	r22
    2130:	7f 93       	push	r23
    2132:	8f 93       	push	r24
    2134:	9f 93       	push	r25
    2136:	af 93       	push	r26
    2138:	bf 93       	push	r27
    213a:	ef 93       	push	r30
    213c:	ff 93       	push	r31
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    if(Global_pvCallbackFunction != NULL)
    2146:	80 91 0b 01 	lds	r24, 0x010B
    214a:	90 91 0c 01 	lds	r25, 0x010C
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	a1 f0       	breq	.+40     	; 0x217a <__vector_16+0x5e>
    {
        /*Get Data And Store It In A Global Variable*/
        Global_u16DigitalValue = ADC;
    2152:	e4 e2       	ldi	r30, 0x24	; 36
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	90 93 f2 00 	sts	0x00F2, r25
    215e:	80 93 f1 00 	sts	0x00F1, r24
        /*Call The Callback Function*/
        Global_pvCallbackFunction();
    2162:	e0 91 0b 01 	lds	r30, 0x010B
    2166:	f0 91 0c 01 	lds	r31, 0x010C
    216a:	09 95       	icall
        /*Disable The Interrupt*/
        CLEAR_BIT(ADCSRA, ADCSRA_ADIE);
    216c:	a6 e2       	ldi	r26, 0x26	; 38
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e6 e2       	ldi	r30, 0x26	; 38
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	87 7f       	andi	r24, 0xF7	; 247
    2178:	8c 93       	st	X, r24
    }
    else
    {
        /*Do Nothing*/
    }
}
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	ff 91       	pop	r31
    2180:	ef 91       	pop	r30
    2182:	bf 91       	pop	r27
    2184:	af 91       	pop	r26
    2186:	9f 91       	pop	r25
    2188:	8f 91       	pop	r24
    218a:	7f 91       	pop	r23
    218c:	6f 91       	pop	r22
    218e:	5f 91       	pop	r21
    2190:	4f 91       	pop	r20
    2192:	3f 91       	pop	r19
    2194:	2f 91       	pop	r18
    2196:	0f 90       	pop	r0
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	0f 90       	pop	r0
    219c:	1f 90       	pop	r1
    219e:	18 95       	reti

000021a0 <HSTEPPER_voidRotate>:
#define 	F_CPU 	8000000UL
#endif
#include <util/delay.h>

void HSTEPPER_voidRotate(u8 Copy_u8Direction, u16 Copy_u16Angle)
{
    21a0:	0f 93       	push	r16
    21a2:	1f 93       	push	r17
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	cb 57       	subi	r28, 0x7B	; 123
    21ae:	d0 40       	sbci	r29, 0x00	; 0
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	fe 01       	movw	r30, r28
    21bc:	e9 58       	subi	r30, 0x89	; 137
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 83       	st	Z, r24
    21c2:	fe 01       	movw	r30, r28
    21c4:	e8 58       	subi	r30, 0x88	; 136
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	71 83       	std	Z+1, r23	; 0x01
    21ca:	60 83       	st	Z, r22
	u16 Local_u16Steps  = 0;
    21cc:	fe 01       	movw	r30, r28
    21ce:	eb 58       	subi	r30, 0x8B	; 139
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	11 82       	std	Z+1, r1	; 0x01
    21d4:	10 82       	st	Z, r1

	u16 Local_u16Iterations = 0;
    21d6:	fe 01       	movw	r30, r28
    21d8:	ed 58       	subi	r30, 0x8D	; 141
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	11 82       	std	Z+1, r1	; 0x01
    21de:	10 82       	st	Z, r1

	u16 Local_u16LoopCounter = 0;
    21e0:	fe 01       	movw	r30, r28
    21e2:	ef 58       	subi	r30, 0x8F	; 143
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	11 82       	std	Z+1, r1	; 0x01
    21e8:	10 82       	st	Z, r1

	Local_u16Steps = (Copy_u16Angle * STEPS_NUMBER)/ 360UL;
    21ea:	fe 01       	movw	r30, r28
    21ec:	e8 58       	subi	r30, 0x88	; 136
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	80 81       	ld	r24, Z
    21f2:	91 81       	ldd	r25, Z+1	; 0x01
    21f4:	cc 01       	movw	r24, r24
    21f6:	a0 e0       	ldi	r26, 0x00	; 0
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	07 2e       	mov	r0, r23
    21fc:	7b e0       	ldi	r23, 0x0B	; 11
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	aa 1f       	adc	r26, r26
    2204:	bb 1f       	adc	r27, r27
    2206:	7a 95       	dec	r23
    2208:	d1 f7       	brne	.-12     	; 0x21fe <HSTEPPER_voidRotate+0x5e>
    220a:	70 2d       	mov	r23, r0
    220c:	28 e6       	ldi	r18, 0x68	; 104
    220e:	31 e0       	ldi	r19, 0x01	; 1
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	bc 01       	movw	r22, r24
    2216:	cd 01       	movw	r24, r26
    2218:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__udivmodsi4>
    221c:	da 01       	movw	r26, r20
    221e:	c9 01       	movw	r24, r18
    2220:	fe 01       	movw	r30, r28
    2222:	eb 58       	subi	r30, 0x8B	; 139
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24

	Local_u16Iterations = Local_u16Steps / 4;
    222a:	de 01       	movw	r26, r28
    222c:	ad 58       	subi	r26, 0x8D	; 141
    222e:	bf 4f       	sbci	r27, 0xFF	; 255
    2230:	fe 01       	movw	r30, r28
    2232:	eb 58       	subi	r30, 0x8B	; 139
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
    223a:	96 95       	lsr	r25
    223c:	87 95       	ror	r24
    223e:	96 95       	lsr	r25
    2240:	87 95       	ror	r24
    2242:	11 96       	adiw	r26, 0x01	; 1
    2244:	9c 93       	st	X, r25
    2246:	8e 93       	st	-X, r24

	switch(Copy_u8Direction)
    2248:	fe 01       	movw	r30, r28
    224a:	e9 58       	subi	r30, 0x89	; 137
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	ec 96       	adiw	r28, 0x3c	; 60
    2256:	3f af       	std	Y+63, r19	; 0x3f
    2258:	2e af       	std	Y+62, r18	; 0x3e
    225a:	ec 97       	sbiw	r28, 0x3c	; 60
    225c:	ec 96       	adiw	r28, 0x3c	; 60
    225e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2260:	9f ad       	ldd	r25, Y+63	; 0x3f
    2262:	ec 97       	sbiw	r28, 0x3c	; 60
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	09 f4       	brne	.+2      	; 0x226a <HSTEPPER_voidRotate+0xca>
    2268:	19 c3       	rjmp	.+1586   	; 0x289c <HSTEPPER_voidRotate+0x6fc>
    226a:	ec 96       	adiw	r28, 0x3c	; 60
    226c:	ee ad       	ldd	r30, Y+62	; 0x3e
    226e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2270:	ec 97       	sbiw	r28, 0x3c	; 60
    2272:	e1 30       	cpi	r30, 0x01	; 1
    2274:	f1 05       	cpc	r31, r1
    2276:	09 f0       	breq	.+2      	; 0x227a <HSTEPPER_voidRotate+0xda>
    2278:	4b c5       	rjmp	.+2710   	; 0x2d10 <HSTEPPER_voidRotate+0xb70>
	{	
		case CLK_WISE:
			HSTEPPER_VoidStopMotor();
    227a:	0e 94 94 16 	call	0x2d28	; 0x2d28 <HSTEPPER_VoidStopMotor>

			for(Local_u16LoopCounter = 0; Local_u16LoopCounter < Local_u16Iterations; Local_u16LoopCounter++)
    227e:	fe 01       	movw	r30, r28
    2280:	ef 58       	subi	r30, 0x8F	; 143
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	11 82       	std	Z+1, r1	; 0x01
    2286:	10 82       	st	Z, r1
    2288:	f9 c2       	rjmp	.+1522   	; 0x287c <HSTEPPER_voidRotate+0x6dc>
			{
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN0, LOW);
    228a:	83 e0       	ldi	r24, 0x03	; 3
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN1, HIGH);
    2294:	83 e0       	ldi	r24, 0x03	; 3
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	41 e0       	ldi	r20, 0x01	; 1
    229a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN2, HIGH);
    229e:	83 e0       	ldi	r24, 0x03	; 3
    22a0:	62 e0       	ldi	r22, 0x02	; 2
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN3, HIGH);
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	63 e0       	ldi	r22, 0x03	; 3
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    22b2:	fe 01       	movw	r30, r28
    22b4:	e3 59       	subi	r30, 0x93	; 147
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a0 e2       	ldi	r26, 0x20	; 32
    22be:	b1 e4       	ldi	r27, 0x41	; 65
    22c0:	80 83       	st	Z, r24
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	a2 83       	std	Z+2, r26	; 0x02
    22c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	8e 01       	movw	r16, r28
    22ca:	07 59       	subi	r16, 0x97	; 151
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	fe 01       	movw	r30, r28
    22d0:	e3 59       	subi	r30, 0x93	; 147
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	82 81       	ldd	r24, Z+2	; 0x02
    22da:	93 81       	ldd	r25, Z+3	; 0x03
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	4a ef       	ldi	r20, 0xFA	; 250
    22e2:	54 e4       	ldi	r21, 0x44	; 68
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	f8 01       	movw	r30, r16
    22ee:	80 83       	st	Z, r24
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	a2 83       	std	Z+2, r26	; 0x02
    22f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22f6:	fe 01       	movw	r30, r28
    22f8:	e7 59       	subi	r30, 0x97	; 151
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	44 f4       	brge	.+16     	; 0x2324 <HSTEPPER_voidRotate+0x184>
		__ticks = 1;
    2314:	fe 01       	movw	r30, r28
    2316:	e9 59       	subi	r30, 0x99	; 153
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
    2322:	64 c0       	rjmp	.+200    	; 0x23ec <HSTEPPER_voidRotate+0x24c>
	else if (__tmp > 65535)
    2324:	fe 01       	movw	r30, r28
    2326:	e7 59       	subi	r30, 0x97	; 151
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	0c f0       	brlt	.+2      	; 0x2344 <HSTEPPER_voidRotate+0x1a4>
    2342:	43 c0       	rjmp	.+134    	; 0x23ca <HSTEPPER_voidRotate+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2344:	fe 01       	movw	r30, r28
    2346:	e3 59       	subi	r30, 0x93	; 147
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	60 81       	ld	r22, Z
    234c:	71 81       	ldd	r23, Z+1	; 0x01
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e2       	ldi	r20, 0x20	; 32
    2358:	51 e4       	ldi	r21, 0x41	; 65
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8e 01       	movw	r16, r28
    2364:	09 59       	subi	r16, 0x99	; 153
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	f8 01       	movw	r30, r16
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	80 83       	st	Z, r24
    237a:	1f c0       	rjmp	.+62     	; 0x23ba <HSTEPPER_voidRotate+0x21a>
    237c:	fe 01       	movw	r30, r28
    237e:	eb 59       	subi	r30, 0x9B	; 155
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	88 ec       	ldi	r24, 0xC8	; 200
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	91 83       	std	Z+1, r25	; 0x01
    2388:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    238a:	fe 01       	movw	r30, r28
    238c:	eb 59       	subi	r30, 0x9B	; 155
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <HSTEPPER_voidRotate+0x1f4>
    2398:	fe 01       	movw	r30, r28
    239a:	eb 59       	subi	r30, 0x9B	; 155
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	de 01       	movw	r26, r28
    23a4:	a9 59       	subi	r26, 0x99	; 153
    23a6:	bf 4f       	sbci	r27, 0xFF	; 255
    23a8:	fe 01       	movw	r30, r28
    23aa:	e9 59       	subi	r30, 0x99	; 153
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	11 96       	adiw	r26, 0x01	; 1
    23b6:	9c 93       	st	X, r25
    23b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	fe 01       	movw	r30, r28
    23bc:	e9 59       	subi	r30, 0x99	; 153
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	80 81       	ld	r24, Z
    23c2:	91 81       	ldd	r25, Z+1	; 0x01
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	d1 f6       	brne	.-76     	; 0x237c <HSTEPPER_voidRotate+0x1dc>
    23c8:	27 c0       	rjmp	.+78     	; 0x2418 <HSTEPPER_voidRotate+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ca:	8e 01       	movw	r16, r28
    23cc:	09 59       	subi	r16, 0x99	; 153
    23ce:	1f 4f       	sbci	r17, 0xFF	; 255
    23d0:	fe 01       	movw	r30, r28
    23d2:	e7 59       	subi	r30, 0x97	; 151
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	f8 01       	movw	r30, r16
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
    23ec:	de 01       	movw	r26, r28
    23ee:	ad 59       	subi	r26, 0x9D	; 157
    23f0:	bf 4f       	sbci	r27, 0xFF	; 255
    23f2:	fe 01       	movw	r30, r28
    23f4:	e9 59       	subi	r30, 0x99	; 153
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	91 81       	ldd	r25, Z+1	; 0x01
    23fc:	8d 93       	st	X+, r24
    23fe:	9c 93       	st	X, r25
    2400:	fe 01       	movw	r30, r28
    2402:	ed 59       	subi	r30, 0x9D	; 157
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <HSTEPPER_voidRotate+0x26a>
    240e:	fe 01       	movw	r30, r28
    2410:	ed 59       	subi	r30, 0x9D	; 157
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
				_delay_ms(10);

				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN0, HIGH);
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN1, LOW);
    2422:	83 e0       	ldi	r24, 0x03	; 3
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN2, HIGH);
    242c:	83 e0       	ldi	r24, 0x03	; 3
    242e:	62 e0       	ldi	r22, 0x02	; 2
    2430:	41 e0       	ldi	r20, 0x01	; 1
    2432:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN3, HIGH);
    2436:	83 e0       	ldi	r24, 0x03	; 3
    2438:	63 e0       	ldi	r22, 0x03	; 3
    243a:	41 e0       	ldi	r20, 0x01	; 1
    243c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    2440:	fe 01       	movw	r30, r28
    2442:	e1 5a       	subi	r30, 0xA1	; 161
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	a0 e2       	ldi	r26, 0x20	; 32
    244c:	b1 e4       	ldi	r27, 0x41	; 65
    244e:	80 83       	st	Z, r24
    2450:	91 83       	std	Z+1, r25	; 0x01
    2452:	a2 83       	std	Z+2, r26	; 0x02
    2454:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2456:	8e 01       	movw	r16, r28
    2458:	05 5a       	subi	r16, 0xA5	; 165
    245a:	1f 4f       	sbci	r17, 0xFF	; 255
    245c:	fe 01       	movw	r30, r28
    245e:	e1 5a       	subi	r30, 0xA1	; 161
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	60 81       	ld	r22, Z
    2464:	71 81       	ldd	r23, Z+1	; 0x01
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	93 81       	ldd	r25, Z+3	; 0x03
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a ef       	ldi	r20, 0xFA	; 250
    2470:	54 e4       	ldi	r21, 0x44	; 68
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	f8 01       	movw	r30, r16
    247c:	80 83       	st	Z, r24
    247e:	91 83       	std	Z+1, r25	; 0x01
    2480:	a2 83       	std	Z+2, r26	; 0x02
    2482:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2484:	fe 01       	movw	r30, r28
    2486:	e5 5a       	subi	r30, 0xA5	; 165
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	60 81       	ld	r22, Z
    248c:	71 81       	ldd	r23, Z+1	; 0x01
    248e:	82 81       	ldd	r24, Z+2	; 0x02
    2490:	93 81       	ldd	r25, Z+3	; 0x03
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    249e:	88 23       	and	r24, r24
    24a0:	44 f4       	brge	.+16     	; 0x24b2 <HSTEPPER_voidRotate+0x312>
		__ticks = 1;
    24a2:	fe 01       	movw	r30, r28
    24a4:	e7 5a       	subi	r30, 0xA7	; 167
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	80 83       	st	Z, r24
    24b0:	64 c0       	rjmp	.+200    	; 0x257a <HSTEPPER_voidRotate+0x3da>
	else if (__tmp > 65535)
    24b2:	fe 01       	movw	r30, r28
    24b4:	e5 5a       	subi	r30, 0xA5	; 165
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	3f ef       	ldi	r19, 0xFF	; 255
    24c4:	4f e7       	ldi	r20, 0x7F	; 127
    24c6:	57 e4       	ldi	r21, 0x47	; 71
    24c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24cc:	18 16       	cp	r1, r24
    24ce:	0c f0       	brlt	.+2      	; 0x24d2 <HSTEPPER_voidRotate+0x332>
    24d0:	43 c0       	rjmp	.+134    	; 0x2558 <HSTEPPER_voidRotate+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d2:	fe 01       	movw	r30, r28
    24d4:	e1 5a       	subi	r30, 0xA1	; 161
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	60 81       	ld	r22, Z
    24da:	71 81       	ldd	r23, Z+1	; 0x01
    24dc:	82 81       	ldd	r24, Z+2	; 0x02
    24de:	93 81       	ldd	r25, Z+3	; 0x03
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e2       	ldi	r20, 0x20	; 32
    24e6:	51 e4       	ldi	r21, 0x41	; 65
    24e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8e 01       	movw	r16, r28
    24f2:	07 5a       	subi	r16, 0xA7	; 167
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	f8 01       	movw	r30, r16
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	80 83       	st	Z, r24
    2508:	1f c0       	rjmp	.+62     	; 0x2548 <HSTEPPER_voidRotate+0x3a8>
    250a:	fe 01       	movw	r30, r28
    250c:	e9 5a       	subi	r30, 0xA9	; 169
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	88 ec       	ldi	r24, 0xC8	; 200
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	80 83       	st	Z, r24
    2518:	fe 01       	movw	r30, r28
    251a:	e9 5a       	subi	r30, 0xA9	; 169
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <HSTEPPER_voidRotate+0x382>
    2526:	fe 01       	movw	r30, r28
    2528:	e9 5a       	subi	r30, 0xA9	; 169
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2530:	de 01       	movw	r26, r28
    2532:	a7 5a       	subi	r26, 0xA7	; 167
    2534:	bf 4f       	sbci	r27, 0xFF	; 255
    2536:	fe 01       	movw	r30, r28
    2538:	e7 5a       	subi	r30, 0xA7	; 167
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	11 96       	adiw	r26, 0x01	; 1
    2544:	9c 93       	st	X, r25
    2546:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	fe 01       	movw	r30, r28
    254a:	e7 5a       	subi	r30, 0xA7	; 167
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	d1 f6       	brne	.-76     	; 0x250a <HSTEPPER_voidRotate+0x36a>
    2556:	27 c0       	rjmp	.+78     	; 0x25a6 <HSTEPPER_voidRotate+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2558:	8e 01       	movw	r16, r28
    255a:	07 5a       	subi	r16, 0xA7	; 167
    255c:	1f 4f       	sbci	r17, 0xFF	; 255
    255e:	fe 01       	movw	r30, r28
    2560:	e5 5a       	subi	r30, 0xA5	; 165
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	82 81       	ldd	r24, Z+2	; 0x02
    256a:	93 81       	ldd	r25, Z+3	; 0x03
    256c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	f8 01       	movw	r30, r16
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
    257a:	de 01       	movw	r26, r28
    257c:	ab 5a       	subi	r26, 0xAB	; 171
    257e:	bf 4f       	sbci	r27, 0xFF	; 255
    2580:	fe 01       	movw	r30, r28
    2582:	e7 5a       	subi	r30, 0xA7	; 167
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	8d 93       	st	X+, r24
    258c:	9c 93       	st	X, r25
    258e:	fe 01       	movw	r30, r28
    2590:	eb 5a       	subi	r30, 0xAB	; 171
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <HSTEPPER_voidRotate+0x3f8>
    259c:	fe 01       	movw	r30, r28
    259e:	eb 5a       	subi	r30, 0xAB	; 171
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
				_delay_ms(10);

				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN0, HIGH);
    25a6:	83 e0       	ldi	r24, 0x03	; 3
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	41 e0       	ldi	r20, 0x01	; 1
    25ac:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN1, HIGH);
    25b0:	83 e0       	ldi	r24, 0x03	; 3
    25b2:	61 e0       	ldi	r22, 0x01	; 1
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN2, LOW);
    25ba:	83 e0       	ldi	r24, 0x03	; 3
    25bc:	62 e0       	ldi	r22, 0x02	; 2
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN3, HIGH);
    25c4:	83 e0       	ldi	r24, 0x03	; 3
    25c6:	63 e0       	ldi	r22, 0x03	; 3
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    25ce:	fe 01       	movw	r30, r28
    25d0:	ef 5a       	subi	r30, 0xAF	; 175
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	a0 e2       	ldi	r26, 0x20	; 32
    25da:	b1 e4       	ldi	r27, 0x41	; 65
    25dc:	80 83       	st	Z, r24
    25de:	91 83       	std	Z+1, r25	; 0x01
    25e0:	a2 83       	std	Z+2, r26	; 0x02
    25e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e4:	8e 01       	movw	r16, r28
    25e6:	03 5b       	subi	r16, 0xB3	; 179
    25e8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ea:	fe 01       	movw	r30, r28
    25ec:	ef 5a       	subi	r30, 0xAF	; 175
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	4a ef       	ldi	r20, 0xFA	; 250
    25fe:	54 e4       	ldi	r21, 0x44	; 68
    2600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	f8 01       	movw	r30, r16
    260a:	80 83       	st	Z, r24
    260c:	91 83       	std	Z+1, r25	; 0x01
    260e:	a2 83       	std	Z+2, r26	; 0x02
    2610:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2612:	fe 01       	movw	r30, r28
    2614:	e3 5b       	subi	r30, 0xB3	; 179
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	60 81       	ld	r22, Z
    261a:	71 81       	ldd	r23, Z+1	; 0x01
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	93 81       	ldd	r25, Z+3	; 0x03
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e8       	ldi	r20, 0x80	; 128
    2626:	5f e3       	ldi	r21, 0x3F	; 63
    2628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    262c:	88 23       	and	r24, r24
    262e:	44 f4       	brge	.+16     	; 0x2640 <HSTEPPER_voidRotate+0x4a0>
		__ticks = 1;
    2630:	fe 01       	movw	r30, r28
    2632:	e5 5b       	subi	r30, 0xB5	; 181
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	80 83       	st	Z, r24
    263e:	64 c0       	rjmp	.+200    	; 0x2708 <HSTEPPER_voidRotate+0x568>
	else if (__tmp > 65535)
    2640:	fe 01       	movw	r30, r28
    2642:	e3 5b       	subi	r30, 0xB3	; 179
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	60 81       	ld	r22, Z
    2648:	71 81       	ldd	r23, Z+1	; 0x01
    264a:	82 81       	ldd	r24, Z+2	; 0x02
    264c:	93 81       	ldd	r25, Z+3	; 0x03
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	3f ef       	ldi	r19, 0xFF	; 255
    2652:	4f e7       	ldi	r20, 0x7F	; 127
    2654:	57 e4       	ldi	r21, 0x47	; 71
    2656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265a:	18 16       	cp	r1, r24
    265c:	0c f0       	brlt	.+2      	; 0x2660 <HSTEPPER_voidRotate+0x4c0>
    265e:	43 c0       	rjmp	.+134    	; 0x26e6 <HSTEPPER_voidRotate+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2660:	fe 01       	movw	r30, r28
    2662:	ef 5a       	subi	r30, 0xAF	; 175
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e2       	ldi	r20, 0x20	; 32
    2674:	51 e4       	ldi	r21, 0x41	; 65
    2676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	8e 01       	movw	r16, r28
    2680:	05 5b       	subi	r16, 0xB5	; 181
    2682:	1f 4f       	sbci	r17, 0xFF	; 255
    2684:	bc 01       	movw	r22, r24
    2686:	cd 01       	movw	r24, r26
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	f8 01       	movw	r30, r16
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
    2696:	1f c0       	rjmp	.+62     	; 0x26d6 <HSTEPPER_voidRotate+0x536>
    2698:	fe 01       	movw	r30, r28
    269a:	e7 5b       	subi	r30, 0xB7	; 183
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	88 ec       	ldi	r24, 0xC8	; 200
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	80 83       	st	Z, r24
    26a6:	fe 01       	movw	r30, r28
    26a8:	e7 5b       	subi	r30, 0xB7	; 183
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <HSTEPPER_voidRotate+0x510>
    26b4:	fe 01       	movw	r30, r28
    26b6:	e7 5b       	subi	r30, 0xB7	; 183
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	de 01       	movw	r26, r28
    26c0:	a5 5b       	subi	r26, 0xB5	; 181
    26c2:	bf 4f       	sbci	r27, 0xFF	; 255
    26c4:	fe 01       	movw	r30, r28
    26c6:	e5 5b       	subi	r30, 0xB5	; 181
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	11 96       	adiw	r26, 0x01	; 1
    26d2:	9c 93       	st	X, r25
    26d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	fe 01       	movw	r30, r28
    26d8:	e5 5b       	subi	r30, 0xB5	; 181
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	d1 f6       	brne	.-76     	; 0x2698 <HSTEPPER_voidRotate+0x4f8>
    26e4:	27 c0       	rjmp	.+78     	; 0x2734 <HSTEPPER_voidRotate+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e6:	8e 01       	movw	r16, r28
    26e8:	05 5b       	subi	r16, 0xB5	; 181
    26ea:	1f 4f       	sbci	r17, 0xFF	; 255
    26ec:	fe 01       	movw	r30, r28
    26ee:	e3 5b       	subi	r30, 0xB3	; 179
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	f8 01       	movw	r30, r16
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24
    2708:	de 01       	movw	r26, r28
    270a:	a9 5b       	subi	r26, 0xB9	; 185
    270c:	bf 4f       	sbci	r27, 0xFF	; 255
    270e:	fe 01       	movw	r30, r28
    2710:	e5 5b       	subi	r30, 0xB5	; 181
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	8d 93       	st	X+, r24
    271a:	9c 93       	st	X, r25
    271c:	fe 01       	movw	r30, r28
    271e:	e9 5b       	subi	r30, 0xB9	; 185
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <HSTEPPER_voidRotate+0x586>
    272a:	fe 01       	movw	r30, r28
    272c:	e9 5b       	subi	r30, 0xB9	; 185
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
				_delay_ms(10);

				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN0, HIGH);
    2734:	83 e0       	ldi	r24, 0x03	; 3
    2736:	60 e0       	ldi	r22, 0x00	; 0
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN1, HIGH);
    273e:	83 e0       	ldi	r24, 0x03	; 3
    2740:	61 e0       	ldi	r22, 0x01	; 1
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN2, HIGH);
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	62 e0       	ldi	r22, 0x02	; 2
    274c:	41 e0       	ldi	r20, 0x01	; 1
    274e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN3, LOW);
    2752:	83 e0       	ldi	r24, 0x03	; 3
    2754:	63 e0       	ldi	r22, 0x03	; 3
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    275c:	fe 01       	movw	r30, r28
    275e:	ed 5b       	subi	r30, 0xBD	; 189
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a0 e2       	ldi	r26, 0x20	; 32
    2768:	b1 e4       	ldi	r27, 0x41	; 65
    276a:	80 83       	st	Z, r24
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	a2 83       	std	Z+2, r26	; 0x02
    2770:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	8e 01       	movw	r16, r28
    2774:	01 5c       	subi	r16, 0xC1	; 193
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	fe 01       	movw	r30, r28
    277a:	ed 5b       	subi	r30, 0xBD	; 189
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	4a ef       	ldi	r20, 0xFA	; 250
    278c:	54 e4       	ldi	r21, 0x44	; 68
    278e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	f8 01       	movw	r30, r16
    2798:	80 83       	st	Z, r24
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	a2 83       	std	Z+2, r26	; 0x02
    279e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a0:	fe 01       	movw	r30, r28
    27a2:	ff 96       	adiw	r30, 0x3f	; 63
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e8       	ldi	r20, 0x80	; 128
    27b2:	5f e3       	ldi	r21, 0x3F	; 63
    27b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b8:	88 23       	and	r24, r24
    27ba:	2c f4       	brge	.+10     	; 0x27c6 <HSTEPPER_voidRotate+0x626>
		__ticks = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	9e af       	std	Y+62, r25	; 0x3e
    27c2:	8d af       	std	Y+61, r24	; 0x3d
    27c4:	46 c0       	rjmp	.+140    	; 0x2852 <HSTEPPER_voidRotate+0x6b2>
	else if (__tmp > 65535)
    27c6:	fe 01       	movw	r30, r28
    27c8:	ff 96       	adiw	r30, 0x3f	; 63
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	3f ef       	ldi	r19, 0xFF	; 255
    27d6:	4f e7       	ldi	r20, 0x7F	; 127
    27d8:	57 e4       	ldi	r21, 0x47	; 71
    27da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27de:	18 16       	cp	r1, r24
    27e0:	64 f5       	brge	.+88     	; 0x283a <HSTEPPER_voidRotate+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e2:	fe 01       	movw	r30, r28
    27e4:	ed 5b       	subi	r30, 0xBD	; 189
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e2       	ldi	r20, 0x20	; 32
    27f6:	51 e4       	ldi	r21, 0x41	; 65
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	9e af       	std	Y+62, r25	; 0x3e
    280e:	8d af       	std	Y+61, r24	; 0x3d
    2810:	0f c0       	rjmp	.+30     	; 0x2830 <HSTEPPER_voidRotate+0x690>
    2812:	88 ec       	ldi	r24, 0xC8	; 200
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9c af       	std	Y+60, r25	; 0x3c
    2818:	8b af       	std	Y+59, r24	; 0x3b
    281a:	8b ad       	ldd	r24, Y+59	; 0x3b
    281c:	9c ad       	ldd	r25, Y+60	; 0x3c
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <HSTEPPER_voidRotate+0x67e>
    2822:	9c af       	std	Y+60, r25	; 0x3c
    2824:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2826:	8d ad       	ldd	r24, Y+61	; 0x3d
    2828:	9e ad       	ldd	r25, Y+62	; 0x3e
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	9e af       	std	Y+62, r25	; 0x3e
    282e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2830:	8d ad       	ldd	r24, Y+61	; 0x3d
    2832:	9e ad       	ldd	r25, Y+62	; 0x3e
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	69 f7       	brne	.-38     	; 0x2812 <HSTEPPER_voidRotate+0x672>
    2838:	16 c0       	rjmp	.+44     	; 0x2866 <HSTEPPER_voidRotate+0x6c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283a:	fe 01       	movw	r30, r28
    283c:	ff 96       	adiw	r30, 0x3f	; 63
    283e:	60 81       	ld	r22, Z
    2840:	71 81       	ldd	r23, Z+1	; 0x01
    2842:	82 81       	ldd	r24, Z+2	; 0x02
    2844:	93 81       	ldd	r25, Z+3	; 0x03
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9e af       	std	Y+62, r25	; 0x3e
    2850:	8d af       	std	Y+61, r24	; 0x3d
    2852:	8d ad       	ldd	r24, Y+61	; 0x3d
    2854:	9e ad       	ldd	r25, Y+62	; 0x3e
    2856:	9a af       	std	Y+58, r25	; 0x3a
    2858:	89 af       	std	Y+57, r24	; 0x39
    285a:	89 ad       	ldd	r24, Y+57	; 0x39
    285c:	9a ad       	ldd	r25, Y+58	; 0x3a
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <HSTEPPER_voidRotate+0x6be>
    2862:	9a af       	std	Y+58, r25	; 0x3a
    2864:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_u8Direction)
	{	
		case CLK_WISE:
			HSTEPPER_VoidStopMotor();

			for(Local_u16LoopCounter = 0; Local_u16LoopCounter < Local_u16Iterations; Local_u16LoopCounter++)
    2866:	de 01       	movw	r26, r28
    2868:	af 58       	subi	r26, 0x8F	; 143
    286a:	bf 4f       	sbci	r27, 0xFF	; 255
    286c:	fe 01       	movw	r30, r28
    286e:	ef 58       	subi	r30, 0x8F	; 143
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	01 96       	adiw	r24, 0x01	; 1
    2878:	8d 93       	st	X+, r24
    287a:	9c 93       	st	X, r25
    287c:	fe 01       	movw	r30, r28
    287e:	ef 58       	subi	r30, 0x8F	; 143
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	de 01       	movw	r26, r28
    2884:	ad 58       	subi	r26, 0x8D	; 141
    2886:	bf 4f       	sbci	r27, 0xFF	; 255
    2888:	20 81       	ld	r18, Z
    288a:	31 81       	ldd	r19, Z+1	; 0x01
    288c:	8d 91       	ld	r24, X+
    288e:	9c 91       	ld	r25, X
    2890:	11 97       	sbiw	r26, 0x01	; 1
    2892:	28 17       	cp	r18, r24
    2894:	39 07       	cpc	r19, r25
    2896:	08 f4       	brcc	.+2      	; 0x289a <HSTEPPER_voidRotate+0x6fa>
    2898:	f8 cc       	rjmp	.-1552   	; 0x228a <HSTEPPER_voidRotate+0xea>
    289a:	3a c2       	rjmp	.+1140   	; 0x2d10 <HSTEPPER_voidRotate+0xb70>
				_delay_ms(10);
			}
		break;

		case COUNTER_CLK_WISE:
			HSTEPPER_VoidStopMotor();
    289c:	0e 94 94 16 	call	0x2d28	; 0x2d28 <HSTEPPER_VoidStopMotor>

			for(Local_u16LoopCounter = 0; Local_u16LoopCounter < Local_u16Iterations; Local_u16LoopCounter++)
    28a0:	fe 01       	movw	r30, r28
    28a2:	ef 58       	subi	r30, 0x8F	; 143
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	11 82       	std	Z+1, r1	; 0x01
    28a8:	10 82       	st	Z, r1
    28aa:	23 c2       	rjmp	.+1094   	; 0x2cf2 <HSTEPPER_voidRotate+0xb52>
			{
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN0, HIGH);
    28ac:	83 e0       	ldi	r24, 0x03	; 3
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	41 e0       	ldi	r20, 0x01	; 1
    28b2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN1, HIGH);
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	61 e0       	ldi	r22, 0x01	; 1
    28ba:	41 e0       	ldi	r20, 0x01	; 1
    28bc:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN2, HIGH);
    28c0:	83 e0       	ldi	r24, 0x03	; 3
    28c2:	62 e0       	ldi	r22, 0x02	; 2
    28c4:	41 e0       	ldi	r20, 0x01	; 1
    28c6:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN3, LOW);
    28ca:	83 e0       	ldi	r24, 0x03	; 3
    28cc:	63 e0       	ldi	r22, 0x03	; 3
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a0 e2       	ldi	r26, 0x20	; 32
    28da:	b1 e4       	ldi	r27, 0x41	; 65
    28dc:	8d ab       	std	Y+53, r24	; 0x35
    28de:	9e ab       	std	Y+54, r25	; 0x36
    28e0:	af ab       	std	Y+55, r26	; 0x37
    28e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	6d a9       	ldd	r22, Y+53	; 0x35
    28e6:	7e a9       	ldd	r23, Y+54	; 0x36
    28e8:	8f a9       	ldd	r24, Y+55	; 0x37
    28ea:	98 ad       	ldd	r25, Y+56	; 0x38
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a ef       	ldi	r20, 0xFA	; 250
    28f2:	54 e4       	ldi	r21, 0x44	; 68
    28f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	89 ab       	std	Y+49, r24	; 0x31
    28fe:	9a ab       	std	Y+50, r25	; 0x32
    2900:	ab ab       	std	Y+51, r26	; 0x33
    2902:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2904:	69 a9       	ldd	r22, Y+49	; 0x31
    2906:	7a a9       	ldd	r23, Y+50	; 0x32
    2908:	8b a9       	ldd	r24, Y+51	; 0x33
    290a:	9c a9       	ldd	r25, Y+52	; 0x34
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	2c f4       	brge	.+10     	; 0x2926 <HSTEPPER_voidRotate+0x786>
		__ticks = 1;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	98 ab       	std	Y+48, r25	; 0x30
    2922:	8f a7       	std	Y+47, r24	; 0x2f
    2924:	3f c0       	rjmp	.+126    	; 0x29a4 <HSTEPPER_voidRotate+0x804>
	else if (__tmp > 65535)
    2926:	69 a9       	ldd	r22, Y+49	; 0x31
    2928:	7a a9       	ldd	r23, Y+50	; 0x32
    292a:	8b a9       	ldd	r24, Y+51	; 0x33
    292c:	9c a9       	ldd	r25, Y+52	; 0x34
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	3f ef       	ldi	r19, 0xFF	; 255
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	57 e4       	ldi	r21, 0x47	; 71
    2936:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293a:	18 16       	cp	r1, r24
    293c:	4c f5       	brge	.+82     	; 0x2990 <HSTEPPER_voidRotate+0x7f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293e:	6d a9       	ldd	r22, Y+53	; 0x35
    2940:	7e a9       	ldd	r23, Y+54	; 0x36
    2942:	8f a9       	ldd	r24, Y+55	; 0x37
    2944:	98 ad       	ldd	r25, Y+56	; 0x38
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e2       	ldi	r20, 0x20	; 32
    294c:	51 e4       	ldi	r21, 0x41	; 65
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	98 ab       	std	Y+48, r25	; 0x30
    2964:	8f a7       	std	Y+47, r24	; 0x2f
    2966:	0f c0       	rjmp	.+30     	; 0x2986 <HSTEPPER_voidRotate+0x7e6>
    2968:	88 ec       	ldi	r24, 0xC8	; 200
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9e a7       	std	Y+46, r25	; 0x2e
    296e:	8d a7       	std	Y+45, r24	; 0x2d
    2970:	8d a5       	ldd	r24, Y+45	; 0x2d
    2972:	9e a5       	ldd	r25, Y+46	; 0x2e
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <HSTEPPER_voidRotate+0x7d4>
    2978:	9e a7       	std	Y+46, r25	; 0x2e
    297a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297c:	8f a5       	ldd	r24, Y+47	; 0x2f
    297e:	98 a9       	ldd	r25, Y+48	; 0x30
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	98 ab       	std	Y+48, r25	; 0x30
    2984:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2986:	8f a5       	ldd	r24, Y+47	; 0x2f
    2988:	98 a9       	ldd	r25, Y+48	; 0x30
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	69 f7       	brne	.-38     	; 0x2968 <HSTEPPER_voidRotate+0x7c8>
    298e:	14 c0       	rjmp	.+40     	; 0x29b8 <HSTEPPER_voidRotate+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	69 a9       	ldd	r22, Y+49	; 0x31
    2992:	7a a9       	ldd	r23, Y+50	; 0x32
    2994:	8b a9       	ldd	r24, Y+51	; 0x33
    2996:	9c a9       	ldd	r25, Y+52	; 0x34
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	98 ab       	std	Y+48, r25	; 0x30
    29a2:	8f a7       	std	Y+47, r24	; 0x2f
    29a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a6:	98 a9       	ldd	r25, Y+48	; 0x30
    29a8:	9c a7       	std	Y+44, r25	; 0x2c
    29aa:	8b a7       	std	Y+43, r24	; 0x2b
    29ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <HSTEPPER_voidRotate+0x810>
    29b4:	9c a7       	std	Y+44, r25	; 0x2c
    29b6:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(10);

				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN0, HIGH);
    29b8:	83 e0       	ldi	r24, 0x03	; 3
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	41 e0       	ldi	r20, 0x01	; 1
    29be:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN1, HIGH);
    29c2:	83 e0       	ldi	r24, 0x03	; 3
    29c4:	61 e0       	ldi	r22, 0x01	; 1
    29c6:	41 e0       	ldi	r20, 0x01	; 1
    29c8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN2, LOW);
    29cc:	83 e0       	ldi	r24, 0x03	; 3
    29ce:	62 e0       	ldi	r22, 0x02	; 2
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN3, HIGH);
    29d6:	83 e0       	ldi	r24, 0x03	; 3
    29d8:	63 e0       	ldi	r22, 0x03	; 3
    29da:	41 e0       	ldi	r20, 0x01	; 1
    29dc:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a0 e2       	ldi	r26, 0x20	; 32
    29e6:	b1 e4       	ldi	r27, 0x41	; 65
    29e8:	8f a3       	std	Y+39, r24	; 0x27
    29ea:	98 a7       	std	Y+40, r25	; 0x28
    29ec:	a9 a7       	std	Y+41, r26	; 0x29
    29ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f0:	6f a1       	ldd	r22, Y+39	; 0x27
    29f2:	78 a5       	ldd	r23, Y+40	; 0x28
    29f4:	89 a5       	ldd	r24, Y+41	; 0x29
    29f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	4a ef       	ldi	r20, 0xFA	; 250
    29fe:	54 e4       	ldi	r21, 0x44	; 68
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	8b a3       	std	Y+35, r24	; 0x23
    2a0a:	9c a3       	std	Y+36, r25	; 0x24
    2a0c:	ad a3       	std	Y+37, r26	; 0x25
    2a0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a10:	6b a1       	ldd	r22, Y+35	; 0x23
    2a12:	7c a1       	ldd	r23, Y+36	; 0x24
    2a14:	8d a1       	ldd	r24, Y+37	; 0x25
    2a16:	9e a1       	ldd	r25, Y+38	; 0x26
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <HSTEPPER_voidRotate+0x892>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9a a3       	std	Y+34, r25	; 0x22
    2a2e:	89 a3       	std	Y+33, r24	; 0x21
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <HSTEPPER_voidRotate+0x910>
	else if (__tmp > 65535)
    2a32:	6b a1       	ldd	r22, Y+35	; 0x23
    2a34:	7c a1       	ldd	r23, Y+36	; 0x24
    2a36:	8d a1       	ldd	r24, Y+37	; 0x25
    2a38:	9e a1       	ldd	r25, Y+38	; 0x26
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	4c f5       	brge	.+82     	; 0x2a9c <HSTEPPER_voidRotate+0x8fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9a a3       	std	Y+34, r25	; 0x22
    2a70:	89 a3       	std	Y+33, r24	; 0x21
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <HSTEPPER_voidRotate+0x8f2>
    2a74:	88 ec       	ldi	r24, 0xC8	; 200
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	98 a3       	std	Y+32, r25	; 0x20
    2a7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a7e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <HSTEPPER_voidRotate+0x8e0>
    2a84:	98 a3       	std	Y+32, r25	; 0x20
    2a86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	89 a1       	ldd	r24, Y+33	; 0x21
    2a8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9a a3       	std	Y+34, r25	; 0x22
    2a90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	89 a1       	ldd	r24, Y+33	; 0x21
    2a94:	9a a1       	ldd	r25, Y+34	; 0x22
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <HSTEPPER_voidRotate+0x8d4>
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <HSTEPPER_voidRotate+0x924>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	9a a3       	std	Y+34, r25	; 0x22
    2aae:	89 a3       	std	Y+33, r24	; 0x21
    2ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ab6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ab8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <HSTEPPER_voidRotate+0x91c>
    2ac0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac2:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(10);

				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN0, HIGH);
    2ac4:	83 e0       	ldi	r24, 0x03	; 3
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	41 e0       	ldi	r20, 0x01	; 1
    2aca:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN1, LOW);
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	61 e0       	ldi	r22, 0x01	; 1
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN2, HIGH);
    2ad8:	83 e0       	ldi	r24, 0x03	; 3
    2ada:	62 e0       	ldi	r22, 0x02	; 2
    2adc:	41 e0       	ldi	r20, 0x01	; 1
    2ade:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN3, HIGH);
    2ae2:	83 e0       	ldi	r24, 0x03	; 3
    2ae4:	63 e0       	ldi	r22, 0x03	; 3
    2ae6:	41 e0       	ldi	r20, 0x01	; 1
    2ae8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a0 e2       	ldi	r26, 0x20	; 32
    2af2:	b1 e4       	ldi	r27, 0x41	; 65
    2af4:	89 8f       	std	Y+25, r24	; 0x19
    2af6:	9a 8f       	std	Y+26, r25	; 0x1a
    2af8:	ab 8f       	std	Y+27, r26	; 0x1b
    2afa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afc:	69 8d       	ldd	r22, Y+25	; 0x19
    2afe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a ef       	ldi	r20, 0xFA	; 250
    2b0a:	54 e4       	ldi	r21, 0x44	; 68
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	8d 8b       	std	Y+21, r24	; 0x15
    2b16:	9e 8b       	std	Y+22, r25	; 0x16
    2b18:	af 8b       	std	Y+23, r26	; 0x17
    2b1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b20:	8f 89       	ldd	r24, Y+23	; 0x17
    2b22:	98 8d       	ldd	r25, Y+24	; 0x18
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e8       	ldi	r20, 0x80	; 128
    2b2a:	5f e3       	ldi	r21, 0x3F	; 63
    2b2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b30:	88 23       	and	r24, r24
    2b32:	2c f4       	brge	.+10     	; 0x2b3e <HSTEPPER_voidRotate+0x99e>
		__ticks = 1;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9c 8b       	std	Y+20, r25	; 0x14
    2b3a:	8b 8b       	std	Y+19, r24	; 0x13
    2b3c:	3f c0       	rjmp	.+126    	; 0x2bbc <HSTEPPER_voidRotate+0xa1c>
	else if (__tmp > 65535)
    2b3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b40:	7e 89       	ldd	r23, Y+22	; 0x16
    2b42:	8f 89       	ldd	r24, Y+23	; 0x17
    2b44:	98 8d       	ldd	r25, Y+24	; 0x18
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	3f ef       	ldi	r19, 0xFF	; 255
    2b4a:	4f e7       	ldi	r20, 0x7F	; 127
    2b4c:	57 e4       	ldi	r21, 0x47	; 71
    2b4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b52:	18 16       	cp	r1, r24
    2b54:	4c f5       	brge	.+82     	; 0x2ba8 <HSTEPPER_voidRotate+0xa08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b56:	69 8d       	ldd	r22, Y+25	; 0x19
    2b58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e2       	ldi	r20, 0x20	; 32
    2b64:	51 e4       	ldi	r21, 0x41	; 65
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	9c 8b       	std	Y+20, r25	; 0x14
    2b7c:	8b 8b       	std	Y+19, r24	; 0x13
    2b7e:	0f c0       	rjmp	.+30     	; 0x2b9e <HSTEPPER_voidRotate+0x9fe>
    2b80:	88 ec       	ldi	r24, 0xC8	; 200
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	9a 8b       	std	Y+18, r25	; 0x12
    2b86:	89 8b       	std	Y+17, r24	; 0x11
    2b88:	89 89       	ldd	r24, Y+17	; 0x11
    2b8a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <HSTEPPER_voidRotate+0x9ec>
    2b90:	9a 8b       	std	Y+18, r25	; 0x12
    2b92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	8b 89       	ldd	r24, Y+19	; 0x13
    2b96:	9c 89       	ldd	r25, Y+20	; 0x14
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	9c 8b       	std	Y+20, r25	; 0x14
    2b9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	69 f7       	brne	.-38     	; 0x2b80 <HSTEPPER_voidRotate+0x9e0>
    2ba6:	14 c0       	rjmp	.+40     	; 0x2bd0 <HSTEPPER_voidRotate+0xa30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    2baa:	7e 89       	ldd	r23, Y+22	; 0x16
    2bac:	8f 89       	ldd	r24, Y+23	; 0x17
    2bae:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	9c 8b       	std	Y+20, r25	; 0x14
    2bba:	8b 8b       	std	Y+19, r24	; 0x13
    2bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc0:	98 8b       	std	Y+16, r25	; 0x10
    2bc2:	8f 87       	std	Y+15, r24	; 0x0f
    2bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc6:	98 89       	ldd	r25, Y+16	; 0x10
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <HSTEPPER_voidRotate+0xa28>
    2bcc:	98 8b       	std	Y+16, r25	; 0x10
    2bce:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);

				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN0, LOW);
    2bd0:	83 e0       	ldi	r24, 0x03	; 3
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN1, HIGH);
    2bda:	83 e0       	ldi	r24, 0x03	; 3
    2bdc:	61 e0       	ldi	r22, 0x01	; 1
    2bde:	41 e0       	ldi	r20, 0x01	; 1
    2be0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN2, HIGH);
    2be4:	83 e0       	ldi	r24, 0x03	; 3
    2be6:	62 e0       	ldi	r22, 0x02	; 2
    2be8:	41 e0       	ldi	r20, 0x01	; 1
    2bea:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN3, HIGH);
    2bee:	83 e0       	ldi	r24, 0x03	; 3
    2bf0:	63 e0       	ldi	r22, 0x03	; 3
    2bf2:	41 e0       	ldi	r20, 0x01	; 1
    2bf4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a0 e2       	ldi	r26, 0x20	; 32
    2bfe:	b1 e4       	ldi	r27, 0x41	; 65
    2c00:	8b 87       	std	Y+11, r24	; 0x0b
    2c02:	9c 87       	std	Y+12, r25	; 0x0c
    2c04:	ad 87       	std	Y+13, r26	; 0x0d
    2c06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	4a ef       	ldi	r20, 0xFA	; 250
    2c16:	54 e4       	ldi	r21, 0x44	; 68
    2c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	8f 83       	std	Y+7, r24	; 0x07
    2c22:	98 87       	std	Y+8, r25	; 0x08
    2c24:	a9 87       	std	Y+9, r26	; 0x09
    2c26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c28:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2a:	78 85       	ldd	r23, Y+8	; 0x08
    2c2c:	89 85       	ldd	r24, Y+9	; 0x09
    2c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e8       	ldi	r20, 0x80	; 128
    2c36:	5f e3       	ldi	r21, 0x3F	; 63
    2c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c3c:	88 23       	and	r24, r24
    2c3e:	2c f4       	brge	.+10     	; 0x2c4a <HSTEPPER_voidRotate+0xaaa>
		__ticks = 1;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	9e 83       	std	Y+6, r25	; 0x06
    2c46:	8d 83       	std	Y+5, r24	; 0x05
    2c48:	3f c0       	rjmp	.+126    	; 0x2cc8 <HSTEPPER_voidRotate+0xb28>
	else if (__tmp > 65535)
    2c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4c:	78 85       	ldd	r23, Y+8	; 0x08
    2c4e:	89 85       	ldd	r24, Y+9	; 0x09
    2c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	3f ef       	ldi	r19, 0xFF	; 255
    2c56:	4f e7       	ldi	r20, 0x7F	; 127
    2c58:	57 e4       	ldi	r21, 0x47	; 71
    2c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c5e:	18 16       	cp	r1, r24
    2c60:	4c f5       	brge	.+82     	; 0x2cb4 <HSTEPPER_voidRotate+0xb14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e2       	ldi	r20, 0x20	; 32
    2c70:	51 e4       	ldi	r21, 0x41	; 65
    2c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	bc 01       	movw	r22, r24
    2c7c:	cd 01       	movw	r24, r26
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	0f c0       	rjmp	.+30     	; 0x2caa <HSTEPPER_voidRotate+0xb0a>
    2c8c:	88 ec       	ldi	r24, 0xC8	; 200
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	9c 83       	std	Y+4, r25	; 0x04
    2c92:	8b 83       	std	Y+3, r24	; 0x03
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	9c 81       	ldd	r25, Y+4	; 0x04
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <HSTEPPER_voidRotate+0xaf8>
    2c9c:	9c 83       	std	Y+4, r25	; 0x04
    2c9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	69 f7       	brne	.-38     	; 0x2c8c <HSTEPPER_voidRotate+0xaec>
    2cb2:	14 c0       	rjmp	.+40     	; 0x2cdc <HSTEPPER_voidRotate+0xb3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb6:	78 85       	ldd	r23, Y+8	; 0x08
    2cb8:	89 85       	ldd	r24, Y+9	; 0x09
    2cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <HSTEPPER_voidRotate+0xb34>
    2cd8:	9a 83       	std	Y+2, r25	; 0x02
    2cda:	89 83       	std	Y+1, r24	; 0x01
		break;

		case COUNTER_CLK_WISE:
			HSTEPPER_VoidStopMotor();

			for(Local_u16LoopCounter = 0; Local_u16LoopCounter < Local_u16Iterations; Local_u16LoopCounter++)
    2cdc:	de 01       	movw	r26, r28
    2cde:	af 58       	subi	r26, 0x8F	; 143
    2ce0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ef 58       	subi	r30, 0x8F	; 143
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	80 81       	ld	r24, Z
    2cea:	91 81       	ldd	r25, Z+1	; 0x01
    2cec:	01 96       	adiw	r24, 0x01	; 1
    2cee:	8d 93       	st	X+, r24
    2cf0:	9c 93       	st	X, r25
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ef 58       	subi	r30, 0x8F	; 143
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	de 01       	movw	r26, r28
    2cfa:	ad 58       	subi	r26, 0x8D	; 141
    2cfc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cfe:	20 81       	ld	r18, Z
    2d00:	31 81       	ldd	r19, Z+1	; 0x01
    2d02:	8d 91       	ld	r24, X+
    2d04:	9c 91       	ld	r25, X
    2d06:	11 97       	sbiw	r26, 0x01	; 1
    2d08:	28 17       	cp	r18, r24
    2d0a:	39 07       	cpc	r19, r25
    2d0c:	08 f4       	brcc	.+2      	; 0x2d10 <HSTEPPER_voidRotate+0xb70>
    2d0e:	ce cd       	rjmp	.-1124   	; 0x28ac <HSTEPPER_voidRotate+0x70c>
				MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN3, HIGH);
				_delay_ms(10);
			}
		break;
	}
}
    2d10:	c5 58       	subi	r28, 0x85	; 133
    2d12:	df 4f       	sbci	r29, 0xFF	; 255
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	1f 91       	pop	r17
    2d24:	0f 91       	pop	r16
    2d26:	08 95       	ret

00002d28 <HSTEPPER_VoidStopMotor>:

void HSTEPPER_VoidStopMotor()
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
	/*Deactivate All coils to stop the motor*/
	MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN0, HIGH);
    2d30:	83 e0       	ldi	r24, 0x03	; 3
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	41 e0       	ldi	r20, 0x01	; 1
    2d36:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN1, HIGH);
    2d3a:	83 e0       	ldi	r24, 0x03	; 3
    2d3c:	61 e0       	ldi	r22, 0x01	; 1
    2d3e:	41 e0       	ldi	r20, 0x01	; 1
    2d40:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN2, HIGH);
    2d44:	83 e0       	ldi	r24, 0x03	; 3
    2d46:	62 e0       	ldi	r22, 0x02	; 2
    2d48:	41 e0       	ldi	r20, 0x01	; 1
    2d4a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(STEPPER_PORT, STEPPER_PIN3, HIGH);
    2d4e:	83 e0       	ldi	r24, 0x03	; 3
    2d50:	63 e0       	ldi	r22, 0x03	; 3
    2d52:	41 e0       	ldi	r20, 0x01	; 1
    2d54:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
}
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <SERVO_voidRotateSpecificAngle_OC1A>:
/* Description : Rotate Servo Motor with Specific Angle by PWM TIMER1 at PIN  OCA1   (PD5)      */                                         
/* Fun. Argument1:  Copy_u16Angle      Angle From [ 0  To  180 ] Degree                         */
/* Fun. Return : void                                                                           */
/************************************************************************************************/
void SERVO_voidRotateSpecificAngle_OC1A ( u16 Copy_u16Angle )
{
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <SERVO_voidRotateSpecificAngle_OC1A+0x6>
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <SERVO_voidRotateSpecificAngle_OC1A+0x8>
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	9c 83       	std	Y+4, r25	; 0x04
    2d6c:	8b 83       	std	Y+3, r24	; 0x03
    MDIO_voidSetPinDirection(PORTD,PIN5,OUTPUT);
    2d6e:	83 e0       	ldi	r24, 0x03	; 3
    2d70:	65 e0       	ldi	r22, 0x05	; 5
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
    u32 Local_u32Variable ;

    Local_u32Variable = ((Copy_u16Angle*1000UL)+179820) / (180) ;
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7c:	cc 01       	movw	r24, r24
    2d7e:	a0 e0       	ldi	r26, 0x00	; 0
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	28 ee       	ldi	r18, 0xE8	; 232
    2d84:	33 e0       	ldi	r19, 0x03	; 3
    2d86:	40 e0       	ldi	r20, 0x00	; 0
    2d88:	50 e0       	ldi	r21, 0x00	; 0
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <__mulsi3>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	84 59       	subi	r24, 0x94	; 148
    2d98:	91 44       	sbci	r25, 0x41	; 65
    2d9a:	ad 4f       	sbci	r26, 0xFD	; 253
    2d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9e:	24 eb       	ldi	r18, 0xB4	; 180
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e0       	ldi	r20, 0x00	; 0
    2da4:	50 e0       	ldi	r21, 0x00	; 0
    2da6:	bc 01       	movw	r22, r24
    2da8:	cd 01       	movw	r24, r26
    2daa:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__udivmodsi4>
    2dae:	da 01       	movw	r26, r20
    2db0:	c9 01       	movw	r24, r18
    2db2:	9a 83       	std	Y+2, r25	; 0x02
    2db4:	89 83       	std	Y+1, r24	; 0x01
    MTIMERS_voidTimer1SetCompareMatchValue(Local_u32Variable);
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	0e 94 76 09 	call	0x12ec	; 0x12ec <MTIMERS_voidTimer1SetCompareMatchValue>

	MTIMERS_voidTimer1SetTopValue(19999);
    2dbe:	8f e1       	ldi	r24, 0x1F	; 31
    2dc0:	9e e4       	ldi	r25, 0x4E	; 78
    2dc2:	0e 94 56 09 	call	0x12ac	; 0x12ac <MTIMERS_voidTimer1SetTopValue>
}
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <HLCD_voidInit>:
#include "../LCD/LCD_interface.h"
#include "../LCD/LCD_private.h"
#include "../LCD/LCD_config.h"

void HLCD_voidInit()
{
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	60 97       	sbiw	r28, 0x10	; 16
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
        /*send data port to output port */
		MDIO_voidSetPort(LCD_DATA_PORT,OUTPUT) ;
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	61 e0       	ldi	r22, 0x01	; 1
    2dec:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <MDIO_voidSetPort>
        /* set control pins to output pins */
		MDIO_voidSetPinDirection(LCD_CTRL_PORT , LCD_EN_PIN , OUTPUT) ;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	41 e0       	ldi	r20, 0x01	; 1
    2df6:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(LCD_CTRL_PORT , LCD_RW_PIN , OUTPUT) ;
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	61 e0       	ldi	r22, 0x01	; 1
    2dfe:	41 e0       	ldi	r20, 0x01	; 1
    2e00:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(LCD_CTRL_PORT , LCD_RS_PIN , OUTPUT) ;
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	62 e0       	ldi	r22, 0x02	; 2
    2e08:	41 e0       	ldi	r20, 0x01	; 1
    2e0a:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	a0 e2       	ldi	r26, 0x20	; 32
    2e14:	b2 e4       	ldi	r27, 0x42	; 66
    2e16:	8b 87       	std	Y+11, r24	; 0x0b
    2e18:	9c 87       	std	Y+12, r25	; 0x0c
    2e1a:	ad 87       	std	Y+13, r26	; 0x0d
    2e1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	4a ef       	ldi	r20, 0xFA	; 250
    2e2c:	54 e4       	ldi	r21, 0x44	; 68
    2e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	8f 83       	std	Y+7, r24	; 0x07
    2e38:	98 87       	std	Y+8, r25	; 0x08
    2e3a:	a9 87       	std	Y+9, r26	; 0x09
    2e3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e40:	78 85       	ldd	r23, Y+8	; 0x08
    2e42:	89 85       	ldd	r24, Y+9	; 0x09
    2e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e8       	ldi	r20, 0x80	; 128
    2e4c:	5f e3       	ldi	r21, 0x3F	; 63
    2e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e52:	88 23       	and	r24, r24
    2e54:	2c f4       	brge	.+10     	; 0x2e60 <HLCD_voidInit+0x8c>
		__ticks = 1;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	9e 83       	std	Y+6, r25	; 0x06
    2e5c:	8d 83       	std	Y+5, r24	; 0x05
    2e5e:	3f c0       	rjmp	.+126    	; 0x2ede <HLCD_voidInit+0x10a>
	else if (__tmp > 65535)
    2e60:	6f 81       	ldd	r22, Y+7	; 0x07
    2e62:	78 85       	ldd	r23, Y+8	; 0x08
    2e64:	89 85       	ldd	r24, Y+9	; 0x09
    2e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	3f ef       	ldi	r19, 0xFF	; 255
    2e6c:	4f e7       	ldi	r20, 0x7F	; 127
    2e6e:	57 e4       	ldi	r21, 0x47	; 71
    2e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e74:	18 16       	cp	r1, r24
    2e76:	4c f5       	brge	.+82     	; 0x2eca <HLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e2       	ldi	r20, 0x20	; 32
    2e86:	51 e4       	ldi	r21, 0x41	; 65
    2e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
    2ea0:	0f c0       	rjmp	.+30     	; 0x2ec0 <HLCD_voidInit+0xec>
    2ea2:	88 ec       	ldi	r24, 0xC8	; 200
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9c 83       	std	Y+4, r25	; 0x04
    2ea8:	8b 83       	std	Y+3, r24	; 0x03
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	9c 81       	ldd	r25, Y+4	; 0x04
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <HLCD_voidInit+0xda>
    2eb2:	9c 83       	std	Y+4, r25	; 0x04
    2eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	9e 83       	std	Y+6, r25	; 0x06
    2ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	69 f7       	brne	.-38     	; 0x2ea2 <HLCD_voidInit+0xce>
    2ec8:	14 c0       	rjmp	.+40     	; 0x2ef2 <HLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ecc:	78 85       	ldd	r23, Y+8	; 0x08
    2ece:	89 85       	ldd	r24, Y+9	; 0x09
    2ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9e 83       	std	Y+6, r25	; 0x06
    2edc:	8d 83       	std	Y+5, r24	; 0x05
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	89 83       	std	Y+1, r24	; 0x01
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <HLCD_voidInit+0x116>
    2eee:	9a 83       	std	Y+2, r25	; 0x02
    2ef0:	89 83       	std	Y+1, r24	; 0x01
        /* wait for 30 mili second */
        _delay_ms(40) ;
        u8 Local_u8Set = Function_Set_Command ;
    2ef2:	80 e3       	ldi	r24, 0x30	; 48
    2ef4:	88 8b       	std	Y+16, r24	; 0x10
        Local_u8Set |= FontSize  ;
        Local_u8Set |= TwoLines  ;
    2ef6:	88 89       	ldd	r24, Y+16	; 0x10
    2ef8:	88 60       	ori	r24, 0x08	; 8
    2efa:	88 8b       	std	Y+16, r24	; 0x10
        /*send function set command */
        HLCD_voidSendCommands(Local_u8Set) ;
    2efc:	88 89       	ldd	r24, Y+16	; 0x10
    2efe:	0e 94 92 17 	call	0x2f24	; 0x2f24 <HLCD_voidSendCommands>
        /*send display set command */
        u8 Local_u8Display = Display_Set_Command ;
    2f02:	8c e0       	ldi	r24, 0x0C	; 12
    2f04:	8f 87       	std	Y+15, r24	; 0x0f
        }
        if(Cursor)
        {
           SET_BIT(Local_u8Display ,1);
        }
        HLCD_voidSendCommands(Local_u8Display ) ;
    2f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f08:	0e 94 92 17 	call	0x2f24	; 0x2f24 <HLCD_voidSendCommands>
        /*send clear set command */
        HLCD_voidSendCommands(0b00000001) ;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	0e 94 92 17 	call	0x2f24	; 0x2f24 <HLCD_voidSendCommands>
}
    2f12:	60 96       	adiw	r28, 0x10	; 16
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	cf 91       	pop	r28
    2f20:	df 91       	pop	r29
    2f22:	08 95       	ret

00002f24 <HLCD_voidSendCommands>:

static void HLCD_voidSendCommands(u8 Copy_u8Command)
{
    2f24:	df 93       	push	r29
    2f26:	cf 93       	push	r28
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	2f 97       	sbiw	r28, 0x0f	; 15
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	cd bf       	out	0x3d, r28	; 61
    2f38:	8f 87       	std	Y+15, r24	; 0x0f
    
    /* Set RS,RW to be low */
    MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN ,LOW ) ;
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	61 e0       	ldi	r22, 0x01	; 1
    2f3e:	40 e0       	ldi	r20, 0x00	; 0
    2f40:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN ,LOW ) ;
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	62 e0       	ldi	r22, 0x02	; 2
    2f48:	40 e0       	ldi	r20, 0x00	; 0
    2f4a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    
    /* Set command on Data port */
    MDIO_voidSetSpecificPortOutPut(LCD_DATA_PORT , Copy_u8Command ) ;
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f52:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <MDIO_voidSetSpecificPortOutPut>

    /* Set enable pin to high for certain time */
    MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN ,HIGH ) ;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	60 e0       	ldi	r22, 0x00	; 0
    2f5a:	41 e0       	ldi	r20, 0x01	; 1
    2f5c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	a0 e0       	ldi	r26, 0x00	; 0
    2f66:	b0 e4       	ldi	r27, 0x40	; 64
    2f68:	8b 87       	std	Y+11, r24	; 0x0b
    2f6a:	9c 87       	std	Y+12, r25	; 0x0c
    2f6c:	ad 87       	std	Y+13, r26	; 0x0d
    2f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a ef       	ldi	r20, 0xFA	; 250
    2f7e:	54 e4       	ldi	r21, 0x44	; 68
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	8f 83       	std	Y+7, r24	; 0x07
    2f8a:	98 87       	std	Y+8, r25	; 0x08
    2f8c:	a9 87       	std	Y+9, r26	; 0x09
    2f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f90:	6f 81       	ldd	r22, Y+7	; 0x07
    2f92:	78 85       	ldd	r23, Y+8	; 0x08
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <HLCD_voidSendCommands+0x8e>
		__ticks = 1;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	9e 83       	std	Y+6, r25	; 0x06
    2fae:	8d 83       	std	Y+5, r24	; 0x05
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <HLCD_voidSendCommands+0x10c>
	else if (__tmp > 65535)
    2fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb4:	78 85       	ldd	r23, Y+8	; 0x08
    2fb6:	89 85       	ldd	r24, Y+9	; 0x09
    2fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	57 e4       	ldi	r21, 0x47	; 71
    2fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	4c f5       	brge	.+82     	; 0x301c <HLCD_voidSendCommands+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	8d 83       	std	Y+5, r24	; 0x05
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <HLCD_voidSendCommands+0xee>
    2ff4:	88 ec       	ldi	r24, 0xC8	; 200
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	9c 83       	std	Y+4, r25	; 0x04
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <HLCD_voidSendCommands+0xdc>
    3004:	9c 83       	std	Y+4, r25	; 0x04
    3006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	8d 81       	ldd	r24, Y+5	; 0x05
    3014:	9e 81       	ldd	r25, Y+6	; 0x06
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <HLCD_voidSendCommands+0xd0>
    301a:	14 c0       	rjmp	.+40     	; 0x3044 <HLCD_voidSendCommands+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	6f 81       	ldd	r22, Y+7	; 0x07
    301e:	78 85       	ldd	r23, Y+8	; 0x08
    3020:	89 85       	ldd	r24, Y+9	; 0x09
    3022:	9a 85       	ldd	r25, Y+10	; 0x0a
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	9a 81       	ldd	r25, Y+2	; 0x02
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <HLCD_voidSendCommands+0x118>
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2) ;
    MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN ,LOW ) ;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
}
    304e:	2f 96       	adiw	r28, 0x0f	; 15
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 Copy_u8CData)
{
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	2f 97       	sbiw	r28, 0x0f	; 15
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	de bf       	out	0x3e, r29	; 62
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	cd bf       	out	0x3d, r28	; 61
    3074:	8f 87       	std	Y+15, r24	; 0x0f
    /* Set RS,RW to be low */
    MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN ,LOW ) ;
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	61 e0       	ldi	r22, 0x01	; 1
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN ,HIGH) ;
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	62 e0       	ldi	r22, 0x02	; 2
    3084:	41 e0       	ldi	r20, 0x01	; 1
    3086:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>

    /* Set Data on Data port */
    MDIO_voidSetSpecificPortOutPut(LCD_DATA_PORT , Copy_u8CData ) ;
    308a:	82 e0       	ldi	r24, 0x02	; 2
    308c:	6f 85       	ldd	r22, Y+15	; 0x0f
    308e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <MDIO_voidSetSpecificPortOutPut>

    /* Set enable pin to high for certain time */
    MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN ,HIGH ) ;
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	60 e0       	ldi	r22, 0x00	; 0
    3096:	41 e0       	ldi	r20, 0x01	; 1
    3098:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	a0 e0       	ldi	r26, 0x00	; 0
    30a2:	b0 e4       	ldi	r27, 0x40	; 64
    30a4:	8b 87       	std	Y+11, r24	; 0x0b
    30a6:	9c 87       	std	Y+12, r25	; 0x0c
    30a8:	ad 87       	std	Y+13, r26	; 0x0d
    30aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	4a ef       	ldi	r20, 0xFA	; 250
    30ba:	54 e4       	ldi	r21, 0x44	; 68
    30bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	8f 83       	std	Y+7, r24	; 0x07
    30c6:	98 87       	std	Y+8, r25	; 0x08
    30c8:	a9 87       	std	Y+9, r26	; 0x09
    30ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30cc:	6f 81       	ldd	r22, Y+7	; 0x07
    30ce:	78 85       	ldd	r23, Y+8	; 0x08
    30d0:	89 85       	ldd	r24, Y+9	; 0x09
    30d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e8       	ldi	r20, 0x80	; 128
    30da:	5f e3       	ldi	r21, 0x3F	; 63
    30dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30e0:	88 23       	and	r24, r24
    30e2:	2c f4       	brge	.+10     	; 0x30ee <HLCD_voidSendData+0x8e>
		__ticks = 1;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	9e 83       	std	Y+6, r25	; 0x06
    30ea:	8d 83       	std	Y+5, r24	; 0x05
    30ec:	3f c0       	rjmp	.+126    	; 0x316c <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    30ee:	6f 81       	ldd	r22, Y+7	; 0x07
    30f0:	78 85       	ldd	r23, Y+8	; 0x08
    30f2:	89 85       	ldd	r24, Y+9	; 0x09
    30f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	3f ef       	ldi	r19, 0xFF	; 255
    30fa:	4f e7       	ldi	r20, 0x7F	; 127
    30fc:	57 e4       	ldi	r21, 0x47	; 71
    30fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3102:	18 16       	cp	r1, r24
    3104:	4c f5       	brge	.+82     	; 0x3158 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3106:	6b 85       	ldd	r22, Y+11	; 0x0b
    3108:	7c 85       	ldd	r23, Y+12	; 0x0c
    310a:	8d 85       	ldd	r24, Y+13	; 0x0d
    310c:	9e 85       	ldd	r25, Y+14	; 0x0e
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e2       	ldi	r20, 0x20	; 32
    3114:	51 e4       	ldi	r21, 0x41	; 65
    3116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	bc 01       	movw	r22, r24
    3120:	cd 01       	movw	r24, r26
    3122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	9e 83       	std	Y+6, r25	; 0x06
    312c:	8d 83       	std	Y+5, r24	; 0x05
    312e:	0f c0       	rjmp	.+30     	; 0x314e <HLCD_voidSendData+0xee>
    3130:	88 ec       	ldi	r24, 0xC8	; 200
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	9c 83       	std	Y+4, r25	; 0x04
    3136:	8b 83       	std	Y+3, r24	; 0x03
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
    313a:	9c 81       	ldd	r25, Y+4	; 0x04
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	f1 f7       	brne	.-4      	; 0x313c <HLCD_voidSendData+0xdc>
    3140:	9c 83       	std	Y+4, r25	; 0x04
    3142:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3144:	8d 81       	ldd	r24, Y+5	; 0x05
    3146:	9e 81       	ldd	r25, Y+6	; 0x06
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	9e 83       	std	Y+6, r25	; 0x06
    314c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314e:	8d 81       	ldd	r24, Y+5	; 0x05
    3150:	9e 81       	ldd	r25, Y+6	; 0x06
    3152:	00 97       	sbiw	r24, 0x00	; 0
    3154:	69 f7       	brne	.-38     	; 0x3130 <HLCD_voidSendData+0xd0>
    3156:	14 c0       	rjmp	.+40     	; 0x3180 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3158:	6f 81       	ldd	r22, Y+7	; 0x07
    315a:	78 85       	ldd	r23, Y+8	; 0x08
    315c:	89 85       	ldd	r24, Y+9	; 0x09
    315e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	9e 83       	std	Y+6, r25	; 0x06
    316a:	8d 83       	std	Y+5, r24	; 0x05
    316c:	8d 81       	ldd	r24, Y+5	; 0x05
    316e:	9e 81       	ldd	r25, Y+6	; 0x06
    3170:	9a 83       	std	Y+2, r25	; 0x02
    3172:	89 83       	std	Y+1, r24	; 0x01
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	9a 81       	ldd	r25, Y+2	; 0x02
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	f1 f7       	brne	.-4      	; 0x3178 <HLCD_voidSendData+0x118>
    317c:	9a 83       	std	Y+2, r25	; 0x02
    317e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2) ;
    MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_EN_PIN ,LOW ) ;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	60 e0       	ldi	r22, 0x00	; 0
    3184:	40 e0       	ldi	r20, 0x00	; 0
    3186:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
}
    318a:	2f 96       	adiw	r28, 0x0f	; 15
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	cf 91       	pop	r28
    3198:	df 91       	pop	r29
    319a:	08 95       	ret

0000319c <HLCD_voidSendNumber>:


void HLCD_voidSendNumber( u16 Copy_u16Number)
{
    319c:	df 93       	push	r29
    319e:	cf 93       	push	r28
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	2c 97       	sbiw	r28, 0x0c	; 12
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	f8 94       	cli
    31aa:	de bf       	out	0x3e, r29	; 62
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	cd bf       	out	0x3d, r28	; 61
    31b0:	9c 87       	std	Y+12, r25	; 0x0c
    31b2:	8b 87       	std	Y+11, r24	; 0x0b
	u16 Local_u16Temp=Copy_u16Number ;
    31b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    31b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    31b8:	9d 83       	std	Y+5, r25	; 0x05
    31ba:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8CharArr[5]={} ;
    31bc:	85 e0       	ldi	r24, 0x05	; 5
    31be:	fe 01       	movw	r30, r28
    31c0:	36 96       	adiw	r30, 0x06	; 6
    31c2:	df 01       	movw	r26, r30
    31c4:	98 2f       	mov	r25, r24
    31c6:	1d 92       	st	X+, r1
    31c8:	9a 95       	dec	r25
    31ca:	e9 f7       	brne	.-6      	; 0x31c6 <HLCD_voidSendNumber+0x2a>
	s8 Local_u8NumOfDigits = -1 ;
    31cc:	8f ef       	ldi	r24, 0xFF	; 255
    31ce:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ArryCounter = 0 ;
    31d0:	1a 82       	std	Y+2, r1	; 0x02
    31d2:	38 c0       	rjmp	.+112    	; 0x3244 <HLCD_voidSendNumber+0xa8>
	s8 Local_u8LoopCounter ;
	while(Copy_u16Number != 0)
	{
		Local_u16Temp =Copy_u16Number  ;
    31d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    31d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    31d8:	9d 83       	std	Y+5, r25	; 0x05
    31da:	8c 83       	std	Y+4, r24	; 0x04
		Local_u16Temp %= 10 ;
    31dc:	8c 81       	ldd	r24, Y+4	; 0x04
    31de:	9d 81       	ldd	r25, Y+5	; 0x05
    31e0:	2a e0       	ldi	r18, 0x0A	; 10
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	b9 01       	movw	r22, r18
    31e6:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__udivmodhi4>
    31ea:	9d 83       	std	Y+5, r25	; 0x05
    31ec:	8c 83       	std	Y+4, r24	; 0x04

		if(Local_u16Temp==0)
    31ee:	8c 81       	ldd	r24, Y+4	; 0x04
    31f0:	9d 81       	ldd	r25, Y+5	; 0x05
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	59 f4       	brne	.+22     	; 0x320c <HLCD_voidSendNumber+0x70>
		{
			Local_u8CharArr[Local_u8ArryCounter] = 48 ;
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	28 2f       	mov	r18, r24
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	ce 01       	movw	r24, r28
    31fe:	06 96       	adiw	r24, 0x06	; 6
    3200:	fc 01       	movw	r30, r24
    3202:	e2 0f       	add	r30, r18
    3204:	f3 1f       	adc	r31, r19
    3206:	80 e3       	ldi	r24, 0x30	; 48
    3208:	80 83       	st	Z, r24
    320a:	0c c0       	rjmp	.+24     	; 0x3224 <HLCD_voidSendNumber+0x88>
		}
		else
		{
			Local_u8CharArr[Local_u8ArryCounter] = Local_u16Temp+48 ;
    320c:	8a 81       	ldd	r24, Y+2	; 0x02
    320e:	28 2f       	mov	r18, r24
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	8c 81       	ldd	r24, Y+4	; 0x04
    3214:	48 2f       	mov	r20, r24
    3216:	40 5d       	subi	r20, 0xD0	; 208
    3218:	ce 01       	movw	r24, r28
    321a:	06 96       	adiw	r24, 0x06	; 6
    321c:	fc 01       	movw	r30, r24
    321e:	e2 0f       	add	r30, r18
    3220:	f3 1f       	adc	r31, r19
    3222:	40 83       	st	Z, r20
		}
		Local_u8NumOfDigits++ ;
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	8f 5f       	subi	r24, 0xFF	; 255
    3228:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8ArryCounter++ ;
    322a:	8a 81       	ldd	r24, Y+2	; 0x02
    322c:	8f 5f       	subi	r24, 0xFF	; 255
    322e:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u16Number /= 10 ;
    3230:	8b 85       	ldd	r24, Y+11	; 0x0b
    3232:	9c 85       	ldd	r25, Y+12	; 0x0c
    3234:	2a e0       	ldi	r18, 0x0A	; 10
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	b9 01       	movw	r22, r18
    323a:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <__udivmodhi4>
    323e:	cb 01       	movw	r24, r22
    3240:	9c 87       	std	Y+12, r25	; 0x0c
    3242:	8b 87       	std	Y+11, r24	; 0x0b
	u16 Local_u16Temp=Copy_u16Number ;
	u8 Local_u8CharArr[5]={} ;
	s8 Local_u8NumOfDigits = -1 ;
	u8 Local_u8ArryCounter = 0 ;
	s8 Local_u8LoopCounter ;
	while(Copy_u16Number != 0)
    3244:	8b 85       	ldd	r24, Y+11	; 0x0b
    3246:	9c 85       	ldd	r25, Y+12	; 0x0c
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	21 f6       	brne	.-120    	; 0x31d4 <HLCD_voidSendNumber+0x38>
		Local_u8NumOfDigits++ ;
		Local_u8ArryCounter++ ;
		Copy_u16Number /= 10 ;
		//HLCD_voidSendData(Local_u8NumOfDigits+48) ;
	}
	for(Local_u8LoopCounter=Local_u8NumOfDigits ; Local_u8LoopCounter>=0 ; Local_u8LoopCounter--)
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	89 83       	std	Y+1, r24	; 0x01
    3250:	10 c0       	rjmp	.+32     	; 0x3272 <HLCD_voidSendNumber+0xd6>
	{
		HLCD_voidSendData(Local_u8CharArr[Local_u8LoopCounter]) ;
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	28 2f       	mov	r18, r24
    3256:	33 27       	eor	r19, r19
    3258:	27 fd       	sbrc	r18, 7
    325a:	30 95       	com	r19
    325c:	ce 01       	movw	r24, r28
    325e:	06 96       	adiw	r24, 0x06	; 6
    3260:	fc 01       	movw	r30, r24
    3262:	e2 0f       	add	r30, r18
    3264:	f3 1f       	adc	r31, r19
    3266:	80 81       	ld	r24, Z
    3268:	0e 94 30 18 	call	0x3060	; 0x3060 <HLCD_voidSendData>
		Local_u8NumOfDigits++ ;
		Local_u8ArryCounter++ ;
		Copy_u16Number /= 10 ;
		//HLCD_voidSendData(Local_u8NumOfDigits+48) ;
	}
	for(Local_u8LoopCounter=Local_u8NumOfDigits ; Local_u8LoopCounter>=0 ; Local_u8LoopCounter--)
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	81 50       	subi	r24, 0x01	; 1
    3270:	89 83       	std	Y+1, r24	; 0x01
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	88 23       	and	r24, r24
    3276:	6c f7       	brge	.-38     	; 0x3252 <HLCD_voidSendNumber+0xb6>
	{
		HLCD_voidSendData(Local_u8CharArr[Local_u8LoopCounter]) ;
	}

}
    3278:	2c 96       	adiw	r28, 0x0c	; 12
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <HLCD_voidSendString>:


void HLCD_voidSendString(u8 *Pointer_u8String)
{
    328a:	df 93       	push	r29
    328c:	cf 93       	push	r28
    328e:	00 d0       	rcall	.+0      	; 0x3290 <HLCD_voidSendString+0x6>
    3290:	00 d0       	rcall	.+0      	; 0x3292 <HLCD_voidSendString+0x8>
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	9c 83       	std	Y+4, r25	; 0x04
    3298:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ArryCounter=0 ;
    329a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8CharCounter=0 ;
    329c:	19 82       	std	Y+1, r1	; 0x01
    329e:	18 c0       	rjmp	.+48     	; 0x32d0 <HLCD_voidSendString+0x46>
	while(Pointer_u8String[Local_u8ArryCounter]!='\0')
	{
		if(Local_u8CharCounter==16)
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	80 31       	cpi	r24, 0x10	; 16
    32a4:	21 f4       	brne	.+8      	; 0x32ae <HLCD_voidSendString+0x24>
		{
			HLCD_voidGoToXY(0,1);
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	61 e0       	ldi	r22, 0x01	; 1
    32aa:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <HLCD_voidGoToXY>
		}
		HLCD_voidSendData(Pointer_u8String[Local_u8ArryCounter]) ;
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	28 2f       	mov	r18, r24
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	8b 81       	ldd	r24, Y+3	; 0x03
    32b6:	9c 81       	ldd	r25, Y+4	; 0x04
    32b8:	fc 01       	movw	r30, r24
    32ba:	e2 0f       	add	r30, r18
    32bc:	f3 1f       	adc	r31, r19
    32be:	80 81       	ld	r24, Z
    32c0:	0e 94 30 18 	call	0x3060	; 0x3060 <HLCD_voidSendData>
		Local_u8ArryCounter++ ;
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	8f 5f       	subi	r24, 0xFF	; 255
    32c8:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8CharCounter++ ;
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	8f 5f       	subi	r24, 0xFF	; 255
    32ce:	89 83       	std	Y+1, r24	; 0x01

void HLCD_voidSendString(u8 *Pointer_u8String)
{
	u8 Local_u8ArryCounter=0 ;
	u8 Local_u8CharCounter=0 ;
	while(Pointer_u8String[Local_u8ArryCounter]!='\0')
    32d0:	8a 81       	ldd	r24, Y+2	; 0x02
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	9c 81       	ldd	r25, Y+4	; 0x04
    32da:	fc 01       	movw	r30, r24
    32dc:	e2 0f       	add	r30, r18
    32de:	f3 1f       	adc	r31, r19
    32e0:	80 81       	ld	r24, Z
    32e2:	88 23       	and	r24, r24
    32e4:	e9 f6       	brne	.-70     	; 0x32a0 <HLCD_voidSendString+0x16>
		}
		HLCD_voidSendData(Pointer_u8String[Local_u8ArryCounter]) ;
		Local_u8ArryCounter++ ;
		Local_u8CharCounter++ ;
	}
}
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <HLCD_voidGoToXY>:



void HLCD_voidGoToXY(u8 Copy_u8XPosition , u8 Copy_u8YPosition)
{   u8 Local_u8PositionAddress ;
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <HLCD_voidGoToXY+0x6>
    32fa:	0f 92       	push	r0
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	8a 83       	std	Y+2, r24	; 0x02
    3302:	6b 83       	std	Y+3, r22	; 0x03
    /* Getting Address*/
    if(Copy_u8YPosition == 0)
    3304:	8b 81       	ldd	r24, Y+3	; 0x03
    3306:	88 23       	and	r24, r24
    3308:	19 f4       	brne	.+6      	; 0x3310 <HLCD_voidGoToXY+0x1c>
    {
        Local_u8PositionAddress = Copy_u8XPosition ;
    330a:	8a 81       	ldd	r24, Y+2	; 0x02
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	06 c0       	rjmp	.+12     	; 0x331c <HLCD_voidGoToXY+0x28>
    }
    else if(Copy_u8YPosition == 1)
    3310:	8b 81       	ldd	r24, Y+3	; 0x03
    3312:	81 30       	cpi	r24, 0x01	; 1
    3314:	19 f4       	brne	.+6      	; 0x331c <HLCD_voidGoToXY+0x28>
    {
        Local_u8PositionAddress = Copy_u8XPosition + POSITION_FIXED_ADDRES ;
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	80 5c       	subi	r24, 0xC0	; 192
    331a:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        /*Error*/
    }
    /*Set the 7ths bit to 1 for command*/
    SET_BIT(Local_u8PositionAddress,7);
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	80 68       	ori	r24, 0x80	; 128
    3320:	89 83       	std	Y+1, r24	; 0x01
    /*Send command*/
    HLCD_voidSendCommands(Local_u8PositionAddress) ;
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	0e 94 92 17 	call	0x2f24	; 0x2f24 <HLCD_voidSendCommands>
}
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	cf 91       	pop	r28
    3330:	df 91       	pop	r29
    3332:	08 95       	ret

00003334 <HLCD_voidClearAll>:


void HLCD_voidClearAll()
{
    3334:	df 93       	push	r29
    3336:	cf 93       	push	r28
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommands(0x01) ;
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	0e 94 92 17 	call	0x2f24	; 0x2f24 <HLCD_voidSendCommands>
}
    3342:	cf 91       	pop	r28
    3344:	df 91       	pop	r29
    3346:	08 95       	ret

00003348 <HLCD_voidSendCustomePattern>:

void HLCD_voidSendCustomePattern(u8 *Pointer_u8Pattern ,
								 u8 Copy_u8PatternNum ,
								 u8 Copy_u8XPosition ,
								 u8 Copy_u8YPosition )
{
    3348:	df 93       	push	r29
    334a:	cf 93       	push	r28
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	27 97       	sbiw	r28, 0x07	; 7
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	de bf       	out	0x3e, r29	; 62
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	cd bf       	out	0x3d, r28	; 61
    335c:	9c 83       	std	Y+4, r25	; 0x04
    335e:	8b 83       	std	Y+3, r24	; 0x03
    3360:	6d 83       	std	Y+5, r22	; 0x05
    3362:	4e 83       	std	Y+6, r20	; 0x06
    3364:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8LoopCounter ;
	/*Calculate which byte in CGRAM to start writing*/
	u8 Local_u8AddresByte = 8*Copy_u8PatternNum ;
    3366:	8d 81       	ldd	r24, Y+5	; 0x05
    3368:	88 2f       	mov	r24, r24
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	88 0f       	add	r24, r24
    336e:	99 1f       	adc	r25, r25
    3370:	88 0f       	add	r24, r24
    3372:	99 1f       	adc	r25, r25
    3374:	88 0f       	add	r24, r24
    3376:	99 1f       	adc	r25, r25
    3378:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8AddresByte,6);
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	80 64       	ori	r24, 0x40	; 64
    337e:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(Local_u8AddresByte,7);
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	8f 77       	andi	r24, 0x7F	; 127
    3384:	89 83       	std	Y+1, r24	; 0x01

	HLCD_voidSendCommands(Local_u8AddresByte);
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	0e 94 92 17 	call	0x2f24	; 0x2f24 <HLCD_voidSendCommands>
	/* kda ay data htegy httsgl fl CGRAM mn awel el addres Local_u8AddresByte  */

	for(Local_u8LoopCounter=0 ; Local_u8LoopCounter<8 ;Local_u8LoopCounter++)
    338c:	1a 82       	std	Y+2, r1	; 0x02
    338e:	0e c0       	rjmp	.+28     	; 0x33ac <HLCD_voidSendCustomePattern+0x64>
	{
		HLCD_voidSendData(Pointer_u8Pattern[Local_u8LoopCounter]) ;
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
    3392:	28 2f       	mov	r18, r24
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	9c 81       	ldd	r25, Y+4	; 0x04
    339a:	fc 01       	movw	r30, r24
    339c:	e2 0f       	add	r30, r18
    339e:	f3 1f       	adc	r31, r19
    33a0:	80 81       	ld	r24, Z
    33a2:	0e 94 30 18 	call	0x3060	; 0x3060 <HLCD_voidSendData>
	CLEAR_BIT(Local_u8AddresByte,7);

	HLCD_voidSendCommands(Local_u8AddresByte);
	/* kda ay data htegy httsgl fl CGRAM mn awel el addres Local_u8AddresByte  */

	for(Local_u8LoopCounter=0 ; Local_u8LoopCounter<8 ;Local_u8LoopCounter++)
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	8f 5f       	subi	r24, 0xFF	; 255
    33aa:	8a 83       	std	Y+2, r24	; 0x02
    33ac:	8a 81       	ldd	r24, Y+2	; 0x02
    33ae:	88 30       	cpi	r24, 0x08	; 8
    33b0:	78 f3       	brcs	.-34     	; 0x3390 <HLCD_voidSendCustomePattern+0x48>
	{
		HLCD_voidSendData(Pointer_u8Pattern[Local_u8LoopCounter]) ;
	}

	HLCD_voidGoToXY(Copy_u8XPosition,Copy_u8YPosition) ;
    33b2:	8e 81       	ldd	r24, Y+6	; 0x06
    33b4:	6f 81       	ldd	r22, Y+7	; 0x07
    33b6:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <HLCD_voidGoToXY>

	HLCD_voidSendData(Copy_u8PatternNum) ;
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
    33bc:	0e 94 30 18 	call	0x3060	; 0x3060 <HLCD_voidSendData>

}
    33c0:	27 96       	adiw	r28, 0x07	; 7
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	cf 91       	pop	r28
    33ce:	df 91       	pop	r29
    33d0:	08 95       	ret

000033d2 <HKPD_voidInit>:
#include "KPD_private.h"
#include "KPD_config.h"
#include  "../LCD/LCD_interface.h"

void HKPD_voidInit()
{
    33d2:	df 93       	push	r29
    33d4:	cf 93       	push	r28
    33d6:	cd b7       	in	r28, 0x3d	; 61
    33d8:	de b7       	in	r29, 0x3e	; 62
	/*Setting the Row Direction to Input*/
	MDIO_voidSetPinDirection(KPD_PORT,KPD_ROW0_PIN,INPUT) ;
    33da:	82 e0       	ldi	r24, 0x02	; 2
    33dc:	60 e0       	ldi	r22, 0x00	; 0
    33de:	40 e0       	ldi	r20, 0x00	; 0
    33e0:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KPD_PORT,KPD_ROW1_PIN,INPUT) ;
    33e4:	82 e0       	ldi	r24, 0x02	; 2
    33e6:	61 e0       	ldi	r22, 0x01	; 1
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KPD_PORT,KPD_ROW2_PIN,INPUT) ;
    33ee:	82 e0       	ldi	r24, 0x02	; 2
    33f0:	62 e0       	ldi	r22, 0x02	; 2
    33f2:	40 e0       	ldi	r20, 0x00	; 0
    33f4:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KPD_PORT,KPD_ROW3_PIN,INPUT) ;
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	63 e0       	ldi	r22, 0x03	; 3
    33fc:	40 e0       	ldi	r20, 0x00	; 0
    33fe:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	/*Setting the Row State to Pull UP*/
	MDIO_voidSetPinValue(KPD_PORT,KPD_ROW0_PIN,PULL_UP)   ;
    3402:	82 e0       	ldi	r24, 0x02	; 2
    3404:	60 e0       	ldi	r22, 0x00	; 0
    3406:	41 e0       	ldi	r20, 0x01	; 1
    3408:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KPD_PORT,KPD_ROW1_PIN,PULL_UP)   ;
    340c:	82 e0       	ldi	r24, 0x02	; 2
    340e:	61 e0       	ldi	r22, 0x01	; 1
    3410:	41 e0       	ldi	r20, 0x01	; 1
    3412:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KPD_PORT,KPD_ROW2_PIN,PULL_UP)   ;
    3416:	82 e0       	ldi	r24, 0x02	; 2
    3418:	62 e0       	ldi	r22, 0x02	; 2
    341a:	41 e0       	ldi	r20, 0x01	; 1
    341c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KPD_PORT,KPD_ROW3_PIN,PULL_UP)   ;
    3420:	82 e0       	ldi	r24, 0x02	; 2
    3422:	63 e0       	ldi	r22, 0x03	; 3
    3424:	41 e0       	ldi	r20, 0x01	; 1
    3426:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	/*Setting the column Direction to output*/
	MDIO_voidSetPinDirection(KPD_PORT,KPD_COL0_PIN,OUTPUT) ;
    342a:	82 e0       	ldi	r24, 0x02	; 2
    342c:	64 e0       	ldi	r22, 0x04	; 4
    342e:	41 e0       	ldi	r20, 0x01	; 1
    3430:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KPD_PORT,KPD_COL1_PIN,OUTPUT) ;
    3434:	82 e0       	ldi	r24, 0x02	; 2
    3436:	65 e0       	ldi	r22, 0x05	; 5
    3438:	41 e0       	ldi	r20, 0x01	; 1
    343a:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KPD_PORT,KPD_COL2_PIN,OUTPUT) ;
    343e:	82 e0       	ldi	r24, 0x02	; 2
    3440:	66 e0       	ldi	r22, 0x06	; 6
    3442:	41 e0       	ldi	r20, 0x01	; 1
    3444:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(KPD_PORT,KPD_COL3_PIN,OUTPUT) ;
    3448:	82 e0       	ldi	r24, 0x02	; 2
    344a:	67 e0       	ldi	r22, 0x07	; 7
    344c:	41 e0       	ldi	r20, 0x01	; 1
    344e:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	/*Setting the column value to high(deactivated)*/
	MDIO_voidSetPinValue(KPD_PORT,KPD_COL0_PIN,HIGH)   ;
    3452:	82 e0       	ldi	r24, 0x02	; 2
    3454:	64 e0       	ldi	r22, 0x04	; 4
    3456:	41 e0       	ldi	r20, 0x01	; 1
    3458:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KPD_PORT,KPD_COL1_PIN,HIGH)   ;
    345c:	82 e0       	ldi	r24, 0x02	; 2
    345e:	65 e0       	ldi	r22, 0x05	; 5
    3460:	41 e0       	ldi	r20, 0x01	; 1
    3462:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KPD_PORT,KPD_COL2_PIN,HIGH)   ;
    3466:	82 e0       	ldi	r24, 0x02	; 2
    3468:	66 e0       	ldi	r22, 0x06	; 6
    346a:	41 e0       	ldi	r20, 0x01	; 1
    346c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(KPD_PORT,KPD_COL3_PIN,HIGH)   ;
    3470:	82 e0       	ldi	r24, 0x02	; 2
    3472:	67 e0       	ldi	r22, 0x07	; 7
    3474:	41 e0       	ldi	r20, 0x01	; 1
    3476:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>

}
    347a:	cf 91       	pop	r28
    347c:	df 91       	pop	r29
    347e:	08 95       	ret

00003480 <HKPD_u8GetPressedKey>:

u8 HKPD_u8GetPressedKey(void)
{
    3480:	df 93       	push	r29
    3482:	cf 93       	push	r28
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
    3488:	e0 97       	sbiw	r28, 0x30	; 48
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	de bf       	out	0x3e, r29	; 62
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey=0xff ;
    3494:	8f ef       	ldi	r24, 0xFF	; 255
    3496:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8ColArry[4] = {KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};
    3498:	84 e0       	ldi	r24, 0x04	; 4
    349a:	8b 8b       	std	Y+19, r24	; 0x13
    349c:	85 e0       	ldi	r24, 0x05	; 5
    349e:	8c 8b       	std	Y+20, r24	; 0x14
    34a0:	86 e0       	ldi	r24, 0x06	; 6
    34a2:	8d 8b       	std	Y+21, r24	; 0x15
    34a4:	87 e0       	ldi	r24, 0x07	; 7
    34a6:	8e 8b       	std	Y+22, r24	; 0x16
	u8 Local_u8RowArry[4] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    34a8:	1f 8a       	std	Y+23, r1	; 0x17
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	88 8f       	std	Y+24, r24	; 0x18
    34ae:	82 e0       	ldi	r24, 0x02	; 2
    34b0:	89 8f       	std	Y+25, r24	; 0x19
    34b2:	83 e0       	ldi	r24, 0x03	; 3
    34b4:	8a 8f       	std	Y+26, r24	; 0x1a
	u8 Local_u8PinState=0 ;
    34b6:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8ColIterator ;
	u8 Local_u8RowIterator ;
	u8 Local_u8MatrixArry[4][4] = KPD_ARRAY_VAL ;
    34b8:	ce 01       	movw	r24, r28
    34ba:	4b 96       	adiw	r24, 0x1b	; 27
    34bc:	9d a7       	std	Y+45, r25	; 0x2d
    34be:	8c a7       	std	Y+44, r24	; 0x2c
    34c0:	e3 ef       	ldi	r30, 0xF3	; 243
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	ff a7       	std	Y+47, r31	; 0x2f
    34c6:	ee a7       	std	Y+46, r30	; 0x2e
    34c8:	f0 e1       	ldi	r31, 0x10	; 16
    34ca:	f8 ab       	std	Y+48, r31	; 0x30
    34cc:	ee a5       	ldd	r30, Y+46	; 0x2e
    34ce:	ff a5       	ldd	r31, Y+47	; 0x2f
    34d0:	00 80       	ld	r0, Z
    34d2:	8e a5       	ldd	r24, Y+46	; 0x2e
    34d4:	9f a5       	ldd	r25, Y+47	; 0x2f
    34d6:	01 96       	adiw	r24, 0x01	; 1
    34d8:	9f a7       	std	Y+47, r25	; 0x2f
    34da:	8e a7       	std	Y+46, r24	; 0x2e
    34dc:	ec a5       	ldd	r30, Y+44	; 0x2c
    34de:	fd a5       	ldd	r31, Y+45	; 0x2d
    34e0:	00 82       	st	Z, r0
    34e2:	8c a5       	ldd	r24, Y+44	; 0x2c
    34e4:	9d a5       	ldd	r25, Y+45	; 0x2d
    34e6:	01 96       	adiw	r24, 0x01	; 1
    34e8:	9d a7       	std	Y+45, r25	; 0x2d
    34ea:	8c a7       	std	Y+44, r24	; 0x2c
    34ec:	98 a9       	ldd	r25, Y+48	; 0x30
    34ee:	91 50       	subi	r25, 0x01	; 1
    34f0:	98 ab       	std	Y+48, r25	; 0x30
    34f2:	e8 a9       	ldd	r30, Y+48	; 0x30
    34f4:	ee 23       	and	r30, r30
    34f6:	51 f7       	brne	.-44     	; 0x34cc <HKPD_u8GetPressedKey+0x4c>
	for(Local_u8ColIterator=0 ; Local_u8ColIterator < 4 ; Local_u8ColIterator++ )
    34f8:	18 8a       	std	Y+16, r1	; 0x10
    34fa:	df c0       	rjmp	.+446    	; 0x36ba <HKPD_u8GetPressedKey+0x23a>
	{
		MDIO_voidSetPinValue(KPD_PORT,Local_u8ColArry[Local_u8ColIterator],LOW) ;
    34fc:	88 89       	ldd	r24, Y+16	; 0x10
    34fe:	28 2f       	mov	r18, r24
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	ce 01       	movw	r24, r28
    3504:	43 96       	adiw	r24, 0x13	; 19
    3506:	fc 01       	movw	r30, r24
    3508:	e2 0f       	add	r30, r18
    350a:	f3 1f       	adc	r31, r19
    350c:	90 81       	ld	r25, Z
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	69 2f       	mov	r22, r25
    3512:	40 e0       	ldi	r20, 0x00	; 0
    3514:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
			for(Local_u8RowIterator=0 ; Local_u8RowIterator<4 ;Local_u8RowIterator++)
    3518:	1f 86       	std	Y+15, r1	; 0x0f
    351a:	ba c0       	rjmp	.+372    	; 0x3690 <HKPD_u8GetPressedKey+0x210>
			{
				Local_u8PinState =MDIO_u8GetPinValue(KPD_PORT,Local_u8RowArry[Local_u8RowIterator]) ;
    351c:	8f 85       	ldd	r24, Y+15	; 0x0f
    351e:	28 2f       	mov	r18, r24
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	ce 01       	movw	r24, r28
    3524:	47 96       	adiw	r24, 0x17	; 23
    3526:	fc 01       	movw	r30, r24
    3528:	e2 0f       	add	r30, r18
    352a:	f3 1f       	adc	r31, r19
    352c:	90 81       	ld	r25, Z
    352e:	82 e0       	ldi	r24, 0x02	; 2
    3530:	69 2f       	mov	r22, r25
    3532:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <MDIO_u8GetPinValue>
    3536:	89 8b       	std	Y+17, r24	; 0x11
				if(Local_u8PinState == 0 )
    3538:	89 89       	ldd	r24, Y+17	; 0x11
    353a:	88 23       	and	r24, r24
    353c:	09 f0       	breq	.+2      	; 0x3540 <HKPD_u8GetPressedKey+0xc0>
    353e:	a5 c0       	rjmp	.+330    	; 0x368a <HKPD_u8GetPressedKey+0x20a>
    3540:	22 c0       	rjmp	.+68     	; 0x3586 <HKPD_u8GetPressedKey+0x106>
				{	while(Local_u8PinState == 0)
					{
						Local_u8PinState  =MDIO_u8GetPinValue(KPD_PORT,Local_u8RowArry[Local_u8RowIterator]);
    3542:	8f 85       	ldd	r24, Y+15	; 0x0f
    3544:	28 2f       	mov	r18, r24
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	ce 01       	movw	r24, r28
    354a:	47 96       	adiw	r24, 0x17	; 23
    354c:	fc 01       	movw	r30, r24
    354e:	e2 0f       	add	r30, r18
    3550:	f3 1f       	adc	r31, r19
    3552:	90 81       	ld	r25, Z
    3554:	82 e0       	ldi	r24, 0x02	; 2
    3556:	69 2f       	mov	r22, r25
    3558:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <MDIO_u8GetPinValue>
    355c:	89 8b       	std	Y+17, r24	; 0x11
						Local_u8PressedKey = Local_u8MatrixArry[Local_u8ColIterator][Local_u8RowIterator] ;
    355e:	88 89       	ldd	r24, Y+16	; 0x10
    3560:	28 2f       	mov	r18, r24
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	8f 85       	ldd	r24, Y+15	; 0x0f
    3566:	48 2f       	mov	r20, r24
    3568:	50 e0       	ldi	r21, 0x00	; 0
    356a:	22 0f       	add	r18, r18
    356c:	33 1f       	adc	r19, r19
    356e:	22 0f       	add	r18, r18
    3570:	33 1f       	adc	r19, r19
    3572:	ce 01       	movw	r24, r28
    3574:	01 96       	adiw	r24, 0x01	; 1
    3576:	82 0f       	add	r24, r18
    3578:	93 1f       	adc	r25, r19
    357a:	84 0f       	add	r24, r20
    357c:	95 1f       	adc	r25, r21
    357e:	fc 01       	movw	r30, r24
    3580:	7a 96       	adiw	r30, 0x1a	; 26
    3582:	80 81       	ld	r24, Z
    3584:	8a 8b       	std	Y+18, r24	; 0x12
		MDIO_voidSetPinValue(KPD_PORT,Local_u8ColArry[Local_u8ColIterator],LOW) ;
			for(Local_u8RowIterator=0 ; Local_u8RowIterator<4 ;Local_u8RowIterator++)
			{
				Local_u8PinState =MDIO_u8GetPinValue(KPD_PORT,Local_u8RowArry[Local_u8RowIterator]) ;
				if(Local_u8PinState == 0 )
				{	while(Local_u8PinState == 0)
    3586:	89 89       	ldd	r24, Y+17	; 0x11
    3588:	88 23       	and	r24, r24
    358a:	d9 f2       	breq	.-74     	; 0x3542 <HKPD_u8GetPressedKey+0xc2>
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	a0 ea       	ldi	r26, 0xA0	; 160
    3592:	b0 e4       	ldi	r27, 0x40	; 64
    3594:	8b 87       	std	Y+11, r24	; 0x0b
    3596:	9c 87       	std	Y+12, r25	; 0x0c
    3598:	ad 87       	std	Y+13, r26	; 0x0d
    359a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359c:	6b 85       	ldd	r22, Y+11	; 0x0b
    359e:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a4:	20 e0       	ldi	r18, 0x00	; 0
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	4a ef       	ldi	r20, 0xFA	; 250
    35aa:	54 e4       	ldi	r21, 0x44	; 68
    35ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	8f 83       	std	Y+7, r24	; 0x07
    35b6:	98 87       	std	Y+8, r25	; 0x08
    35b8:	a9 87       	std	Y+9, r26	; 0x09
    35ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35bc:	6f 81       	ldd	r22, Y+7	; 0x07
    35be:	78 85       	ldd	r23, Y+8	; 0x08
    35c0:	89 85       	ldd	r24, Y+9	; 0x09
    35c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e8       	ldi	r20, 0x80	; 128
    35ca:	5f e3       	ldi	r21, 0x3F	; 63
    35cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35d0:	88 23       	and	r24, r24
    35d2:	2c f4       	brge	.+10     	; 0x35de <HKPD_u8GetPressedKey+0x15e>
		__ticks = 1;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	9e 83       	std	Y+6, r25	; 0x06
    35da:	8d 83       	std	Y+5, r24	; 0x05
    35dc:	3f c0       	rjmp	.+126    	; 0x365c <HKPD_u8GetPressedKey+0x1dc>
	else if (__tmp > 65535)
    35de:	6f 81       	ldd	r22, Y+7	; 0x07
    35e0:	78 85       	ldd	r23, Y+8	; 0x08
    35e2:	89 85       	ldd	r24, Y+9	; 0x09
    35e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	3f ef       	ldi	r19, 0xFF	; 255
    35ea:	4f e7       	ldi	r20, 0x7F	; 127
    35ec:	57 e4       	ldi	r21, 0x47	; 71
    35ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35f2:	18 16       	cp	r1, r24
    35f4:	4c f5       	brge	.+82     	; 0x3648 <HKPD_u8GetPressedKey+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e2       	ldi	r20, 0x20	; 32
    3604:	51 e4       	ldi	r21, 0x41	; 65
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	bc 01       	movw	r22, r24
    3610:	cd 01       	movw	r24, r26
    3612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	9e 83       	std	Y+6, r25	; 0x06
    361c:	8d 83       	std	Y+5, r24	; 0x05
    361e:	0f c0       	rjmp	.+30     	; 0x363e <HKPD_u8GetPressedKey+0x1be>
    3620:	88 ec       	ldi	r24, 0xC8	; 200
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	9c 83       	std	Y+4, r25	; 0x04
    3626:	8b 83       	std	Y+3, r24	; 0x03
    3628:	8b 81       	ldd	r24, Y+3	; 0x03
    362a:	9c 81       	ldd	r25, Y+4	; 0x04
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <HKPD_u8GetPressedKey+0x1ac>
    3630:	9c 83       	std	Y+4, r25	; 0x04
    3632:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3634:	8d 81       	ldd	r24, Y+5	; 0x05
    3636:	9e 81       	ldd	r25, Y+6	; 0x06
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	9e 83       	std	Y+6, r25	; 0x06
    363c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    363e:	8d 81       	ldd	r24, Y+5	; 0x05
    3640:	9e 81       	ldd	r25, Y+6	; 0x06
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	69 f7       	brne	.-38     	; 0x3620 <HKPD_u8GetPressedKey+0x1a0>
    3646:	14 c0       	rjmp	.+40     	; 0x3670 <HKPD_u8GetPressedKey+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3648:	6f 81       	ldd	r22, Y+7	; 0x07
    364a:	78 85       	ldd	r23, Y+8	; 0x08
    364c:	89 85       	ldd	r24, Y+9	; 0x09
    364e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	9e 83       	std	Y+6, r25	; 0x06
    365a:	8d 83       	std	Y+5, r24	; 0x05
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	9e 81       	ldd	r25, Y+6	; 0x06
    3660:	9a 83       	std	Y+2, r25	; 0x02
    3662:	89 83       	std	Y+1, r24	; 0x01
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	9a 81       	ldd	r25, Y+2	; 0x02
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <HKPD_u8GetPressedKey+0x1e8>
    366c:	9a 83       	std	Y+2, r25	; 0x02
    366e:	89 83       	std	Y+1, r24	; 0x01
						Local_u8PinState  =MDIO_u8GetPinValue(KPD_PORT,Local_u8RowArry[Local_u8RowIterator]);
						Local_u8PressedKey = Local_u8MatrixArry[Local_u8ColIterator][Local_u8RowIterator] ;

					}
					_delay_ms(5);
					if(Local_u8PressedKey==' ')
    3670:	8a 89       	ldd	r24, Y+18	; 0x12
    3672:	80 32       	cpi	r24, 0x20	; 32
    3674:	39 f4       	brne	.+14     	; 0x3684 <HKPD_u8GetPressedKey+0x204>
					{
						HLCD_voidGoToXY(0,0);
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	60 e0       	ldi	r22, 0x00	; 0
    367a:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <HLCD_voidGoToXY>
						HLCD_voidClearAll() ;
    367e:	0e 94 9a 19 	call	0x3334	; 0x3334 <HLCD_voidClearAll>
    3682:	03 c0       	rjmp	.+6      	; 0x368a <HKPD_u8GetPressedKey+0x20a>
					}
					else
					return Local_u8PressedKey ;
    3684:	fa 89       	ldd	r31, Y+18	; 0x12
    3686:	fb a7       	std	Y+43, r31	; 0x2b
    3688:	1e c0       	rjmp	.+60     	; 0x36c6 <HKPD_u8GetPressedKey+0x246>
	u8 Local_u8RowIterator ;
	u8 Local_u8MatrixArry[4][4] = KPD_ARRAY_VAL ;
	for(Local_u8ColIterator=0 ; Local_u8ColIterator < 4 ; Local_u8ColIterator++ )
	{
		MDIO_voidSetPinValue(KPD_PORT,Local_u8ColArry[Local_u8ColIterator],LOW) ;
			for(Local_u8RowIterator=0 ; Local_u8RowIterator<4 ;Local_u8RowIterator++)
    368a:	8f 85       	ldd	r24, Y+15	; 0x0f
    368c:	8f 5f       	subi	r24, 0xFF	; 255
    368e:	8f 87       	std	Y+15, r24	; 0x0f
    3690:	8f 85       	ldd	r24, Y+15	; 0x0f
    3692:	84 30       	cpi	r24, 0x04	; 4
    3694:	08 f4       	brcc	.+2      	; 0x3698 <HKPD_u8GetPressedKey+0x218>
    3696:	42 cf       	rjmp	.-380    	; 0x351c <HKPD_u8GetPressedKey+0x9c>
					else
					return Local_u8PressedKey ;
				}

			}
		MDIO_voidSetPinValue(KPD_PORT,Local_u8ColArry[Local_u8ColIterator],HIGH) ;
    3698:	88 89       	ldd	r24, Y+16	; 0x10
    369a:	28 2f       	mov	r18, r24
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	ce 01       	movw	r24, r28
    36a0:	43 96       	adiw	r24, 0x13	; 19
    36a2:	fc 01       	movw	r30, r24
    36a4:	e2 0f       	add	r30, r18
    36a6:	f3 1f       	adc	r31, r19
    36a8:	90 81       	ld	r25, Z
    36aa:	82 e0       	ldi	r24, 0x02	; 2
    36ac:	69 2f       	mov	r22, r25
    36ae:	41 e0       	ldi	r20, 0x01	; 1
    36b0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	u8 Local_u8RowArry[4] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
	u8 Local_u8PinState=0 ;
	u8 Local_u8ColIterator ;
	u8 Local_u8RowIterator ;
	u8 Local_u8MatrixArry[4][4] = KPD_ARRAY_VAL ;
	for(Local_u8ColIterator=0 ; Local_u8ColIterator < 4 ; Local_u8ColIterator++ )
    36b4:	88 89       	ldd	r24, Y+16	; 0x10
    36b6:	8f 5f       	subi	r24, 0xFF	; 255
    36b8:	88 8b       	std	Y+16, r24	; 0x10
    36ba:	88 89       	ldd	r24, Y+16	; 0x10
    36bc:	84 30       	cpi	r24, 0x04	; 4
    36be:	08 f4       	brcc	.+2      	; 0x36c2 <HKPD_u8GetPressedKey+0x242>
    36c0:	1d cf       	rjmp	.-454    	; 0x34fc <HKPD_u8GetPressedKey+0x7c>

			}
		MDIO_voidSetPinValue(KPD_PORT,Local_u8ColArry[Local_u8ColIterator],HIGH) ;
	}
	
	return Local_u8PressedKey ;
    36c2:	8a 89       	ldd	r24, Y+18	; 0x12
    36c4:	8b a7       	std	Y+43, r24	; 0x2b
    36c6:	8b a5       	ldd	r24, Y+43	; 0x2b

}
    36c8:	e0 96       	adiw	r28, 0x30	; 48
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <HBRIDGE_voidInit>:
#include "HB_private.h"
#include "HB_config.h"


void HBRIDGE_voidInit(void)
{
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinDirection(HB_PORT, HB_PIN0, OUTPUT);
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	60 e0       	ldi	r22, 0x00	; 0
    36e6:	41 e0       	ldi	r20, 0x01	; 1
    36e8:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(HB_PORT, HB_PIN1, OUTPUT);
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	61 e0       	ldi	r22, 0x01	; 1
    36f0:	41 e0       	ldi	r20, 0x01	; 1
    36f2:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
}
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	08 95       	ret

000036fc <HBRIDGE_voidCW>:

void HBRIDGE_voidCW(void)
{
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(HB_PORT, HB_PIN1, LOW);
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	61 e0       	ldi	r22, 0x01	; 1
    3708:	40 e0       	ldi	r20, 0x00	; 0
    370a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HB_PORT, HB_PIN0, HIGH);
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	60 e0       	ldi	r22, 0x00	; 0
    3712:	41 e0       	ldi	r20, 0x01	; 1
    3714:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
}
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <HBRIDGE_voidCCW>:

void HBRIDGE_voidCCW(void)
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(HB_PORT, HB_PIN0, LOW);
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	60 e0       	ldi	r22, 0x00	; 0
    372a:	40 e0       	ldi	r20, 0x00	; 0
    372c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HB_PORT, HB_PIN1, HIGH);
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	61 e0       	ldi	r22, 0x01	; 1
    3734:	41 e0       	ldi	r20, 0x01	; 1
    3736:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
}
    373a:	cf 91       	pop	r28
    373c:	df 91       	pop	r29
    373e:	08 95       	ret

00003740 <HBRIDGE_voidOFF>:

void HBRIDGE_voidOFF(void)
{
    3740:	df 93       	push	r29
    3742:	cf 93       	push	r28
    3744:	cd b7       	in	r28, 0x3d	; 61
    3746:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidSetPinValue(HB_PORT, HB_PIN0, LOW);
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	60 e0       	ldi	r22, 0x00	; 0
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(HB_PORT, HB_PIN1, LOW);
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	61 e0       	ldi	r22, 0x01	; 1
    3756:	40 e0       	ldi	r20, 0x00	; 0
    3758:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
}
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <HEEPROM_voidWriteData>:
        0b 1010 A2A1A0 + 1  (READ REQUEST)
    6-Read Data received 
    7-Send Stop condition
*/
void HEEPROM_voidWriteData(u16 Copy_u16Location, u8 Copy_u8Data)
{
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	62 97       	sbiw	r28, 0x12	; 18
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	f8 94       	cli
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	cd bf       	out	0x3d, r28	; 61
    3776:	99 8b       	std	Y+17, r25	; 0x11
    3778:	88 8b       	std	Y+16, r24	; 0x10
    377a:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket = 0;
    377c:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_u16Location <= 1023)
    377e:	88 89       	ldd	r24, Y+16	; 0x10
    3780:	99 89       	ldd	r25, Y+17	; 0x11
    3782:	24 e0       	ldi	r18, 0x04	; 4
    3784:	80 30       	cpi	r24, 0x00	; 0
    3786:	92 07       	cpc	r25, r18
    3788:	08 f0       	brcs	.+2      	; 0x378c <HEEPROM_voidWriteData+0x2a>
    378a:	85 c0       	rjmp	.+266    	; 0x3896 <HEEPROM_voidWriteData+0x134>
	{
		Local_u8AddressPacket =	 EEPROM_FIXED_ADDRESS | (A2_CONNECTION << 2) | (u8)(Copy_u16Location >> 8);
    378c:	88 89       	ldd	r24, Y+16	; 0x10
    378e:	99 89       	ldd	r25, Y+17	; 0x11
    3790:	89 2f       	mov	r24, r25
    3792:	99 27       	eor	r25, r25
    3794:	80 65       	ori	r24, 0x50	; 80
    3796:	8f 87       	std	Y+15, r24	; 0x0f
			Local_u8AddressPacket =	 EEPROM_FIXED_ADDRESS | (A2_CONNECTION << 2) |
			(A1_CONNECTION << 1) | (A0_CONNECTION);
		*/

		/*Send Start Condition*/
		MTWI_ErrorStatusSendStartCondition();
    3798:	0e 94 53 07 	call	0xea6	; 0xea6 <MTWI_ErrorStatusSendStartCondition>
		/*Send Slave Address With Write Request*/
		MTWI_ErrorStatusSendSlaveAddressWithWrite(Local_u8AddressPacket);
    379c:	8f 85       	ldd	r24, Y+15	; 0x0f
    379e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <MTWI_ErrorStatusSendSlaveAddressWithWrite>
		/*Send The Rest Of Byte Address*/
		MTWI_ErrorStatusMasterWriteDataByte((u8)Copy_u16Location);
    37a2:	88 89       	ldd	r24, Y+16	; 0x10
    37a4:	0e 94 17 08 	call	0x102e	; 0x102e <MTWI_ErrorStatusMasterWriteDataByte>
		/*Send The Data Byte*/
		MTWI_ErrorStatusMasterWriteDataByte(Copy_u8Data);
    37a8:	8a 89       	ldd	r24, Y+18	; 0x12
    37aa:	0e 94 17 08 	call	0x102e	; 0x102e <MTWI_ErrorStatusMasterWriteDataByte>
		/*Send Stop Condition*/
		MTWI_voidSendStopCondition();
    37ae:	0e 94 6f 08 	call	0x10de	; 0x10de <MTWI_voidSendStopCondition>
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	a0 e2       	ldi	r26, 0x20	; 32
    37b8:	b1 e4       	ldi	r27, 0x41	; 65
    37ba:	8b 87       	std	Y+11, r24	; 0x0b
    37bc:	9c 87       	std	Y+12, r25	; 0x0c
    37be:	ad 87       	std	Y+13, r26	; 0x0d
    37c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	4a ef       	ldi	r20, 0xFA	; 250
    37d0:	54 e4       	ldi	r21, 0x44	; 68
    37d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	8f 83       	std	Y+7, r24	; 0x07
    37dc:	98 87       	std	Y+8, r25	; 0x08
    37de:	a9 87       	std	Y+9, r26	; 0x09
    37e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37e2:	6f 81       	ldd	r22, Y+7	; 0x07
    37e4:	78 85       	ldd	r23, Y+8	; 0x08
    37e6:	89 85       	ldd	r24, Y+9	; 0x09
    37e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e8       	ldi	r20, 0x80	; 128
    37f0:	5f e3       	ldi	r21, 0x3F	; 63
    37f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37f6:	88 23       	and	r24, r24
    37f8:	2c f4       	brge	.+10     	; 0x3804 <HEEPROM_voidWriteData+0xa2>
		__ticks = 1;
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	9e 83       	std	Y+6, r25	; 0x06
    3800:	8d 83       	std	Y+5, r24	; 0x05
    3802:	3f c0       	rjmp	.+126    	; 0x3882 <HEEPROM_voidWriteData+0x120>
	else if (__tmp > 65535)
    3804:	6f 81       	ldd	r22, Y+7	; 0x07
    3806:	78 85       	ldd	r23, Y+8	; 0x08
    3808:	89 85       	ldd	r24, Y+9	; 0x09
    380a:	9a 85       	ldd	r25, Y+10	; 0x0a
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	3f ef       	ldi	r19, 0xFF	; 255
    3810:	4f e7       	ldi	r20, 0x7F	; 127
    3812:	57 e4       	ldi	r21, 0x47	; 71
    3814:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3818:	18 16       	cp	r1, r24
    381a:	4c f5       	brge	.+82     	; 0x386e <HEEPROM_voidWriteData+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    381c:	6b 85       	ldd	r22, Y+11	; 0x0b
    381e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3820:	8d 85       	ldd	r24, Y+13	; 0x0d
    3822:	9e 85       	ldd	r25, Y+14	; 0x0e
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	40 e2       	ldi	r20, 0x20	; 32
    382a:	51 e4       	ldi	r21, 0x41	; 65
    382c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	9e 83       	std	Y+6, r25	; 0x06
    3842:	8d 83       	std	Y+5, r24	; 0x05
    3844:	0f c0       	rjmp	.+30     	; 0x3864 <HEEPROM_voidWriteData+0x102>
    3846:	88 ec       	ldi	r24, 0xC8	; 200
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	9c 83       	std	Y+4, r25	; 0x04
    384c:	8b 83       	std	Y+3, r24	; 0x03
    384e:	8b 81       	ldd	r24, Y+3	; 0x03
    3850:	9c 81       	ldd	r25, Y+4	; 0x04
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	f1 f7       	brne	.-4      	; 0x3852 <HEEPROM_voidWriteData+0xf0>
    3856:	9c 83       	std	Y+4, r25	; 0x04
    3858:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385a:	8d 81       	ldd	r24, Y+5	; 0x05
    385c:	9e 81       	ldd	r25, Y+6	; 0x06
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	9e 83       	std	Y+6, r25	; 0x06
    3862:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3864:	8d 81       	ldd	r24, Y+5	; 0x05
    3866:	9e 81       	ldd	r25, Y+6	; 0x06
    3868:	00 97       	sbiw	r24, 0x00	; 0
    386a:	69 f7       	brne	.-38     	; 0x3846 <HEEPROM_voidWriteData+0xe4>
    386c:	14 c0       	rjmp	.+40     	; 0x3896 <HEEPROM_voidWriteData+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386e:	6f 81       	ldd	r22, Y+7	; 0x07
    3870:	78 85       	ldd	r23, Y+8	; 0x08
    3872:	89 85       	ldd	r24, Y+9	; 0x09
    3874:	9a 85       	ldd	r25, Y+10	; 0x0a
    3876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	9e 83       	std	Y+6, r25	; 0x06
    3880:	8d 83       	std	Y+5, r24	; 0x05
    3882:	8d 81       	ldd	r24, Y+5	; 0x05
    3884:	9e 81       	ldd	r25, Y+6	; 0x06
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	9a 81       	ldd	r25, Y+2	; 0x02
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	f1 f7       	brne	.-4      	; 0x388e <HEEPROM_voidWriteData+0x12c>
    3892:	9a 83       	std	Y+2, r25	; 0x02
    3894:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}

}
    3896:	62 96       	adiw	r28, 0x12	; 18
    3898:	0f b6       	in	r0, 0x3f	; 63
    389a:	f8 94       	cli
    389c:	de bf       	out	0x3e, r29	; 62
    389e:	0f be       	out	0x3f, r0	; 63
    38a0:	cd bf       	out	0x3d, r28	; 61
    38a2:	cf 91       	pop	r28
    38a4:	df 91       	pop	r29
    38a6:	08 95       	ret

000038a8 <HEEPROM_voidReadData>:

void HEEPROM_voidReadData(u16 Copy_u16Location, u8 * Copy_pu8ReceivedData)
{
    38a8:	df 93       	push	r29
    38aa:	cf 93       	push	r28
    38ac:	00 d0       	rcall	.+0      	; 0x38ae <HEEPROM_voidReadData+0x6>
    38ae:	00 d0       	rcall	.+0      	; 0x38b0 <HEEPROM_voidReadData+0x8>
    38b0:	0f 92       	push	r0
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	9b 83       	std	Y+3, r25	; 0x03
    38b8:	8a 83       	std	Y+2, r24	; 0x02
    38ba:	7d 83       	std	Y+5, r23	; 0x05
    38bc:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8AddressPacket = 0;
    38be:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u16Location <= 1023)
    38c0:	8a 81       	ldd	r24, Y+2	; 0x02
    38c2:	9b 81       	ldd	r25, Y+3	; 0x03
    38c4:	24 e0       	ldi	r18, 0x04	; 4
    38c6:	80 30       	cpi	r24, 0x00	; 0
    38c8:	92 07       	cpc	r25, r18
    38ca:	c8 f4       	brcc	.+50     	; 0x38fe <HEEPROM_voidReadData+0x56>
	{

		Local_u8AddressPacket =	 EEPROM_FIXED_ADDRESS | (A2_CONNECTION << 2) | (u8)(Copy_u16Location >> 8);
    38cc:	8a 81       	ldd	r24, Y+2	; 0x02
    38ce:	9b 81       	ldd	r25, Y+3	; 0x03
    38d0:	89 2f       	mov	r24, r25
    38d2:	99 27       	eor	r25, r25
    38d4:	80 65       	ori	r24, 0x50	; 80
    38d6:	89 83       	std	Y+1, r24	; 0x01
			Local_u8AddressPacket =	 EEPROM_FIXED_ADDRESS | (A2_CONNECTION << 2) |
			(A1_CONNECTION << 1) | (A0_CONNECTION);
		*/

		/*Send Start Condition*/
		MTWI_ErrorStatusSendStartCondition();
    38d8:	0e 94 53 07 	call	0xea6	; 0xea6 <MTWI_ErrorStatusSendStartCondition>
		/*Send Slave Address With Write Request*/
		MTWI_ErrorStatusSendSlaveAddressWithWrite(Local_u8AddressPacket);
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	0e 94 a7 07 	call	0xf4e	; 0xf4e <MTWI_ErrorStatusSendSlaveAddressWithWrite>
		/*Send The Rest Of Byte Address*/
		MTWI_ErrorStatusMasterWriteDataByte((u8)Copy_u16Location);
    38e2:	8a 81       	ldd	r24, Y+2	; 0x02
    38e4:	0e 94 17 08 	call	0x102e	; 0x102e <MTWI_ErrorStatusMasterWriteDataByte>
		/*Send Repeated Start Condition*/
		MTWI_ErrorStatusSendRepeatedStartCondition();
    38e8:	0e 94 7d 07 	call	0xefa	; 0xefa <MTWI_ErrorStatusSendRepeatedStartCondition>
		/*Send The Slave Address With Read Request*/
		MTWI_ErrorStatusSendSlaveAddressWithRead(Local_u8AddressPacket);
    38ec:	89 81       	ldd	r24, Y+1	; 0x01
    38ee:	0e 94 df 07 	call	0xfbe	; 0xfbe <MTWI_ErrorStatusSendSlaveAddressWithRead>
		/*Get The Data From The Memory*/
		MTWI_ErrorStatusMasterReadDataByte(Copy_pu8ReceivedData);
    38f2:	8c 81       	ldd	r24, Y+4	; 0x04
    38f4:	9d 81       	ldd	r25, Y+5	; 0x05
    38f6:	0e 94 40 08 	call	0x1080	; 0x1080 <MTWI_ErrorStatusMasterReadDataByte>
		/*Send Stop Condition*/
		MTWI_voidSendStopCondition();
    38fa:	0e 94 6f 08 	call	0x10de	; 0x10de <MTWI_voidSendStopCondition>
	}
}
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	08 95       	ret

0000390e <main>:
void Sys_PinsDirection(void) ;

extern u8 MSPI_u8ReceivedData    ;

int main()
{
    390e:	0f 93       	push	r16
    3910:	1f 93       	push	r17
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    391a:	a7 97       	sbiw	r28, 0x27	; 39
    391c:	0f b6       	in	r0, 0x3f	; 63
    391e:	f8 94       	cli
    3920:	de bf       	out	0x3e, r29	; 62
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	cd bf       	out	0x3d, r28	; 61
	Sys_Init();
    3926:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <Sys_Init>
	Sys_PinsDirection() ;
    392a:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <Sys_PinsDirection>
/****** Local Variables ********/
	volatile u16 LDR_DigitalValue  ;
	volatile u16 LM35_DigitalValue ;
	u8  Mapped_LDR		  ;
	u8  Mapped_LM35		  ;
	u8  Room_Lights = OFF ;
    392e:	1f 8e       	std	Y+31, r1	; 0x1f
	u8  PIR_Reading = 0   ;
    3930:	1e 8e       	std	Y+30, r1	; 0x1e
	u8  MAX_CompareValue = 255;
    3932:	8f ef       	ldi	r24, 0xFF	; 255
    3934:	8d 8f       	std	Y+29, r24	; 0x1d


/*****Initial Setting System to be off ****/
	MSPI_u8ReceivedData = 12  ;
    3936:	8c e0       	ldi	r24, 0x0C	; 12
    3938:	80 93 06 01 	sts	0x0106, r24

	while(1)
	{

		//Saving Sensors Readings
		LDR_DigitalValue = MADC_u16StartConversionSync(ADC_CHANNEL0) ;
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	0e 94 1f 10 	call	0x203e	; 0x203e <MADC_u16StartConversionSync>
    3942:	9b a3       	std	Y+35, r25	; 0x23
    3944:	8a a3       	std	Y+34, r24	; 0x22
		PIR_Reading      = MDIO_u8GetPinValue(PORTA,PIN2)            ;
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	62 e0       	ldi	r22, 0x02	; 2
    394a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <MDIO_u8GetPinValue>
    394e:	8e 8f       	std	Y+30, r24	; 0x1e

		//Mapping Reading to PWM Values
		Mapped_LDR =MAP(0,1023,0,255,LDR_DigitalValue)  ;
    3950:	8a a1       	ldd	r24, Y+34	; 0x22
    3952:	9b a1       	ldd	r25, Y+35	; 0x23
    3954:	fc 01       	movw	r30, r24
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	6f ef       	ldi	r22, 0xFF	; 255
    395c:	73 e0       	ldi	r23, 0x03	; 3
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	50 e0       	ldi	r21, 0x00	; 0
    3962:	2f ef       	ldi	r18, 0xFF	; 255
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	8f 01       	movw	r16, r30
    3968:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <MAP>
    396c:	89 a3       	std	Y+33, r24	; 0x21

		//Checking If Room light is on/off or there is no one in room or not
		if(Room_Lights==ON && PIR_Reading == 1)
    396e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3970:	81 30       	cpi	r24, 0x01	; 1
    3972:	49 f4       	brne	.+18     	; 0x3986 <main+0x78>
    3974:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3976:	81 30       	cpi	r24, 0x01	; 1
    3978:	31 f4       	brne	.+12     	; 0x3986 <main+0x78>
		{
			MTIMERS_voidTimer0SetCompareMatchValue(MAX_CompareValue - Mapped_LDR) ;
    397a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    397c:	99 a1       	ldd	r25, Y+33	; 0x21
    397e:	89 1b       	sub	r24, r25
    3980:	0e 94 68 09 	call	0x12d0	; 0x12d0 <MTIMERS_voidTimer0SetCompareMatchValue>
    3984:	09 c0       	rjmp	.+18     	; 0x3998 <main+0x8a>
		}
		else if(Room_Lights == OFF || PIR_Reading == 0 )
    3986:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3988:	88 23       	and	r24, r24
    398a:	19 f0       	breq	.+6      	; 0x3992 <main+0x84>
    398c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    398e:	88 23       	and	r24, r24
    3990:	19 f4       	brne	.+6      	; 0x3998 <main+0x8a>
		{
			MTIMERS_voidTimer0SetCompareMatchValue(MAX_CompareValue)	;
    3992:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3994:	0e 94 68 09 	call	0x12d0	; 0x12d0 <MTIMERS_voidTimer0SetCompareMatchValue>
		}

		switch(SPDR)
    3998:	ef e2       	ldi	r30, 0x2F	; 47
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	80 81       	ld	r24, Z
    399e:	28 2f       	mov	r18, r24
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	3f a3       	std	Y+39, r19	; 0x27
    39a4:	2e a3       	std	Y+38, r18	; 0x26
    39a6:	8e a1       	ldd	r24, Y+38	; 0x26
    39a8:	9f a1       	ldd	r25, Y+39	; 0x27
    39aa:	84 30       	cpi	r24, 0x04	; 4
    39ac:	91 05       	cpc	r25, r1
    39ae:	09 f4       	brne	.+2      	; 0x39b2 <main+0xa4>
    39b0:	ae c0       	rjmp	.+348    	; 0x3b0e <main+0x200>
    39b2:	2e a1       	ldd	r18, Y+38	; 0x26
    39b4:	3f a1       	ldd	r19, Y+39	; 0x27
    39b6:	25 30       	cpi	r18, 0x05	; 5
    39b8:	31 05       	cpc	r19, r1
    39ba:	ec f4       	brge	.+58     	; 0x39f6 <main+0xe8>
    39bc:	8e a1       	ldd	r24, Y+38	; 0x26
    39be:	9f a1       	ldd	r25, Y+39	; 0x27
    39c0:	81 30       	cpi	r24, 0x01	; 1
    39c2:	91 05       	cpc	r25, r1
    39c4:	09 f4       	brne	.+2      	; 0x39c8 <main+0xba>
    39c6:	4d c0       	rjmp	.+154    	; 0x3a62 <main+0x154>
    39c8:	2e a1       	ldd	r18, Y+38	; 0x26
    39ca:	3f a1       	ldd	r19, Y+39	; 0x27
    39cc:	22 30       	cpi	r18, 0x02	; 2
    39ce:	31 05       	cpc	r19, r1
    39d0:	2c f4       	brge	.+10     	; 0x39dc <main+0xce>
    39d2:	8e a1       	ldd	r24, Y+38	; 0x26
    39d4:	9f a1       	ldd	r25, Y+39	; 0x27
    39d6:	00 97       	sbiw	r24, 0x00	; 0
    39d8:	99 f1       	breq	.+102    	; 0x3a40 <main+0x132>
    39da:	54 c1       	rjmp	.+680    	; 0x3c84 <main+0x376>
    39dc:	2e a1       	ldd	r18, Y+38	; 0x26
    39de:	3f a1       	ldd	r19, Y+39	; 0x27
    39e0:	22 30       	cpi	r18, 0x02	; 2
    39e2:	31 05       	cpc	r19, r1
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <main+0xda>
    39e6:	4d c0       	rjmp	.+154    	; 0x3a82 <main+0x174>
    39e8:	8e a1       	ldd	r24, Y+38	; 0x26
    39ea:	9f a1       	ldd	r25, Y+39	; 0x27
    39ec:	83 30       	cpi	r24, 0x03	; 3
    39ee:	91 05       	cpc	r25, r1
    39f0:	09 f4       	brne	.+2      	; 0x39f4 <main+0xe6>
    39f2:	6c c0       	rjmp	.+216    	; 0x3acc <main+0x1be>
    39f4:	47 c1       	rjmp	.+654    	; 0x3c84 <main+0x376>
    39f6:	2e a1       	ldd	r18, Y+38	; 0x26
    39f8:	3f a1       	ldd	r19, Y+39	; 0x27
    39fa:	2a 30       	cpi	r18, 0x0A	; 10
    39fc:	31 05       	cpc	r19, r1
    39fe:	09 f4       	brne	.+2      	; 0x3a02 <main+0xf4>
    3a00:	9d cf       	rjmp	.-198    	; 0x393c <main+0x2e>
    3a02:	8e a1       	ldd	r24, Y+38	; 0x26
    3a04:	9f a1       	ldd	r25, Y+39	; 0x27
    3a06:	8b 30       	cpi	r24, 0x0B	; 11
    3a08:	91 05       	cpc	r25, r1
    3a0a:	6c f4       	brge	.+26     	; 0x3a26 <main+0x118>
    3a0c:	2e a1       	ldd	r18, Y+38	; 0x26
    3a0e:	3f a1       	ldd	r19, Y+39	; 0x27
    3a10:	25 30       	cpi	r18, 0x05	; 5
    3a12:	31 05       	cpc	r19, r1
    3a14:	09 f4       	brne	.+2      	; 0x3a18 <main+0x10a>
    3a16:	8a c0       	rjmp	.+276    	; 0x3b2c <main+0x21e>
    3a18:	8e a1       	ldd	r24, Y+38	; 0x26
    3a1a:	9f a1       	ldd	r25, Y+39	; 0x27
    3a1c:	88 30       	cpi	r24, 0x08	; 8
    3a1e:	91 05       	cpc	r25, r1
    3a20:	09 f4       	brne	.+2      	; 0x3a24 <main+0x116>
    3a22:	af c0       	rjmp	.+350    	; 0x3b82 <main+0x274>
    3a24:	2f c1       	rjmp	.+606    	; 0x3c84 <main+0x376>
    3a26:	2e a1       	ldd	r18, Y+38	; 0x26
    3a28:	3f a1       	ldd	r19, Y+39	; 0x27
    3a2a:	2b 30       	cpi	r18, 0x0B	; 11
    3a2c:	31 05       	cpc	r19, r1
    3a2e:	09 f4       	brne	.+2      	; 0x3a32 <main+0x124>
    3a30:	8c c0       	rjmp	.+280    	; 0x3b4a <main+0x23c>
    3a32:	8e a1       	ldd	r24, Y+38	; 0x26
    3a34:	9f a1       	ldd	r25, Y+39	; 0x27
    3a36:	8c 30       	cpi	r24, 0x0C	; 12
    3a38:	91 05       	cpc	r25, r1
    3a3a:	09 f4       	brne	.+2      	; 0x3a3e <main+0x130>
    3a3c:	94 c0       	rjmp	.+296    	; 0x3b66 <main+0x258>
    3a3e:	22 c1       	rjmp	.+580    	; 0x3c84 <main+0x376>
		{
			case TURN_LIGHT_ON:
				MDIO_voidSetPinValue(PORTA,PIN3,HIGH) ;	// Reception Light
    3a40:	80 e0       	ldi	r24, 0x00	; 0
    3a42:	63 e0       	ldi	r22, 0x03	; 3
    3a44:	41 e0       	ldi	r20, 0x01	; 1
    3a46:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				Room_Lights = ON ; // Room Light
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	8f 8f       	std	Y+31, r24	; 0x1f
				HLCD_voidClearAll() ;
    3a4e:	0e 94 9a 19 	call	0x3334	; 0x3334 <HLCD_voidClearAll>
				HLCD_voidSendString("Lights ON") ;
    3a52:	80 e6       	ldi	r24, 0x60	; 96
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	0e 94 45 19 	call	0x328a	; 0x328a <HLCD_voidSendString>
				MSPI_u8ReceivedData = DEFAULT_STATE;
    3a5a:	8a e0       	ldi	r24, 0x0A	; 10
    3a5c:	80 93 06 01 	sts	0x0106, r24
    3a60:	6d cf       	rjmp	.-294    	; 0x393c <main+0x2e>
				break ;
			case TURN_LIGHT_OFF:
				MDIO_voidSetPinValue(PORTA,PIN3,LOW)  ;  // Reception Light
    3a62:	80 e0       	ldi	r24, 0x00	; 0
    3a64:	63 e0       	ldi	r22, 0x03	; 3
    3a66:	40 e0       	ldi	r20, 0x00	; 0
    3a68:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <MDIO_voidSetPinValue>
				Room_Lights = OFF;  // Room Light
    3a6c:	1f 8e       	std	Y+31, r1	; 0x1f
				HLCD_voidClearAll() ;
    3a6e:	0e 94 9a 19 	call	0x3334	; 0x3334 <HLCD_voidClearAll>
				HLCD_voidSendString("Lights OFF") ;
    3a72:	8a e6       	ldi	r24, 0x6A	; 106
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	0e 94 45 19 	call	0x328a	; 0x328a <HLCD_voidSendString>
				MSPI_u8ReceivedData = DEFAULT_STATE ;
    3a7a:	8a e0       	ldi	r24, 0x0A	; 10
    3a7c:	80 93 06 01 	sts	0x0106, r24
    3a80:	5d cf       	rjmp	.-326    	; 0x393c <main+0x2e>
				break ;
			case TURN_FAN_ON :
				LM35_DigitalValue= MADC_u16StartConversionSync(ADC_CHANNEL1) ;
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	0e 94 1f 10 	call	0x203e	; 0x203e <MADC_u16StartConversionSync>
    3a88:	9d a3       	std	Y+37, r25	; 0x25
    3a8a:	8c a3       	std	Y+36, r24	; 0x24
				Mapped_LM35=MAP(0,1023,0,255,LM35_DigitalValue)         ;
    3a8c:	8c a1       	ldd	r24, Y+36	; 0x24
    3a8e:	9d a1       	ldd	r25, Y+37	; 0x25
    3a90:	fc 01       	movw	r30, r24
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	6f ef       	ldi	r22, 0xFF	; 255
    3a98:	73 e0       	ldi	r23, 0x03	; 3
    3a9a:	40 e0       	ldi	r20, 0x00	; 0
    3a9c:	50 e0       	ldi	r21, 0x00	; 0
    3a9e:	2f ef       	ldi	r18, 0xFF	; 255
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	8f 01       	movw	r16, r30
    3aa4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <MAP>
    3aa8:	88 a3       	std	Y+32, r24	; 0x20
				MTIMERS_voidTimer2SetCompareMatchValue(MAX_CompareValue - Mapped_LM35) ; //(NEED ADJUSTING)
    3aaa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3aac:	88 a1       	ldd	r24, Y+32	; 0x20
    3aae:	29 2f       	mov	r18, r25
    3ab0:	28 1b       	sub	r18, r24
    3ab2:	82 2f       	mov	r24, r18
    3ab4:	0e 94 88 09 	call	0x1310	; 0x1310 <MTIMERS_voidTimer2SetCompareMatchValue>
				HLCD_voidClearAll() ;
    3ab8:	0e 94 9a 19 	call	0x3334	; 0x3334 <HLCD_voidClearAll>
				HLCD_voidSendString("FAN ON ") ;
    3abc:	85 e7       	ldi	r24, 0x75	; 117
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	0e 94 45 19 	call	0x328a	; 0x328a <HLCD_voidSendString>
				MSPI_u8ReceivedData = DEFAULT_STATE ;
    3ac4:	8a e0       	ldi	r24, 0x0A	; 10
    3ac6:	80 93 06 01 	sts	0x0106, r24
    3aca:	38 cf       	rjmp	.-400    	; 0x393c <main+0x2e>
				break ;
			case TURN_FAN_OFF:
				LM35_DigitalValue= MADC_u16StartConversionSync(ADC_CHANNEL1) ;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	0e 94 1f 10 	call	0x203e	; 0x203e <MADC_u16StartConversionSync>
    3ad2:	9d a3       	std	Y+37, r25	; 0x25
    3ad4:	8c a3       	std	Y+36, r24	; 0x24
				Mapped_LM35=MAP(0,1023,0,255,LM35_DigitalValue)         ;
    3ad6:	8c a1       	ldd	r24, Y+36	; 0x24
    3ad8:	9d a1       	ldd	r25, Y+37	; 0x25
    3ada:	fc 01       	movw	r30, r24
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	6f ef       	ldi	r22, 0xFF	; 255
    3ae2:	73 e0       	ldi	r23, 0x03	; 3
    3ae4:	40 e0       	ldi	r20, 0x00	; 0
    3ae6:	50 e0       	ldi	r21, 0x00	; 0
    3ae8:	2f ef       	ldi	r18, 0xFF	; 255
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	8f 01       	movw	r16, r30
    3aee:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <MAP>
    3af2:	88 a3       	std	Y+32, r24	; 0x20
				MTIMERS_voidTimer2SetCompareMatchValue(MAX_CompareValue) ; //(NEED ADJUSTING)
    3af4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3af6:	0e 94 88 09 	call	0x1310	; 0x1310 <MTIMERS_voidTimer2SetCompareMatchValue>
				HLCD_voidSendString("FAN OFF") ;
    3afa:	8d e7       	ldi	r24, 0x7D	; 125
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	0e 94 45 19 	call	0x328a	; 0x328a <HLCD_voidSendString>
				HLCD_voidClearAll() ;
    3b02:	0e 94 9a 19 	call	0x3334	; 0x3334 <HLCD_voidClearAll>
				MSPI_u8ReceivedData = DEFAULT_STATE ;
    3b06:	8a e0       	ldi	r24, 0x0A	; 10
    3b08:	80 93 06 01 	sts	0x0106, r24
    3b0c:	17 cf       	rjmp	.-466    	; 0x393c <main+0x2e>
				break ;
			case GARAGE_ON :
				HSTEPPER_voidRotate(COUNTER_CLK_WISE, 270); // Open Curtains  (NEED ADJUSTING)
    3b0e:	80 e0       	ldi	r24, 0x00	; 0
    3b10:	6e e0       	ldi	r22, 0x0E	; 14
    3b12:	71 e0       	ldi	r23, 0x01	; 1
    3b14:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <HSTEPPER_voidRotate>
				HLCD_voidClearAll() ;
    3b18:	0e 94 9a 19 	call	0x3334	; 0x3334 <HLCD_voidClearAll>
				HLCD_voidSendString("Garage Open") ;
    3b1c:	85 e8       	ldi	r24, 0x85	; 133
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	0e 94 45 19 	call	0x328a	; 0x328a <HLCD_voidSendString>
				MSPI_u8ReceivedData = DEFAULT_STATE ;
    3b24:	8a e0       	ldi	r24, 0x0A	; 10
    3b26:	80 93 06 01 	sts	0x0106, r24
    3b2a:	08 cf       	rjmp	.-496    	; 0x393c <main+0x2e>
				break;
			case GARAGE_OFF :
				HSTEPPER_voidRotate(COUNTER_CLK_WISE, 270); // Close Curtains (NEED ADJUSTING)
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	6e e0       	ldi	r22, 0x0E	; 14
    3b30:	71 e0       	ldi	r23, 0x01	; 1
    3b32:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <HSTEPPER_voidRotate>
				HLCD_voidClearAll() ;
    3b36:	0e 94 9a 19 	call	0x3334	; 0x3334 <HLCD_voidClearAll>
				HLCD_voidSendString("Garage Close") ;
    3b3a:	81 e9       	ldi	r24, 0x91	; 145
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	0e 94 45 19 	call	0x328a	; 0x328a <HLCD_voidSendString>
				MSPI_u8ReceivedData = DEFAULT_STATE ;
    3b42:	8a e0       	ldi	r24, 0x0A	; 10
    3b44:	80 93 06 01 	sts	0x0106, r24
    3b48:	f9 ce       	rjmp	.-526    	; 0x393c <main+0x2e>
				break;

			case DOOR_OPEN :
				SERVO_voidRotateSpecificAngle_OC1A (180); // door will open (Servo motor will move to angle 180)
    3b4a:	84 eb       	ldi	r24, 0xB4	; 180
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <SERVO_voidRotateSpecificAngle_OC1A>
				HLCD_voidClearAll() ;
    3b52:	0e 94 9a 19 	call	0x3334	; 0x3334 <HLCD_voidClearAll>
				HLCD_voidSendString("Door opened") ;
    3b56:	8e e9       	ldi	r24, 0x9E	; 158
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	0e 94 45 19 	call	0x328a	; 0x328a <HLCD_voidSendString>
				MSPI_u8ReceivedData = DEFAULT_STATE ;
    3b5e:	8a e0       	ldi	r24, 0x0A	; 10
    3b60:	80 93 06 01 	sts	0x0106, r24
    3b64:	eb ce       	rjmp	.-554    	; 0x393c <main+0x2e>
				break;

			case DOOR_CLOSE :
				SERVO_voidRotateSpecificAngle_OC1A (0); // door will close (Servo motor will move to angle 0)
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <SERVO_voidRotateSpecificAngle_OC1A>
				HLCD_voidClearAll() ;
    3b6e:	0e 94 9a 19 	call	0x3334	; 0x3334 <HLCD_voidClearAll>
				HLCD_voidSendString("Door Closed") ;
    3b72:	8a ea       	ldi	r24, 0xAA	; 170
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	0e 94 45 19 	call	0x328a	; 0x328a <HLCD_voidSendString>
				MSPI_u8ReceivedData = DEFAULT_STATE ;
    3b7a:	8a e0       	ldi	r24, 0x0A	; 10
    3b7c:	80 93 06 01 	sts	0x0106, r24
    3b80:	dd ce       	rjmp	.-582    	; 0x393c <main+0x2e>
				break;
			case SYSTEM_OFF  :
				HLCD_voidSendString("System Is OFF") ;
    3b82:	86 eb       	ldi	r24, 0xB6	; 182
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	0e 94 45 19 	call	0x328a	; 0x328a <HLCD_voidSendString>
				while(MSPI_u8ReceivedData != SYSTEM_ON) ; // Polling Until System is on
    3b8a:	80 91 06 01 	lds	r24, 0x0106
    3b8e:	89 30       	cpi	r24, 0x09	; 9
    3b90:	e1 f7       	brne	.-8      	; 0x3b8a <main+0x27c>
				HLCD_voidSendString("System Is ON , Welcome") ;
    3b92:	84 ec       	ldi	r24, 0xC4	; 196
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	0e 94 45 19 	call	0x328a	; 0x328a <HLCD_voidSendString>
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	aa ef       	ldi	r26, 0xFA	; 250
    3ba0:	b4 e4       	ldi	r27, 0x44	; 68
    3ba2:	89 8f       	std	Y+25, r24	; 0x19
    3ba4:	9a 8f       	std	Y+26, r25	; 0x1a
    3ba6:	ab 8f       	std	Y+27, r26	; 0x1b
    3ba8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3baa:	69 8d       	ldd	r22, Y+25	; 0x19
    3bac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	4a ef       	ldi	r20, 0xFA	; 250
    3bb8:	54 e4       	ldi	r21, 0x44	; 68
    3bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	8d 8b       	std	Y+21, r24	; 0x15
    3bc4:	9e 8b       	std	Y+22, r25	; 0x16
    3bc6:	af 8b       	std	Y+23, r26	; 0x17
    3bc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bca:	6d 89       	ldd	r22, Y+21	; 0x15
    3bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    3bce:	8f 89       	ldd	r24, Y+23	; 0x17
    3bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	40 e8       	ldi	r20, 0x80	; 128
    3bd8:	5f e3       	ldi	r21, 0x3F	; 63
    3bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bde:	88 23       	and	r24, r24
    3be0:	2c f4       	brge	.+10     	; 0x3bec <main+0x2de>
		__ticks = 1;
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	9c 8b       	std	Y+20, r25	; 0x14
    3be8:	8b 8b       	std	Y+19, r24	; 0x13
    3bea:	3f c0       	rjmp	.+126    	; 0x3c6a <main+0x35c>
	else if (__tmp > 65535)
    3bec:	6d 89       	ldd	r22, Y+21	; 0x15
    3bee:	7e 89       	ldd	r23, Y+22	; 0x16
    3bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    3bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    3bf4:	20 e0       	ldi	r18, 0x00	; 0
    3bf6:	3f ef       	ldi	r19, 0xFF	; 255
    3bf8:	4f e7       	ldi	r20, 0x7F	; 127
    3bfa:	57 e4       	ldi	r21, 0x47	; 71
    3bfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c00:	18 16       	cp	r1, r24
    3c02:	4c f5       	brge	.+82     	; 0x3c56 <main+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c04:	69 8d       	ldd	r22, Y+25	; 0x19
    3c06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 e2       	ldi	r20, 0x20	; 32
    3c12:	51 e4       	ldi	r21, 0x41	; 65
    3c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c18:	dc 01       	movw	r26, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	bc 01       	movw	r22, r24
    3c1e:	cd 01       	movw	r24, r26
    3c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	9c 8b       	std	Y+20, r25	; 0x14
    3c2a:	8b 8b       	std	Y+19, r24	; 0x13
    3c2c:	0f c0       	rjmp	.+30     	; 0x3c4c <main+0x33e>
    3c2e:	88 ec       	ldi	r24, 0xC8	; 200
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	9a 8b       	std	Y+18, r25	; 0x12
    3c34:	89 8b       	std	Y+17, r24	; 0x11
    3c36:	89 89       	ldd	r24, Y+17	; 0x11
    3c38:	9a 89       	ldd	r25, Y+18	; 0x12
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	f1 f7       	brne	.-4      	; 0x3c3a <main+0x32c>
    3c3e:	9a 8b       	std	Y+18, r25	; 0x12
    3c40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c42:	8b 89       	ldd	r24, Y+19	; 0x13
    3c44:	9c 89       	ldd	r25, Y+20	; 0x14
    3c46:	01 97       	sbiw	r24, 0x01	; 1
    3c48:	9c 8b       	std	Y+20, r25	; 0x14
    3c4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c50:	00 97       	sbiw	r24, 0x00	; 0
    3c52:	69 f7       	brne	.-38     	; 0x3c2e <main+0x320>
    3c54:	14 c0       	rjmp	.+40     	; 0x3c7e <main+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c56:	6d 89       	ldd	r22, Y+21	; 0x15
    3c58:	7e 89       	ldd	r23, Y+22	; 0x16
    3c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	9c 8b       	std	Y+20, r25	; 0x14
    3c68:	8b 8b       	std	Y+19, r24	; 0x13
    3c6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c6e:	98 8b       	std	Y+16, r25	; 0x10
    3c70:	8f 87       	std	Y+15, r24	; 0x0f
    3c72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c74:	98 89       	ldd	r25, Y+16	; 0x10
    3c76:	01 97       	sbiw	r24, 0x01	; 1
    3c78:	f1 f7       	brne	.-4      	; 0x3c76 <main+0x368>
    3c7a:	98 8b       	std	Y+16, r25	; 0x10
    3c7c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2000) ;
				HLCD_voidClearAll() ;
    3c7e:	0e 94 9a 19 	call	0x3334	; 0x3334 <HLCD_voidClearAll>
    3c82:	5c ce       	rjmp	.-840    	; 0x393c <main+0x2e>

			case DEFAULT_STATE:
				//do nothing
				break ;
			default:
				HLCD_voidSendString("System ERROR.") ;
    3c84:	8b ed       	ldi	r24, 0xDB	; 219
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 45 19 	call	0x328a	; 0x328a <HLCD_voidSendString>
				HLCD_voidSendNumber (MSPI_u8ReceivedData) ;
    3c8c:	80 91 06 01 	lds	r24, 0x0106
    3c90:	88 2f       	mov	r24, r24
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	0e 94 ce 18 	call	0x319c	; 0x319c <HLCD_voidSendNumber>
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	aa ef       	ldi	r26, 0xFA	; 250
    3c9e:	b4 e4       	ldi	r27, 0x44	; 68
    3ca0:	8b 87       	std	Y+11, r24	; 0x0b
    3ca2:	9c 87       	std	Y+12, r25	; 0x0c
    3ca4:	ad 87       	std	Y+13, r26	; 0x0d
    3ca6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	4a ef       	ldi	r20, 0xFA	; 250
    3cb6:	54 e4       	ldi	r21, 0x44	; 68
    3cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	8f 83       	std	Y+7, r24	; 0x07
    3cc2:	98 87       	std	Y+8, r25	; 0x08
    3cc4:	a9 87       	std	Y+9, r26	; 0x09
    3cc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cca:	78 85       	ldd	r23, Y+8	; 0x08
    3ccc:	89 85       	ldd	r24, Y+9	; 0x09
    3cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 e8       	ldi	r20, 0x80	; 128
    3cd6:	5f e3       	ldi	r21, 0x3F	; 63
    3cd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cdc:	88 23       	and	r24, r24
    3cde:	2c f4       	brge	.+10     	; 0x3cea <main+0x3dc>
		__ticks = 1;
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	9e 83       	std	Y+6, r25	; 0x06
    3ce6:	8d 83       	std	Y+5, r24	; 0x05
    3ce8:	3f c0       	rjmp	.+126    	; 0x3d68 <main+0x45a>
	else if (__tmp > 65535)
    3cea:	6f 81       	ldd	r22, Y+7	; 0x07
    3cec:	78 85       	ldd	r23, Y+8	; 0x08
    3cee:	89 85       	ldd	r24, Y+9	; 0x09
    3cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	3f ef       	ldi	r19, 0xFF	; 255
    3cf6:	4f e7       	ldi	r20, 0x7F	; 127
    3cf8:	57 e4       	ldi	r21, 0x47	; 71
    3cfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cfe:	18 16       	cp	r1, r24
    3d00:	4c f5       	brge	.+82     	; 0x3d54 <main+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	40 e2       	ldi	r20, 0x20	; 32
    3d10:	51 e4       	ldi	r21, 0x41	; 65
    3d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	bc 01       	movw	r22, r24
    3d1c:	cd 01       	movw	r24, r26
    3d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d22:	dc 01       	movw	r26, r24
    3d24:	cb 01       	movw	r24, r22
    3d26:	9e 83       	std	Y+6, r25	; 0x06
    3d28:	8d 83       	std	Y+5, r24	; 0x05
    3d2a:	0f c0       	rjmp	.+30     	; 0x3d4a <main+0x43c>
    3d2c:	88 ec       	ldi	r24, 0xC8	; 200
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	9c 83       	std	Y+4, r25	; 0x04
    3d32:	8b 83       	std	Y+3, r24	; 0x03
    3d34:	8b 81       	ldd	r24, Y+3	; 0x03
    3d36:	9c 81       	ldd	r25, Y+4	; 0x04
    3d38:	01 97       	sbiw	r24, 0x01	; 1
    3d3a:	f1 f7       	brne	.-4      	; 0x3d38 <main+0x42a>
    3d3c:	9c 83       	std	Y+4, r25	; 0x04
    3d3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d40:	8d 81       	ldd	r24, Y+5	; 0x05
    3d42:	9e 81       	ldd	r25, Y+6	; 0x06
    3d44:	01 97       	sbiw	r24, 0x01	; 1
    3d46:	9e 83       	std	Y+6, r25	; 0x06
    3d48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d4e:	00 97       	sbiw	r24, 0x00	; 0
    3d50:	69 f7       	brne	.-38     	; 0x3d2c <main+0x41e>
    3d52:	14 c0       	rjmp	.+40     	; 0x3d7c <main+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d54:	6f 81       	ldd	r22, Y+7	; 0x07
    3d56:	78 85       	ldd	r23, Y+8	; 0x08
    3d58:	89 85       	ldd	r24, Y+9	; 0x09
    3d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	9e 83       	std	Y+6, r25	; 0x06
    3d66:	8d 83       	std	Y+5, r24	; 0x05
    3d68:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d6c:	9a 83       	std	Y+2, r25	; 0x02
    3d6e:	89 83       	std	Y+1, r24	; 0x01
    3d70:	89 81       	ldd	r24, Y+1	; 0x01
    3d72:	9a 81       	ldd	r25, Y+2	; 0x02
    3d74:	01 97       	sbiw	r24, 0x01	; 1
    3d76:	f1 f7       	brne	.-4      	; 0x3d74 <main+0x466>
    3d78:	9a 83       	std	Y+2, r25	; 0x02
    3d7a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2000) ;
				HLCD_voidClearAll() ;
    3d7c:	0e 94 9a 19 	call	0x3334	; 0x3334 <HLCD_voidClearAll>
    3d80:	dd cd       	rjmp	.-1094   	; 0x393c <main+0x2e>

00003d82 <Sys_Init>:
		}
	}
}

void Sys_Init()
{
    3d82:	df 93       	push	r29
    3d84:	cf 93       	push	r28
    3d86:	cd b7       	in	r28, 0x3d	; 61
    3d88:	de b7       	in	r29, 0x3e	; 62
	/* Initiate ADC For Reading LDR Value & LM35 Value */
	MADC_voidInit()					;
    3d8a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <MADC_voidInit>
	/* Initiate Timers Needed Timer 0 -> PWM   , Timer 1 -> SetBusyWait , Timer 2 -> DC Motor */
	MTIMERS_voidTimer0Init()		;
    3d8e:	0e 94 84 08 	call	0x1108	; 0x1108 <MTIMERS_voidTimer0Init>
	MTIMERS_voidTimer1Init()		;
    3d92:	0e 94 bc 08 	call	0x1178	; 0x1178 <MTIMERS_voidTimer1Init>
	MTIMERS_voidTimer2Init()		;
    3d96:	0e 94 02 09 	call	0x1204	; 0x1204 <MTIMERS_voidTimer2Init>
	/* Initiate SPI communication to communicate with the Master controller */
	MSPI_voidSlaveInit() 			;
    3d9a:	0e 94 14 0a 	call	0x1428	; 0x1428 <MSPI_voidSlaveInit>
	/* Initiate LCD Connections */
	HLCD_voidInit()      			;
    3d9e:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <HLCD_voidInit>
}
    3da2:	cf 91       	pop	r28
    3da4:	df 91       	pop	r29
    3da6:	08 95       	ret

00003da8 <Sys_PinsDirection>:

void Sys_PinsDirection()
{
    3da8:	df 93       	push	r29
    3daa:	cf 93       	push	r28
    3dac:	cd b7       	in	r28, 0x3d	; 61
    3dae:	de b7       	in	r29, 0x3e	; 62
	//PORTA
	MDIO_voidSetPinDirection(PORTA,PIN0,INPUT)  ; // For ADC channel 0 (LDR   Reading)
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	40 e0       	ldi	r20, 0x00	; 0
    3db6:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN1,INPUT)  ; // For ADC channel 1 (LM-35 Reading)
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	61 e0       	ldi	r22, 0x01	; 1
    3dbe:	40 e0       	ldi	r20, 0x00	; 0
    3dc0:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN2,INPUT)  ; // For PIR Signal
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	62 e0       	ldi	r22, 0x02	; 2
    3dc8:	40 e0       	ldi	r20, 0x00	; 0
    3dca:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN3,OUTPUT) ; // For Reception LED
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	63 e0       	ldi	r22, 0x03	; 3
    3dd2:	41 e0       	ldi	r20, 0x01	; 1
    3dd4:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>

	//PORTB (Pin 0,1,2 For LCD )  (Pin 4,5,6,7 For SPI)
	MDIO_voidSetPinDirection(PORTB,PIN3,OUTPUT) ; // For Timer 0 ( Room LED )
    3dd8:	81 e0       	ldi	r24, 0x01	; 1
    3dda:	63 e0       	ldi	r22, 0x03	; 3
    3ddc:	41 e0       	ldi	r20, 0x01	; 1
    3dde:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTB,PIN4,INPUT)  ;
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	64 e0       	ldi	r22, 0x04	; 4
    3de6:	40 e0       	ldi	r20, 0x00	; 0
    3de8:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTB,PIN5,OUTPUT) ;
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	65 e0       	ldi	r22, 0x05	; 5
    3df0:	41 e0       	ldi	r20, 0x01	; 1
    3df2:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTB,PIN6,INPUT)  ;
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	66 e0       	ldi	r22, 0x06	; 6
    3dfa:	40 e0       	ldi	r20, 0x00	; 0
    3dfc:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTB,PIN7,INPUT)  ;
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	67 e0       	ldi	r22, 0x07	; 7
    3e04:	40 e0       	ldi	r20, 0x00	; 0
    3e06:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>

	//PORTC (All For LCD Data)

	//PORTD (Pins 1,2,3,4 For Stepper)
	MDIO_voidSetPinDirection(PORTD,PIN7,OUTPUT) ; // For Timer 2 (DC Motor Fan )
    3e0a:	83 e0       	ldi	r24, 0x03	; 3
    3e0c:	67 e0       	ldi	r22, 0x07	; 7
    3e0e:	41 e0       	ldi	r20, 0x01	; 1
    3e10:	0e 94 ef 0b 	call	0x17de	; 0x17de <MDIO_voidSetPinDirection>
}
    3e14:	cf 91       	pop	r28
    3e16:	df 91       	pop	r29
    3e18:	08 95       	ret

00003e1a <__mulsi3>:
    3e1a:	62 9f       	mul	r22, r18
    3e1c:	d0 01       	movw	r26, r0
    3e1e:	73 9f       	mul	r23, r19
    3e20:	f0 01       	movw	r30, r0
    3e22:	82 9f       	mul	r24, r18
    3e24:	e0 0d       	add	r30, r0
    3e26:	f1 1d       	adc	r31, r1
    3e28:	64 9f       	mul	r22, r20
    3e2a:	e0 0d       	add	r30, r0
    3e2c:	f1 1d       	adc	r31, r1
    3e2e:	92 9f       	mul	r25, r18
    3e30:	f0 0d       	add	r31, r0
    3e32:	83 9f       	mul	r24, r19
    3e34:	f0 0d       	add	r31, r0
    3e36:	74 9f       	mul	r23, r20
    3e38:	f0 0d       	add	r31, r0
    3e3a:	65 9f       	mul	r22, r21
    3e3c:	f0 0d       	add	r31, r0
    3e3e:	99 27       	eor	r25, r25
    3e40:	72 9f       	mul	r23, r18
    3e42:	b0 0d       	add	r27, r0
    3e44:	e1 1d       	adc	r30, r1
    3e46:	f9 1f       	adc	r31, r25
    3e48:	63 9f       	mul	r22, r19
    3e4a:	b0 0d       	add	r27, r0
    3e4c:	e1 1d       	adc	r30, r1
    3e4e:	f9 1f       	adc	r31, r25
    3e50:	bd 01       	movw	r22, r26
    3e52:	cf 01       	movw	r24, r30
    3e54:	11 24       	eor	r1, r1
    3e56:	08 95       	ret

00003e58 <__udivmodhi4>:
    3e58:	aa 1b       	sub	r26, r26
    3e5a:	bb 1b       	sub	r27, r27
    3e5c:	51 e1       	ldi	r21, 0x11	; 17
    3e5e:	07 c0       	rjmp	.+14     	; 0x3e6e <__udivmodhi4_ep>

00003e60 <__udivmodhi4_loop>:
    3e60:	aa 1f       	adc	r26, r26
    3e62:	bb 1f       	adc	r27, r27
    3e64:	a6 17       	cp	r26, r22
    3e66:	b7 07       	cpc	r27, r23
    3e68:	10 f0       	brcs	.+4      	; 0x3e6e <__udivmodhi4_ep>
    3e6a:	a6 1b       	sub	r26, r22
    3e6c:	b7 0b       	sbc	r27, r23

00003e6e <__udivmodhi4_ep>:
    3e6e:	88 1f       	adc	r24, r24
    3e70:	99 1f       	adc	r25, r25
    3e72:	5a 95       	dec	r21
    3e74:	a9 f7       	brne	.-22     	; 0x3e60 <__udivmodhi4_loop>
    3e76:	80 95       	com	r24
    3e78:	90 95       	com	r25
    3e7a:	bc 01       	movw	r22, r24
    3e7c:	cd 01       	movw	r24, r26
    3e7e:	08 95       	ret

00003e80 <__divmodhi4>:
    3e80:	97 fb       	bst	r25, 7
    3e82:	09 2e       	mov	r0, r25
    3e84:	07 26       	eor	r0, r23
    3e86:	0a d0       	rcall	.+20     	; 0x3e9c <__divmodhi4_neg1>
    3e88:	77 fd       	sbrc	r23, 7
    3e8a:	04 d0       	rcall	.+8      	; 0x3e94 <__divmodhi4_neg2>
    3e8c:	e5 df       	rcall	.-54     	; 0x3e58 <__udivmodhi4>
    3e8e:	06 d0       	rcall	.+12     	; 0x3e9c <__divmodhi4_neg1>
    3e90:	00 20       	and	r0, r0
    3e92:	1a f4       	brpl	.+6      	; 0x3e9a <__divmodhi4_exit>

00003e94 <__divmodhi4_neg2>:
    3e94:	70 95       	com	r23
    3e96:	61 95       	neg	r22
    3e98:	7f 4f       	sbci	r23, 0xFF	; 255

00003e9a <__divmodhi4_exit>:
    3e9a:	08 95       	ret

00003e9c <__divmodhi4_neg1>:
    3e9c:	f6 f7       	brtc	.-4      	; 0x3e9a <__divmodhi4_exit>
    3e9e:	90 95       	com	r25
    3ea0:	81 95       	neg	r24
    3ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea4:	08 95       	ret

00003ea6 <__udivmodsi4>:
    3ea6:	a1 e2       	ldi	r26, 0x21	; 33
    3ea8:	1a 2e       	mov	r1, r26
    3eaa:	aa 1b       	sub	r26, r26
    3eac:	bb 1b       	sub	r27, r27
    3eae:	fd 01       	movw	r30, r26
    3eb0:	0d c0       	rjmp	.+26     	; 0x3ecc <__udivmodsi4_ep>

00003eb2 <__udivmodsi4_loop>:
    3eb2:	aa 1f       	adc	r26, r26
    3eb4:	bb 1f       	adc	r27, r27
    3eb6:	ee 1f       	adc	r30, r30
    3eb8:	ff 1f       	adc	r31, r31
    3eba:	a2 17       	cp	r26, r18
    3ebc:	b3 07       	cpc	r27, r19
    3ebe:	e4 07       	cpc	r30, r20
    3ec0:	f5 07       	cpc	r31, r21
    3ec2:	20 f0       	brcs	.+8      	; 0x3ecc <__udivmodsi4_ep>
    3ec4:	a2 1b       	sub	r26, r18
    3ec6:	b3 0b       	sbc	r27, r19
    3ec8:	e4 0b       	sbc	r30, r20
    3eca:	f5 0b       	sbc	r31, r21

00003ecc <__udivmodsi4_ep>:
    3ecc:	66 1f       	adc	r22, r22
    3ece:	77 1f       	adc	r23, r23
    3ed0:	88 1f       	adc	r24, r24
    3ed2:	99 1f       	adc	r25, r25
    3ed4:	1a 94       	dec	r1
    3ed6:	69 f7       	brne	.-38     	; 0x3eb2 <__udivmodsi4_loop>
    3ed8:	60 95       	com	r22
    3eda:	70 95       	com	r23
    3edc:	80 95       	com	r24
    3ede:	90 95       	com	r25
    3ee0:	9b 01       	movw	r18, r22
    3ee2:	ac 01       	movw	r20, r24
    3ee4:	bd 01       	movw	r22, r26
    3ee6:	cf 01       	movw	r24, r30
    3ee8:	08 95       	ret

00003eea <__prologue_saves__>:
    3eea:	2f 92       	push	r2
    3eec:	3f 92       	push	r3
    3eee:	4f 92       	push	r4
    3ef0:	5f 92       	push	r5
    3ef2:	6f 92       	push	r6
    3ef4:	7f 92       	push	r7
    3ef6:	8f 92       	push	r8
    3ef8:	9f 92       	push	r9
    3efa:	af 92       	push	r10
    3efc:	bf 92       	push	r11
    3efe:	cf 92       	push	r12
    3f00:	df 92       	push	r13
    3f02:	ef 92       	push	r14
    3f04:	ff 92       	push	r15
    3f06:	0f 93       	push	r16
    3f08:	1f 93       	push	r17
    3f0a:	cf 93       	push	r28
    3f0c:	df 93       	push	r29
    3f0e:	cd b7       	in	r28, 0x3d	; 61
    3f10:	de b7       	in	r29, 0x3e	; 62
    3f12:	ca 1b       	sub	r28, r26
    3f14:	db 0b       	sbc	r29, r27
    3f16:	0f b6       	in	r0, 0x3f	; 63
    3f18:	f8 94       	cli
    3f1a:	de bf       	out	0x3e, r29	; 62
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	cd bf       	out	0x3d, r28	; 61
    3f20:	09 94       	ijmp

00003f22 <__epilogue_restores__>:
    3f22:	2a 88       	ldd	r2, Y+18	; 0x12
    3f24:	39 88       	ldd	r3, Y+17	; 0x11
    3f26:	48 88       	ldd	r4, Y+16	; 0x10
    3f28:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f30:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f32:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f34:	b9 84       	ldd	r11, Y+9	; 0x09
    3f36:	c8 84       	ldd	r12, Y+8	; 0x08
    3f38:	df 80       	ldd	r13, Y+7	; 0x07
    3f3a:	ee 80       	ldd	r14, Y+6	; 0x06
    3f3c:	fd 80       	ldd	r15, Y+5	; 0x05
    3f3e:	0c 81       	ldd	r16, Y+4	; 0x04
    3f40:	1b 81       	ldd	r17, Y+3	; 0x03
    3f42:	aa 81       	ldd	r26, Y+2	; 0x02
    3f44:	b9 81       	ldd	r27, Y+1	; 0x01
    3f46:	ce 0f       	add	r28, r30
    3f48:	d1 1d       	adc	r29, r1
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	de bf       	out	0x3e, r29	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	cd bf       	out	0x3d, r28	; 61
    3f54:	ed 01       	movw	r28, r26
    3f56:	08 95       	ret

00003f58 <_exit>:
    3f58:	f8 94       	cli

00003f5a <__stop_program>:
    3f5a:	ff cf       	rjmp	.-2      	; 0x3f5a <__stop_program>
