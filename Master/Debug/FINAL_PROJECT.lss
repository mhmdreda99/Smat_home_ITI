
FINAL_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001fe  00800060  000065d4  00006668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  0080025e  0080025e  00006866  2**0
                  ALLOC
  3 .stab         000070e0  00000000  00000000  00006868  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c30  00000000  00000000  0000d948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00010578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00010738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0001094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00012f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0001442c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00015738  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00015918  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00015c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016639  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__vector_1>
       8:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__vector_2>
       c:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__vector_12>
      34:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_13>
      38:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__vector_14>
      3c:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 35       	cpi	r26, 0x5E	; 94
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e5       	ldi	r26, 0x5E	; 94
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 28 	call	0x5028	; 0x5028 <main>
      8a:	0c 94 e8 32 	jmp	0x65d0	; 0x65d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 09 30 	jmp	0x6012	; 0x6012 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e3       	ldi	r26, 0x3D	; 61
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 25 30 	jmp	0x604a	; 0x604a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 15 30 	jmp	0x602a	; 0x602a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 31 30 	jmp	0x6062	; 0x6062 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 15 30 	jmp	0x602a	; 0x602a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 31 30 	jmp	0x6062	; 0x6062 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 09 30 	jmp	0x6012	; 0x6012 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e3       	ldi	r24, 0x3D	; 61
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 25 30 	jmp	0x604a	; 0x604a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 11 30 	jmp	0x6022	; 0x6022 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e3       	ldi	r22, 0x3D	; 61
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2d 30 	jmp	0x605a	; 0x605a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 15 30 	jmp	0x602a	; 0x602a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 31 30 	jmp	0x6062	; 0x6062 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 15 30 	jmp	0x602a	; 0x602a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 31 30 	jmp	0x6062	; 0x6062 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 15 30 	jmp	0x602a	; 0x602a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 31 30 	jmp	0x6062	; 0x6062 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 12 30 	jmp	0x6024	; 0x6024 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 2e 30 	jmp	0x605c	; 0x605c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 19 30 	jmp	0x6032	; 0x6032 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 35 30 	jmp	0x606a	; 0x606a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 11 30 	jmp	0x6022	; 0x6022 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 2d 30 	jmp	0x605a	; 0x605a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	eb 5b       	subi	r30, 0xBB	; 187
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Create_Task>:
 * @param periodicity periodicity time of the task
 * @param PTR call back function
 * @return Std_ReturnType function executed correctly or not
 */
Std_ReturnType Create_Task(u8 Priority, u16 periodicity,u8 First_delay ,void(*ptr)(void))
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	27 97       	sbiw	r28, 0x07	; 7
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	8a 83       	std	Y+2, r24	; 0x02
     f00:	7c 83       	std	Y+4, r23	; 0x04
     f02:	6b 83       	std	Y+3, r22	; 0x03
     f04:	4d 83       	std	Y+5, r20	; 0x05
     f06:	3f 83       	std	Y+7, r19	; 0x07
     f08:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType Status=E_NOT_OK;
     f0a:	19 82       	std	Y+1, r1	; 0x01
	if(Tasks[Priority].pf!=NULL)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	c9 01       	movw	r24, r18
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	82 1b       	sub	r24, r18
     f22:	93 0b       	sbc	r25, r19
     f24:	fc 01       	movw	r30, r24
     f26:	e2 5a       	subi	r30, 0xA2	; 162
     f28:	fd 4f       	sbci	r31, 0xFD	; 253
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	19 f0       	breq	.+6      	; 0xf38 <Create_Task+0x4e>
	{
		Status=E_RESERVED;
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	5a c0       	rjmp	.+180    	; 0xfec <Create_Task+0x102>
	}
	else
	{
		Tasks[Priority].periodicity= periodicity;
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	c9 01       	movw	r24, r18
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	82 1b       	sub	r24, r18
     f4e:	93 0b       	sbc	r25, r19
     f50:	fc 01       	movw	r30, r24
     f52:	ef 59       	subi	r30, 0x9F	; 159
     f54:	fd 4f       	sbci	r31, 0xFD	; 253
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	80 83       	st	Z, r24
		Tasks[Priority].pf=ptr;
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	c9 01       	movw	r24, r18
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	82 1b       	sub	r24, r18
     f74:	93 0b       	sbc	r25, r19
     f76:	fc 01       	movw	r30, r24
     f78:	e2 5a       	subi	r30, 0xA2	; 162
     f7a:	fd 4f       	sbci	r31, 0xFD	; 253
     f7c:	8e 81       	ldd	r24, Y+6	; 0x06
     f7e:	9f 81       	ldd	r25, Y+7	; 0x07
     f80:	91 83       	std	Z+1, r25	; 0x01
     f82:	80 83       	st	Z, r24
		Tasks[Priority].priority=Priority;
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	c9 01       	movw	r24, r18
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	82 1b       	sub	r24, r18
     f9a:	93 0b       	sbc	r25, r19
     f9c:	fc 01       	movw	r30, r24
     f9e:	e0 5a       	subi	r30, 0xA0	; 160
     fa0:	fd 4f       	sbci	r31, 0xFD	; 253
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	80 83       	st	Z, r24
		Tasks[Priority].F_Delay=First_delay;
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	c9 01       	movw	r24, r18
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	82 1b       	sub	r24, r18
     fbc:	93 0b       	sbc	r25, r19
     fbe:	fc 01       	movw	r30, r24
     fc0:	ec 59       	subi	r30, 0x9C	; 156
     fc2:	fd 4f       	sbci	r31, 0xFD	; 253
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	80 83       	st	Z, r24
		Tasks[Priority].state=TASK_IDLE;
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	c9 01       	movw	r24, r18
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	82 1b       	sub	r24, r18
     fde:	93 0b       	sbc	r25, r19
     fe0:	fc 01       	movw	r30, r24
     fe2:	ed 59       	subi	r30, 0x9D	; 157
     fe4:	fd 4f       	sbci	r31, 0xFD	; 253
     fe6:	10 82       	st	Z, r1
		Status=E_OK;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	89 83       	std	Y+1, r24	; 0x01
	}
	return Status;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
}
     fee:	27 96       	adiw	r28, 0x07	; 7
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <RTOS_START>:

void RTOS_START(void)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	TIMER0_SETCALLBACK(&Schedular);
    1008:	84 e6       	ldi	r24, 0x64	; 100
    100a:	98 e0       	ldi	r25, 0x08	; 8
    100c:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <TIMER0_SETCALLBACK>
	Enable_Global_Interrupt();
    1010:	af e5       	ldi	r26, 0x5F	; 95
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	ef e5       	ldi	r30, 0x5F	; 95
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	80 68       	ori	r24, 0x80	; 128
    101c:	8c 93       	st	X, r24
	MTIMER0_VoidInit();
    101e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <MTIMER0_VoidInit>
}
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <Task_Suspend>:
/***************************************/
void Task_Suspend(u8 Priority)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	0f 92       	push	r0
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	89 83       	std	Y+1, r24	; 0x01
	Tasks[Priority].state=TASK_SUSPENDED;
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	c9 01       	movw	r24, r18
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	82 1b       	sub	r24, r18
    104a:	93 0b       	sbc	r25, r19
    104c:	fc 01       	movw	r30, r24
    104e:	ed 59       	subi	r30, 0x9D	; 157
    1050:	fd 4f       	sbci	r31, 0xFD	; 253
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 83       	st	Z, r24
}
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <Task_Resume>:
/***************************************/
void Task_Resume(u8 Priority)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	89 83       	std	Y+1, r24	; 0x01
	Tasks[Priority].state=TASK_IDLE;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	c9 01       	movw	r24, r18
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	82 1b       	sub	r24, r18
    1080:	93 0b       	sbc	r25, r19
    1082:	fc 01       	movw	r30, r24
    1084:	ed 59       	subi	r30, 0x9D	; 157
    1086:	fd 4f       	sbci	r31, 0xFD	; 253
    1088:	10 82       	st	Z, r1
}
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <Task_Delete>:
/***************************************/
void Task_Delete(u8 Priority)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	89 83       	std	Y+1, r24	; 0x01
	Tasks[Priority].pf=NULL;
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	c9 01       	movw	r24, r18
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	82 1b       	sub	r24, r18
    10b4:	93 0b       	sbc	r25, r19
    10b6:	fc 01       	movw	r30, r24
    10b8:	e2 5a       	subi	r30, 0xA2	; 162
    10ba:	fd 4f       	sbci	r31, 0xFD	; 253
    10bc:	11 82       	std	Z+1, r1	; 0x01
    10be:	10 82       	st	Z, r1
}
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <Schedular>:
/***************************************/

void Schedular(void)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
 	u8 Task_Counter=0;
    10d2:	19 82       	std	Y+1, r1	; 0x01

	for(Task_Counter=0;Task_Counter<TASK_MAX_NUMBER;Task_Counter++)
    10d4:	19 82       	std	Y+1, r1	; 0x01
    10d6:	91 c0       	rjmp	.+290    	; 0x11fa <Schedular+0x132>
	{
		if(Tasks[Task_Counter].state==TASK_IDLE)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	c9 01       	movw	r24, r18
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	82 1b       	sub	r24, r18
    10ee:	93 0b       	sbc	r25, r19
    10f0:	fc 01       	movw	r30, r24
    10f2:	ed 59       	subi	r30, 0x9D	; 157
    10f4:	fd 4f       	sbci	r31, 0xFD	; 253
    10f6:	80 81       	ld	r24, Z
    10f8:	88 23       	and	r24, r24
    10fa:	09 f0       	breq	.+2      	; 0x10fe <Schedular+0x36>
    10fc:	7b c0       	rjmp	.+246    	; 0x11f4 <Schedular+0x12c>
		{
			if(NULL!=Tasks[Task_Counter].pf)
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	c9 01       	movw	r24, r18
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	82 1b       	sub	r24, r18
    1114:	93 0b       	sbc	r25, r19
    1116:	fc 01       	movw	r30, r24
    1118:	e2 5a       	subi	r30, 0xA2	; 162
    111a:	fd 4f       	sbci	r31, 0xFD	; 253
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	09 f4       	brne	.+2      	; 0x1126 <Schedular+0x5e>
    1124:	67 c0       	rjmp	.+206    	; 0x11f4 <Schedular+0x12c>
			{
				// if(counter_ticks%Tasks[Task_Counter].periodicity==0)
				if(Tasks[Task_Counter].F_Delay==0)
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	c9 01       	movw	r24, r18
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	82 1b       	sub	r24, r18
    113c:	93 0b       	sbc	r25, r19
    113e:	fc 01       	movw	r30, r24
    1140:	ec 59       	subi	r30, 0x9C	; 156
    1142:	fd 4f       	sbci	r31, 0xFD	; 253
    1144:	80 81       	ld	r24, Z
    1146:	88 23       	and	r24, r24
    1148:	b1 f5       	brne	.+108    	; 0x11b6 <Schedular+0xee>
				{
					Tasks[Task_Counter].pf();
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	c9 01       	movw	r24, r18
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	82 1b       	sub	r24, r18
    1160:	93 0b       	sbc	r25, r19
    1162:	fc 01       	movw	r30, r24
    1164:	e2 5a       	subi	r30, 0xA2	; 162
    1166:	fd 4f       	sbci	r31, 0xFD	; 253
    1168:	01 90       	ld	r0, Z+
    116a:	f0 81       	ld	r31, Z
    116c:	e0 2d       	mov	r30, r0
    116e:	09 95       	icall
					Tasks[Task_Counter].F_Delay=Tasks[Task_Counter].periodicity;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	48 2f       	mov	r20, r24
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	c9 01       	movw	r24, r18
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	82 1b       	sub	r24, r18
    118c:	93 0b       	sbc	r25, r19
    118e:	fc 01       	movw	r30, r24
    1190:	ef 59       	subi	r30, 0x9F	; 159
    1192:	fd 4f       	sbci	r31, 0xFD	; 253
    1194:	80 81       	ld	r24, Z
    1196:	91 81       	ldd	r25, Z+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	ca 01       	movw	r24, r20
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	84 1b       	sub	r24, r20
    11aa:	95 0b       	sbc	r25, r21
    11ac:	fc 01       	movw	r30, r24
    11ae:	ec 59       	subi	r30, 0x9C	; 156
    11b0:	fd 4f       	sbci	r31, 0xFD	; 253
    11b2:	20 83       	st	Z, r18
    11b4:	1f c0       	rjmp	.+62     	; 0x11f4 <Schedular+0x12c>
				}
				else
				{
					Tasks[Task_Counter].F_Delay--;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	c9 01       	movw	r24, r18
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	82 1b       	sub	r24, r18
    11cc:	93 0b       	sbc	r25, r19
    11ce:	fc 01       	movw	r30, r24
    11d0:	ec 59       	subi	r30, 0x9C	; 156
    11d2:	fd 4f       	sbci	r31, 0xFD	; 253
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	41 50       	subi	r20, 0x01	; 1
    11da:	c9 01       	movw	r24, r18
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	82 1b       	sub	r24, r18
    11ea:	93 0b       	sbc	r25, r19
    11ec:	fc 01       	movw	r30, r24
    11ee:	ec 59       	subi	r30, 0x9C	; 156
    11f0:	fd 4f       	sbci	r31, 0xFD	; 253
    11f2:	40 83       	st	Z, r20

void Schedular(void)
{
 	u8 Task_Counter=0;

	for(Task_Counter=0;Task_Counter<TASK_MAX_NUMBER;Task_Counter++)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	85 30       	cpi	r24, 0x05	; 5
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <Schedular+0x13a>
    1200:	6b cf       	rjmp	.-298    	; 0x10d8 <Schedular+0x10>
			/*DO NOTHING*/
		}


	}
}
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <MUART_INIT>:
 * @param TX_Callback  The call back function send by the user fired when transmitting is done
 * @param RX_Callback  The call back function send by the user fired when Receiving is done
 * @param EDR_Callback  The call back function send by the user fired when the data register is empty
 */
void MUART_INIT(void(*TX_Callback)(void),void(*RX_Callback)(void),void(*EDR_Callback)(void))
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	29 97       	sbiw	r28, 0x09	; 9
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	9d 83       	std	Y+5, r25	; 0x05
    1220:	8c 83       	std	Y+4, r24	; 0x04
    1222:	7f 83       	std	Y+7, r23	; 0x07
    1224:	6e 83       	std	Y+6, r22	; 0x06
    1226:	59 87       	std	Y+9, r21	; 0x09
    1228:	48 87       	std	Y+8, r20	; 0x08
	u16 L_UBBR =0;
    122a:	1b 82       	std	Y+3, r1	; 0x03
    122c:	1a 82       	std	Y+2, r1	; 0x02
	u8 L_SETTINGS=0;
    122e:	19 82       	std	Y+1, r1	; 0x01

	/**********************BAUD RATE CONFIGURATIONS**********************/
#if UART_BAUD_RATE_CNFG==UART_BAUDRATE_USE_ASYNCH_NORMAL_SPEED
	L_UBBR=(u16)((u32)F_CPU/((u32)16*UART_BAUDRATE_VALUE))-1;
    1230:	83 e3       	ldi	r24, 0x33	; 51
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9b 83       	std	Y+3, r25	; 0x03
    1236:	8a 83       	std	Y+2, r24	; 0x02
	Set_BRG_VAL(L_UBBR);
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	9b 81       	ldd	r25, Y+3	; 0x03
    123c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <Set_BRG_VAL>

	/************check transmitting mode**********/
#if UART_TX_MODE==UART_TX_MODE_ENABLED
	UART_TRANSMITTER_ENABLE();
#elif UART_TX_MODE==UART_TX_MODE_DISABLED
	UART_TRANSMITTER_DISABLE();
    1240:	aa e2       	ldi	r26, 0x2A	; 42
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	ea e2       	ldi	r30, 0x2A	; 42
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	87 7f       	andi	r24, 0xF7	; 247
    124c:	8c 93       	st	X, r24
#else
#error "Wrong UART TRANSMITTER MODE CHECK UART CONFIG"
#endif
	/************check receiving mode**********/
#if UART_RX_MODE==UART_RX_MODE_ENABLED
	UART_RECEIVER_ENABLE();
    124e:	aa e2       	ldi	r26, 0x2A	; 42
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ea e2       	ldi	r30, 0x2A	; 42
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 61       	ori	r24, 0x10	; 16
    125a:	8c 93       	st	X, r24
#elif UART_RX_MODE==UART_RX_MODE_DISABLED
	UART_RECEIVER_DISABLE();
#else
#error "Wrong UART TRANSMITTER MODE CHECK UART CONFIG"
#endif
	UART_ENABLE_WRITE_UCSRC(L_SETTINGS);
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	80 68       	ori	r24, 0x80	; 128
    1260:	89 83       	std	Y+1, r24	; 0x01
	/***************select UART mode***********/
#if UART_MODE==UART_ENABLE_SYNCHRONOUS_MODE
	UART_ENABLE_SYNCH_MODE(L_SETTINGS);
#elif UART_MODE==UART_ENABLE_ASYNCHRONOUS_MODE
	UART_ENABLE_ASYNCH_MODE(L_SETTINGS);
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	8f 7b       	andi	r24, 0xBF	; 191
    1266:	89 83       	std	Y+1, r24	; 0x01
	/****************setting frame format**************/
	/****************stop bits format**************/
#if UART_STOP_BITS_NUMBER == UART_2STOP_BITS
	UART_SET_2b_STOP(L_SETTINGS);
#elif UART_STOP_BITS_NUMBER == UART_1STOP_BIT
	UART_SET_1b_STOP(L_SETTINGS);
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	87 7f       	andi	r24, 0xF7	; 247
    126c:	89 83       	std	Y+1, r24	; 0x01
#else
#error "WRONG STOP BITS CONFIGURATION FOR UART"
#endif
	/**********************setting parity bits mode***************/
#if UART_SELECT_PARITY_MODE == UART_PARAITY_DISABLED
	UART_DISABLE_PARITYMOOD(L_SETTINGS);
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	8f 7e       	andi	r24, 0xEF	; 239
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	8f 7d       	andi	r24, 0xDF	; 223
    1278:	89 83       	std	Y+1, r24	; 0x01
#elif UART_FRAME_FORMAT_SIZE==UART_6BIT_FRAME_FORMAT
	UART_ENABLE_6bit_DATAMODE(L_SETTINGS);
#elif UART_FRAME_FORMAT_SIZE==UART_7BIT_FRAME_FORMAT
	UART_ENABLE_7bit_DATAMODE(L_SETTINGS);
#elif UART_FRAME_FORMAT_SIZE==UART_8BIT_FRAME_FORMAT
	UART_ENABLE_8bit_DATAMODE(L_SETTINGS);
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	82 60       	ori	r24, 0x02	; 2
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	84 60       	ori	r24, 0x04	; 4
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	aa e2       	ldi	r26, 0x2A	; 42
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	ea e2       	ldi	r30, 0x2A	; 42
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8b 7f       	andi	r24, 0xFB	; 251
    1292:	8c 93       	st	X, r24
#elif UART_FRAME_FORMAT_SIZE==UART_9BIT_FRAME_FORMAT
	UART_ENABLE_9bit_DATAMODE(L_SETTINGS);
#else
#error "Wrong Frame Size Selection Check UART CONFIGURATIONS"
#endif
	UCSRC=L_SETTINGS;
    1294:	e0 e4       	ldi	r30, 0x40	; 64
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	80 83       	st	Z, r24
	/************************interrupt configurations**************/

	//disable the global interrupt during initializing
	Disable_Global_Interrupt();
    129c:	af e5       	ldi	r26, 0x5F	; 95
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ef e5       	ldi	r30, 0x5F	; 95
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 77       	andi	r24, 0x7F	; 127
    12a8:	8c 93       	st	X, r24
	Enable_Global_Interrupt();

#elif UART_TX_INTTERUPT==UART_TX_INT_DISABLED

	//clear TX flag
	UART_TX_CLEAR_FLAG();
    12aa:	ab e2       	ldi	r26, 0x2B	; 43
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	eb e2       	ldi	r30, 0x2B	; 43
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 64       	ori	r24, 0x40	; 64
    12b6:	8c 93       	st	X, r24
	//disable RX interrupt
	UART_DISABLE_TX_INTERRUPT();
    12b8:	aa e2       	ldi	r26, 0x2A	; 42
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ea e2       	ldi	r30, 0x2A	; 42
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8f 7b       	andi	r24, 0xBF	; 191
    12c4:	8c 93       	st	X, r24
	UART_RX_CLEAR_FLAG();
	Enable_Global_Interrupt();

#elif UART_RX_INTTERUPT==UART_RX_INT_DISABLED
	//clear RX flag
	UART_RX_CLEAR_FLAG();
    12c6:	ab e2       	ldi	r26, 0x2B	; 43
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	eb e2       	ldi	r30, 0x2B	; 43
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 64       	ori	r24, 0x40	; 64
    12d2:	8c 93       	st	X, r24
	//disable RX interrupt
	UART_DISABLE_RX_INTERRUPT();
    12d4:	aa e2       	ldi	r26, 0x2A	; 42
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ea e2       	ldi	r30, 0x2A	; 42
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8f 77       	andi	r24, 0x7F	; 127
    12e0:	8c 93       	st	X, r24
	UART_SET_DATA_REG_EMPTYFLAG();
	Enable_Global_Interrupt();

#elif UART_DRE_INTERRUPT==UART_DRE_INT_DISABLED
	//clear DRE flag
	UART_SET_DATA_REG_EMPTYFLAG();
    12e2:	ab e2       	ldi	r26, 0x2B	; 43
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	eb e2       	ldi	r30, 0x2B	; 43
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 62       	ori	r24, 0x20	; 32
    12ee:	8c 93       	st	X, r24
	//disable RX interrupt
	UART_DISABLE_DRE_INTERRUPT();
    12f0:	aa e2       	ldi	r26, 0x2A	; 42
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ea e2       	ldi	r30, 0x2A	; 42
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 7d       	andi	r24, 0xDF	; 223
    12fc:	8c 93       	st	X, r24
#else
#error "WRONG CONFIGURATION OF UART RX INTERRUPT"
#endif
}
    12fe:	29 96       	adiw	r28, 0x09	; 9
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <UART_SEND_CHAR_BLOCKING>:
/***
 * @desc-> this function is used to send data with out interrupt
 * @param data
 */
void UART_SEND_CHAR_BLOCKING(u8 data)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	0f 92       	push	r0
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	89 83       	std	Y+1, r24	; 0x01
	while(!(UART_DATA_REG_EMPTYFLAG_READ()));
    131c:	eb e2       	ldi	r30, 0x2B	; 43
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	82 95       	swap	r24
    1324:	86 95       	lsr	r24
    1326:	87 70       	andi	r24, 0x07	; 7
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	81 70       	andi	r24, 0x01	; 1
    132e:	90 70       	andi	r25, 0x00	; 0
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	a1 f3       	breq	.-24     	; 0x131c <UART_SEND_CHAR_BLOCKING+0xc>
	UDR=data;
    1334:	ec e2       	ldi	r30, 0x2C	; 44
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	80 83       	st	Z, r24
}
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <UART_SEND_STRING_BLOCKING>:
/***
 * @brief this function is used to send string with out interrupt
 * @param str
 */
void UART_SEND_STRING_BLOCKING(u8 *str)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <UART_SEND_STRING_BLOCKING+0x6>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	0b c0       	rjmp	.+22     	; 0x136a <UART_SEND_STRING_BLOCKING+0x26>
	while(*str)
	{
		UART_SEND_CHAR_BLOCKING(*str++);
    1354:	e9 81       	ldd	r30, Y+1	; 0x01
    1356:	fa 81       	ldd	r31, Y+2	; 0x02
    1358:	20 81       	ld	r18, Z
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	82 2f       	mov	r24, r18
    1366:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SEND_CHAR_BLOCKING>
 * @brief this function is used to send string with out interrupt
 * @param str
 */
void UART_SEND_STRING_BLOCKING(u8 *str)
{
	while(*str)
    136a:	e9 81       	ldd	r30, Y+1	; 0x01
    136c:	fa 81       	ldd	r31, Y+2	; 0x02
    136e:	80 81       	ld	r24, Z
    1370:	88 23       	and	r24, r24
    1372:	81 f7       	brne	.-32     	; 0x1354 <UART_SEND_STRING_BLOCKING+0x10>
	{
		UART_SEND_CHAR_BLOCKING(*str++);
	}
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <UART_RECEIVE_CHAR_BLOCKING>:
/***
 * @this function is used to receive data with out interrupt
 * @return
 */
u8 UART_RECEIVE_CHAR_BLOCKING(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	while(!(UART_RX_FLAG_READ()));
    1386:	eb e2       	ldi	r30, 0x2B	; 43
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	88 23       	and	r24, r24
    138e:	dc f7       	brge	.-10     	; 0x1386 <UART_RECEIVE_CHAR_BLOCKING+0x8>
	return UDR;
    1390:	ec e2       	ldi	r30, 0x2C	; 44
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <UART_RECEIVE_CHAR_POOLING>:
/**************************************/
u8 UART_RECEIVE_CHAR_POOLING(void)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	0f 92       	push	r0
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	if(1==UART_RX_FLAG_READ())
    13a6:	eb e2       	ldi	r30, 0x2B	; 43
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	88 1f       	adc	r24, r24
    13ae:	88 27       	eor	r24, r24
    13b0:	88 1f       	adc	r24, r24
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	31 f4       	brne	.+12     	; 0x13c2 <UART_RECEIVE_CHAR_POOLING+0x26>
	{
		return UDR;
    13b6:	ec e2       	ldi	r30, 0x2C	; 44
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

}
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	00 c0       	rjmp	.+0      	; 0x13c2 <UART_RECEIVE_CHAR_POOLING+0x26>
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <Set_BRG_VAL>:
/************helper functions***************/
/**********this function is called by init function used to set the BAUDRATE*********/
static inline void Set_BRG_VAL(const u16 val)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <Set_BRG_VAL+0x6>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	89 83       	std	Y+1, r24	; 0x01
	UBRRH=(u8)(val>>8);
    13d8:	e0 e4       	ldi	r30, 0x40	; 64
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	89 2f       	mov	r24, r25
    13e2:	99 27       	eor	r25, r25
    13e4:	80 83       	st	Z, r24
	UBRRL=(u8)val;
    13e6:	e9 e2       	ldi	r30, 0x29	; 41
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	80 83       	st	Z, r24
}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <__vector_13>:

/***********************************************/
//UART RX COMPLETE
void __vector_13(void)  __attribute__((signal));
void __vector_13(void)
{
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	4f 93       	push	r20
    1408:	5f 93       	push	r21
    140a:	6f 93       	push	r22
    140c:	7f 93       	push	r23
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
	UART_RX_CALLBACK();
    1422:	e0 91 81 02 	lds	r30, 0x0281
    1426:	f0 91 82 02 	lds	r31, 0x0282
    142a:	09 95       	icall
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <__vector_14>:
//UART DATA REGISTER EMPTY
void __vector_14(void)  __attribute__((signal));
void __vector_14(void)
{
    1452:	1f 92       	push	r1
    1454:	0f 92       	push	r0
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	0f 92       	push	r0
    145a:	11 24       	eor	r1, r1
    145c:	2f 93       	push	r18
    145e:	3f 93       	push	r19
    1460:	4f 93       	push	r20
    1462:	5f 93       	push	r21
    1464:	6f 93       	push	r22
    1466:	7f 93       	push	r23
    1468:	8f 93       	push	r24
    146a:	9f 93       	push	r25
    146c:	af 93       	push	r26
    146e:	bf 93       	push	r27
    1470:	ef 93       	push	r30
    1472:	ff 93       	push	r31
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
	UART_DRE_CALLBACK();
    147c:	e0 91 83 02 	lds	r30, 0x0283
    1480:	f0 91 84 02 	lds	r31, 0x0284
    1484:	09 95       	icall
}
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	ff 91       	pop	r31
    148c:	ef 91       	pop	r30
    148e:	bf 91       	pop	r27
    1490:	af 91       	pop	r26
    1492:	9f 91       	pop	r25
    1494:	8f 91       	pop	r24
    1496:	7f 91       	pop	r23
    1498:	6f 91       	pop	r22
    149a:	5f 91       	pop	r21
    149c:	4f 91       	pop	r20
    149e:	3f 91       	pop	r19
    14a0:	2f 91       	pop	r18
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	0f 90       	pop	r0
    14a8:	1f 90       	pop	r1
    14aa:	18 95       	reti

000014ac <__vector_15>:
//UART TX COMPLETE

void __vector_15(void)  __attribute__((signal));
void __vector_15(void)
{
    14ac:	1f 92       	push	r1
    14ae:	0f 92       	push	r0
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	0f 92       	push	r0
    14b4:	11 24       	eor	r1, r1
    14b6:	2f 93       	push	r18
    14b8:	3f 93       	push	r19
    14ba:	4f 93       	push	r20
    14bc:	5f 93       	push	r21
    14be:	6f 93       	push	r22
    14c0:	7f 93       	push	r23
    14c2:	8f 93       	push	r24
    14c4:	9f 93       	push	r25
    14c6:	af 93       	push	r26
    14c8:	bf 93       	push	r27
    14ca:	ef 93       	push	r30
    14cc:	ff 93       	push	r31
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
	UART_TX_CALLBACK();
    14d6:	e0 91 85 02 	lds	r30, 0x0285
    14da:	f0 91 86 02 	lds	r31, 0x0286
    14de:	09 95       	icall
}
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <MTIMER1_VoidInit>:
#include"MCAL_TIMER1_REG.h"
#include"MCAL_TIMER1_INT.h"


void MTIMER1_VoidInit(MAIN_MODE_T Timer1_Mode , SUB_MODE_T Timer1_Sub_Mode , PRESCALING_VAL_T prescaler)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <MTIMER1_VoidInit+0x6>
    150c:	0f 92       	push	r0
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02
    1516:	4b 83       	std	Y+3, r20	; 0x03
SET_TIMER1_MAIN_MODE(Timer1_Mode);
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <SET_TIMER1_MAIN_MODE>
SET_TIMER1_SELECT_SUB_MODE(Timer1_Sub_Mode);
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	0e 94 66 0b 	call	0x16cc	; 0x16cc <SET_TIMER1_SELECT_SUB_MODE>
SELECT_PRESCALER(prescaler);
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	0e 94 a3 0c 	call	0x1946	; 0x1946 <SELECT_PRESCALER>
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <MTIMER1_VoidDisable>:


void MTIMER1_VoidDisable(void)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
	/****************disable clock*************/

}
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <SET_TIMER1_MAIN_MODE>:


void SET_TIMER1_MAIN_MODE(MAIN_MODE_T MAIN)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <SET_TIMER1_MAIN_MODE+0x6>
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01
	switch(MAIN)
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3b 83       	std	Y+3, r19	; 0x03
    155a:	2a 83       	std	Y+2, r18	; 0x02
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	9b 81       	ldd	r25, Y+3	; 0x03
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	91 05       	cpc	r25, r1
    1564:	09 f4       	brne	.+2      	; 0x1568 <SET_TIMER1_MAIN_MODE+0x24>
    1566:	56 c0       	rjmp	.+172    	; 0x1614 <SET_TIMER1_MAIN_MODE+0xd0>
    1568:	2a 81       	ldd	r18, Y+2	; 0x02
    156a:	3b 81       	ldd	r19, Y+3	; 0x03
    156c:	23 30       	cpi	r18, 0x03	; 3
    156e:	31 05       	cpc	r19, r1
    1570:	64 f4       	brge	.+24     	; 0x158a <SET_TIMER1_MAIN_MODE+0x46>
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	9b 81       	ldd	r25, Y+3	; 0x03
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	09 f4       	brne	.+2      	; 0x157c <SET_TIMER1_MAIN_MODE+0x38>
    157a:	86 c0       	rjmp	.+268    	; 0x1688 <SET_TIMER1_MAIN_MODE+0x144>
    157c:	2a 81       	ldd	r18, Y+2	; 0x02
    157e:	3b 81       	ldd	r19, Y+3	; 0x03
    1580:	21 30       	cpi	r18, 0x01	; 1
    1582:	31 05       	cpc	r19, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <SET_TIMER1_MAIN_MODE+0x44>
    1586:	63 c0       	rjmp	.+198    	; 0x164e <SET_TIMER1_MAIN_MODE+0x10a>
    1588:	9b c0       	rjmp	.+310    	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	91 05       	cpc	r25, r1
    1592:	31 f0       	breq	.+12     	; 0x15a0 <SET_TIMER1_MAIN_MODE+0x5c>
    1594:	2a 81       	ldd	r18, Y+2	; 0x02
    1596:	3b 81       	ldd	r19, Y+3	; 0x03
    1598:	24 30       	cpi	r18, 0x04	; 4
    159a:	31 05       	cpc	r19, r1
    159c:	f1 f0       	breq	.+60     	; 0x15da <SET_TIMER1_MAIN_MODE+0x96>
    159e:	90 c0       	rjmp	.+288    	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
	{
	case CTC_ICR1_TOP :
						Timer1_Enable_CTC_MODE_ICR1_TOP();
    15a0:	af e4       	ldi	r26, 0x4F	; 79
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ef e4       	ldi	r30, 0x4F	; 79
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8e 7f       	andi	r24, 0xFE	; 254
    15ac:	8c 93       	st	X, r24
    15ae:	af e4       	ldi	r26, 0x4F	; 79
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ef e4       	ldi	r30, 0x4F	; 79
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8d 7f       	andi	r24, 0xFD	; 253
    15ba:	8c 93       	st	X, r24
    15bc:	ae e4       	ldi	r26, 0x4E	; 78
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ee e4       	ldi	r30, 0x4E	; 78
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 60       	ori	r24, 0x08	; 8
    15c8:	8c 93       	st	X, r24
    15ca:	ae e4       	ldi	r26, 0x4E	; 78
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ee e4       	ldi	r30, 0x4E	; 78
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 61       	ori	r24, 0x10	; 16
    15d6:	8c 93       	st	X, r24
    15d8:	73 c0       	rjmp	.+230    	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
						break;
	case CTC_OCR1_TOP:
						Timer1_Enable_CTC_MODE_OCR1A_TOP();
    15da:	af e4       	ldi	r26, 0x4F	; 79
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	ef e4       	ldi	r30, 0x4F	; 79
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	8e 7f       	andi	r24, 0xFE	; 254
    15e6:	8c 93       	st	X, r24
    15e8:	af e4       	ldi	r26, 0x4F	; 79
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ef e4       	ldi	r30, 0x4F	; 79
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8d 7f       	andi	r24, 0xFD	; 253
    15f4:	8c 93       	st	X, r24
    15f6:	ae e4       	ldi	r26, 0x4E	; 78
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	ee e4       	ldi	r30, 0x4E	; 78
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	88 60       	ori	r24, 0x08	; 8
    1602:	8c 93       	st	X, r24
    1604:	ae e4       	ldi	r26, 0x4E	; 78
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	ee e4       	ldi	r30, 0x4E	; 78
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 7e       	andi	r24, 0xEF	; 239
    1610:	8c 93       	st	X, r24
    1612:	56 c0       	rjmp	.+172    	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
						break;

	case FPWM_OCR1A_TOP:
						Timer1_Enable_FASTPWM_MODE_OCR1A_TOP();
    1614:	af e4       	ldi	r26, 0x4F	; 79
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	ef e4       	ldi	r30, 0x4F	; 79
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	81 60       	ori	r24, 0x01	; 1
    1620:	8c 93       	st	X, r24
    1622:	af e4       	ldi	r26, 0x4F	; 79
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ef e4       	ldi	r30, 0x4F	; 79
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	82 60       	ori	r24, 0x02	; 2
    162e:	8c 93       	st	X, r24
    1630:	ae e4       	ldi	r26, 0x4E	; 78
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	ee e4       	ldi	r30, 0x4E	; 78
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	88 60       	ori	r24, 0x08	; 8
    163c:	8c 93       	st	X, r24
    163e:	ae e4       	ldi	r26, 0x4E	; 78
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	ee e4       	ldi	r30, 0x4E	; 78
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 61       	ori	r24, 0x10	; 16
    164a:	8c 93       	st	X, r24
    164c:	39 c0       	rjmp	.+114    	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
					    break;

	case FPWM_ICR1_TOP:
					    Timer1_Enable_FASTPWM_MODE_ICR1_TOP();
    164e:	af e4       	ldi	r26, 0x4F	; 79
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ef e4       	ldi	r30, 0x4F	; 79
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8e 7f       	andi	r24, 0xFE	; 254
    165a:	8c 93       	st	X, r24
    165c:	af e4       	ldi	r26, 0x4F	; 79
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ef e4       	ldi	r30, 0x4F	; 79
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	82 60       	ori	r24, 0x02	; 2
    1668:	8c 93       	st	X, r24
    166a:	ae e4       	ldi	r26, 0x4E	; 78
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ee e4       	ldi	r30, 0x4E	; 78
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	88 60       	ori	r24, 0x08	; 8
    1676:	8c 93       	st	X, r24
    1678:	ae e4       	ldi	r26, 0x4E	; 78
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ee e4       	ldi	r30, 0x4E	; 78
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	80 61       	ori	r24, 0x10	; 16
    1684:	8c 93       	st	X, r24
    1686:	1c c0       	rjmp	.+56     	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
						break;

	case NORMAL_MODE :
						Timer1_Enable_Normal_Mode();
    1688:	af e4       	ldi	r26, 0x4F	; 79
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ef e4       	ldi	r30, 0x4F	; 79
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8e 7f       	andi	r24, 0xFE	; 254
    1694:	8c 93       	st	X, r24
    1696:	af e4       	ldi	r26, 0x4F	; 79
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ef e4       	ldi	r30, 0x4F	; 79
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8d 7f       	andi	r24, 0xFD	; 253
    16a2:	8c 93       	st	X, r24
    16a4:	ae e4       	ldi	r26, 0x4E	; 78
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	ee e4       	ldi	r30, 0x4E	; 78
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	87 7f       	andi	r24, 0xF7	; 247
    16b0:	8c 93       	st	X, r24
    16b2:	ae e4       	ldi	r26, 0x4E	; 78
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	ee e4       	ldi	r30, 0x4E	; 78
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8f 7e       	andi	r24, 0xEF	; 239
    16be:	8c 93       	st	X, r24
						break;
	}
}
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <SET_TIMER1_SELECT_SUB_MODE>:



void SET_TIMER1_SELECT_SUB_MODE(SUB_MODE_T mode)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <SET_TIMER1_SELECT_SUB_MODE+0x6>
    16d2:	0f 92       	push	r0
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3b 83       	std	Y+3, r19	; 0x03
    16e2:	2a 83       	std	Y+2, r18	; 0x02
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	9b 81       	ldd	r25, Y+3	; 0x03
    16e8:	86 30       	cpi	r24, 0x06	; 6
    16ea:	91 05       	cpc	r25, r1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <SET_TIMER1_SELECT_SUB_MODE+0x24>
    16ee:	54 c0       	rjmp	.+168    	; 0x1798 <SET_TIMER1_SELECT_SUB_MODE+0xcc>
    16f0:	2a 81       	ldd	r18, Y+2	; 0x02
    16f2:	3b 81       	ldd	r19, Y+3	; 0x03
    16f4:	27 30       	cpi	r18, 0x07	; 7
    16f6:	31 05       	cpc	r19, r1
    16f8:	24 f5       	brge	.+72     	; 0x1742 <SET_TIMER1_SELECT_SUB_MODE+0x76>
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	9b 81       	ldd	r25, Y+3	; 0x03
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	91 05       	cpc	r25, r1
    1702:	09 f4       	brne	.+2      	; 0x1706 <SET_TIMER1_SELECT_SUB_MODE+0x3a>
    1704:	85 c0       	rjmp	.+266    	; 0x1810 <SET_TIMER1_SELECT_SUB_MODE+0x144>
    1706:	2a 81       	ldd	r18, Y+2	; 0x02
    1708:	3b 81       	ldd	r19, Y+3	; 0x03
    170a:	23 30       	cpi	r18, 0x03	; 3
    170c:	31 05       	cpc	r19, r1
    170e:	64 f4       	brge	.+24     	; 0x1728 <SET_TIMER1_SELECT_SUB_MODE+0x5c>
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	09 f4       	brne	.+2      	; 0x171a <SET_TIMER1_SELECT_SUB_MODE+0x4e>
    1718:	5d c0       	rjmp	.+186    	; 0x17d4 <SET_TIMER1_SELECT_SUB_MODE+0x108>
    171a:	2a 81       	ldd	r18, Y+2	; 0x02
    171c:	3b 81       	ldd	r19, Y+3	; 0x03
    171e:	21 30       	cpi	r18, 0x01	; 1
    1720:	31 05       	cpc	r19, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <SET_TIMER1_SELECT_SUB_MODE+0x5a>
    1724:	66 c0       	rjmp	.+204    	; 0x17f2 <SET_TIMER1_SELECT_SUB_MODE+0x126>
    1726:	09 c1       	rjmp	.+530    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	84 30       	cpi	r24, 0x04	; 4
    172e:	91 05       	cpc	r25, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <SET_TIMER1_SELECT_SUB_MODE+0x68>
    1732:	8c c0       	rjmp	.+280    	; 0x184c <SET_TIMER1_SELECT_SUB_MODE+0x180>
    1734:	2a 81       	ldd	r18, Y+2	; 0x02
    1736:	3b 81       	ldd	r19, Y+3	; 0x03
    1738:	25 30       	cpi	r18, 0x05	; 5
    173a:	31 05       	cpc	r19, r1
    173c:	0c f0       	brlt	.+2      	; 0x1740 <SET_TIMER1_SELECT_SUB_MODE+0x74>
    173e:	95 c0       	rjmp	.+298    	; 0x186a <SET_TIMER1_SELECT_SUB_MODE+0x19e>
    1740:	76 c0       	rjmp	.+236    	; 0x182e <SET_TIMER1_SELECT_SUB_MODE+0x162>
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	9b 81       	ldd	r25, Y+3	; 0x03
    1746:	8a 30       	cpi	r24, 0x0A	; 10
    1748:	91 05       	cpc	r25, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <SET_TIMER1_SELECT_SUB_MODE+0x82>
    174c:	d9 c0       	rjmp	.+434    	; 0x1900 <SET_TIMER1_SELECT_SUB_MODE+0x234>
    174e:	2a 81       	ldd	r18, Y+2	; 0x02
    1750:	3b 81       	ldd	r19, Y+3	; 0x03
    1752:	2b 30       	cpi	r18, 0x0B	; 11
    1754:	31 05       	cpc	r19, r1
    1756:	6c f4       	brge	.+26     	; 0x1772 <SET_TIMER1_SELECT_SUB_MODE+0xa6>
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	9b 81       	ldd	r25, Y+3	; 0x03
    175c:	88 30       	cpi	r24, 0x08	; 8
    175e:	91 05       	cpc	r25, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <SET_TIMER1_SELECT_SUB_MODE+0x98>
    1762:	92 c0       	rjmp	.+292    	; 0x1888 <SET_TIMER1_SELECT_SUB_MODE+0x1bc>
    1764:	2a 81       	ldd	r18, Y+2	; 0x02
    1766:	3b 81       	ldd	r19, Y+3	; 0x03
    1768:	29 30       	cpi	r18, 0x09	; 9
    176a:	31 05       	cpc	r19, r1
    176c:	0c f0       	brlt	.+2      	; 0x1770 <SET_TIMER1_SELECT_SUB_MODE+0xa4>
    176e:	aa c0       	rjmp	.+340    	; 0x18c4 <SET_TIMER1_SELECT_SUB_MODE+0x1f8>
    1770:	22 c0       	rjmp	.+68     	; 0x17b6 <SET_TIMER1_SELECT_SUB_MODE+0xea>
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	9b 81       	ldd	r25, Y+3	; 0x03
    1776:	8c 30       	cpi	r24, 0x0C	; 12
    1778:	91 05       	cpc	r25, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <SET_TIMER1_SELECT_SUB_MODE+0xb2>
    177c:	b2 c0       	rjmp	.+356    	; 0x18e2 <SET_TIMER1_SELECT_SUB_MODE+0x216>
    177e:	2a 81       	ldd	r18, Y+2	; 0x02
    1780:	3b 81       	ldd	r19, Y+3	; 0x03
    1782:	2c 30       	cpi	r18, 0x0C	; 12
    1784:	31 05       	cpc	r19, r1
    1786:	0c f4       	brge	.+2      	; 0x178a <SET_TIMER1_SELECT_SUB_MODE+0xbe>
    1788:	8e c0       	rjmp	.+284    	; 0x18a6 <SET_TIMER1_SELECT_SUB_MODE+0x1da>
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	9b 81       	ldd	r25, Y+3	; 0x03
    178e:	8d 30       	cpi	r24, 0x0D	; 13
    1790:	91 05       	cpc	r25, r1
    1792:	09 f4       	brne	.+2      	; 0x1796 <SET_TIMER1_SELECT_SUB_MODE+0xca>
    1794:	c4 c0       	rjmp	.+392    	; 0x191e <SET_TIMER1_SELECT_SUB_MODE+0x252>
    1796:	d1 c0       	rjmp	.+418    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
	{
	case NORMAL_OP_CH_A:TIMER_1_Normal_Port_Operation_Channel_A();
    1798:	af e4       	ldi	r26, 0x4F	; 79
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	ef e4       	ldi	r30, 0x4F	; 79
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8f 77       	andi	r24, 0x7F	; 127
    17a4:	8c 93       	st	X, r24
    17a6:	af e4       	ldi	r26, 0x4F	; 79
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	ef e4       	ldi	r30, 0x4F	; 79
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8f 7b       	andi	r24, 0xBF	; 191
    17b2:	8c 93       	st	X, r24
    17b4:	c2 c0       	rjmp	.+388    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						break;

	case NORMAL_OP_CH_B:
						TIMER_1_Normal_Port_Operation_Channel_B();
    17b6:	af e4       	ldi	r26, 0x4F	; 79
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	ef e4       	ldi	r30, 0x4F	; 79
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	8f 7d       	andi	r24, 0xDF	; 223
    17c2:	8c 93       	st	X, r24
    17c4:	af e4       	ldi	r26, 0x4F	; 79
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	ef e4       	ldi	r30, 0x4F	; 79
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	8f 7e       	andi	r24, 0xEF	; 239
    17d0:	8c 93       	st	X, r24
    17d2:	b3 c0       	rjmp	.+358    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						break;

	case CTC_TOGGLE_CH_A:
						TIMER_1_TOGGLE_ON_COMPAREMATCH_Channel_B();
    17d4:	af e4       	ldi	r26, 0x4F	; 79
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ef e4       	ldi	r30, 0x4F	; 79
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8f 7d       	andi	r24, 0xDF	; 223
    17e0:	8c 93       	st	X, r24
    17e2:	af e4       	ldi	r26, 0x4F	; 79
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	ef e4       	ldi	r30, 0x4F	; 79
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 61       	ori	r24, 0x10	; 16
    17ee:	8c 93       	st	X, r24
    17f0:	a4 c0       	rjmp	.+328    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						break;

	case CTC_TOGGLE_CH_B:
						 TIMER_1_TOGGLE_ON_COMPAREMATCH_Channel_A();
    17f2:	af e4       	ldi	r26, 0x4F	; 79
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	ef e4       	ldi	r30, 0x4F	; 79
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8f 77       	andi	r24, 0x7F	; 127
    17fe:	8c 93       	st	X, r24
    1800:	af e4       	ldi	r26, 0x4F	; 79
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ef e4       	ldi	r30, 0x4F	; 79
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 64       	ori	r24, 0x40	; 64
    180c:	8c 93       	st	X, r24
    180e:	95 c0       	rjmp	.+298    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
				         break;

	case CTC_SET_CH_A : TIMER_1_SET_ON_COMPAREMATCH_Channel_A();
    1810:	af e4       	ldi	r26, 0x4F	; 79
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ef e4       	ldi	r30, 0x4F	; 79
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	80 68       	ori	r24, 0x80	; 128
    181c:	8c 93       	st	X, r24
    181e:	af e4       	ldi	r26, 0x4F	; 79
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	ef e4       	ldi	r30, 0x4F	; 79
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	80 64       	ori	r24, 0x40	; 64
    182a:	8c 93       	st	X, r24
    182c:	86 c0       	rjmp	.+268    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
				   	      break;
	case CTC_SET_CH_B :
				   	    TIMER_1_SET_ON_COMPAREMATCH_Channel_B();
    182e:	af e4       	ldi	r26, 0x4F	; 79
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	ef e4       	ldi	r30, 0x4F	; 79
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	80 62       	ori	r24, 0x20	; 32
    183a:	8c 93       	st	X, r24
    183c:	af e4       	ldi	r26, 0x4F	; 79
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ef e4       	ldi	r30, 0x4F	; 79
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	80 61       	ori	r24, 0x10	; 16
    1848:	8c 93       	st	X, r24
    184a:	77 c0       	rjmp	.+238    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
				   	      break;


	case CTC_CLEAR_CH_A: TIMER_1_CLEAR_ON_COMPAREMATCH_Channel_A();
    184c:	af e4       	ldi	r26, 0x4F	; 79
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	ef e4       	ldi	r30, 0x4F	; 79
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	80 68       	ori	r24, 0x80	; 128
    1858:	8c 93       	st	X, r24
    185a:	af e4       	ldi	r26, 0x4F	; 79
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	ef e4       	ldi	r30, 0x4F	; 79
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8f 7b       	andi	r24, 0xBF	; 191
    1866:	8c 93       	st	X, r24
    1868:	68 c0       	rjmp	.+208    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						   break;

	case CTC_CLEAR_CH_B:
						TIMER_1_CLEAR_ON_COMPAREMATCH_Channel_B();
    186a:	af e4       	ldi	r26, 0x4F	; 79
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	ef e4       	ldi	r30, 0x4F	; 79
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	80 62       	ori	r24, 0x20	; 32
    1876:	8c 93       	st	X, r24
    1878:	af e4       	ldi	r26, 0x4F	; 79
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	ef e4       	ldi	r30, 0x4F	; 79
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	8f 7e       	andi	r24, 0xEF	; 239
    1884:	8c 93       	st	X, r24
    1886:	59 c0       	rjmp	.+178    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						   break;


	case FPWM_TOGGLE_CH_A :TIMER_1_TOGGLE_ON_COMPAREMATCH_CLEAR_TOP_FPWM_CH_A();
    1888:	af e4       	ldi	r26, 0x4F	; 79
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ef e4       	ldi	r30, 0x4F	; 79
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	80 68       	ori	r24, 0x80	; 128
    1894:	8c 93       	st	X, r24
    1896:	af e4       	ldi	r26, 0x4F	; 79
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	ef e4       	ldi	r30, 0x4F	; 79
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 64       	ori	r24, 0x40	; 64
    18a2:	8c 93       	st	X, r24
    18a4:	4a c0       	rjmp	.+148    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						  break;


	case FPWM_TOGGLE_CH_B :TIMER_1_TOGGLE_ON_COMPAREMATCH_CLEAR_TOP_FPWM_CH_B();
    18a6:	af e4       	ldi	r26, 0x4F	; 79
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	ef e4       	ldi	r30, 0x4F	; 79
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 62       	ori	r24, 0x20	; 32
    18b2:	8c 93       	st	X, r24
    18b4:	af e4       	ldi	r26, 0x4F	; 79
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	ef e4       	ldi	r30, 0x4F	; 79
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	80 61       	ori	r24, 0x10	; 16
    18c0:	8c 93       	st	X, r24
    18c2:	3b c0       	rjmp	.+118    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						   break;

	case FPWM_CLEAR_CH_A :
					 	 TIMER_1_CLEAR_ON_COMPAREMATCH_SET_TOP_FPWM_CH_A();
    18c4:	af e4       	ldi	r26, 0x4F	; 79
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ef e4       	ldi	r30, 0x4F	; 79
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	80 68       	ori	r24, 0x80	; 128
    18d0:	8c 93       	st	X, r24
    18d2:	af e4       	ldi	r26, 0x4F	; 79
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ef e4       	ldi	r30, 0x4F	; 79
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	8f 7b       	andi	r24, 0xBF	; 191
    18de:	8c 93       	st	X, r24
    18e0:	2c c0       	rjmp	.+88     	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
					 	   break;

	case FPWM_CLEAR_CH_B : TIMER_1_CLEAR_ON_COMPAREMATCH_SET_TOP_FPWM_CH_B();
    18e2:	af e4       	ldi	r26, 0x4F	; 79
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	ef e4       	ldi	r30, 0x4F	; 79
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 62       	ori	r24, 0x20	; 32
    18ee:	8c 93       	st	X, r24
    18f0:	af e4       	ldi	r26, 0x4F	; 79
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ef e4       	ldi	r30, 0x4F	; 79
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8f 7e       	andi	r24, 0xEF	; 239
    18fc:	8c 93       	st	X, r24
    18fe:	1d c0       	rjmp	.+58     	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
					 	   break;

	case FPWM_SET_CH_A :
				           TIMER_1_SET_ON_COMPAREMATCH_CLEAR_TOP_FPWM_CH_A();
    1900:	af e4       	ldi	r26, 0x4F	; 79
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	ef e4       	ldi	r30, 0x4F	; 79
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	80 68       	ori	r24, 0x80	; 128
    190c:	8c 93       	st	X, r24
    190e:	af e4       	ldi	r26, 0x4F	; 79
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	ef e4       	ldi	r30, 0x4F	; 79
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	80 64       	ori	r24, 0x40	; 64
    191a:	8c 93       	st	X, r24
    191c:	0e c0       	rjmp	.+28     	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
				           break;

	case FPWM_SET_CH_B :   TIMER_1_SET_ON_COMPAREMATCH_CLEAR_TOP_FPWM_CH_B();
    191e:	af e4       	ldi	r26, 0x4F	; 79
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ef e4       	ldi	r30, 0x4F	; 79
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	80 62       	ori	r24, 0x20	; 32
    192a:	8c 93       	st	X, r24
    192c:	af e4       	ldi	r26, 0x4F	; 79
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	ef e4       	ldi	r30, 0x4F	; 79
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 61       	ori	r24, 0x10	; 16
    1938:	8c 93       	st	X, r24
				           break;
	default :break;

	}
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <SELECT_PRESCALER>:
void SELECT_PRESCALER(PRESCALING_VAL_T PRESCALER)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <SELECT_PRESCALER+0x6>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
  switch(PRESCALER)
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3b 83       	std	Y+3, r19	; 0x03
    195c:	2a 83       	std	Y+2, r18	; 0x02
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	9b 81       	ldd	r25, Y+3	; 0x03
    1962:	83 30       	cpi	r24, 0x03	; 3
    1964:	91 05       	cpc	r25, r1
    1966:	09 f4       	brne	.+2      	; 0x196a <SELECT_PRESCALER+0x24>
    1968:	70 c0       	rjmp	.+224    	; 0x1a4a <SELECT_PRESCALER+0x104>
    196a:	2a 81       	ldd	r18, Y+2	; 0x02
    196c:	3b 81       	ldd	r19, Y+3	; 0x03
    196e:	24 30       	cpi	r18, 0x04	; 4
    1970:	31 05       	cpc	r19, r1
    1972:	84 f4       	brge	.+32     	; 0x1994 <SELECT_PRESCALER+0x4e>
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	9b 81       	ldd	r25, Y+3	; 0x03
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	91 05       	cpc	r25, r1
    197c:	d1 f1       	breq	.+116    	; 0x19f2 <SELECT_PRESCALER+0xac>
    197e:	2a 81       	ldd	r18, Y+2	; 0x02
    1980:	3b 81       	ldd	r19, Y+3	; 0x03
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	0c f0       	brlt	.+2      	; 0x198a <SELECT_PRESCALER+0x44>
    1988:	4a c0       	rjmp	.+148    	; 0x1a1e <SELECT_PRESCALER+0xd8>
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	d1 f0       	breq	.+52     	; 0x19c6 <SELECT_PRESCALER+0x80>
    1992:	c8 c0       	rjmp	.+400    	; 0x1b24 <SELECT_PRESCALER+0x1de>
    1994:	2a 81       	ldd	r18, Y+2	; 0x02
    1996:	3b 81       	ldd	r19, Y+3	; 0x03
    1998:	25 30       	cpi	r18, 0x05	; 5
    199a:	31 05       	cpc	r19, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <SELECT_PRESCALER+0x5a>
    199e:	81 c0       	rjmp	.+258    	; 0x1aa2 <SELECT_PRESCALER+0x15c>
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	9b 81       	ldd	r25, Y+3	; 0x03
    19a4:	85 30       	cpi	r24, 0x05	; 5
    19a6:	91 05       	cpc	r25, r1
    19a8:	0c f4       	brge	.+2      	; 0x19ac <SELECT_PRESCALER+0x66>
    19aa:	65 c0       	rjmp	.+202    	; 0x1a76 <SELECT_PRESCALER+0x130>
    19ac:	2a 81       	ldd	r18, Y+2	; 0x02
    19ae:	3b 81       	ldd	r19, Y+3	; 0x03
    19b0:	26 30       	cpi	r18, 0x06	; 6
    19b2:	31 05       	cpc	r19, r1
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <SELECT_PRESCALER+0x72>
    19b6:	8b c0       	rjmp	.+278    	; 0x1ace <SELECT_PRESCALER+0x188>
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	87 30       	cpi	r24, 0x07	; 7
    19be:	91 05       	cpc	r25, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <SELECT_PRESCALER+0x7e>
    19c2:	9b c0       	rjmp	.+310    	; 0x1afa <SELECT_PRESCALER+0x1b4>
    19c4:	af c0       	rjmp	.+350    	; 0x1b24 <SELECT_PRESCALER+0x1de>
  {
  case TIMER1_DISABLE_CLOCK_SOURCE:CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    19c6:	ae e4       	ldi	r26, 0x4E	; 78
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	ee e4       	ldi	r30, 0x4E	; 78
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	   CLEAR_BIT(TCCR1B,TCCR1B_CS11);
    19d4:	ae e4       	ldi	r26, 0x4E	; 78
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	ee e4       	ldi	r30, 0x4E	; 78
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8d 7f       	andi	r24, 0xFD	; 253
    19e0:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	   CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    19e2:	ae e4       	ldi	r26, 0x4E	; 78
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ee e4       	ldi	r30, 0x4E	; 78
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	8b 7f       	andi	r24, 0xFB	; 251
    19ee:	8c 93       	st	X, r24
    19f0:	99 c0       	rjmp	.+306    	; 0x1b24 <SELECT_PRESCALER+0x1de>
	  	  	                       break;
  case TIMER1_NO_PRESCALE_CLOCK_SOURCE:SET_BIT(TCCR1B,TCCR1B_CS10);
    19f2:	ae e4       	ldi	r26, 0x4E	; 78
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	ee e4       	ldi	r30, 0x4E	; 78
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	81 60       	ori	r24, 0x01	; 1
    19fe:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	  CLEAR_BIT(TCCR1B,TCCR1B_CS11);
    1a00:	ae e4       	ldi	r26, 0x4E	; 78
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	ee e4       	ldi	r30, 0x4E	; 78
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	8d 7f       	andi	r24, 0xFD	; 253
    1a0c:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	  CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    1a0e:	ae e4       	ldi	r26, 0x4E	; 78
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	ee e4       	ldi	r30, 0x4E	; 78
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8b 7f       	andi	r24, 0xFB	; 251
    1a1a:	8c 93       	st	X, r24
    1a1c:	83 c0       	rjmp	.+262    	; 0x1b24 <SELECT_PRESCALER+0x1de>
  	  	  	  	  	  	  	  	  	  break;


  case TIMER1_PRESCALE_8_CLOCK_SOURCE :  CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    1a1e:	ae e4       	ldi	r26, 0x4E	; 78
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	ee e4       	ldi	r30, 0x4E	; 78
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8e 7f       	andi	r24, 0xFE	; 254
    1a2a:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	  	  SET_BIT(TCCR1B,TCCR1B_CS11);
    1a2c:	ae e4       	ldi	r26, 0x4E	; 78
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	ee e4       	ldi	r30, 0x4E	; 78
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	82 60       	ori	r24, 0x02	; 2
    1a38:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	  	  CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    1a3a:	ae e4       	ldi	r26, 0x4E	; 78
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	ee e4       	ldi	r30, 0x4E	; 78
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	8b 7f       	andi	r24, 0xFB	; 251
    1a46:	8c 93       	st	X, r24
    1a48:	6d c0       	rjmp	.+218    	; 0x1b24 <SELECT_PRESCALER+0x1de>
  	  	  	  	  	  	  	  	  	  	  break;

  case TIMER1_PRESCALE_64_CLOCK_SOURCE:SET_BIT(TCCR1B,TCCR1B_CS10);
    1a4a:	ae e4       	ldi	r26, 0x4E	; 78
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	ee e4       	ldi	r30, 0x4E	; 78
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	81 60       	ori	r24, 0x01	; 1
    1a56:	8c 93       	st	X, r24
	  	  	  	  	  	  	  	  	   SET_BIT(TCCR1B,TCCR1B_CS11);
    1a58:	ae e4       	ldi	r26, 0x4E	; 78
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	ee e4       	ldi	r30, 0x4E	; 78
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	82 60       	ori	r24, 0x02	; 2
    1a64:	8c 93       	st	X, r24
	  	  	  	  	  	  	  	  	   CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    1a66:	ae e4       	ldi	r26, 0x4E	; 78
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	ee e4       	ldi	r30, 0x4E	; 78
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8b 7f       	andi	r24, 0xFB	; 251
    1a72:	8c 93       	st	X, r24
    1a74:	57 c0       	rjmp	.+174    	; 0x1b24 <SELECT_PRESCALER+0x1de>
	  	  	  	  	  	  	  	  	   	break;
  case TIMER1_PRESCALE_256_CLOCK_SOURCE:CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    1a76:	ae e4       	ldi	r26, 0x4E	; 78
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	ee e4       	ldi	r30, 0x4E	; 78
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8e 7f       	andi	r24, 0xFE	; 254
    1a82:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	  	CLEAR_BIT(TCCR1B,TCCR1B_CS11);
    1a84:	ae e4       	ldi	r26, 0x4E	; 78
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	ee e4       	ldi	r30, 0x4E	; 78
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8d 7f       	andi	r24, 0xFD	; 253
    1a90:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	    SET_BIT(TCCR1B,TCCR1B_CS12);
    1a92:	ae e4       	ldi	r26, 0x4E	; 78
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ee e4       	ldi	r30, 0x4E	; 78
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	84 60       	ori	r24, 0x04	; 4
    1a9e:	8c 93       	st	X, r24
    1aa0:	41 c0       	rjmp	.+130    	; 0x1b24 <SELECT_PRESCALER+0x1de>
  	  	  	  	  	  	  	  	  	    break;

  case TIMER1_PRESCALE_1024_CLOCK_SOURCE:SET_BIT(TCCR1B,TCCR1B_CS10);
    1aa2:	ae e4       	ldi	r26, 0x4E	; 78
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	ee e4       	ldi	r30, 0x4E	; 78
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	81 60       	ori	r24, 0x01	; 1
    1aae:	8c 93       	st	X, r24
	  	  	  							CLEAR_BIT(TCCR1B,TCCR1B_CS11);
    1ab0:	ae e4       	ldi	r26, 0x4E	; 78
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	ee e4       	ldi	r30, 0x4E	; 78
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	8d 7f       	andi	r24, 0xFD	; 253
    1abc:	8c 93       	st	X, r24
	  	  	  							SET_BIT(TCCR1B,TCCR1B_CS12);
    1abe:	ae e4       	ldi	r26, 0x4E	; 78
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	ee e4       	ldi	r30, 0x4E	; 78
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	84 60       	ori	r24, 0x04	; 4
    1aca:	8c 93       	st	X, r24
    1acc:	2b c0       	rjmp	.+86     	; 0x1b24 <SELECT_PRESCALER+0x1de>
	  	  	  							break;

  case TIMER1_EXTERNAL_CLOCK_SOURCE_FALLING_EDGE_T1:
	  	  	  	  	  	  	  	  	  	    CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    1ace:	ae e4       	ldi	r26, 0x4E	; 78
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	ee e4       	ldi	r30, 0x4E	; 78
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8e 7f       	andi	r24, 0xFE	; 254
    1ada:	8c 93       	st	X, r24
	  	  	  	  							SET_BIT(TCCR1B,TCCR1B_CS11);
    1adc:	ae e4       	ldi	r26, 0x4E	; 78
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	ee e4       	ldi	r30, 0x4E	; 78
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	82 60       	ori	r24, 0x02	; 2
    1ae8:	8c 93       	st	X, r24
	  	  	  	  							SET_BIT(TCCR1B,TCCR1B_CS12);
    1aea:	ae e4       	ldi	r26, 0x4E	; 78
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	ee e4       	ldi	r30, 0x4E	; 78
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	84 60       	ori	r24, 0x04	; 4
    1af6:	8c 93       	st	X, r24
    1af8:	15 c0       	rjmp	.+42     	; 0x1b24 <SELECT_PRESCALER+0x1de>
	  	  	  	  							break;

  case TIMER1_EXTERNAL_CLOCK_SOURCE_RISING_EDGE_T1:
	  	  	  	  	  	  	  	  	  	  	  	SET_BIT(TCCR1B,TCCR1B_CS10);
    1afa:	ae e4       	ldi	r26, 0x4E	; 78
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	ee e4       	ldi	r30, 0x4E	; 78
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	81 60       	ori	r24, 0x01	; 1
    1b06:	8c 93       	st	X, r24
	  	  	  	  	  							SET_BIT(TCCR1B,TCCR1B_CS11);
    1b08:	ae e4       	ldi	r26, 0x4E	; 78
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ee e4       	ldi	r30, 0x4E	; 78
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	82 60       	ori	r24, 0x02	; 2
    1b14:	8c 93       	st	X, r24
	  	  	  	  	  							SET_BIT(TCCR1B,TCCR1B_CS12);
    1b16:	ae e4       	ldi	r26, 0x4E	; 78
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	ee e4       	ldi	r30, 0x4E	; 78
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	84 60       	ori	r24, 0x04	; 4
    1b22:	8c 93       	st	X, r24



  }

}
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <MTIMER1_VoidSetTopValue>:

void MTIMER1_VoidSetTopValue(MAIN_MODE_T MAIN,u16 Top_Val)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <MTIMER1_VoidSetTopValue+0x6>
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <MTIMER1_VoidSetTopValue+0x8>
    1b38:	0f 92       	push	r0
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	7b 83       	std	Y+3, r23	; 0x03
    1b42:	6a 83       	std	Y+2, r22	; 0x02
	 switch(MAIN)
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	3d 83       	std	Y+5, r19	; 0x05
    1b4c:	2c 83       	std	Y+4, r18	; 0x04
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	82 30       	cpi	r24, 0x02	; 2
    1b54:	91 05       	cpc	r25, r1
    1b56:	21 f1       	breq	.+72     	; 0x1ba0 <MTIMER1_VoidSetTopValue+0x70>
    1b58:	2c 81       	ldd	r18, Y+4	; 0x04
    1b5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5c:	23 30       	cpi	r18, 0x03	; 3
    1b5e:	31 05       	cpc	r19, r1
    1b60:	34 f4       	brge	.+12     	; 0x1b6e <MTIMER1_VoidSetTopValue+0x3e>
    1b62:	8c 81       	ldd	r24, Y+4	; 0x04
    1b64:	9d 81       	ldd	r25, Y+5	; 0x05
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	91 05       	cpc	r25, r1
    1b6a:	61 f0       	breq	.+24     	; 0x1b84 <MTIMER1_VoidSetTopValue+0x54>
    1b6c:	26 c0       	rjmp	.+76     	; 0x1bba <MTIMER1_VoidSetTopValue+0x8a>
    1b6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b70:	3d 81       	ldd	r19, Y+5	; 0x05
    1b72:	23 30       	cpi	r18, 0x03	; 3
    1b74:	31 05       	cpc	r19, r1
    1b76:	69 f0       	breq	.+26     	; 0x1b92 <MTIMER1_VoidSetTopValue+0x62>
    1b78:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7c:	84 30       	cpi	r24, 0x04	; 4
    1b7e:	91 05       	cpc	r25, r1
    1b80:	b1 f0       	breq	.+44     	; 0x1bae <MTIMER1_VoidSetTopValue+0x7e>
    1b82:	1b c0       	rjmp	.+54     	; 0x1bba <MTIMER1_VoidSetTopValue+0x8a>
	 {
		 case FPWM_ICR1_TOP : ICR1=Top_Val; break;
    1b84:	e6 e4       	ldi	r30, 0x46	; 70
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	80 83       	st	Z, r24
    1b90:	14 c0       	rjmp	.+40     	; 0x1bba <MTIMER1_VoidSetTopValue+0x8a>
		 case CTC_ICR1_TOP :  ICR1=Top_Val; break;
    1b92:	e6 e4       	ldi	r30, 0x46	; 70
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <MTIMER1_VoidSetTopValue+0x8a>
		 case FPWM_OCR1A_TOP: OCR1A =Top_Val; break;
    1ba0:	ea e4       	ldi	r30, 0x4A	; 74
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
    1bac:	06 c0       	rjmp	.+12     	; 0x1bba <MTIMER1_VoidSetTopValue+0x8a>
		 case CTC_OCR1_TOP : OCR1A =Top_Val; break;
    1bae:	ea e4       	ldi	r30, 0x4A	; 74
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	80 83       	st	Z, r24
		 case NORMAL_MODE : break;
		 default : break;
	 }
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <SET_DUTYCYCLEVAL>:
void SET_DUTYCYCLEVAL(u16 duty_val,MAIN_MODE_T MAIN_ )
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <SET_DUTYCYCLEVAL+0x6>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <SET_DUTYCYCLEVAL+0x8>
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	6b 83       	std	Y+3, r22	; 0x03
	 switch(MAIN_)
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	3d 83       	std	Y+5, r19	; 0x05
    1be6:	2c 83       	std	Y+4, r18	; 0x04
    1be8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bea:	9d 81       	ldd	r25, Y+5	; 0x05
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	91 05       	cpc	r25, r1
    1bf0:	31 f0       	breq	.+12     	; 0x1bfe <SET_DUTYCYCLEVAL+0x34>
    1bf2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf6:	22 30       	cpi	r18, 0x02	; 2
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	41 f0       	breq	.+16     	; 0x1c0c <SET_DUTYCYCLEVAL+0x42>
    1bfc:	0d c0       	rjmp	.+26     	; 0x1c18 <SET_DUTYCYCLEVAL+0x4e>
	 {
	 case FPWM_ICR1_TOP : OCR1A=duty_val; break;
    1bfe:	ea e4       	ldi	r30, 0x4A	; 74
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	80 83       	st	Z, r24
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <SET_DUTYCYCLEVAL+0x4e>
	 case FPWM_OCR1A_TOP : ICR1=duty_val; break;
    1c0c:	e6 e4       	ldi	r30, 0x46	; 70
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24

	 }

}
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <MTIMER1_ICU_EDGE_SELECT>:
void MTIMER1_ICU_EDGE_SELECT(u8 EDGE)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <MTIMER1_ICU_EDGE_SELECT+0x6>
    1c2e:	0f 92       	push	r0
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	89 83       	std	Y+1, r24	; 0x01

	switch(EDGE)
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	3b 83       	std	Y+3, r19	; 0x03
    1c3e:	2a 83       	std	Y+2, r18	; 0x02
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	9b 81       	ldd	r25, Y+3	; 0x03
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	91 05       	cpc	r25, r1
    1c48:	31 f0       	breq	.+12     	; 0x1c56 <MTIMER1_ICU_EDGE_SELECT+0x2e>
    1c4a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c4c:	3b 81       	ldd	r19, Y+3	; 0x03
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	31 05       	cpc	r19, r1
    1c52:	49 f0       	breq	.+18     	; 0x1c66 <MTIMER1_ICU_EDGE_SELECT+0x3e>
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <MTIMER1_ICU_EDGE_SELECT+0x4c>
	{
	case ICU_RAISING_EDGE : TIMER1_ICU_SET_RAISING_EDGE(); break;
    1c56:	ae e4       	ldi	r26, 0x4E	; 78
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	ee e4       	ldi	r30, 0x4E	; 78
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 64       	ori	r24, 0x40	; 64
    1c62:	8c 93       	st	X, r24
    1c64:	07 c0       	rjmp	.+14     	; 0x1c74 <MTIMER1_ICU_EDGE_SELECT+0x4c>
	case ICU_FALLING_EDGE :TIMER1_ICU_SET_FALLING_EDGE(); break;
    1c66:	ae e4       	ldi	r26, 0x4E	; 78
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ee e4       	ldi	r30, 0x4E	; 78
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	8f 7b       	andi	r24, 0xBF	; 191
    1c72:	8c 93       	st	X, r24
	default : break;

	}

}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <MTIMER1_ENABLE_ICU_INTERRUPT>:
void MTIMER1_ENABLE_ICU_INTERRUPT(void)
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62

	ENABLE_INPUT_CAPTURE_INTERRUPT();
    1c88:	a9 e5       	ldi	r26, 0x59	; 89
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e9 e5       	ldi	r30, 0x59	; 89
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	8c 93       	st	X, r24
}
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <MTIMER1_READ_ICU_VALUE>:
u16 MTIMER1_READ_ICU_VALUE(void)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
return ICR1;
    1ca4:	e6 e4       	ldi	r30, 0x46	; 70
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <MTIMER0_VoidInit>:
/********************************************/
void (*TIMER0_CALLBACK)(void)=NULL;
/********************************************/

void MTIMER0_VoidInit(void)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62

#elif TIMER_0_MODE==Timer0_CTC_Mode
/****************select wave generation mode as CTC Mode***************/

/****************set compare match CTC Mode***************/
Timer0_Enable_CTC_MODE();
    1cba:	a3 e5       	ldi	r26, 0x53	; 83
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e3 e5       	ldi	r30, 0x53	; 83
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	88 60       	ori	r24, 0x08	; 8
    1cc6:	8c 93       	st	X, r24
    1cc8:	a3 e5       	ldi	r26, 0x53	; 83
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e3 e5       	ldi	r30, 0x53	; 83
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8f 7b       	andi	r24, 0xBF	; 191
    1cd4:	8c 93       	st	X, r24

/************Enable TIMER0 ctc INTERRUPT***************/

TIMER0_ENABLE_COMPARE_MODE_MATCH_INTERRUPT();
    1cd6:	a9 e5       	ldi	r26, 0x59	; 89
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e9 e5       	ldi	r30, 0x59	; 89
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	82 60       	ori	r24, 0x02	; 2
    1ce2:	8c 93       	st	X, r24

OCR0=Compared_value;
    1ce4:	ec e5       	ldi	r30, 0x5C	; 92
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	8c e7       	ldi	r24, 0x7C	; 124
    1cea:	80 83       	st	Z, r24

#elif TIMER0_CLOCK_SOURCE_VALUE == TIMER0_PRESCALE_8_CLOCK_SOURCE
TIMER0_SELECT_CLOCK_SOURCE(TIMER0_PRESCALE_8_CLOCK_SOURCE);

#elif TIMER0_CLOCK_SOURCE_VALUE == TIMER0_PRESCALE_64_CLOCK_SOURCE
TIMER0_SELECT_CLOCK_SOURCE(TIMER0_PRESCALE_64_CLOCK_SOURCE);
    1cec:	a3 e5       	ldi	r26, 0x53	; 83
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e3 e5       	ldi	r30, 0x53	; 83
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	88 7f       	andi	r24, 0xF8	; 248
    1cf8:	83 60       	ori	r24, 0x03	; 3
    1cfa:	8c 93       	st	X, r24
#else
#error "INVALID CLOCK SETTINGS CHECK THE TIMER0_CNFG"
#endif
/*************select compare match putput mode**************/

Enable_Global_Interrupt();
    1cfc:	af e5       	ldi	r26, 0x5F	; 95
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	ef e5       	ldi	r30, 0x5F	; 95
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	80 68       	ori	r24, 0x80	; 128
    1d08:	8c 93       	st	X, r24

}
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <MTIMER0_VoidDisable>:


void MTIMER0_VoidDisable(void)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
	/****************disable clock*************/
	TIMER0_SELECT_CLOCK_SOURCE(TIMER0_DISABLE_CLOCK_SOURCE);
    1d18:	a3 e5       	ldi	r26, 0x53	; 83
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e3 e5       	ldi	r30, 0x53	; 83
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	88 7f       	andi	r24, 0xF8	; 248
    1d24:	8c 93       	st	X, r24

}
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <MTIMER0_VoidSetPreLoad>:
void MTIMER0_VoidSetPreLoad(u8 Preload)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	0f 92       	push	r0
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	89 83       	std	Y+1, r24	; 0x01
TCNT0=Preload;
    1d38:	e2 e5       	ldi	r30, 0x52	; 82
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	80 83       	st	Z, r24
}
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <TIMER_0_SET_DUTYCYCLE>:

void TIMER_0_SET_DUTYCYCLE(u8 Duty)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	0f 92       	push	r0
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	89 83       	std	Y+1, r24	; 0x01

 OCR0=Duty;
    1d54:	ec e5       	ldi	r30, 0x5C	; 92
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	80 83       	st	Z, r24
}
    1d5c:	0f 90       	pop	r0
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <TIMER0_SETCALLBACK>:


void TIMER0_SETCALLBACK(void(*ptr)(void))
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <TIMER0_SETCALLBACK+0x6>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_CALLBACK=ptr;
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	90 93 88 02 	sts	0x0288, r25
    1d7a:	80 93 87 02 	sts	0x0287, r24


}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <__vector_10>:
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1d88:	1f 92       	push	r1
    1d8a:	0f 92       	push	r0
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	0f 92       	push	r0
    1d90:	11 24       	eor	r1, r1
    1d92:	2f 93       	push	r18
    1d94:	3f 93       	push	r19
    1d96:	4f 93       	push	r20
    1d98:	5f 93       	push	r21
    1d9a:	6f 93       	push	r22
    1d9c:	7f 93       	push	r23
    1d9e:	8f 93       	push	r24
    1da0:	9f 93       	push	r25
    1da2:	af 93       	push	r26
    1da4:	bf 93       	push	r27
    1da6:	ef 93       	push	r30
    1da8:	ff 93       	push	r31
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CALLBACK();
    1db2:	e0 91 87 02 	lds	r30, 0x0287
    1db6:	f0 91 88 02 	lds	r31, 0x0288
    1dba:	09 95       	icall

}
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	ff 91       	pop	r31
    1dc2:	ef 91       	pop	r30
    1dc4:	bf 91       	pop	r27
    1dc6:	af 91       	pop	r26
    1dc8:	9f 91       	pop	r25
    1dca:	8f 91       	pop	r24
    1dcc:	7f 91       	pop	r23
    1dce:	6f 91       	pop	r22
    1dd0:	5f 91       	pop	r21
    1dd2:	4f 91       	pop	r20
    1dd4:	3f 91       	pop	r19
    1dd6:	2f 91       	pop	r18
    1dd8:	0f 90       	pop	r0
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	0f 90       	pop	r0
    1dde:	1f 90       	pop	r1
    1de0:	18 95       	reti

00001de2 <MSPI_Init>:
/***
 * @brief this function is used to initialize the spi for both master and slave
 * @param ptr is the call back function if interrupt is used if not just send (NULL)
 */
void MSPI_Init(void (*ptr)(void))
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <MSPI_Init+0x6>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
/**********SET PIN DIRECTION DEPEND ON CONFIGURATIONS IN CNFG.h*************/
SET_DIRECTIONS();
    1df0:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <SET_DIRECTIONS>
#elif SPI_MASTER_CLOCK_SPEED_PRESCALER==SPI_FOSC_16
SPI_SET_FOSC_16();
#elif SPI_MASTER_CLOCK_SPEED_PRESCALER==SPI_FOSC_64
SPI_SET_FOSC_64();
#elif SPI_MASTER_CLOCK_SPEED_PRESCALER==SPI_FOSC_128
SPI_SET_FOSC_128();
    1df4:	ad e2       	ldi	r26, 0x2D	; 45
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	ed e2       	ldi	r30, 0x2D	; 45
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	81 60       	ori	r24, 0x01	; 1
    1e00:	8c 93       	st	X, r24
    1e02:	ad e2       	ldi	r26, 0x2D	; 45
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	ed e2       	ldi	r30, 0x2D	; 45
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	82 60       	ori	r24, 0x02	; 2
    1e0e:	8c 93       	st	X, r24
    1e10:	ae e2       	ldi	r26, 0x2E	; 46
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	ee e2       	ldi	r30, 0x2E	; 46
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8e 7f       	andi	r24, 0xFE	; 254
    1e1c:	8c 93       	st	X, r24
#elif SPI_MODE==SLAVE
SPI_ENABLE_SLAVE_MODE();
#else
#error "WRONG SPI MODE"
#endif
SPI_ENABLE_MASTER_MODE();
    1e1e:	ad e2       	ldi	r26, 0x2D	; 45
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	ed e2       	ldi	r30, 0x2D	; 45
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	80 61       	ori	r24, 0x10	; 16
    1e2a:	8c 93       	st	X, r24

/*********select LSB***********/
#if SPI_SEND_FORMAT==SPI_SEND_LSB_BIT_FIRST
SPI_SEND_LSB_FIRST();
    1e2c:	ad e2       	ldi	r26, 0x2D	; 45
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ed e2       	ldi	r30, 0x2D	; 45
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	80 62       	ori	r24, 0x20	; 32
    1e38:	8c 93       	st	X, r24
#error "WRONG SPI DATA FORMAT"
#endif

/***********select clock polarity as leading edge raising*********/
#if SPI_CLOCK_POLARITY==SPI_ENABLE_IDLE_LOGIC_LOW
SPI_ENABLE_ILDE_LOW();
    1e3a:	ad e2       	ldi	r26, 0x2D	; 45
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	ed e2       	ldi	r30, 0x2D	; 45
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	87 7f       	andi	r24, 0xF7	; 247
    1e46:	8c 93       	st	X, r24
#endif
/***********select clock phase as leading Setup*********/
#if SPI_SAMPLE_CNFG==SPI_SAMPLE_AT_TRAILLING_EDGE
SPI_SAMPLE_AT_TRAILLING();
#elif SPI_SAMPLE_CNFG==SPI_SAMPLE_AT_LEADING_EDGE
SPI_SAMPLE_AT_LEADING();
    1e48:	ad e2       	ldi	r26, 0x2D	; 45
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	ed e2       	ldi	r30, 0x2D	; 45
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	8b 7f       	andi	r24, 0xFB	; 251
    1e54:	8c 93       	st	X, r24
/**********enable the global interrupt************/
Enable_Global_Interrupt();
/*************enable SPI interrupt****************/
SPI_ENABLE_INTERRUPT();
#elif SPI_INTERRUPT==SPI_INTERRUPT_DISABLE
SPI_DISABLE_INTERRUPT();
    1e56:	ad e2       	ldi	r26, 0x2D	; 45
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	ed e2       	ldi	r30, 0x2D	; 45
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	8f 77       	andi	r24, 0x7F	; 127
    1e62:	8c 93       	st	X, r24
#else
#error "WRONG SPI INTERRUPT CNFG"
#endif
//clearing the wcol
/*********Enable SPi***********/
SPI_ENABLE();
    1e64:	ad e2       	ldi	r26, 0x2D	; 45
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	ed e2       	ldi	r30, 0x2D	; 45
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	80 64       	ori	r24, 0x40	; 64
    1e70:	8c 93       	st	X, r24
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <MSPI_TRANSCIEVE_BLOCKING>:
 * brief this function is used to send and receive data neither you act as master or slave (blocking means with out interrupts)
 * @param Data is the data the device going to send
 * @return the value which is received
 */
u8 MSPI_TRANSCIEVE_BLOCKING(u8 Data)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	0f 92       	push	r0
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	89 83       	std	Y+1, r24	; 0x01
SPDR=Data;
    1e88:	ef e2       	ldi	r30, 0x2F	; 47
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	80 83       	st	Z, r24
while(!(GET_BIT(SPSR,SPSR_SPIF)));
    1e90:	ee e2       	ldi	r30, 0x2E	; 46
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	88 23       	and	r24, r24
    1e98:	dc f7       	brge	.-10     	; 0x1e90 <MSPI_TRANSCIEVE_BLOCKING+0x14>
return SPDR;
    1e9a:	ef e2       	ldi	r30, 0x2F	; 47
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
}
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <SPI_TRANSCIEVE>:
 * @brief this function is used to transcieve data using interrupt
 * @param Data is data going to send
 * @return return the received data
 */
u8 SPI_TRANSCIEVE(u8 Data)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <SPI_TRANSCIEVE+0x6>
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	8a 83       	std	Y+2, r24	; 0x02
u8 L_READ=0;
    1eb4:	19 82       	std	Y+1, r1	; 0x01
//interrupt happen when transmitting first time is already happen
L_READ=SPDR;
    1eb6:	ef e2       	ldi	r30, 0x2F	; 47
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	89 83       	std	Y+1, r24	; 0x01
//after we read the received data we set the new data into the data line
SPDR=Data;
    1ebe:	ef e2       	ldi	r30, 0x2F	; 47
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	80 83       	st	Z, r24
return L_READ;
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <SPI_INIT>:
void SPI_INIT(void)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62

	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<5)|(1<<7);
    1eda:	e7 e3       	ldi	r30, 0x37	; 55
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 ea       	ldi	r24, 0xA0	; 160
    1ee0:	80 83       	st	Z, r24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPCR_SPE)|(1<<SPCR_MSTR)|(1<<SPCR_SPR0);
    1ee2:	ed e2       	ldi	r30, 0x2D	; 45
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	81 e5       	ldi	r24, 0x51	; 81
    1ee8:	80 83       	st	Z, r24



}
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <SET_DIRECTIONS>:

/***
 * @brief this function is used to initiallize the direction of pins master or slave
 */
static inline void SET_DIRECTIONS(void)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	switch(SPI_MODE)
	{
	case MASTER :
				//set the SCK as OUTPUT
				DIO_PIN_DIRECTION_INIT_M(PORTB_,pin7,DIRECTION_OUTPUT);
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	67 e0       	ldi	r22, 0x07	; 7
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 f6 12 	call	0x25ec	; 0x25ec <DIO_PIN_DIRECTION_INIT_M>
				//set the MOSI as OUTPUT
				DIO_PIN_DIRECTION_INIT_M(PORTB_,pin5,DIRECTION_OUTPUT);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	65 e0       	ldi	r22, 0x05	; 5
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 f6 12 	call	0x25ec	; 0x25ec <DIO_PIN_DIRECTION_INIT_M>
				//set the SS as output
				DIO_PIN_DIRECTION_INIT_M(PORTB_,pin4,DIRECTION_OUTPUT);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	64 e0       	ldi	r22, 0x04	; 4
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 f6 12 	call	0x25ec	; 0x25ec <DIO_PIN_DIRECTION_INIT_M>
				//set the MISO as INPUT
				DIO_PIN_DIRECTION_INIT_M(PORTB_,pin6,DIRECTION_INPUT);
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	66 e0       	ldi	r22, 0x06	; 6
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <DIO_PIN_DIRECTION_INIT_M>
				//set the MISO as DIRECTION_OUTPUT
				DIO_PIN_DIRECTION_INIT_M(PORTB_,pin6,DIRECTION_OUTPUT);
				break;
	default :break;
	}
}
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <__vector_12>:
 */


void __vector_12(void)  __attribute__((signal));
void __vector_12(void)
{
    1f26:	1f 92       	push	r1
    1f28:	0f 92       	push	r0
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	0f 92       	push	r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	2f 93       	push	r18
    1f32:	3f 93       	push	r19
    1f34:	4f 93       	push	r20
    1f36:	5f 93       	push	r21
    1f38:	6f 93       	push	r22
    1f3a:	7f 93       	push	r23
    1f3c:	8f 93       	push	r24
    1f3e:	9f 93       	push	r25
    1f40:	af 93       	push	r26
    1f42:	bf 93       	push	r27
    1f44:	ef 93       	push	r30
    1f46:	ff 93       	push	r31
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62

	UART_SPI_CALLBACK();
    1f50:	e0 91 89 02 	lds	r30, 0x0289
    1f54:	f0 91 8a 02 	lds	r31, 0x028A
    1f58:	09 95       	icall
}
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	ff 91       	pop	r31
    1f60:	ef 91       	pop	r30
    1f62:	bf 91       	pop	r27
    1f64:	af 91       	pop	r26
    1f66:	9f 91       	pop	r25
    1f68:	8f 91       	pop	r24
    1f6a:	7f 91       	pop	r23
    1f6c:	6f 91       	pop	r22
    1f6e:	5f 91       	pop	r21
    1f70:	4f 91       	pop	r20
    1f72:	3f 91       	pop	r19
    1f74:	2f 91       	pop	r18
    1f76:	0f 90       	pop	r0
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	0f 90       	pop	r0
    1f7c:	1f 90       	pop	r1
    1f7e:	18 95       	reti

00001f80 <MWDT_Start>:
#include"../std_types.h"
#include"../macros.h"
#include"MCAL_WDT_REG.h"
#include"MCAL_WDT_INT.h"
	void MWDT_Start(u8 _VAL)
	{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	0f 92       	push	r0
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	89 83       	std	Y+1, r24	; 0x01

		Watch_Dog_Enable();
    1f8c:	a1 e4       	ldi	r26, 0x41	; 65
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e1 e4       	ldi	r30, 0x41	; 65
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	88 60       	ori	r24, 0x08	; 8
    1f98:	8c 93       	st	X, r24

		WDTCR=((WDTCR&0xF8)|(_VAL));
    1f9a:	a1 e4       	ldi	r26, 0x41	; 65
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e1 e4       	ldi	r30, 0x41	; 65
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	98 2f       	mov	r25, r24
    1fa6:	98 7f       	andi	r25, 0xF8	; 248
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	89 2b       	or	r24, r25
    1fac:	8c 93       	st	X, r24
	}
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <MWDT_DISABLE>:

	   void MWDT_DISABLE(void)
	   {
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62

		   SET_BIT(WDTCR,WDTCR_WDTOE);
    1fbe:	a1 e4       	ldi	r26, 0x41	; 65
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e1 e4       	ldi	r30, 0x41	; 65
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	80 61       	ori	r24, 0x10	; 16
    1fca:	8c 93       	st	X, r24
		   WDT_DISABLE_STEP_2();
    1fcc:	a1 e4       	ldi	r26, 0x41	; 65
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e1 e4       	ldi	r30, 0x41	; 65
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	88 60       	ori	r24, 0x08	; 8
    1fd8:	8c 93       	st	X, r24
	...
		   asm("nop");
		   asm("nop");
		   asm("nop");
		   asm("nop");
		   WDT_DISABLE_STEP_3();
    1fe2:	a1 e4       	ldi	r26, 0x41	; 65
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e1 e4       	ldi	r30, 0x41	; 65
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	87 7f       	andi	r24, 0xF7	; 247
    1fee:	8c 93       	st	X, r24

	   }
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <I2C_INIT>:
  * @param I2C_Callback_Ptr  is a ptr to the call back function
  * if you have interrupt pass the address of ur called function
  * if you have no interrupt SET it by (NULL)
  */
void I2C_INIT(void(*I2C_Callback_Ptr)(void))
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <I2C_INIT+0x6>
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	9a 83       	std	Y+2, r25	; 0x02
    2002:	89 83       	std	Y+1, r24	; 0x01
	/*****SET MASTER |SLAVE ADDRESS */
TWAR=I2C_ADDRESS<<1;
    2004:	e2 e2       	ldi	r30, 0x22	; 34
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	80 83       	st	Z, r24
/*set I2C SPEED*/
I2C_SETSPEED();
    200c:	0e 94 8d 10 	call	0x211a	; 0x211a <I2C_SETSPEED>
/*********ENABLE ACK***********/
I2C_ENABLE_GENERATING_ACK();
    2010:	a6 e5       	ldi	r26, 0x56	; 86
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e6 e5       	ldi	r30, 0x56	; 86
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	80 64       	ori	r24, 0x40	; 64
    201c:	8c 93       	st	X, r24
I2C_CALLBACK=I2C_Callback_Ptr;
/*enable the i2c interrupt*/
I2C_INTERRUPT_ENABLE();
#endif
/**********ENABLE I2C**********/
I2C_ENABLE();
    201e:	a6 e5       	ldi	r26, 0x56	; 86
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e6 e5       	ldi	r30, 0x56	; 86
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	84 60       	ori	r24, 0x04	; 4
    202a:	8c 93       	st	X, r24
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <I2C_START>:

/***
 * @brief this function is used to send start condition on i2C bus
 */
void I2C_START(void)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
/*SET TWSTA &TWEN &TWINT to start condition*/
I2C_SEND_START();
    203e:	e6 e5       	ldi	r30, 0x56	; 86
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	84 ea       	ldi	r24, 0xA4	; 164
    2044:	80 83       	st	Z, r24
//busy wait
while(I2C_READ_FLAG()==0);
    2046:	e6 e5       	ldi	r30, 0x56	; 86
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	88 23       	and	r24, r24
    204e:	dc f7       	brge	.-10     	; 0x2046 <I2C_START+0x10>
}
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <I2C_WRITE>:
/***
 * @brief this function is used to write data, address on i2C bus
 * @param Data
 */
void I2C_WRITE(u8 Data)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	0f 92       	push	r0
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	89 83       	std	Y+1, r24	; 0x01
/*SET DATA | Address to TWD*/
TWDR=Data;
    2062:	e3 e2       	ldi	r30, 0x23	; 35
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	80 83       	st	Z, r24
/*CLEAR  start condition*/
I2C_CLEAR_START_LOGIC();
    206a:	a6 e5       	ldi	r26, 0x56	; 86
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e6 e5       	ldi	r30, 0x56	; 86
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8f 7d       	andi	r24, 0xDF	; 223
    2076:	8c 93       	st	X, r24
/*CLEAR FLAG*/
I2C_CLEAR_FLAG();
    2078:	a6 e5       	ldi	r26, 0x56	; 86
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e6 e5       	ldi	r30, 0x56	; 86
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	80 68       	ori	r24, 0x80	; 128
    2084:	8c 93       	st	X, r24
/*****ENABLE I2C********/
I2C_ENABLE();
    2086:	a6 e5       	ldi	r26, 0x56	; 86
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e6 e5       	ldi	r30, 0x56	; 86
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	84 60       	ori	r24, 0x04	; 4
    2092:	8c 93       	st	X, r24
/*busy wait*/
while(I2C_READ_FLAG()==0);
    2094:	e6 e5       	ldi	r30, 0x56	; 86
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	88 23       	and	r24, r24
    209c:	dc f7       	brge	.-10     	; 0x2094 <I2C_WRITE+0x3e>


}
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <I2C_READ_WITH_ACK>:
/***
 * @brief this function is used to read the data from i2C bus
 * @return
 */
u8 I2C_READ_WITH_ACK(void)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
	/*CLEAR  start condition*/
	I2C_CLEAR_START_LOGIC();
    20ae:	a6 e5       	ldi	r26, 0x56	; 86
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e6 e5       	ldi	r30, 0x56	; 86
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	8f 7d       	andi	r24, 0xDF	; 223
    20ba:	8c 93       	st	X, r24
	/*CLEAR FLAG*/
	I2C_CLEAR_FLAG();
    20bc:	a6 e5       	ldi	r26, 0x56	; 86
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e6 e5       	ldi	r30, 0x56	; 86
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	80 68       	ori	r24, 0x80	; 128
    20c8:	8c 93       	st	X, r24
	/*****ENABLE I2C********/
	I2C_ENABLE();
    20ca:	a6 e5       	ldi	r26, 0x56	; 86
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e6 e5       	ldi	r30, 0x56	; 86
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	84 60       	ori	r24, 0x04	; 4
    20d6:	8c 93       	st	X, r24
	/*busy wait*/
	while(I2C_READ_FLAG()==0);
    20d8:	e6 e5       	ldi	r30, 0x56	; 86
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	88 23       	and	r24, r24
    20e0:	dc f7       	brge	.-10     	; 0x20d8 <I2C_READ_WITH_ACK+0x32>
return TWDR;
    20e2:	e3 e2       	ldi	r30, 0x23	; 35
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
}
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <I2C_STOP>:

/***
 * @brief this function is used to Send STOP ON i2C bus
 */
void I2C_STOP(void)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	I2C_SEND_STOP();
    20f6:	e6 e5       	ldi	r30, 0x56	; 86
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	84 e9       	ldi	r24, 0x94	; 148
    20fc:	80 83       	st	Z, r24

}
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <I2C_GETSTATUS>:
u8 I2C_GETSTATUS(void)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
return (TWSR&0xF8);
    210c:	e1 e2       	ldi	r30, 0x21	; 33
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	88 7f       	andi	r24, 0xF8	; 248
}
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <I2C_SETSPEED>:


 static inline void I2C_SETSPEED(void)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
#if I2C_SPEED_MODE==I2C_STANDART_MODE_400kb_s
I2C_PRESCALER_DIV_1();
TWBR=2;
#elif I2C_SPEED_MODE==I2C_STANDART_MODE_100kb_s
I2C_PRESCALER_DIV_4();
    2122:	a1 e2       	ldi	r26, 0x21	; 33
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e1 e2       	ldi	r30, 0x21	; 33
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	81 60       	ori	r24, 0x01	; 1
    212e:	8c 93       	st	X, r24
    2130:	a1 e2       	ldi	r26, 0x21	; 33
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e1 e2       	ldi	r30, 0x21	; 33
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	8d 7f       	andi	r24, 0xFD	; 253
    213c:	8c 93       	st	X, r24
TWBR=2;
    213e:	e0 e2       	ldi	r30, 0x20	; 32
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	80 83       	st	Z, r24
#else
#error "INVALID PRESCALER FOR I2C"


#endif
}
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <__vector_19>:

 void __vector_19(void)  __attribute__((signal));
 void __vector_19(void)
 {
    214c:	1f 92       	push	r1
    214e:	0f 92       	push	r0
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	0f 92       	push	r0
    2154:	11 24       	eor	r1, r1
    2156:	2f 93       	push	r18
    2158:	3f 93       	push	r19
    215a:	4f 93       	push	r20
    215c:	5f 93       	push	r21
    215e:	6f 93       	push	r22
    2160:	7f 93       	push	r23
    2162:	8f 93       	push	r24
    2164:	9f 93       	push	r25
    2166:	af 93       	push	r26
    2168:	bf 93       	push	r27
    216a:	ef 93       	push	r30
    216c:	ff 93       	push	r31
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
 	I2C_CALLBACK();
    2176:	e0 91 8b 02 	lds	r30, 0x028B
    217a:	f0 91 8c 02 	lds	r31, 0x028C
    217e:	09 95       	icall
 }
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	ff 91       	pop	r31
    2186:	ef 91       	pop	r30
    2188:	bf 91       	pop	r27
    218a:	af 91       	pop	r26
    218c:	9f 91       	pop	r25
    218e:	8f 91       	pop	r24
    2190:	7f 91       	pop	r23
    2192:	6f 91       	pop	r22
    2194:	5f 91       	pop	r21
    2196:	4f 91       	pop	r20
    2198:	3f 91       	pop	r19
    219a:	2f 91       	pop	r18
    219c:	0f 90       	pop	r0
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	0f 90       	pop	r0
    21a2:	1f 90       	pop	r1
    21a4:	18 95       	reti

000021a6 <MEXTI0_voidInit>:




void MEXTI0_voidInit(void)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
	Enable_Global_Interrupt();
    21ae:	af e5       	ldi	r26, 0x5F	; 95
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	ef e5       	ldi	r30, 0x5F	; 95
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	80 68       	ori	r24, 0x80	; 128
    21ba:	8c 93       	st	X, r24

	Enable_INT0_Interrupt();
    21bc:	ab e5       	ldi	r26, 0x5B	; 91
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	eb e5       	ldi	r30, 0x5B	; 91
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	80 64       	ori	r24, 0x40	; 64
    21c8:	8c 93       	st	X, r24



#elif INT0_SENSE_MODE==EXT_INT_FALLING_EDGE

INT0_Sense_Falling_Edge();
    21ca:	a5 e5       	ldi	r26, 0x55	; 85
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e5 e5       	ldi	r30, 0x55	; 85
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	82 60       	ori	r24, 0x02	; 2
    21d6:	8c 93       	st	X, r24
    21d8:	a5 e5       	ldi	r26, 0x55	; 85
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e5 e5       	ldi	r30, 0x55	; 85
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	8e 7f       	andi	r24, 0xFE	; 254
    21e4:	8c 93       	st	X, r24
#error "INT0 Sense Control Invalid Mode"


#endif

}
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <MEXTI1_voidInit>:
void MEXTI1_voidInit(void)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	Enable_Global_Interrupt();
    21f4:	af e5       	ldi	r26, 0x5F	; 95
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	ef e5       	ldi	r30, 0x5F	; 95
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	80 68       	ori	r24, 0x80	; 128
    2200:	8c 93       	st	X, r24

	Enable_INT1_Interrupt();
    2202:	ab e5       	ldi	r26, 0x5B	; 91
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	eb e5       	ldi	r30, 0x5B	; 91
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	80 68       	ori	r24, 0x80	; 128
    220e:	8c 93       	st	X, r24



#elif INT1_SENSE_MODE==EXT_INT_FALLING_EDGE

INT1_Sense_Falling_Edge();
    2210:	a5 e5       	ldi	r26, 0x55	; 85
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e5 e5       	ldi	r30, 0x55	; 85
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	88 60       	ori	r24, 0x08	; 8
    221c:	8c 93       	st	X, r24
    221e:	a5 e5       	ldi	r26, 0x55	; 85
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e5 e5       	ldi	r30, 0x55	; 85
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	8b 7f       	andi	r24, 0xFB	; 251
    222a:	8c 93       	st	X, r24
#error "INT1 Sense Control Invalid Mode"


#endif

}
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <MEXTI2_voidInit>:
void MEXTI2_voidInit(void)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
	Enable_Global_Interrupt();
    223a:	af e5       	ldi	r26, 0x5F	; 95
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	ef e5       	ldi	r30, 0x5F	; 95
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	80 68       	ori	r24, 0x80	; 128
    2246:	8c 93       	st	X, r24

	Enable_INT2_Interrupt();
    2248:	ab e5       	ldi	r26, 0x5B	; 91
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	eb e5       	ldi	r30, 0x5B	; 91
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	80 62       	ori	r24, 0x20	; 32
    2254:	8c 93       	st	X, r24



#elif INT2_SENSE_MODE==EXT_INT_FALLING_EDGE

INT2_Sense_Falling_Edge();
    2256:	a4 e5       	ldi	r26, 0x54	; 84
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e4 e5       	ldi	r30, 0x54	; 84
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	8f 7b       	andi	r24, 0xBF	; 191
    2262:	8c 93       	st	X, r24
#error "INT2 Sense Control Invalid Mode"


#endif

}
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <EXT_CALLBACK>:




void EXT_CALLBACK(u8 INT_NUMBER,void (*ptr)(void))
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <EXT_CALLBACK+0x6>
    2270:	00 d0       	rcall	.+0      	; 0x2272 <EXT_CALLBACK+0x8>
    2272:	0f 92       	push	r0
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	7b 83       	std	Y+3, r23	; 0x03
    227c:	6a 83       	std	Y+2, r22	; 0x02
switch(INT_NUMBER)
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	3d 83       	std	Y+5, r19	; 0x05
    2286:	2c 83       	std	Y+4, r18	; 0x04
    2288:	8c 81       	ldd	r24, Y+4	; 0x04
    228a:	9d 81       	ldd	r25, Y+5	; 0x05
    228c:	82 30       	cpi	r24, 0x02	; 2
    228e:	91 05       	cpc	r25, r1
    2290:	89 f0       	breq	.+34     	; 0x22b4 <EXT_CALLBACK+0x4a>
    2292:	2c 81       	ldd	r18, Y+4	; 0x04
    2294:	3d 81       	ldd	r19, Y+5	; 0x05
    2296:	23 30       	cpi	r18, 0x03	; 3
    2298:	31 05       	cpc	r19, r1
    229a:	99 f0       	breq	.+38     	; 0x22c2 <EXT_CALLBACK+0x58>
    229c:	8c 81       	ldd	r24, Y+4	; 0x04
    229e:	9d 81       	ldd	r25, Y+5	; 0x05
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	91 05       	cpc	r25, r1
    22a4:	a1 f4       	brne	.+40     	; 0x22ce <EXT_CALLBACK+0x64>
{
case INT0 : EXT_INT0=ptr; break;
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	9b 81       	ldd	r25, Y+3	; 0x03
    22aa:	90 93 8e 02 	sts	0x028E, r25
    22ae:	80 93 8d 02 	sts	0x028D, r24
    22b2:	0d c0       	rjmp	.+26     	; 0x22ce <EXT_CALLBACK+0x64>
case INT1 :EXT_INT1=ptr;break;
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	9b 81       	ldd	r25, Y+3	; 0x03
    22b8:	90 93 90 02 	sts	0x0290, r25
    22bc:	80 93 8f 02 	sts	0x028F, r24
    22c0:	06 c0       	rjmp	.+12     	; 0x22ce <EXT_CALLBACK+0x64>
case INT2 :EXT_INT2=ptr;break;
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	9b 81       	ldd	r25, Y+3	; 0x03
    22c6:	90 93 92 02 	sts	0x0292, r25
    22ca:	80 93 91 02 	sts	0x0291, r24
default :break;
}


}
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <__vector_1>:

void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
    22de:	1f 92       	push	r1
    22e0:	0f 92       	push	r0
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	0f 92       	push	r0
    22e6:	11 24       	eor	r1, r1
    22e8:	2f 93       	push	r18
    22ea:	3f 93       	push	r19
    22ec:	4f 93       	push	r20
    22ee:	5f 93       	push	r21
    22f0:	6f 93       	push	r22
    22f2:	7f 93       	push	r23
    22f4:	8f 93       	push	r24
    22f6:	9f 93       	push	r25
    22f8:	af 93       	push	r26
    22fa:	bf 93       	push	r27
    22fc:	ef 93       	push	r30
    22fe:	ff 93       	push	r31
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
EXT_INT0();
    2308:	e0 91 8d 02 	lds	r30, 0x028D
    230c:	f0 91 8e 02 	lds	r31, 0x028E
    2310:	09 95       	icall
}
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	ff 91       	pop	r31
    2318:	ef 91       	pop	r30
    231a:	bf 91       	pop	r27
    231c:	af 91       	pop	r26
    231e:	9f 91       	pop	r25
    2320:	8f 91       	pop	r24
    2322:	7f 91       	pop	r23
    2324:	6f 91       	pop	r22
    2326:	5f 91       	pop	r21
    2328:	4f 91       	pop	r20
    232a:	3f 91       	pop	r19
    232c:	2f 91       	pop	r18
    232e:	0f 90       	pop	r0
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	0f 90       	pop	r0
    2334:	1f 90       	pop	r1
    2336:	18 95       	reti

00002338 <__vector_2>:
void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
    2338:	1f 92       	push	r1
    233a:	0f 92       	push	r0
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	0f 92       	push	r0
    2340:	11 24       	eor	r1, r1
    2342:	2f 93       	push	r18
    2344:	3f 93       	push	r19
    2346:	4f 93       	push	r20
    2348:	5f 93       	push	r21
    234a:	6f 93       	push	r22
    234c:	7f 93       	push	r23
    234e:	8f 93       	push	r24
    2350:	9f 93       	push	r25
    2352:	af 93       	push	r26
    2354:	bf 93       	push	r27
    2356:	ef 93       	push	r30
    2358:	ff 93       	push	r31
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62

EXT_INT1();
    2362:	e0 91 8f 02 	lds	r30, 0x028F
    2366:	f0 91 90 02 	lds	r31, 0x0290
    236a:	09 95       	icall
}
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	ff 91       	pop	r31
    2372:	ef 91       	pop	r30
    2374:	bf 91       	pop	r27
    2376:	af 91       	pop	r26
    2378:	9f 91       	pop	r25
    237a:	8f 91       	pop	r24
    237c:	7f 91       	pop	r23
    237e:	6f 91       	pop	r22
    2380:	5f 91       	pop	r21
    2382:	4f 91       	pop	r20
    2384:	3f 91       	pop	r19
    2386:	2f 91       	pop	r18
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	0f 90       	pop	r0
    238e:	1f 90       	pop	r1
    2390:	18 95       	reti

00002392 <__vector_3>:
void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
    2392:	1f 92       	push	r1
    2394:	0f 92       	push	r0
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	0f 92       	push	r0
    239a:	11 24       	eor	r1, r1
    239c:	2f 93       	push	r18
    239e:	3f 93       	push	r19
    23a0:	4f 93       	push	r20
    23a2:	5f 93       	push	r21
    23a4:	6f 93       	push	r22
    23a6:	7f 93       	push	r23
    23a8:	8f 93       	push	r24
    23aa:	9f 93       	push	r25
    23ac:	af 93       	push	r26
    23ae:	bf 93       	push	r27
    23b0:	ef 93       	push	r30
    23b2:	ff 93       	push	r31
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
EXT_INT2();
    23bc:	e0 91 91 02 	lds	r30, 0x0291
    23c0:	f0 91 92 02 	lds	r31, 0x0292
    23c4:	09 95       	icall
}
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	ff 91       	pop	r31
    23cc:	ef 91       	pop	r30
    23ce:	bf 91       	pop	r27
    23d0:	af 91       	pop	r26
    23d2:	9f 91       	pop	r25
    23d4:	8f 91       	pop	r24
    23d6:	7f 91       	pop	r23
    23d8:	6f 91       	pop	r22
    23da:	5f 91       	pop	r21
    23dc:	4f 91       	pop	r20
    23de:	3f 91       	pop	r19
    23e0:	2f 91       	pop	r18
    23e2:	0f 90       	pop	r0
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	0f 90       	pop	r0
    23e8:	1f 90       	pop	r1
    23ea:	18 95       	reti

000023ec <DIO_PIN_WRITE_LOGIC_M>:

/**********using macros ***********/


void DIO_PIN_WRITE_LOGIC_M(u8 port ,u8 pin,u8 Pin_Logic)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	27 97       	sbiw	r28, 0x07	; 7
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	89 83       	std	Y+1, r24	; 0x01
    2402:	6a 83       	std	Y+2, r22	; 0x02
    2404:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN_HIGH==Pin_Logic)
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	81 30       	cpi	r24, 0x01	; 1
    240a:	09 f0       	breq	.+2      	; 0x240e <DIO_PIN_WRITE_LOGIC_M+0x22>
    240c:	6f c0       	rjmp	.+222    	; 0x24ec <DIO_PIN_WRITE_LOGIC_M+0x100>
	{
		switch(port)
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	3f 83       	std	Y+7, r19	; 0x07
    2416:	2e 83       	std	Y+6, r18	; 0x06
    2418:	8e 81       	ldd	r24, Y+6	; 0x06
    241a:	9f 81       	ldd	r25, Y+7	; 0x07
    241c:	81 30       	cpi	r24, 0x01	; 1
    241e:	91 05       	cpc	r25, r1
    2420:	49 f1       	breq	.+82     	; 0x2474 <DIO_PIN_WRITE_LOGIC_M+0x88>
    2422:	2e 81       	ldd	r18, Y+6	; 0x06
    2424:	3f 81       	ldd	r19, Y+7	; 0x07
    2426:	22 30       	cpi	r18, 0x02	; 2
    2428:	31 05       	cpc	r19, r1
    242a:	2c f4       	brge	.+10     	; 0x2436 <DIO_PIN_WRITE_LOGIC_M+0x4a>
    242c:	8e 81       	ldd	r24, Y+6	; 0x06
    242e:	9f 81       	ldd	r25, Y+7	; 0x07
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	61 f0       	breq	.+24     	; 0x244c <DIO_PIN_WRITE_LOGIC_M+0x60>
    2434:	d2 c0       	rjmp	.+420    	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
    2436:	2e 81       	ldd	r18, Y+6	; 0x06
    2438:	3f 81       	ldd	r19, Y+7	; 0x07
    243a:	22 30       	cpi	r18, 0x02	; 2
    243c:	31 05       	cpc	r19, r1
    243e:	71 f1       	breq	.+92     	; 0x249c <DIO_PIN_WRITE_LOGIC_M+0xb0>
    2440:	8e 81       	ldd	r24, Y+6	; 0x06
    2442:	9f 81       	ldd	r25, Y+7	; 0x07
    2444:	83 30       	cpi	r24, 0x03	; 3
    2446:	91 05       	cpc	r25, r1
    2448:	e9 f1       	breq	.+122    	; 0x24c4 <DIO_PIN_WRITE_LOGIC_M+0xd8>
    244a:	c7 c0       	rjmp	.+398    	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		{

		case PORTA_:  SET_BIT(PORTA,pin); break;
    244c:	ab e3       	ldi	r26, 0x3B	; 59
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	eb e3       	ldi	r30, 0x3B	; 59
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	48 2f       	mov	r20, r24
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	28 2f       	mov	r18, r24
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	02 2e       	mov	r0, r18
    2464:	02 c0       	rjmp	.+4      	; 0x246a <DIO_PIN_WRITE_LOGIC_M+0x7e>
    2466:	88 0f       	add	r24, r24
    2468:	99 1f       	adc	r25, r25
    246a:	0a 94       	dec	r0
    246c:	e2 f7       	brpl	.-8      	; 0x2466 <DIO_PIN_WRITE_LOGIC_M+0x7a>
    246e:	84 2b       	or	r24, r20
    2470:	8c 93       	st	X, r24
    2472:	b3 c0       	rjmp	.+358    	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		case PORTB_ : SET_BIT(PORTB,pin); break;
    2474:	a8 e3       	ldi	r26, 0x38	; 56
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e8 e3       	ldi	r30, 0x38	; 56
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	48 2f       	mov	r20, r24
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	02 2e       	mov	r0, r18
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <DIO_PIN_WRITE_LOGIC_M+0xa6>
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	0a 94       	dec	r0
    2494:	e2 f7       	brpl	.-8      	; 0x248e <DIO_PIN_WRITE_LOGIC_M+0xa2>
    2496:	84 2b       	or	r24, r20
    2498:	8c 93       	st	X, r24
    249a:	9f c0       	rjmp	.+318    	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		case PORTC_ : SET_BIT(PORTC,pin); break;
    249c:	a5 e3       	ldi	r26, 0x35	; 53
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e5 e3       	ldi	r30, 0x35	; 53
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	48 2f       	mov	r20, r24
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	28 2f       	mov	r18, r24
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	02 2e       	mov	r0, r18
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <DIO_PIN_WRITE_LOGIC_M+0xce>
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	0a 94       	dec	r0
    24bc:	e2 f7       	brpl	.-8      	; 0x24b6 <DIO_PIN_WRITE_LOGIC_M+0xca>
    24be:	84 2b       	or	r24, r20
    24c0:	8c 93       	st	X, r24
    24c2:	8b c0       	rjmp	.+278    	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		case PORTD_ : SET_BIT(PORTD,pin); break;
    24c4:	a2 e3       	ldi	r26, 0x32	; 50
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e2 e3       	ldi	r30, 0x32	; 50
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	48 2f       	mov	r20, r24
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	02 2e       	mov	r0, r18
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <DIO_PIN_WRITE_LOGIC_M+0xf6>
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	0a 94       	dec	r0
    24e4:	e2 f7       	brpl	.-8      	; 0x24de <DIO_PIN_WRITE_LOGIC_M+0xf2>
    24e6:	84 2b       	or	r24, r20
    24e8:	8c 93       	st	X, r24
    24ea:	77 c0       	rjmp	.+238    	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		default  	: break;
		}
	}
	else if(PIN_LOW==Pin_Logic)
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	88 23       	and	r24, r24
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <DIO_PIN_WRITE_LOGIC_M+0x108>
    24f2:	73 c0       	rjmp	.+230    	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
	{
		switch(port)
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	3d 83       	std	Y+5, r19	; 0x05
    24fc:	2c 83       	std	Y+4, r18	; 0x04
    24fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2500:	9d 81       	ldd	r25, Y+5	; 0x05
    2502:	81 30       	cpi	r24, 0x01	; 1
    2504:	91 05       	cpc	r25, r1
    2506:	59 f1       	breq	.+86     	; 0x255e <DIO_PIN_WRITE_LOGIC_M+0x172>
    2508:	2c 81       	ldd	r18, Y+4	; 0x04
    250a:	3d 81       	ldd	r19, Y+5	; 0x05
    250c:	22 30       	cpi	r18, 0x02	; 2
    250e:	31 05       	cpc	r19, r1
    2510:	2c f4       	brge	.+10     	; 0x251c <DIO_PIN_WRITE_LOGIC_M+0x130>
    2512:	8c 81       	ldd	r24, Y+4	; 0x04
    2514:	9d 81       	ldd	r25, Y+5	; 0x05
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	69 f0       	breq	.+26     	; 0x2534 <DIO_PIN_WRITE_LOGIC_M+0x148>
    251a:	5f c0       	rjmp	.+190    	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
    251c:	2c 81       	ldd	r18, Y+4	; 0x04
    251e:	3d 81       	ldd	r19, Y+5	; 0x05
    2520:	22 30       	cpi	r18, 0x02	; 2
    2522:	31 05       	cpc	r19, r1
    2524:	89 f1       	breq	.+98     	; 0x2588 <DIO_PIN_WRITE_LOGIC_M+0x19c>
    2526:	8c 81       	ldd	r24, Y+4	; 0x04
    2528:	9d 81       	ldd	r25, Y+5	; 0x05
    252a:	83 30       	cpi	r24, 0x03	; 3
    252c:	91 05       	cpc	r25, r1
    252e:	09 f4       	brne	.+2      	; 0x2532 <DIO_PIN_WRITE_LOGIC_M+0x146>
    2530:	40 c0       	rjmp	.+128    	; 0x25b2 <DIO_PIN_WRITE_LOGIC_M+0x1c6>
    2532:	53 c0       	rjmp	.+166    	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				{

				case PORTA_:  CLEAR_BIT(PORTA,pin); break;
    2534:	ab e3       	ldi	r26, 0x3B	; 59
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	eb e3       	ldi	r30, 0x3B	; 59
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	48 2f       	mov	r20, r24
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	02 2e       	mov	r0, r18
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <DIO_PIN_WRITE_LOGIC_M+0x166>
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	0a 94       	dec	r0
    2554:	e2 f7       	brpl	.-8      	; 0x254e <DIO_PIN_WRITE_LOGIC_M+0x162>
    2556:	80 95       	com	r24
    2558:	84 23       	and	r24, r20
    255a:	8c 93       	st	X, r24
    255c:	3e c0       	rjmp	.+124    	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				case PORTB_ : CLEAR_BIT(PORTB,pin); break;
    255e:	a8 e3       	ldi	r26, 0x38	; 56
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e8 e3       	ldi	r30, 0x38	; 56
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	48 2f       	mov	r20, r24
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	02 2e       	mov	r0, r18
    2576:	02 c0       	rjmp	.+4      	; 0x257c <DIO_PIN_WRITE_LOGIC_M+0x190>
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	0a 94       	dec	r0
    257e:	e2 f7       	brpl	.-8      	; 0x2578 <DIO_PIN_WRITE_LOGIC_M+0x18c>
    2580:	80 95       	com	r24
    2582:	84 23       	and	r24, r20
    2584:	8c 93       	st	X, r24
    2586:	29 c0       	rjmp	.+82     	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				case PORTC_ : CLEAR_BIT(PORTC,pin); break;
    2588:	a5 e3       	ldi	r26, 0x35	; 53
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e5 e3       	ldi	r30, 0x35	; 53
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	48 2f       	mov	r20, r24
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	02 2e       	mov	r0, r18
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <DIO_PIN_WRITE_LOGIC_M+0x1ba>
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	0a 94       	dec	r0
    25a8:	e2 f7       	brpl	.-8      	; 0x25a2 <DIO_PIN_WRITE_LOGIC_M+0x1b6>
    25aa:	80 95       	com	r24
    25ac:	84 23       	and	r24, r20
    25ae:	8c 93       	st	X, r24
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				case PORTD_ : CLEAR_BIT(PORTD,pin); break;
    25b2:	a2 e3       	ldi	r26, 0x32	; 50
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e2 e3       	ldi	r30, 0x32	; 50
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	48 2f       	mov	r20, r24
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	02 2e       	mov	r0, r18
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <DIO_PIN_WRITE_LOGIC_M+0x1e4>
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	0a 94       	dec	r0
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <DIO_PIN_WRITE_LOGIC_M+0x1e0>
    25d4:	80 95       	com	r24
    25d6:	84 23       	and	r24, r20
    25d8:	8c 93       	st	X, r24
				default  	: break;
				}
	}
	else{}

}
    25da:	27 96       	adiw	r28, 0x07	; 7
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <DIO_PIN_DIRECTION_INIT_M>:

/***********************/

void DIO_PIN_DIRECTION_INIT_M(u8 port ,u8 pin,u8 Direction)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	27 97       	sbiw	r28, 0x07	; 7
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	6a 83       	std	Y+2, r22	; 0x02
    2604:	4b 83       	std	Y+3, r20	; 0x03
	if(DIRECTION_OUTPUT==Direction)
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	81 30       	cpi	r24, 0x01	; 1
    260a:	09 f0       	breq	.+2      	; 0x260e <DIO_PIN_DIRECTION_INIT_M+0x22>
    260c:	6f c0       	rjmp	.+222    	; 0x26ec <DIO_PIN_DIRECTION_INIT_M+0x100>
	{
		switch(port)
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	3f 83       	std	Y+7, r19	; 0x07
    2616:	2e 83       	std	Y+6, r18	; 0x06
    2618:	8e 81       	ldd	r24, Y+6	; 0x06
    261a:	9f 81       	ldd	r25, Y+7	; 0x07
    261c:	81 30       	cpi	r24, 0x01	; 1
    261e:	91 05       	cpc	r25, r1
    2620:	49 f1       	breq	.+82     	; 0x2674 <DIO_PIN_DIRECTION_INIT_M+0x88>
    2622:	2e 81       	ldd	r18, Y+6	; 0x06
    2624:	3f 81       	ldd	r19, Y+7	; 0x07
    2626:	22 30       	cpi	r18, 0x02	; 2
    2628:	31 05       	cpc	r19, r1
    262a:	2c f4       	brge	.+10     	; 0x2636 <DIO_PIN_DIRECTION_INIT_M+0x4a>
    262c:	8e 81       	ldd	r24, Y+6	; 0x06
    262e:	9f 81       	ldd	r25, Y+7	; 0x07
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	61 f0       	breq	.+24     	; 0x264c <DIO_PIN_DIRECTION_INIT_M+0x60>
    2634:	ce c0       	rjmp	.+412    	; 0x27d2 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
    2636:	2e 81       	ldd	r18, Y+6	; 0x06
    2638:	3f 81       	ldd	r19, Y+7	; 0x07
    263a:	22 30       	cpi	r18, 0x02	; 2
    263c:	31 05       	cpc	r19, r1
    263e:	71 f1       	breq	.+92     	; 0x269c <DIO_PIN_DIRECTION_INIT_M+0xb0>
    2640:	8e 81       	ldd	r24, Y+6	; 0x06
    2642:	9f 81       	ldd	r25, Y+7	; 0x07
    2644:	83 30       	cpi	r24, 0x03	; 3
    2646:	91 05       	cpc	r25, r1
    2648:	e9 f1       	breq	.+122    	; 0x26c4 <DIO_PIN_DIRECTION_INIT_M+0xd8>
    264a:	c3 c0       	rjmp	.+390    	; 0x27d2 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		{

		case PORTA_:  SET_BIT(DDRA,pin); break;
    264c:	aa e3       	ldi	r26, 0x3A	; 58
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	ea e3       	ldi	r30, 0x3A	; 58
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	48 2f       	mov	r20, r24
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	02 2e       	mov	r0, r18
    2664:	02 c0       	rjmp	.+4      	; 0x266a <DIO_PIN_DIRECTION_INIT_M+0x7e>
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	0a 94       	dec	r0
    266c:	e2 f7       	brpl	.-8      	; 0x2666 <DIO_PIN_DIRECTION_INIT_M+0x7a>
    266e:	84 2b       	or	r24, r20
    2670:	8c 93       	st	X, r24
    2672:	af c0       	rjmp	.+350    	; 0x27d2 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		case PORTB_ : SET_BIT(DDRB,pin); break;
    2674:	a7 e3       	ldi	r26, 0x37	; 55
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e7 e3       	ldi	r30, 0x37	; 55
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	48 2f       	mov	r20, r24
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	02 2e       	mov	r0, r18
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <DIO_PIN_DIRECTION_INIT_M+0xa6>
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	0a 94       	dec	r0
    2694:	e2 f7       	brpl	.-8      	; 0x268e <DIO_PIN_DIRECTION_INIT_M+0xa2>
    2696:	84 2b       	or	r24, r20
    2698:	8c 93       	st	X, r24
    269a:	9b c0       	rjmp	.+310    	; 0x27d2 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		case PORTC_ : SET_BIT(DDRC,pin); break;
    269c:	a4 e3       	ldi	r26, 0x34	; 52
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e4 e3       	ldi	r30, 0x34	; 52
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	48 2f       	mov	r20, r24
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	28 2f       	mov	r18, r24
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	02 2e       	mov	r0, r18
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <DIO_PIN_DIRECTION_INIT_M+0xce>
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	0a 94       	dec	r0
    26bc:	e2 f7       	brpl	.-8      	; 0x26b6 <DIO_PIN_DIRECTION_INIT_M+0xca>
    26be:	84 2b       	or	r24, r20
    26c0:	8c 93       	st	X, r24
    26c2:	87 c0       	rjmp	.+270    	; 0x27d2 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		case PORTD_ : SET_BIT(DDRD,pin); break;
    26c4:	a1 e3       	ldi	r26, 0x31	; 49
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e1 e3       	ldi	r30, 0x31	; 49
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	48 2f       	mov	r20, r24
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	02 2e       	mov	r0, r18
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <DIO_PIN_DIRECTION_INIT_M+0xf6>
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	0a 94       	dec	r0
    26e4:	e2 f7       	brpl	.-8      	; 0x26de <DIO_PIN_DIRECTION_INIT_M+0xf2>
    26e6:	84 2b       	or	r24, r20
    26e8:	8c 93       	st	X, r24
    26ea:	73 c0       	rjmp	.+230    	; 0x27d2 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		default  	: break;
		}
	}
	else if(PIN_LOW==DIRECTION_INPUT)
	{
		switch(port)
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	3d 83       	std	Y+5, r19	; 0x05
    26f4:	2c 83       	std	Y+4, r18	; 0x04
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	9d 81       	ldd	r25, Y+5	; 0x05
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	91 05       	cpc	r25, r1
    26fe:	59 f1       	breq	.+86     	; 0x2756 <DIO_PIN_DIRECTION_INIT_M+0x16a>
    2700:	2c 81       	ldd	r18, Y+4	; 0x04
    2702:	3d 81       	ldd	r19, Y+5	; 0x05
    2704:	22 30       	cpi	r18, 0x02	; 2
    2706:	31 05       	cpc	r19, r1
    2708:	2c f4       	brge	.+10     	; 0x2714 <DIO_PIN_DIRECTION_INIT_M+0x128>
    270a:	8c 81       	ldd	r24, Y+4	; 0x04
    270c:	9d 81       	ldd	r25, Y+5	; 0x05
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	69 f0       	breq	.+26     	; 0x272c <DIO_PIN_DIRECTION_INIT_M+0x140>
    2712:	5f c0       	rjmp	.+190    	; 0x27d2 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
    2714:	2c 81       	ldd	r18, Y+4	; 0x04
    2716:	3d 81       	ldd	r19, Y+5	; 0x05
    2718:	22 30       	cpi	r18, 0x02	; 2
    271a:	31 05       	cpc	r19, r1
    271c:	89 f1       	breq	.+98     	; 0x2780 <DIO_PIN_DIRECTION_INIT_M+0x194>
    271e:	8c 81       	ldd	r24, Y+4	; 0x04
    2720:	9d 81       	ldd	r25, Y+5	; 0x05
    2722:	83 30       	cpi	r24, 0x03	; 3
    2724:	91 05       	cpc	r25, r1
    2726:	09 f4       	brne	.+2      	; 0x272a <DIO_PIN_DIRECTION_INIT_M+0x13e>
    2728:	40 c0       	rjmp	.+128    	; 0x27aa <DIO_PIN_DIRECTION_INIT_M+0x1be>
    272a:	53 c0       	rjmp	.+166    	; 0x27d2 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				{

				case PORTA_:  CLEAR_BIT(DDRA,pin); break;
    272c:	aa e3       	ldi	r26, 0x3A	; 58
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	ea e3       	ldi	r30, 0x3A	; 58
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	48 2f       	mov	r20, r24
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	02 2e       	mov	r0, r18
    2744:	02 c0       	rjmp	.+4      	; 0x274a <DIO_PIN_DIRECTION_INIT_M+0x15e>
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	0a 94       	dec	r0
    274c:	e2 f7       	brpl	.-8      	; 0x2746 <DIO_PIN_DIRECTION_INIT_M+0x15a>
    274e:	80 95       	com	r24
    2750:	84 23       	and	r24, r20
    2752:	8c 93       	st	X, r24
    2754:	3e c0       	rjmp	.+124    	; 0x27d2 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				case PORTB_ : CLEAR_BIT(DDRB,pin); break;
    2756:	a7 e3       	ldi	r26, 0x37	; 55
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e7 e3       	ldi	r30, 0x37	; 55
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	48 2f       	mov	r20, r24
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	02 2e       	mov	r0, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <DIO_PIN_DIRECTION_INIT_M+0x188>
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	0a 94       	dec	r0
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <DIO_PIN_DIRECTION_INIT_M+0x184>
    2778:	80 95       	com	r24
    277a:	84 23       	and	r24, r20
    277c:	8c 93       	st	X, r24
    277e:	29 c0       	rjmp	.+82     	; 0x27d2 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				case PORTC_ : CLEAR_BIT(DDRC,pin); break;
    2780:	a4 e3       	ldi	r26, 0x34	; 52
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e4 e3       	ldi	r30, 0x34	; 52
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	48 2f       	mov	r20, r24
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	02 2e       	mov	r0, r18
    2798:	02 c0       	rjmp	.+4      	; 0x279e <DIO_PIN_DIRECTION_INIT_M+0x1b2>
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	0a 94       	dec	r0
    27a0:	e2 f7       	brpl	.-8      	; 0x279a <DIO_PIN_DIRECTION_INIT_M+0x1ae>
    27a2:	80 95       	com	r24
    27a4:	84 23       	and	r24, r20
    27a6:	8c 93       	st	X, r24
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				case PORTD_ : CLEAR_BIT(DDRD,pin); break;
    27aa:	a1 e3       	ldi	r26, 0x31	; 49
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e1 e3       	ldi	r30, 0x31	; 49
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	48 2f       	mov	r20, r24
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	02 2e       	mov	r0, r18
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <DIO_PIN_DIRECTION_INIT_M+0x1dc>
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	0a 94       	dec	r0
    27ca:	e2 f7       	brpl	.-8      	; 0x27c4 <DIO_PIN_DIRECTION_INIT_M+0x1d8>
    27cc:	80 95       	com	r24
    27ce:	84 23       	and	r24, r20
    27d0:	8c 93       	st	X, r24
				default  	: break;
				}
	}
	else{}

}
    27d2:	27 96       	adiw	r28, 0x07	; 7
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <DIO_PIN_TOGGLE_LOGIC_M>:

/***********************/

void DIO_PIN_TOGGLE_LOGIC_M(u8 port ,u8 pin)
{
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <DIO_PIN_TOGGLE_LOGIC_M+0x6>
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <DIO_PIN_TOGGLE_LOGIC_M+0x8>
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	89 83       	std	Y+1, r24	; 0x01
    27f2:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	3c 83       	std	Y+4, r19	; 0x04
    27fc:	2b 83       	std	Y+3, r18	; 0x03
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	81 30       	cpi	r24, 0x01	; 1
    2804:	91 05       	cpc	r25, r1
    2806:	49 f1       	breq	.+82     	; 0x285a <DIO_PIN_TOGGLE_LOGIC_M+0x76>
    2808:	2b 81       	ldd	r18, Y+3	; 0x03
    280a:	3c 81       	ldd	r19, Y+4	; 0x04
    280c:	22 30       	cpi	r18, 0x02	; 2
    280e:	31 05       	cpc	r19, r1
    2810:	2c f4       	brge	.+10     	; 0x281c <DIO_PIN_TOGGLE_LOGIC_M+0x38>
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	61 f0       	breq	.+24     	; 0x2832 <DIO_PIN_TOGGLE_LOGIC_M+0x4e>
    281a:	5a c0       	rjmp	.+180    	; 0x28d0 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
    281c:	2b 81       	ldd	r18, Y+3	; 0x03
    281e:	3c 81       	ldd	r19, Y+4	; 0x04
    2820:	22 30       	cpi	r18, 0x02	; 2
    2822:	31 05       	cpc	r19, r1
    2824:	71 f1       	breq	.+92     	; 0x2882 <DIO_PIN_TOGGLE_LOGIC_M+0x9e>
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	9c 81       	ldd	r25, Y+4	; 0x04
    282a:	83 30       	cpi	r24, 0x03	; 3
    282c:	91 05       	cpc	r25, r1
    282e:	e9 f1       	breq	.+122    	; 0x28aa <DIO_PIN_TOGGLE_LOGIC_M+0xc6>
    2830:	4f c0       	rjmp	.+158    	; 0x28d0 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	{
	case PORTA_:  TOGGLE_BIT(PORTA,pin); break;
    2832:	ab e3       	ldi	r26, 0x3B	; 59
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	eb e3       	ldi	r30, 0x3B	; 59
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	48 2f       	mov	r20, r24
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	02 2e       	mov	r0, r18
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <DIO_PIN_TOGGLE_LOGIC_M+0x6c>
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	0a 94       	dec	r0
    2852:	e2 f7       	brpl	.-8      	; 0x284c <DIO_PIN_TOGGLE_LOGIC_M+0x68>
    2854:	84 27       	eor	r24, r20
    2856:	8c 93       	st	X, r24
    2858:	3b c0       	rjmp	.+118    	; 0x28d0 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	case PORTB_ : TOGGLE_BIT(PORTB,pin); break;
    285a:	a8 e3       	ldi	r26, 0x38	; 56
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e8 e3       	ldi	r30, 0x38	; 56
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	48 2f       	mov	r20, r24
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	02 2e       	mov	r0, r18
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <DIO_PIN_TOGGLE_LOGIC_M+0x94>
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	0a 94       	dec	r0
    287a:	e2 f7       	brpl	.-8      	; 0x2874 <DIO_PIN_TOGGLE_LOGIC_M+0x90>
    287c:	84 27       	eor	r24, r20
    287e:	8c 93       	st	X, r24
    2880:	27 c0       	rjmp	.+78     	; 0x28d0 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	case PORTC_ : TOGGLE_BIT(PORTC,pin); break;
    2882:	a5 e3       	ldi	r26, 0x35	; 53
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e5 e3       	ldi	r30, 0x35	; 53
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	48 2f       	mov	r20, r24
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	02 2e       	mov	r0, r18
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <DIO_PIN_TOGGLE_LOGIC_M+0xbc>
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	0a 94       	dec	r0
    28a2:	e2 f7       	brpl	.-8      	; 0x289c <DIO_PIN_TOGGLE_LOGIC_M+0xb8>
    28a4:	84 27       	eor	r24, r20
    28a6:	8c 93       	st	X, r24
    28a8:	13 c0       	rjmp	.+38     	; 0x28d0 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	case PORTD_ : TOGGLE_BIT(PORTD,pin); break;
    28aa:	a2 e3       	ldi	r26, 0x32	; 50
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e2 e3       	ldi	r30, 0x32	; 50
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	48 2f       	mov	r20, r24
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	28 2f       	mov	r18, r24
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	02 2e       	mov	r0, r18
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <DIO_PIN_TOGGLE_LOGIC_M+0xe4>
    28c4:	88 0f       	add	r24, r24
    28c6:	99 1f       	adc	r25, r25
    28c8:	0a 94       	dec	r0
    28ca:	e2 f7       	brpl	.-8      	; 0x28c4 <DIO_PIN_TOGGLE_LOGIC_M+0xe0>
    28cc:	84 27       	eor	r24, r20
    28ce:	8c 93       	st	X, r24
	default : break;
	}
}
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <DIO_PIN_READ_LOGIC_LEVEL_M>:

/***********************************/
u8 DIO_PIN_READ_LOGIC_LEVEL_M(u8 port ,u8 pin)
{
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <DIO_PIN_READ_LOGIC_LEVEL_M+0x6>
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <DIO_PIN_READ_LOGIC_LEVEL_M+0x8>
    28e6:	0f 92       	push	r0
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	8a 83       	std	Y+2, r24	; 0x02
    28ee:	6b 83       	std	Y+3, r22	; 0x03
u8 x;
	switch(port)
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	28 2f       	mov	r18, r24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	3d 83       	std	Y+5, r19	; 0x05
    28f8:	2c 83       	std	Y+4, r18	; 0x04
    28fa:	4c 81       	ldd	r20, Y+4	; 0x04
    28fc:	5d 81       	ldd	r21, Y+5	; 0x05
    28fe:	41 30       	cpi	r20, 0x01	; 1
    2900:	51 05       	cpc	r21, r1
    2902:	41 f1       	breq	.+80     	; 0x2954 <DIO_PIN_READ_LOGIC_LEVEL_M+0x76>
    2904:	8c 81       	ldd	r24, Y+4	; 0x04
    2906:	9d 81       	ldd	r25, Y+5	; 0x05
    2908:	82 30       	cpi	r24, 0x02	; 2
    290a:	91 05       	cpc	r25, r1
    290c:	34 f4       	brge	.+12     	; 0x291a <DIO_PIN_READ_LOGIC_LEVEL_M+0x3c>
    290e:	2c 81       	ldd	r18, Y+4	; 0x04
    2910:	3d 81       	ldd	r19, Y+5	; 0x05
    2912:	21 15       	cp	r18, r1
    2914:	31 05       	cpc	r19, r1
    2916:	61 f0       	breq	.+24     	; 0x2930 <DIO_PIN_READ_LOGIC_LEVEL_M+0x52>
    2918:	52 c0       	rjmp	.+164    	; 0x29be <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
    291a:	4c 81       	ldd	r20, Y+4	; 0x04
    291c:	5d 81       	ldd	r21, Y+5	; 0x05
    291e:	42 30       	cpi	r20, 0x02	; 2
    2920:	51 05       	cpc	r21, r1
    2922:	51 f1       	breq	.+84     	; 0x2978 <DIO_PIN_READ_LOGIC_LEVEL_M+0x9a>
    2924:	8c 81       	ldd	r24, Y+4	; 0x04
    2926:	9d 81       	ldd	r25, Y+5	; 0x05
    2928:	83 30       	cpi	r24, 0x03	; 3
    292a:	91 05       	cpc	r25, r1
    292c:	b9 f1       	breq	.+110    	; 0x299c <DIO_PIN_READ_LOGIC_LEVEL_M+0xbe>
    292e:	47 c0       	rjmp	.+142    	; 0x29be <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	{
	case PORTA_ : x= (GET_BIT(PINA,pin)); break;
    2930:	e9 e3       	ldi	r30, 0x39	; 57
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	88 2f       	mov	r24, r24
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a9 01       	movw	r20, r18
    2942:	02 c0       	rjmp	.+4      	; 0x2948 <DIO_PIN_READ_LOGIC_LEVEL_M+0x6a>
    2944:	55 95       	asr	r21
    2946:	47 95       	ror	r20
    2948:	8a 95       	dec	r24
    294a:	e2 f7       	brpl	.-8      	; 0x2944 <DIO_PIN_READ_LOGIC_LEVEL_M+0x66>
    294c:	ca 01       	movw	r24, r20
    294e:	81 70       	andi	r24, 0x01	; 1
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	35 c0       	rjmp	.+106    	; 0x29be <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	case PORTB_ : x= (GET_BIT(PINB,pin));break;
    2954:	e6 e3       	ldi	r30, 0x36	; 54
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	88 2f       	mov	r24, r24
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	a9 01       	movw	r20, r18
    2966:	02 c0       	rjmp	.+4      	; 0x296c <DIO_PIN_READ_LOGIC_LEVEL_M+0x8e>
    2968:	55 95       	asr	r21
    296a:	47 95       	ror	r20
    296c:	8a 95       	dec	r24
    296e:	e2 f7       	brpl	.-8      	; 0x2968 <DIO_PIN_READ_LOGIC_LEVEL_M+0x8a>
    2970:	ca 01       	movw	r24, r20
    2972:	81 70       	andi	r24, 0x01	; 1
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	23 c0       	rjmp	.+70     	; 0x29be <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	case PORTC_ : x= (GET_BIT(PINC,pin));break;
    2978:	e3 e3       	ldi	r30, 0x33	; 51
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	88 2f       	mov	r24, r24
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	a9 01       	movw	r20, r18
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <DIO_PIN_READ_LOGIC_LEVEL_M+0xb2>
    298c:	55 95       	asr	r21
    298e:	47 95       	ror	r20
    2990:	8a 95       	dec	r24
    2992:	e2 f7       	brpl	.-8      	; 0x298c <DIO_PIN_READ_LOGIC_LEVEL_M+0xae>
    2994:	ca 01       	movw	r24, r20
    2996:	81 70       	andi	r24, 0x01	; 1
    2998:	89 83       	std	Y+1, r24	; 0x01
    299a:	11 c0       	rjmp	.+34     	; 0x29be <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	case PORTD_ :x= (GET_BIT(PIND,pin));	break;
    299c:	e0 e3       	ldi	r30, 0x30	; 48
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	28 2f       	mov	r18, r24
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	88 2f       	mov	r24, r24
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	a9 01       	movw	r20, r18
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <DIO_PIN_READ_LOGIC_LEVEL_M+0xd6>
    29b0:	55 95       	asr	r21
    29b2:	47 95       	ror	r20
    29b4:	8a 95       	dec	r24
    29b6:	e2 f7       	brpl	.-8      	; 0x29b0 <DIO_PIN_READ_LOGIC_LEVEL_M+0xd2>
    29b8:	ca 01       	movw	r24, r20
    29ba:	81 70       	andi	r24, 0x01	; 1
    29bc:	89 83       	std	Y+1, r24	; 0x01
	default : break;
	}
return x;
    29be:	89 81       	ldd	r24, Y+1	; 0x01
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <DIO_PORT_WRITE_LOGIC_M>:
/***********************************/

/******************************/
void DIO_PORT_WRITE_LOGIC_M(u8 port ,u8 Port_val)
{
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <DIO_PORT_WRITE_LOGIC_M+0x6>
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <DIO_PORT_WRITE_LOGIC_M+0x8>
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	89 83       	std	Y+1, r24	; 0x01
    29de:	6a 83       	std	Y+2, r22	; 0x02
	  switch(port)
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	28 2f       	mov	r18, r24
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	3c 83       	std	Y+4, r19	; 0x04
    29e8:	2b 83       	std	Y+3, r18	; 0x03
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	9c 81       	ldd	r25, Y+4	; 0x04
    29ee:	81 30       	cpi	r24, 0x01	; 1
    29f0:	91 05       	cpc	r25, r1
    29f2:	d1 f0       	breq	.+52     	; 0x2a28 <DIO_PORT_WRITE_LOGIC_M+0x58>
    29f4:	2b 81       	ldd	r18, Y+3	; 0x03
    29f6:	3c 81       	ldd	r19, Y+4	; 0x04
    29f8:	22 30       	cpi	r18, 0x02	; 2
    29fa:	31 05       	cpc	r19, r1
    29fc:	2c f4       	brge	.+10     	; 0x2a08 <DIO_PORT_WRITE_LOGIC_M+0x38>
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	9c 81       	ldd	r25, Y+4	; 0x04
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	61 f0       	breq	.+24     	; 0x2a1e <DIO_PORT_WRITE_LOGIC_M+0x4e>
    2a06:	1e c0       	rjmp	.+60     	; 0x2a44 <DIO_PORT_WRITE_LOGIC_M+0x74>
    2a08:	2b 81       	ldd	r18, Y+3	; 0x03
    2a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a0c:	22 30       	cpi	r18, 0x02	; 2
    2a0e:	31 05       	cpc	r19, r1
    2a10:	81 f0       	breq	.+32     	; 0x2a32 <DIO_PORT_WRITE_LOGIC_M+0x62>
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	9c 81       	ldd	r25, Y+4	; 0x04
    2a16:	83 30       	cpi	r24, 0x03	; 3
    2a18:	91 05       	cpc	r25, r1
    2a1a:	81 f0       	breq	.+32     	; 0x2a3c <DIO_PORT_WRITE_LOGIC_M+0x6c>
    2a1c:	13 c0       	rjmp	.+38     	; 0x2a44 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  {
	  case PORTA_: PORTA = Port_val;break;
    2a1e:	eb e3       	ldi	r30, 0x3B	; 59
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	80 83       	st	Z, r24
    2a26:	0e c0       	rjmp	.+28     	; 0x2a44 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  case PORTB_: PORTB = Port_val;break;
    2a28:	e8 e3       	ldi	r30, 0x38	; 56
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	80 83       	st	Z, r24
    2a30:	09 c0       	rjmp	.+18     	; 0x2a44 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  case PORTC_: PORTC = Port_val;break;
    2a32:	e5 e3       	ldi	r30, 0x35	; 53
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	80 83       	st	Z, r24
    2a3a:	04 c0       	rjmp	.+8      	; 0x2a44 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  case PORTD_: PORTD = Port_val;break;
    2a3c:	e2 e3       	ldi	r30, 0x32	; 50
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	80 83       	st	Z, r24
	  default : break;
	  }
}
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	08 95       	ret

00002a52 <DIO_PORT_SET_DIRECTION_M>:
void DIO_PORT_SET_DIRECTION_M(u8 port ,u8 DIRECTION_VALUE)
{
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <DIO_PORT_SET_DIRECTION_M+0x6>
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <DIO_PORT_SET_DIRECTION_M+0x8>
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	6a 83       	std	Y+2, r22	; 0x02
	  switch(port)
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	28 2f       	mov	r18, r24
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	3c 83       	std	Y+4, r19	; 0x04
    2a6a:	2b 83       	std	Y+3, r18	; 0x03
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a70:	81 30       	cpi	r24, 0x01	; 1
    2a72:	91 05       	cpc	r25, r1
    2a74:	d1 f0       	breq	.+52     	; 0x2aaa <DIO_PORT_SET_DIRECTION_M+0x58>
    2a76:	2b 81       	ldd	r18, Y+3	; 0x03
    2a78:	3c 81       	ldd	r19, Y+4	; 0x04
    2a7a:	22 30       	cpi	r18, 0x02	; 2
    2a7c:	31 05       	cpc	r19, r1
    2a7e:	2c f4       	brge	.+10     	; 0x2a8a <DIO_PORT_SET_DIRECTION_M+0x38>
    2a80:	8b 81       	ldd	r24, Y+3	; 0x03
    2a82:	9c 81       	ldd	r25, Y+4	; 0x04
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	61 f0       	breq	.+24     	; 0x2aa0 <DIO_PORT_SET_DIRECTION_M+0x4e>
    2a88:	1e c0       	rjmp	.+60     	; 0x2ac6 <DIO_PORT_SET_DIRECTION_M+0x74>
    2a8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a8e:	22 30       	cpi	r18, 0x02	; 2
    2a90:	31 05       	cpc	r19, r1
    2a92:	81 f0       	breq	.+32     	; 0x2ab4 <DIO_PORT_SET_DIRECTION_M+0x62>
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	9c 81       	ldd	r25, Y+4	; 0x04
    2a98:	83 30       	cpi	r24, 0x03	; 3
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	81 f0       	breq	.+32     	; 0x2abe <DIO_PORT_SET_DIRECTION_M+0x6c>
    2a9e:	13 c0       	rjmp	.+38     	; 0x2ac6 <DIO_PORT_SET_DIRECTION_M+0x74>
	  {
		  case PORTA_: DDRA = DIRECTION_VALUE;break;
    2aa0:	ea e3       	ldi	r30, 0x3A	; 58
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	80 83       	st	Z, r24
    2aa8:	0e c0       	rjmp	.+28     	; 0x2ac6 <DIO_PORT_SET_DIRECTION_M+0x74>
		  case PORTB_: DDRB = DIRECTION_VALUE;break;
    2aaa:	e7 e3       	ldi	r30, 0x37	; 55
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	80 83       	st	Z, r24
    2ab2:	09 c0       	rjmp	.+18     	; 0x2ac6 <DIO_PORT_SET_DIRECTION_M+0x74>
		  case PORTC_: DDRC = DIRECTION_VALUE;break;
    2ab4:	e4 e3       	ldi	r30, 0x34	; 52
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	80 83       	st	Z, r24
    2abc:	04 c0       	rjmp	.+8      	; 0x2ac6 <DIO_PORT_SET_DIRECTION_M+0x74>
		  case PORTD_: DDRD = DIRECTION_VALUE;break;
    2abe:	e1 e3       	ldi	r30, 0x31	; 49
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	80 83       	st	Z, r24
		  default : break;
	  }
}
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	08 95       	ret

00002ad4 <PORT_DIRECTION_INIT>:


/***********************/

void PORT_DIRECTION_INIT(void)
{
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    2adc:	ea e3       	ldi	r30, 0x3A	; 58
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	8c ef       	ldi	r24, 0xFC	; 252
    2ae2:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    2ae4:	e7 e3       	ldi	r30, 0x37	; 55
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	8f ea       	ldi	r24, 0xAF	; 175
    2aea:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    2aec:	e4 e3       	ldi	r30, 0x34	; 52
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	8d ef       	ldi	r24, 0xFD	; 253
    2af2:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    2af4:	e1 e3       	ldi	r30, 0x31	; 49
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	8e e0       	ldi	r24, 0x0E	; 14
    2afa:	80 83       	st	Z, r24
}
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <PORT_LOGICLEVEL_INIT>:
void PORT_LOGICLEVEL_INIT(void)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
	PORTA=PORTA_LOGIC;
    2b0a:	eb e3       	ldi	r30, 0x3B	; 59
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 ef       	ldi	r24, 0xF0	; 240
    2b10:	80 83       	st	Z, r24
	PORTB=PORTB_LOGIC;
    2b12:	e8 e3       	ldi	r30, 0x38	; 56
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	10 82       	st	Z, r1
	PORTC=PORTC_LOGIC;
    2b18:	e5 e3       	ldi	r30, 0x35	; 53
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	10 82       	st	Z, r1
	PORTD=PORTD_LOGIC;
    2b1e:	e2 e3       	ldi	r30, 0x32	; 50
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	84 ef       	ldi	r24, 0xF4	; 244
    2b24:	80 83       	st	Z, r24
}
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <MADC_voidInit>:
#include"M_ADC_INT.h"

#if ADC_STATE==ADC_STATE_ENABLE

void MADC_voidInit(void)
{
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
/*********SELECT V REG************/
#if ADC_VOLATAGE_REFERENCE==AVCC_with_external_capacitor_at_AREF_pin
	ADC_ENABLE_AVCC_VOLTAGE_REF();
    2b34:	a7 e2       	ldi	r26, 0x27	; 39
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e7 e2       	ldi	r30, 0x27	; 39
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	8f 77       	andi	r24, 0x7F	; 127
    2b40:	8c 93       	st	X, r24
    2b42:	a7 e2       	ldi	r26, 0x27	; 39
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e7 e2       	ldi	r30, 0x27	; 39
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	80 64       	ori	r24, 0x40	; 64
    2b4e:	8c 93       	st	X, r24
#else
#error "wrong voltage reference for ADC CHECK ADC CNFG"
#endif
	/****************SELECT RIGHT ADJUST********/
#if ADC_DATA_ADJUSTMENT==ADC_RIGHT_ADJUST
	ADC_RIGHT_ADJUSTMENT();
    2b50:	a7 e2       	ldi	r26, 0x27	; 39
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e7 e2       	ldi	r30, 0x27	; 39
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	8f 7d       	andi	r24, 0xDF	; 223
    2b5c:	8c 93       	st	X, r24
#else

#endif

	/*************** ADC PRESCALER CLOCK SET **********/
	 ADC_SELECT_CLOCK(ADC_PRESCALER_VAL);
    2b5e:	a6 e2       	ldi	r26, 0x26	; 38
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e6 e2       	ldi	r30, 0x26	; 38
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	86 60       	ori	r24, 0x06	; 6
    2b6a:	8c 93       	st	X, r24
	/*************** Enable_ADC***************/
	 ADC_ENABLE();
    2b6c:	a6 e2       	ldi	r26, 0x26	; 38
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e6 e2       	ldi	r30, 0x26	; 38
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	80 68       	ori	r24, 0x80	; 128
    2b78:	8c 93       	st	X, r24
}
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	08 95       	ret

00002b80 <MADC_u16_GetVal_BLOCKING>:
u16 MADC_u16_GetVal_BLOCKING(u8 ADC_channel)
{
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	0f 92       	push	r0
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	89 83       	std	Y+1, r24	; 0x01
		ADC_SELECT_CHANNEL(ADC_channel);
    2b8c:	a7 e2       	ldi	r26, 0x27	; 39
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e7 e2       	ldi	r30, 0x27	; 39
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	98 2f       	mov	r25, r24
    2b98:	90 7e       	andi	r25, 0xE0	; 224
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	89 2b       	or	r24, r25
    2b9e:	8c 93       	st	X, r24
	/***********start conversion************/
	ADC_START_CONVERSION();
    2ba0:	a6 e2       	ldi	r26, 0x26	; 38
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	e6 e2       	ldi	r30, 0x26	; 38
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	80 64       	ori	r24, 0x40	; 64
    2bac:	8c 93       	st	X, r24
	//busy wait till conversion//
	while(GET_BIT(ADCSRA,ADIF)==0);
    2bae:	e6 e2       	ldi	r30, 0x26	; 38
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	82 95       	swap	r24
    2bb6:	8f 70       	andi	r24, 0x0F	; 15
    2bb8:	88 2f       	mov	r24, r24
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	81 70       	andi	r24, 0x01	; 1
    2bbe:	90 70       	andi	r25, 0x00	; 0
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	a9 f3       	breq	.-22     	; 0x2bae <MADC_u16_GetVal_BLOCKING+0x2e>
	ADC_FLAG_CLEAR();
    2bc4:	a6 e2       	ldi	r26, 0x26	; 38
    2bc6:	b0 e0       	ldi	r27, 0x00	; 0
    2bc8:	e6 e2       	ldi	r30, 0x26	; 38
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	80 61       	ori	r24, 0x10	; 16
    2bd0:	8c 93       	st	X, r24
	return ADC_DATA_REG;
    2bd2:	e4 e2       	ldi	r30, 0x24	; 36
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
}
    2bda:	0f 90       	pop	r0
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <MADC_u16_GetVal_INTERRUPT>:
u16 MADC_u16_GetVal_INTERRUPT(u8 ADC_channel)
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	0f 92       	push	r0
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	89 83       	std	Y+1, r24	; 0x01
		ADC_SELECT_CHANNEL(ADC_channel);
    2bee:	a7 e2       	ldi	r26, 0x27	; 39
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	e7 e2       	ldi	r30, 0x27	; 39
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	98 2f       	mov	r25, r24
    2bfa:	90 7e       	andi	r25, 0xE0	; 224
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	89 2b       	or	r24, r25
    2c00:	8c 93       	st	X, r24
	/***********start conversion************/
	ADC_START_CONVERSION();
    2c02:	a6 e2       	ldi	r26, 0x26	; 38
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e6 e2       	ldi	r30, 0x26	; 38
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	80 64       	ori	r24, 0x40	; 64
    2c0e:	8c 93       	st	X, r24
	//busy wait till conversion//
	while(GET_BIT(ADCSRA,ADIF)==0);
    2c10:	e6 e2       	ldi	r30, 0x26	; 38
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	82 95       	swap	r24
    2c18:	8f 70       	andi	r24, 0x0F	; 15
    2c1a:	88 2f       	mov	r24, r24
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	81 70       	andi	r24, 0x01	; 1
    2c20:	90 70       	andi	r25, 0x00	; 0
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	a9 f3       	breq	.-22     	; 0x2c10 <MADC_u16_GetVal_INTERRUPT+0x2e>
	ADC_FLAG_CLEAR();
    2c26:	a6 e2       	ldi	r26, 0x26	; 38
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	e6 e2       	ldi	r30, 0x26	; 38
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	80 61       	ori	r24, 0x10	; 16
    2c32:	8c 93       	st	X, r24
	return ADC_DATA_REG;
    2c34:	e4 e2       	ldi	r30, 0x24	; 36
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
}
    2c3c:	0f 90       	pop	r0
    2c3e:	cf 91       	pop	r28
    2c40:	df 91       	pop	r29
    2c42:	08 95       	ret

00002c44 <MADC_u16_GetVal_POOLING>:
/**************************************************** */
u16 MADC_u16_GetVal_POOLING(u8 ADC_channel)
{
    2c44:	df 93       	push	r29
    2c46:	cf 93       	push	r28
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <MADC_u16_GetVal_POOLING+0x6>
    2c4a:	00 d0       	rcall	.+0      	; 0x2c4c <MADC_u16_GetVal_POOLING+0x8>
    2c4c:	0f 92       	push	r0
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	8d 83       	std	Y+5, r24	; 0x05
	int i ;
		ADC_SELECT_CHANNEL(ADC_channel);
    2c54:	a7 e2       	ldi	r26, 0x27	; 39
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e7 e2       	ldi	r30, 0x27	; 39
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	98 2f       	mov	r25, r24
    2c60:	90 7e       	andi	r25, 0xE0	; 224
    2c62:	8d 81       	ldd	r24, Y+5	; 0x05
    2c64:	89 2b       	or	r24, r25
    2c66:	8c 93       	st	X, r24
	/***********start conversion************/
	ADC_START_CONVERSION();
    2c68:	a6 e2       	ldi	r26, 0x26	; 38
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	e6 e2       	ldi	r30, 0x26	; 38
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	80 64       	ori	r24, 0x40	; 64
    2c74:	8c 93       	st	X, r24
	for(int i=0; i<35;i++)
    2c76:	1a 82       	std	Y+2, r1	; 0x02
    2c78:	19 82       	std	Y+1, r1	; 0x01
    2c7a:	0a c0       	rjmp	.+20     	; 0x2c90 <MADC_u16_GetVal_POOLING+0x4c>
	{
		i++;
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c80:	01 96       	adiw	r24, 0x01	; 1
    2c82:	9a 83       	std	Y+2, r25	; 0x02
    2c84:	89 83       	std	Y+1, r24	; 0x01
{
	int i ;
		ADC_SELECT_CHANNEL(ADC_channel);
	/***********start conversion************/
	ADC_START_CONVERSION();
	for(int i=0; i<35;i++)
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	9a 83       	std	Y+2, r25	; 0x02
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	9a 81       	ldd	r25, Y+2	; 0x02
    2c94:	83 32       	cpi	r24, 0x23	; 35
    2c96:	91 05       	cpc	r25, r1
    2c98:	8c f3       	brlt	.-30     	; 0x2c7c <MADC_u16_GetVal_POOLING+0x38>
	{
		i++;
	}
	ADC_FLAG_CLEAR();
    2c9a:	a6 e2       	ldi	r26, 0x26	; 38
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	e6 e2       	ldi	r30, 0x26	; 38
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	80 61       	ori	r24, 0x10	; 16
    2ca6:	8c 93       	st	X, r24
	return ADC_DATA_REG;
    2ca8:	e4 e2       	ldi	r30, 0x24	; 36
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	91 81       	ldd	r25, Z+1	; 0x01
}
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <Mapping_Values>:
/*****************************************************/
double Mapping_Values(u16 X_max , u16 X_min , u16 Y_max ,u16 Y_min , u16 y )
{
    2cc0:	af 92       	push	r10
    2cc2:	bf 92       	push	r11
    2cc4:	cf 92       	push	r12
    2cc6:	df 92       	push	r13
    2cc8:	ef 92       	push	r14
    2cca:	ff 92       	push	r15
    2ccc:	0f 93       	push	r16
    2cce:	1f 93       	push	r17
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
    2cd8:	2e 97       	sbiw	r28, 0x0e	; 14
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	9e 83       	std	Y+6, r25	; 0x06
    2ce6:	8d 83       	std	Y+5, r24	; 0x05
    2ce8:	78 87       	std	Y+8, r23	; 0x08
    2cea:	6f 83       	std	Y+7, r22	; 0x07
    2cec:	5a 87       	std	Y+10, r21	; 0x0a
    2cee:	49 87       	std	Y+9, r20	; 0x09
    2cf0:	3c 87       	std	Y+12, r19	; 0x0c
    2cf2:	2b 87       	std	Y+11, r18	; 0x0b
    2cf4:	1e 87       	std	Y+14, r17	; 0x0e
    2cf6:	0d 87       	std	Y+13, r16	; 0x0d
	double X =0;
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a0 e0       	ldi	r26, 0x00	; 0
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	ab 83       	std	Y+3, r26	; 0x03
    2d06:	bc 83       	std	Y+4, r27	; 0x04
 X=((((double)X_max-X_min)*(y-Y_min))/((double)Y_max-Y_min))+X_min;
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0c:	cc 01       	movw	r24, r24
    2d0e:	a0 e0       	ldi	r26, 0x00	; 0
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	bc 01       	movw	r22, r24
    2d14:	cd 01       	movw	r24, r26
    2d16:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2d1a:	7b 01       	movw	r14, r22
    2d1c:	8c 01       	movw	r16, r24
    2d1e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d20:	98 85       	ldd	r25, Y+8	; 0x08
    2d22:	cc 01       	movw	r24, r24
    2d24:	a0 e0       	ldi	r26, 0x00	; 0
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	bc 01       	movw	r22, r24
    2d2a:	cd 01       	movw	r24, r26
    2d2c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2d30:	9b 01       	movw	r18, r22
    2d32:	ac 01       	movw	r20, r24
    2d34:	c8 01       	movw	r24, r16
    2d36:	b7 01       	movw	r22, r14
    2d38:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	7c 01       	movw	r14, r24
    2d42:	8d 01       	movw	r16, r26
    2d44:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d46:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d48:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d4c:	a9 01       	movw	r20, r18
    2d4e:	48 1b       	sub	r20, r24
    2d50:	59 0b       	sbc	r21, r25
    2d52:	ca 01       	movw	r24, r20
    2d54:	cc 01       	movw	r24, r24
    2d56:	a0 e0       	ldi	r26, 0x00	; 0
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	bc 01       	movw	r22, r24
    2d5c:	cd 01       	movw	r24, r26
    2d5e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2d62:	9b 01       	movw	r18, r22
    2d64:	ac 01       	movw	r20, r24
    2d66:	c8 01       	movw	r24, r16
    2d68:	b7 01       	movw	r22, r14
    2d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	5c 01       	movw	r10, r24
    2d74:	6d 01       	movw	r12, r26
    2d76:	89 85       	ldd	r24, Y+9	; 0x09
    2d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7a:	cc 01       	movw	r24, r24
    2d7c:	a0 e0       	ldi	r26, 0x00	; 0
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	bc 01       	movw	r22, r24
    2d82:	cd 01       	movw	r24, r26
    2d84:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2d88:	7b 01       	movw	r14, r22
    2d8a:	8c 01       	movw	r16, r24
    2d8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d90:	cc 01       	movw	r24, r24
    2d92:	a0 e0       	ldi	r26, 0x00	; 0
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	bc 01       	movw	r22, r24
    2d98:	cd 01       	movw	r24, r26
    2d9a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2d9e:	9b 01       	movw	r18, r22
    2da0:	ac 01       	movw	r20, r24
    2da2:	c8 01       	movw	r24, r16
    2da4:	b7 01       	movw	r22, r14
    2da6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	9c 01       	movw	r18, r24
    2db0:	ad 01       	movw	r20, r26
    2db2:	c6 01       	movw	r24, r12
    2db4:	b5 01       	movw	r22, r10
    2db6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	7c 01       	movw	r14, r24
    2dc0:	8d 01       	movw	r16, r26
    2dc2:	8f 81       	ldd	r24, Y+7	; 0x07
    2dc4:	98 85       	ldd	r25, Y+8	; 0x08
    2dc6:	cc 01       	movw	r24, r24
    2dc8:	a0 e0       	ldi	r26, 0x00	; 0
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2dd4:	9b 01       	movw	r18, r22
    2dd6:	ac 01       	movw	r20, r24
    2dd8:	c8 01       	movw	r24, r16
    2dda:	b7 01       	movw	r22, r14
    2ddc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	9a 83       	std	Y+2, r25	; 0x02
    2de8:	ab 83       	std	Y+3, r26	; 0x03
    2dea:	bc 83       	std	Y+4, r27	; 0x04
 return X;
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	9a 81       	ldd	r25, Y+2	; 0x02
    2df0:	ab 81       	ldd	r26, Y+3	; 0x03
    2df2:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2df4:	bc 01       	movw	r22, r24
    2df6:	cd 01       	movw	r24, r26
    2df8:	2e 96       	adiw	r28, 0x0e	; 14
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	ff 90       	pop	r15
    2e0e:	ef 90       	pop	r14
    2e10:	df 90       	pop	r13
    2e12:	cf 90       	pop	r12
    2e14:	bf 90       	pop	r11
    2e16:	af 90       	pop	r10
    2e18:	08 95       	ret

00002e1a <HAL_LED_ON>:

/**
 * @describe -> this function is used to set led high
 */
void HAL_LED_ON(u8 port_ , u8 pin)
{
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	00 d0       	rcall	.+0      	; 0x2e20 <HAL_LED_ON+0x6>
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
    2e24:	89 83       	std	Y+1, r24	; 0x01
    2e26:	6a 83       	std	Y+2, r22	; 0x02
	DIO_PIN_WRITE_LOGIC_M(port_,pin,PIN_HIGH);
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e2c:	41 e0       	ldi	r20, 0x01	; 1
    2e2e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
}
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	08 95       	ret

00002e3c <HAL_LED_OFF>:
/**************************************************/
/**
 * @describe -> this function is used to set led low
 */
void HAL_LED_OFF(u8 port_ , u8 pin)
{
    2e3c:	df 93       	push	r29
    2e3e:	cf 93       	push	r28
    2e40:	00 d0       	rcall	.+0      	; 0x2e42 <HAL_LED_OFF+0x6>
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	6a 83       	std	Y+2, r22	; 0x02
	DIO_PIN_WRITE_LOGIC_M(port_,pin,PIN_LOW);
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	6a 81       	ldd	r22, Y+2	; 0x02
    2e4e:	40 e0       	ldi	r20, 0x00	; 0
    2e50:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
}
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <HAL_LED_TOGGLE>:
/**************************************************/
/**
 * @describe -> this function is used to set led low
 */
void HAL_LED_TOGGLE(u8 port_ , u8 pin)
{
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <HAL_LED_TOGGLE+0x6>
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	89 83       	std	Y+1, r24	; 0x01
    2e6a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_PIN_TOGGLE_LOGIC_M(port_,pin);
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	6a 81       	ldd	r22, Y+2	; 0x02
    2e70:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <DIO_PIN_TOGGLE_LOGIC_M>
}
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <HLCD_Send_Command_8bit>:




void HLCD_Send_Command_8bit( u8 command)
{
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	2f 97       	sbiw	r28, 0x0f	; 15
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_LOW);
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	67 e0       	ldi	r22, 0x07	; 7
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	65 e0       	ldi	r22, 0x05	; 5
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PORT_WRITE_LOGIC_M(LCD_PORT_DATA,command);
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	6f 85       	ldd	r22, Y+15	; 0x0f
    2eac:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <DIO_PORT_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	66 e0       	ldi	r22, 0x06	; 6
    2eb4:	41 e0       	ldi	r20, 0x01	; 1
    2eb6:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a0 e0       	ldi	r26, 0x00	; 0
    2ec0:	b0 e4       	ldi	r27, 0x40	; 64
    2ec2:	8b 87       	std	Y+11, r24	; 0x0b
    2ec4:	9c 87       	std	Y+12, r25	; 0x0c
    2ec6:	ad 87       	std	Y+13, r26	; 0x0d
    2ec8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	4a ef       	ldi	r20, 0xFA	; 250
    2ed8:	54 e4       	ldi	r21, 0x44	; 68
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	8f 83       	std	Y+7, r24	; 0x07
    2ee4:	98 87       	std	Y+8, r25	; 0x08
    2ee6:	a9 87       	std	Y+9, r26	; 0x09
    2ee8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e8       	ldi	r20, 0x80	; 128
    2ef8:	5f e3       	ldi	r21, 0x3F	; 63
    2efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2efe:	88 23       	and	r24, r24
    2f00:	2c f4       	brge	.+10     	; 0x2f0c <HLCD_Send_Command_8bit+0x8e>
		__ticks = 1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9e 83       	std	Y+6, r25	; 0x06
    2f08:	8d 83       	std	Y+5, r24	; 0x05
    2f0a:	3f c0       	rjmp	.+126    	; 0x2f8a <HLCD_Send_Command_8bit+0x10c>
	else if (__tmp > 65535)
    2f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0e:	78 85       	ldd	r23, Y+8	; 0x08
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	3f ef       	ldi	r19, 0xFF	; 255
    2f18:	4f e7       	ldi	r20, 0x7F	; 127
    2f1a:	57 e4       	ldi	r21, 0x47	; 71
    2f1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f20:	18 16       	cp	r1, r24
    2f22:	4c f5       	brge	.+82     	; 0x2f76 <HLCD_Send_Command_8bit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e2       	ldi	r20, 0x20	; 32
    2f32:	51 e4       	ldi	r21, 0x41	; 65
    2f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	cd 01       	movw	r24, r26
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
    2f4c:	0f c0       	rjmp	.+30     	; 0x2f6c <HLCD_Send_Command_8bit+0xee>
    2f4e:	88 ec       	ldi	r24, 0xC8	; 200
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	9c 83       	std	Y+4, r25	; 0x04
    2f54:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <HLCD_Send_Command_8bit+0xdc>
    2f5e:	9c 83       	std	Y+4, r25	; 0x04
    2f60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	69 f7       	brne	.-38     	; 0x2f4e <HLCD_Send_Command_8bit+0xd0>
    2f74:	14 c0       	rjmp	.+40     	; 0x2f9e <HLCD_Send_Command_8bit+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	9e 83       	std	Y+6, r25	; 0x06
    2f88:	8d 83       	std	Y+5, r24	; 0x05
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	9a 83       	std	Y+2, r25	; 0x02
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <HLCD_Send_Command_8bit+0x118>
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	66 e0       	ldi	r22, 0x06	; 6
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

}
    2fa8:	2f 96       	adiw	r28, 0x0f	; 15
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <HLCD_INIT_8bit>:
/***********************************/
void HLCD_INIT_8bit(void)
{
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	aa 97       	sbiw	r28, 0x2a	; 42
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	a0 ef       	ldi	r26, 0xF0	; 240
    2fd4:	b1 e4       	ldi	r27, 0x41	; 65
    2fd6:	8f a3       	std	Y+39, r24	; 0x27
    2fd8:	98 a7       	std	Y+40, r25	; 0x28
    2fda:	a9 a7       	std	Y+41, r26	; 0x29
    2fdc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fde:	6f a1       	ldd	r22, Y+39	; 0x27
    2fe0:	78 a5       	ldd	r23, Y+40	; 0x28
    2fe2:	89 a5       	ldd	r24, Y+41	; 0x29
    2fe4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	4a ef       	ldi	r20, 0xFA	; 250
    2fec:	54 e4       	ldi	r21, 0x44	; 68
    2fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	8b a3       	std	Y+35, r24	; 0x23
    2ff8:	9c a3       	std	Y+36, r25	; 0x24
    2ffa:	ad a3       	std	Y+37, r26	; 0x25
    2ffc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    3000:	7c a1       	ldd	r23, Y+36	; 0x24
    3002:	8d a1       	ldd	r24, Y+37	; 0x25
    3004:	9e a1       	ldd	r25, Y+38	; 0x26
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e8       	ldi	r20, 0x80	; 128
    300c:	5f e3       	ldi	r21, 0x3F	; 63
    300e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3012:	88 23       	and	r24, r24
    3014:	2c f4       	brge	.+10     	; 0x3020 <HLCD_INIT_8bit+0x66>
		__ticks = 1;
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	9a a3       	std	Y+34, r25	; 0x22
    301c:	89 a3       	std	Y+33, r24	; 0x21
    301e:	3f c0       	rjmp	.+126    	; 0x309e <HLCD_INIT_8bit+0xe4>
	else if (__tmp > 65535)
    3020:	6b a1       	ldd	r22, Y+35	; 0x23
    3022:	7c a1       	ldd	r23, Y+36	; 0x24
    3024:	8d a1       	ldd	r24, Y+37	; 0x25
    3026:	9e a1       	ldd	r25, Y+38	; 0x26
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	3f ef       	ldi	r19, 0xFF	; 255
    302c:	4f e7       	ldi	r20, 0x7F	; 127
    302e:	57 e4       	ldi	r21, 0x47	; 71
    3030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3034:	18 16       	cp	r1, r24
    3036:	4c f5       	brge	.+82     	; 0x308a <HLCD_INIT_8bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3038:	6f a1       	ldd	r22, Y+39	; 0x27
    303a:	78 a5       	ldd	r23, Y+40	; 0x28
    303c:	89 a5       	ldd	r24, Y+41	; 0x29
    303e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e2       	ldi	r20, 0x20	; 32
    3046:	51 e4       	ldi	r21, 0x41	; 65
    3048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	9a a3       	std	Y+34, r25	; 0x22
    305e:	89 a3       	std	Y+33, r24	; 0x21
    3060:	0f c0       	rjmp	.+30     	; 0x3080 <HLCD_INIT_8bit+0xc6>
    3062:	88 ec       	ldi	r24, 0xC8	; 200
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	98 a3       	std	Y+32, r25	; 0x20
    3068:	8f 8f       	std	Y+31, r24	; 0x1f
    306a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    306c:	98 a1       	ldd	r25, Y+32	; 0x20
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <HLCD_INIT_8bit+0xb4>
    3072:	98 a3       	std	Y+32, r25	; 0x20
    3074:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3076:	89 a1       	ldd	r24, Y+33	; 0x21
    3078:	9a a1       	ldd	r25, Y+34	; 0x22
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	9a a3       	std	Y+34, r25	; 0x22
    307e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3080:	89 a1       	ldd	r24, Y+33	; 0x21
    3082:	9a a1       	ldd	r25, Y+34	; 0x22
    3084:	00 97       	sbiw	r24, 0x00	; 0
    3086:	69 f7       	brne	.-38     	; 0x3062 <HLCD_INIT_8bit+0xa8>
    3088:	14 c0       	rjmp	.+40     	; 0x30b2 <HLCD_INIT_8bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    308a:	6b a1       	ldd	r22, Y+35	; 0x23
    308c:	7c a1       	ldd	r23, Y+36	; 0x24
    308e:	8d a1       	ldd	r24, Y+37	; 0x25
    3090:	9e a1       	ldd	r25, Y+38	; 0x26
    3092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	9a a3       	std	Y+34, r25	; 0x22
    309c:	89 a3       	std	Y+33, r24	; 0x21
    309e:	89 a1       	ldd	r24, Y+33	; 0x21
    30a0:	9a a1       	ldd	r25, Y+34	; 0x22
    30a2:	9e 8f       	std	Y+30, r25	; 0x1e
    30a4:	8d 8f       	std	Y+29, r24	; 0x1d
    30a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <HLCD_INIT_8bit+0xf0>
    30ae:	9e 8f       	std	Y+30, r25	; 0x1e
    30b0:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);
	HLCD_Send_Command_8bit(FUNCTION_SET_8bit_Mode_2row_8_line);
    30b2:	88 e3       	ldi	r24, 0x38	; 56
    30b4:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	a0 e8       	ldi	r26, 0x80	; 128
    30be:	bf e3       	ldi	r27, 0x3F	; 63
    30c0:	89 8f       	std	Y+25, r24	; 0x19
    30c2:	9a 8f       	std	Y+26, r25	; 0x1a
    30c4:	ab 8f       	std	Y+27, r26	; 0x1b
    30c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c8:	69 8d       	ldd	r22, Y+25	; 0x19
    30ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	4a ef       	ldi	r20, 0xFA	; 250
    30d6:	54 e4       	ldi	r21, 0x44	; 68
    30d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	8d 8b       	std	Y+21, r24	; 0x15
    30e2:	9e 8b       	std	Y+22, r25	; 0x16
    30e4:	af 8b       	std	Y+23, r26	; 0x17
    30e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30e8:	6d 89       	ldd	r22, Y+21	; 0x15
    30ea:	7e 89       	ldd	r23, Y+22	; 0x16
    30ec:	8f 89       	ldd	r24, Y+23	; 0x17
    30ee:	98 8d       	ldd	r25, Y+24	; 0x18
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	40 e8       	ldi	r20, 0x80	; 128
    30f6:	5f e3       	ldi	r21, 0x3F	; 63
    30f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30fc:	88 23       	and	r24, r24
    30fe:	2c f4       	brge	.+10     	; 0x310a <HLCD_INIT_8bit+0x150>
		__ticks = 1;
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	9c 8b       	std	Y+20, r25	; 0x14
    3106:	8b 8b       	std	Y+19, r24	; 0x13
    3108:	3f c0       	rjmp	.+126    	; 0x3188 <HLCD_INIT_8bit+0x1ce>
	else if (__tmp > 65535)
    310a:	6d 89       	ldd	r22, Y+21	; 0x15
    310c:	7e 89       	ldd	r23, Y+22	; 0x16
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	98 8d       	ldd	r25, Y+24	; 0x18
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	3f ef       	ldi	r19, 0xFF	; 255
    3116:	4f e7       	ldi	r20, 0x7F	; 127
    3118:	57 e4       	ldi	r21, 0x47	; 71
    311a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    311e:	18 16       	cp	r1, r24
    3120:	4c f5       	brge	.+82     	; 0x3174 <HLCD_INIT_8bit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3122:	69 8d       	ldd	r22, Y+25	; 0x19
    3124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e2       	ldi	r20, 0x20	; 32
    3130:	51 e4       	ldi	r21, 0x41	; 65
    3132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	bc 01       	movw	r22, r24
    313c:	cd 01       	movw	r24, r26
    313e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	9c 8b       	std	Y+20, r25	; 0x14
    3148:	8b 8b       	std	Y+19, r24	; 0x13
    314a:	0f c0       	rjmp	.+30     	; 0x316a <HLCD_INIT_8bit+0x1b0>
    314c:	88 ec       	ldi	r24, 0xC8	; 200
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	9a 8b       	std	Y+18, r25	; 0x12
    3152:	89 8b       	std	Y+17, r24	; 0x11
    3154:	89 89       	ldd	r24, Y+17	; 0x11
    3156:	9a 89       	ldd	r25, Y+18	; 0x12
    3158:	01 97       	sbiw	r24, 0x01	; 1
    315a:	f1 f7       	brne	.-4      	; 0x3158 <HLCD_INIT_8bit+0x19e>
    315c:	9a 8b       	std	Y+18, r25	; 0x12
    315e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3160:	8b 89       	ldd	r24, Y+19	; 0x13
    3162:	9c 89       	ldd	r25, Y+20	; 0x14
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	9c 8b       	std	Y+20, r25	; 0x14
    3168:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    316a:	8b 89       	ldd	r24, Y+19	; 0x13
    316c:	9c 89       	ldd	r25, Y+20	; 0x14
    316e:	00 97       	sbiw	r24, 0x00	; 0
    3170:	69 f7       	brne	.-38     	; 0x314c <HLCD_INIT_8bit+0x192>
    3172:	14 c0       	rjmp	.+40     	; 0x319c <HLCD_INIT_8bit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3174:	6d 89       	ldd	r22, Y+21	; 0x15
    3176:	7e 89       	ldd	r23, Y+22	; 0x16
    3178:	8f 89       	ldd	r24, Y+23	; 0x17
    317a:	98 8d       	ldd	r25, Y+24	; 0x18
    317c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	9c 8b       	std	Y+20, r25	; 0x14
    3186:	8b 8b       	std	Y+19, r24	; 0x13
    3188:	8b 89       	ldd	r24, Y+19	; 0x13
    318a:	9c 89       	ldd	r25, Y+20	; 0x14
    318c:	98 8b       	std	Y+16, r25	; 0x10
    318e:	8f 87       	std	Y+15, r24	; 0x0f
    3190:	8f 85       	ldd	r24, Y+15	; 0x0f
    3192:	98 89       	ldd	r25, Y+16	; 0x10
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	f1 f7       	brne	.-4      	; 0x3194 <HLCD_INIT_8bit+0x1da>
    3198:	98 8b       	std	Y+16, r25	; 0x10
    319a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_Send_Command_8bit(LCD_CMD_DISPLAY_ON_CURSOR_ON_BC_ON);
    319c:	8f e0       	ldi	r24, 0x0F	; 15
    319e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	a0 e8       	ldi	r26, 0x80	; 128
    31a8:	bf e3       	ldi	r27, 0x3F	; 63
    31aa:	8b 87       	std	Y+11, r24	; 0x0b
    31ac:	9c 87       	std	Y+12, r25	; 0x0c
    31ae:	ad 87       	std	Y+13, r26	; 0x0d
    31b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	4a ef       	ldi	r20, 0xFA	; 250
    31c0:	54 e4       	ldi	r21, 0x44	; 68
    31c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	8f 83       	std	Y+7, r24	; 0x07
    31cc:	98 87       	std	Y+8, r25	; 0x08
    31ce:	a9 87       	std	Y+9, r26	; 0x09
    31d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31d2:	6f 81       	ldd	r22, Y+7	; 0x07
    31d4:	78 85       	ldd	r23, Y+8	; 0x08
    31d6:	89 85       	ldd	r24, Y+9	; 0x09
    31d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	40 e8       	ldi	r20, 0x80	; 128
    31e0:	5f e3       	ldi	r21, 0x3F	; 63
    31e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31e6:	88 23       	and	r24, r24
    31e8:	2c f4       	brge	.+10     	; 0x31f4 <HLCD_INIT_8bit+0x23a>
		__ticks = 1;
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	9e 83       	std	Y+6, r25	; 0x06
    31f0:	8d 83       	std	Y+5, r24	; 0x05
    31f2:	3f c0       	rjmp	.+126    	; 0x3272 <HLCD_INIT_8bit+0x2b8>
	else if (__tmp > 65535)
    31f4:	6f 81       	ldd	r22, Y+7	; 0x07
    31f6:	78 85       	ldd	r23, Y+8	; 0x08
    31f8:	89 85       	ldd	r24, Y+9	; 0x09
    31fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	3f ef       	ldi	r19, 0xFF	; 255
    3200:	4f e7       	ldi	r20, 0x7F	; 127
    3202:	57 e4       	ldi	r21, 0x47	; 71
    3204:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3208:	18 16       	cp	r1, r24
    320a:	4c f5       	brge	.+82     	; 0x325e <HLCD_INIT_8bit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    320c:	6b 85       	ldd	r22, Y+11	; 0x0b
    320e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3210:	8d 85       	ldd	r24, Y+13	; 0x0d
    3212:	9e 85       	ldd	r25, Y+14	; 0x0e
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	40 e2       	ldi	r20, 0x20	; 32
    321a:	51 e4       	ldi	r21, 0x41	; 65
    321c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	bc 01       	movw	r22, r24
    3226:	cd 01       	movw	r24, r26
    3228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	9e 83       	std	Y+6, r25	; 0x06
    3232:	8d 83       	std	Y+5, r24	; 0x05
    3234:	0f c0       	rjmp	.+30     	; 0x3254 <HLCD_INIT_8bit+0x29a>
    3236:	88 ec       	ldi	r24, 0xC8	; 200
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	9c 83       	std	Y+4, r25	; 0x04
    323c:	8b 83       	std	Y+3, r24	; 0x03
    323e:	8b 81       	ldd	r24, Y+3	; 0x03
    3240:	9c 81       	ldd	r25, Y+4	; 0x04
    3242:	01 97       	sbiw	r24, 0x01	; 1
    3244:	f1 f7       	brne	.-4      	; 0x3242 <HLCD_INIT_8bit+0x288>
    3246:	9c 83       	std	Y+4, r25	; 0x04
    3248:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324a:	8d 81       	ldd	r24, Y+5	; 0x05
    324c:	9e 81       	ldd	r25, Y+6	; 0x06
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	9e 83       	std	Y+6, r25	; 0x06
    3252:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3254:	8d 81       	ldd	r24, Y+5	; 0x05
    3256:	9e 81       	ldd	r25, Y+6	; 0x06
    3258:	00 97       	sbiw	r24, 0x00	; 0
    325a:	69 f7       	brne	.-38     	; 0x3236 <HLCD_INIT_8bit+0x27c>
    325c:	14 c0       	rjmp	.+40     	; 0x3286 <HLCD_INIT_8bit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    325e:	6f 81       	ldd	r22, Y+7	; 0x07
    3260:	78 85       	ldd	r23, Y+8	; 0x08
    3262:	89 85       	ldd	r24, Y+9	; 0x09
    3264:	9a 85       	ldd	r25, Y+10	; 0x0a
    3266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	9e 83       	std	Y+6, r25	; 0x06
    3270:	8d 83       	std	Y+5, r24	; 0x05
    3272:	8d 81       	ldd	r24, Y+5	; 0x05
    3274:	9e 81       	ldd	r25, Y+6	; 0x06
    3276:	9a 83       	std	Y+2, r25	; 0x02
    3278:	89 83       	std	Y+1, r24	; 0x01
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	9a 81       	ldd	r25, Y+2	; 0x02
    327e:	01 97       	sbiw	r24, 0x01	; 1
    3280:	f1 f7       	brne	.-4      	; 0x327e <HLCD_INIT_8bit+0x2c4>
    3282:	9a 83       	std	Y+2, r25	; 0x02
    3284:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>

}
    328c:	aa 96       	adiw	r28, 0x2a	; 42
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	cf 91       	pop	r28
    329a:	df 91       	pop	r29
    329c:	08 95       	ret

0000329e <HLCD_Send_char_8bit>:
void HLCD_Send_char_8bit( u8 data)
{
    329e:	df 93       	push	r29
    32a0:	cf 93       	push	r28
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	2f 97       	sbiw	r28, 0x0f	; 15
    32a8:	0f b6       	in	r0, 0x3f	; 63
    32aa:	f8 94       	cli
    32ac:	de bf       	out	0x3e, r29	; 62
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	cd bf       	out	0x3d, r28	; 61
    32b2:	8f 87       	std	Y+15, r24	; 0x0f
	/*clear rs to select command*/
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_HIGH);
    32b4:	82 e0       	ldi	r24, 0x02	; 2
    32b6:	67 e0       	ldi	r22, 0x07	; 7
    32b8:	41 e0       	ldi	r20, 0x01	; 1
    32ba:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
    32be:	82 e0       	ldi	r24, 0x02	; 2
    32c0:	65 e0       	ldi	r22, 0x05	; 5
    32c2:	40 e0       	ldi	r20, 0x00	; 0
    32c4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PORT_WRITE_LOGIC_M(LCD_PORT_DATA,data);
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    32cc:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <DIO_PORT_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	66 e0       	ldi	r22, 0x06	; 6
    32d4:	41 e0       	ldi	r20, 0x01	; 1
    32d6:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	a0 e0       	ldi	r26, 0x00	; 0
    32e0:	b0 e4       	ldi	r27, 0x40	; 64
    32e2:	8b 87       	std	Y+11, r24	; 0x0b
    32e4:	9c 87       	std	Y+12, r25	; 0x0c
    32e6:	ad 87       	std	Y+13, r26	; 0x0d
    32e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	4a ef       	ldi	r20, 0xFA	; 250
    32f8:	54 e4       	ldi	r21, 0x44	; 68
    32fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	8f 83       	std	Y+7, r24	; 0x07
    3304:	98 87       	std	Y+8, r25	; 0x08
    3306:	a9 87       	std	Y+9, r26	; 0x09
    3308:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    330a:	6f 81       	ldd	r22, Y+7	; 0x07
    330c:	78 85       	ldd	r23, Y+8	; 0x08
    330e:	89 85       	ldd	r24, Y+9	; 0x09
    3310:	9a 85       	ldd	r25, Y+10	; 0x0a
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e8       	ldi	r20, 0x80	; 128
    3318:	5f e3       	ldi	r21, 0x3F	; 63
    331a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    331e:	88 23       	and	r24, r24
    3320:	2c f4       	brge	.+10     	; 0x332c <HLCD_Send_char_8bit+0x8e>
		__ticks = 1;
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	9e 83       	std	Y+6, r25	; 0x06
    3328:	8d 83       	std	Y+5, r24	; 0x05
    332a:	3f c0       	rjmp	.+126    	; 0x33aa <HLCD_Send_char_8bit+0x10c>
	else if (__tmp > 65535)
    332c:	6f 81       	ldd	r22, Y+7	; 0x07
    332e:	78 85       	ldd	r23, Y+8	; 0x08
    3330:	89 85       	ldd	r24, Y+9	; 0x09
    3332:	9a 85       	ldd	r25, Y+10	; 0x0a
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	3f ef       	ldi	r19, 0xFF	; 255
    3338:	4f e7       	ldi	r20, 0x7F	; 127
    333a:	57 e4       	ldi	r21, 0x47	; 71
    333c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3340:	18 16       	cp	r1, r24
    3342:	4c f5       	brge	.+82     	; 0x3396 <HLCD_Send_char_8bit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3344:	6b 85       	ldd	r22, Y+11	; 0x0b
    3346:	7c 85       	ldd	r23, Y+12	; 0x0c
    3348:	8d 85       	ldd	r24, Y+13	; 0x0d
    334a:	9e 85       	ldd	r25, Y+14	; 0x0e
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	40 e2       	ldi	r20, 0x20	; 32
    3352:	51 e4       	ldi	r21, 0x41	; 65
    3354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	bc 01       	movw	r22, r24
    335e:	cd 01       	movw	r24, r26
    3360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	9e 83       	std	Y+6, r25	; 0x06
    336a:	8d 83       	std	Y+5, r24	; 0x05
    336c:	0f c0       	rjmp	.+30     	; 0x338c <HLCD_Send_char_8bit+0xee>
    336e:	88 ec       	ldi	r24, 0xC8	; 200
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	9c 83       	std	Y+4, r25	; 0x04
    3374:	8b 83       	std	Y+3, r24	; 0x03
    3376:	8b 81       	ldd	r24, Y+3	; 0x03
    3378:	9c 81       	ldd	r25, Y+4	; 0x04
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <HLCD_Send_char_8bit+0xdc>
    337e:	9c 83       	std	Y+4, r25	; 0x04
    3380:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3382:	8d 81       	ldd	r24, Y+5	; 0x05
    3384:	9e 81       	ldd	r25, Y+6	; 0x06
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	9e 83       	std	Y+6, r25	; 0x06
    338a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338c:	8d 81       	ldd	r24, Y+5	; 0x05
    338e:	9e 81       	ldd	r25, Y+6	; 0x06
    3390:	00 97       	sbiw	r24, 0x00	; 0
    3392:	69 f7       	brne	.-38     	; 0x336e <HLCD_Send_char_8bit+0xd0>
    3394:	14 c0       	rjmp	.+40     	; 0x33be <HLCD_Send_char_8bit+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3396:	6f 81       	ldd	r22, Y+7	; 0x07
    3398:	78 85       	ldd	r23, Y+8	; 0x08
    339a:	89 85       	ldd	r24, Y+9	; 0x09
    339c:	9a 85       	ldd	r25, Y+10	; 0x0a
    339e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	9e 83       	std	Y+6, r25	; 0x06
    33a8:	8d 83       	std	Y+5, r24	; 0x05
    33aa:	8d 81       	ldd	r24, Y+5	; 0x05
    33ac:	9e 81       	ldd	r25, Y+6	; 0x06
    33ae:	9a 83       	std	Y+2, r25	; 0x02
    33b0:	89 83       	std	Y+1, r24	; 0x01
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	9a 81       	ldd	r25, Y+2	; 0x02
    33b6:	01 97       	sbiw	r24, 0x01	; 1
    33b8:	f1 f7       	brne	.-4      	; 0x33b6 <HLCD_Send_char_8bit+0x118>
    33ba:	9a 83       	std	Y+2, r25	; 0x02
    33bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    33be:	82 e0       	ldi	r24, 0x02	; 2
    33c0:	66 e0       	ldi	r22, 0x06	; 6
    33c2:	40 e0       	ldi	r20, 0x00	; 0
    33c4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

}
    33c8:	2f 96       	adiw	r28, 0x0f	; 15
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	08 95       	ret

000033da <HLCD_Send_String_Position_8bit>:
/*****************************************/

Std_ReturnType HLCD_Send_String_Position_8bit(u8 *string,u8 row , u8 column)
{
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	27 97       	sbiw	r28, 0x07	; 7
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	9b 83       	std	Y+3, r25	; 0x03
    33f0:	8a 83       	std	Y+2, r24	; 0x02
    33f2:	6c 83       	std	Y+4, r22	; 0x04
    33f4:	4d 83       	std	Y+5, r20	; 0x05
	Std_ReturnType status =E_OK;
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	89 83       	std	Y+1, r24	; 0x01
	switch(row)
    33fa:	8c 81       	ldd	r24, Y+4	; 0x04
    33fc:	28 2f       	mov	r18, r24
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	3f 83       	std	Y+7, r19	; 0x07
    3402:	2e 83       	std	Y+6, r18	; 0x06
    3404:	8e 81       	ldd	r24, Y+6	; 0x06
    3406:	9f 81       	ldd	r25, Y+7	; 0x07
    3408:	84 39       	cpi	r24, 0x94	; 148
    340a:	91 05       	cpc	r25, r1
    340c:	61 f1       	breq	.+88     	; 0x3466 <HLCD_Send_String_Position_8bit+0x8c>
    340e:	2e 81       	ldd	r18, Y+6	; 0x06
    3410:	3f 81       	ldd	r19, Y+7	; 0x07
    3412:	25 39       	cpi	r18, 0x95	; 149
    3414:	31 05       	cpc	r19, r1
    3416:	34 f4       	brge	.+12     	; 0x3424 <HLCD_Send_String_Position_8bit+0x4a>
    3418:	8e 81       	ldd	r24, Y+6	; 0x06
    341a:	9f 81       	ldd	r25, Y+7	; 0x07
    341c:	80 38       	cpi	r24, 0x80	; 128
    341e:	91 05       	cpc	r25, r1
    3420:	61 f0       	breq	.+24     	; 0x343a <HLCD_Send_String_Position_8bit+0x60>
    3422:	37 c0       	rjmp	.+110    	; 0x3492 <HLCD_Send_String_Position_8bit+0xb8>
    3424:	2e 81       	ldd	r18, Y+6	; 0x06
    3426:	3f 81       	ldd	r19, Y+7	; 0x07
    3428:	20 3c       	cpi	r18, 0xC0	; 192
    342a:	31 05       	cpc	r19, r1
    342c:	89 f0       	breq	.+34     	; 0x3450 <HLCD_Send_String_Position_8bit+0x76>
    342e:	8e 81       	ldd	r24, Y+6	; 0x06
    3430:	9f 81       	ldd	r25, Y+7	; 0x07
    3432:	84 3d       	cpi	r24, 0xD4	; 212
    3434:	91 05       	cpc	r25, r1
    3436:	11 f1       	breq	.+68     	; 0x347c <HLCD_Send_String_Position_8bit+0xa2>
    3438:	2c c0       	rjmp	.+88     	; 0x3492 <HLCD_Send_String_Position_8bit+0xb8>
	{
	case LCD_GO_ROW1 : HLCD_Send_Command_8bit(LCD_GO_ROW1+column);status =E_OK;
    343a:	8d 81       	ldd	r24, Y+5	; 0x05
    343c:	80 58       	subi	r24, 0x80	; 128
    343e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_8bit(string); break;
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	9b 81       	ldd	r25, Y+3	; 0x03
    344a:	0e 94 04 1b 	call	0x3608	; 0x3608 <HLCD_Send_String_8bit>
    344e:	22 c0       	rjmp	.+68     	; 0x3494 <HLCD_Send_String_Position_8bit+0xba>

	case LCD_GO_ROW2 : HLCD_Send_Command_8bit(LCD_GO_ROW2+column);status =E_OK;
    3450:	8d 81       	ldd	r24, Y+5	; 0x05
    3452:	80 54       	subi	r24, 0x40	; 64
    3454:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_8bit(string); break;
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	9b 81       	ldd	r25, Y+3	; 0x03
    3460:	0e 94 04 1b 	call	0x3608	; 0x3608 <HLCD_Send_String_8bit>
    3464:	17 c0       	rjmp	.+46     	; 0x3494 <HLCD_Send_String_Position_8bit+0xba>

	case LCD_GO_ROW3 : HLCD_Send_Command_8bit(LCD_GO_ROW3+column);status =E_OK;
    3466:	8d 81       	ldd	r24, Y+5	; 0x05
    3468:	8c 56       	subi	r24, 0x6C	; 108
    346a:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_8bit(string); break;
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	9b 81       	ldd	r25, Y+3	; 0x03
    3476:	0e 94 04 1b 	call	0x3608	; 0x3608 <HLCD_Send_String_8bit>
    347a:	0c c0       	rjmp	.+24     	; 0x3494 <HLCD_Send_String_Position_8bit+0xba>

	case LCD_GO_ROW4 : HLCD_Send_Command_8bit(LCD_GO_ROW4+column);status =E_OK;
    347c:	8d 81       	ldd	r24, Y+5	; 0x05
    347e:	8c 52       	subi	r24, 0x2C	; 44
    3480:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_8bit(string); break;
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	9b 81       	ldd	r25, Y+3	; 0x03
    348c:	0e 94 04 1b 	call	0x3608	; 0x3608 <HLCD_Send_String_8bit>
    3490:	01 c0       	rjmp	.+2      	; 0x3494 <HLCD_Send_String_Position_8bit+0xba>

	default :status =E_NOT_OK; break;
    3492:	19 82       	std	Y+1, r1	; 0x01
	}
	return status ;
    3494:	89 81       	ldd	r24, Y+1	; 0x01
}
    3496:	27 96       	adiw	r28, 0x07	; 7
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	cf 91       	pop	r28
    34a4:	df 91       	pop	r29
    34a6:	08 95       	ret

000034a8 <HLCD_Send_CursorPosition_8bit>:

/********************************/
Std_ReturnType HLCD_Send_CursorPosition_8bit(u8 row , u8 column)
{
    34a8:	df 93       	push	r29
    34aa:	cf 93       	push	r28
    34ac:	00 d0       	rcall	.+0      	; 0x34ae <HLCD_Send_CursorPosition_8bit+0x6>
    34ae:	00 d0       	rcall	.+0      	; 0x34b0 <HLCD_Send_CursorPosition_8bit+0x8>
    34b0:	0f 92       	push	r0
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	8a 83       	std	Y+2, r24	; 0x02
    34b8:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType status =E_OK;
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	89 83       	std	Y+1, r24	; 0x01
	switch(row)
    34be:	8a 81       	ldd	r24, Y+2	; 0x02
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	3d 83       	std	Y+5, r19	; 0x05
    34c6:	2c 83       	std	Y+4, r18	; 0x04
    34c8:	8c 81       	ldd	r24, Y+4	; 0x04
    34ca:	9d 81       	ldd	r25, Y+5	; 0x05
    34cc:	84 39       	cpi	r24, 0x94	; 148
    34ce:	91 05       	cpc	r25, r1
    34d0:	21 f1       	breq	.+72     	; 0x351a <HLCD_Send_CursorPosition_8bit+0x72>
    34d2:	2c 81       	ldd	r18, Y+4	; 0x04
    34d4:	3d 81       	ldd	r19, Y+5	; 0x05
    34d6:	25 39       	cpi	r18, 0x95	; 149
    34d8:	31 05       	cpc	r19, r1
    34da:	34 f4       	brge	.+12     	; 0x34e8 <HLCD_Send_CursorPosition_8bit+0x40>
    34dc:	8c 81       	ldd	r24, Y+4	; 0x04
    34de:	9d 81       	ldd	r25, Y+5	; 0x05
    34e0:	80 38       	cpi	r24, 0x80	; 128
    34e2:	91 05       	cpc	r25, r1
    34e4:	61 f0       	breq	.+24     	; 0x34fe <HLCD_Send_CursorPosition_8bit+0x56>
    34e6:	27 c0       	rjmp	.+78     	; 0x3536 <HLCD_Send_CursorPosition_8bit+0x8e>
    34e8:	2c 81       	ldd	r18, Y+4	; 0x04
    34ea:	3d 81       	ldd	r19, Y+5	; 0x05
    34ec:	20 3c       	cpi	r18, 0xC0	; 192
    34ee:	31 05       	cpc	r19, r1
    34f0:	69 f0       	breq	.+26     	; 0x350c <HLCD_Send_CursorPosition_8bit+0x64>
    34f2:	8c 81       	ldd	r24, Y+4	; 0x04
    34f4:	9d 81       	ldd	r25, Y+5	; 0x05
    34f6:	84 3d       	cpi	r24, 0xD4	; 212
    34f8:	91 05       	cpc	r25, r1
    34fa:	b1 f0       	breq	.+44     	; 0x3528 <HLCD_Send_CursorPosition_8bit+0x80>
    34fc:	1c c0       	rjmp	.+56     	; 0x3536 <HLCD_Send_CursorPosition_8bit+0x8e>
	{
	case LCD_GO_ROW1 : HLCD_Send_Command_8bit(LCD_GO_ROW1+column);status =E_OK;
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	80 58       	subi	r24, 0x80	; 128
    3502:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	89 83       	std	Y+1, r24	; 0x01
    350a:	16 c0       	rjmp	.+44     	; 0x3538 <HLCD_Send_CursorPosition_8bit+0x90>
	break;

	case LCD_GO_ROW2 : HLCD_Send_Command_8bit(LCD_GO_ROW2+column);status =E_OK;
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	80 54       	subi	r24, 0x40	; 64
    3510:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	89 83       	std	Y+1, r24	; 0x01
    3518:	0f c0       	rjmp	.+30     	; 0x3538 <HLCD_Send_CursorPosition_8bit+0x90>
	break;

	case LCD_GO_ROW3 : HLCD_Send_Command_8bit(LCD_GO_ROW3+column);status =E_OK;
    351a:	8b 81       	ldd	r24, Y+3	; 0x03
    351c:	8c 56       	subi	r24, 0x6C	; 108
    351e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	89 83       	std	Y+1, r24	; 0x01
    3526:	08 c0       	rjmp	.+16     	; 0x3538 <HLCD_Send_CursorPosition_8bit+0x90>
	break;

	case LCD_GO_ROW4 : HLCD_Send_Command_8bit(LCD_GO_ROW4+column);status =E_OK;
    3528:	8b 81       	ldd	r24, Y+3	; 0x03
    352a:	8c 52       	subi	r24, 0x2C	; 44
    352c:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	89 83       	std	Y+1, r24	; 0x01
    3534:	01 c0       	rjmp	.+2      	; 0x3538 <HLCD_Send_CursorPosition_8bit+0x90>
	break;

	default :status =E_NOT_OK; break;
    3536:	19 82       	std	Y+1, r1	; 0x01
	}
	return status ;
    3538:	89 81       	ldd	r24, Y+1	; 0x01
}
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	cf 91       	pop	r28
    3546:	df 91       	pop	r29
    3548:	08 95       	ret

0000354a <HLCD_Send_char_Position_8bit>:
/**************************************/
Std_ReturnType HLCD_Send_char_Position_8bit(u8 data,u8 row , u8 column)
{
    354a:	df 93       	push	r29
    354c:	cf 93       	push	r28
    354e:	00 d0       	rcall	.+0      	; 0x3550 <HLCD_Send_char_Position_8bit+0x6>
    3550:	00 d0       	rcall	.+0      	; 0x3552 <HLCD_Send_char_Position_8bit+0x8>
    3552:	00 d0       	rcall	.+0      	; 0x3554 <HLCD_Send_char_Position_8bit+0xa>
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	8a 83       	std	Y+2, r24	; 0x02
    355a:	6b 83       	std	Y+3, r22	; 0x03
    355c:	4c 83       	std	Y+4, r20	; 0x04
	Std_ReturnType status =E_OK;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	89 83       	std	Y+1, r24	; 0x01
	switch(row)
    3562:	8b 81       	ldd	r24, Y+3	; 0x03
    3564:	28 2f       	mov	r18, r24
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	3e 83       	std	Y+6, r19	; 0x06
    356a:	2d 83       	std	Y+5, r18	; 0x05
    356c:	8d 81       	ldd	r24, Y+5	; 0x05
    356e:	9e 81       	ldd	r25, Y+6	; 0x06
    3570:	84 39       	cpi	r24, 0x94	; 148
    3572:	91 05       	cpc	r25, r1
    3574:	51 f1       	breq	.+84     	; 0x35ca <HLCD_Send_char_Position_8bit+0x80>
    3576:	2d 81       	ldd	r18, Y+5	; 0x05
    3578:	3e 81       	ldd	r19, Y+6	; 0x06
    357a:	25 39       	cpi	r18, 0x95	; 149
    357c:	31 05       	cpc	r19, r1
    357e:	34 f4       	brge	.+12     	; 0x358c <HLCD_Send_char_Position_8bit+0x42>
    3580:	8d 81       	ldd	r24, Y+5	; 0x05
    3582:	9e 81       	ldd	r25, Y+6	; 0x06
    3584:	80 38       	cpi	r24, 0x80	; 128
    3586:	91 05       	cpc	r25, r1
    3588:	61 f0       	breq	.+24     	; 0x35a2 <HLCD_Send_char_Position_8bit+0x58>
    358a:	33 c0       	rjmp	.+102    	; 0x35f2 <HLCD_Send_char_Position_8bit+0xa8>
    358c:	2d 81       	ldd	r18, Y+5	; 0x05
    358e:	3e 81       	ldd	r19, Y+6	; 0x06
    3590:	20 3c       	cpi	r18, 0xC0	; 192
    3592:	31 05       	cpc	r19, r1
    3594:	81 f0       	breq	.+32     	; 0x35b6 <HLCD_Send_char_Position_8bit+0x6c>
    3596:	8d 81       	ldd	r24, Y+5	; 0x05
    3598:	9e 81       	ldd	r25, Y+6	; 0x06
    359a:	84 3d       	cpi	r24, 0xD4	; 212
    359c:	91 05       	cpc	r25, r1
    359e:	f9 f0       	breq	.+62     	; 0x35de <HLCD_Send_char_Position_8bit+0x94>
    35a0:	28 c0       	rjmp	.+80     	; 0x35f2 <HLCD_Send_char_Position_8bit+0xa8>
	{
	case LCD_GO_ROW1 : HLCD_Send_Command_8bit(LCD_GO_ROW1+column);status =E_OK;
    35a2:	8c 81       	ldd	r24, Y+4	; 0x04
    35a4:	80 58       	subi	r24, 0x80	; 128
    35a6:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_8bit(data);break;
    35ae:	8a 81       	ldd	r24, Y+2	; 0x02
    35b0:	0e 94 4f 19 	call	0x329e	; 0x329e <HLCD_Send_char_8bit>
    35b4:	1f c0       	rjmp	.+62     	; 0x35f4 <HLCD_Send_char_Position_8bit+0xaa>

	case LCD_GO_ROW2 : HLCD_Send_Command_8bit(LCD_GO_ROW2+column);status =E_OK;
    35b6:	8c 81       	ldd	r24, Y+4	; 0x04
    35b8:	80 54       	subi	r24, 0x40	; 64
    35ba:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_8bit(data); break;
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	0e 94 4f 19 	call	0x329e	; 0x329e <HLCD_Send_char_8bit>
    35c8:	15 c0       	rjmp	.+42     	; 0x35f4 <HLCD_Send_char_Position_8bit+0xaa>

	case LCD_GO_ROW3 : HLCD_Send_Command_8bit(LCD_GO_ROW3+column);status =E_OK;
    35ca:	8c 81       	ldd	r24, Y+4	; 0x04
    35cc:	8c 56       	subi	r24, 0x6C	; 108
    35ce:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_8bit(data); break;
    35d6:	8a 81       	ldd	r24, Y+2	; 0x02
    35d8:	0e 94 4f 19 	call	0x329e	; 0x329e <HLCD_Send_char_8bit>
    35dc:	0b c0       	rjmp	.+22     	; 0x35f4 <HLCD_Send_char_Position_8bit+0xaa>

	case LCD_GO_ROW4 : HLCD_Send_Command_8bit(LCD_GO_ROW4+column);status =E_OK;
    35de:	8c 81       	ldd	r24, Y+4	; 0x04
    35e0:	8c 52       	subi	r24, 0x2C	; 44
    35e2:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HLCD_Send_Command_8bit>
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_8bit(data); break;
    35ea:	8a 81       	ldd	r24, Y+2	; 0x02
    35ec:	0e 94 4f 19 	call	0x329e	; 0x329e <HLCD_Send_char_8bit>
    35f0:	01 c0       	rjmp	.+2      	; 0x35f4 <HLCD_Send_char_Position_8bit+0xaa>

	default :status =E_NOT_OK; break;
    35f2:	19 82       	std	Y+1, r1	; 0x01
	}
	return status ;
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    35f6:	26 96       	adiw	r28, 0x06	; 6
    35f8:	0f b6       	in	r0, 0x3f	; 63
    35fa:	f8 94       	cli
    35fc:	de bf       	out	0x3e, r29	; 62
    35fe:	0f be       	out	0x3f, r0	; 63
    3600:	cd bf       	out	0x3d, r28	; 61
    3602:	cf 91       	pop	r28
    3604:	df 91       	pop	r29
    3606:	08 95       	ret

00003608 <HLCD_Send_String_8bit>:
/*********************************************/
void HLCD_Send_String_8bit( u8 *data)
{
    3608:	df 93       	push	r29
    360a:	cf 93       	push	r28
    360c:	cd b7       	in	r28, 0x3d	; 61
    360e:	de b7       	in	r29, 0x3e	; 62
    3610:	60 97       	sbiw	r28, 0x10	; 16
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	de bf       	out	0x3e, r29	; 62
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	cd bf       	out	0x3d, r28	; 61
    361c:	98 8b       	std	Y+16, r25	; 0x10
    361e:	8f 87       	std	Y+15, r24	; 0x0f
	/*clear rs to select command*/
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_HIGH);
    3620:	82 e0       	ldi	r24, 0x02	; 2
    3622:	67 e0       	ldi	r22, 0x07	; 7
    3624:	41 e0       	ldi	r20, 0x01	; 1
    3626:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	65 e0       	ldi	r22, 0x05	; 5
    362e:	40 e0       	ldi	r20, 0x00	; 0
    3630:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    3634:	88 c0       	rjmp	.+272    	; 0x3746 <HLCD_Send_String_8bit+0x13e>
	while(*data)
	{
		DIO_PORT_WRITE_LOGIC_M(LCD_PORT_DATA,*data++);
    3636:	ef 85       	ldd	r30, Y+15	; 0x0f
    3638:	f8 89       	ldd	r31, Y+16	; 0x10
    363a:	20 81       	ld	r18, Z
    363c:	8f 85       	ldd	r24, Y+15	; 0x0f
    363e:	98 89       	ldd	r25, Y+16	; 0x10
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	98 8b       	std	Y+16, r25	; 0x10
    3644:	8f 87       	std	Y+15, r24	; 0x0f
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	62 2f       	mov	r22, r18
    364a:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <DIO_PORT_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    364e:	82 e0       	ldi	r24, 0x02	; 2
    3650:	66 e0       	ldi	r22, 0x06	; 6
    3652:	41 e0       	ldi	r20, 0x01	; 1
    3654:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	a0 e0       	ldi	r26, 0x00	; 0
    365e:	b0 e4       	ldi	r27, 0x40	; 64
    3660:	8b 87       	std	Y+11, r24	; 0x0b
    3662:	9c 87       	std	Y+12, r25	; 0x0c
    3664:	ad 87       	std	Y+13, r26	; 0x0d
    3666:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3668:	6b 85       	ldd	r22, Y+11	; 0x0b
    366a:	7c 85       	ldd	r23, Y+12	; 0x0c
    366c:	8d 85       	ldd	r24, Y+13	; 0x0d
    366e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	4a ef       	ldi	r20, 0xFA	; 250
    3676:	54 e4       	ldi	r21, 0x44	; 68
    3678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	8f 83       	std	Y+7, r24	; 0x07
    3682:	98 87       	std	Y+8, r25	; 0x08
    3684:	a9 87       	std	Y+9, r26	; 0x09
    3686:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3688:	6f 81       	ldd	r22, Y+7	; 0x07
    368a:	78 85       	ldd	r23, Y+8	; 0x08
    368c:	89 85       	ldd	r24, Y+9	; 0x09
    368e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	40 e8       	ldi	r20, 0x80	; 128
    3696:	5f e3       	ldi	r21, 0x3F	; 63
    3698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    369c:	88 23       	and	r24, r24
    369e:	2c f4       	brge	.+10     	; 0x36aa <HLCD_Send_String_8bit+0xa2>
		__ticks = 1;
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	9e 83       	std	Y+6, r25	; 0x06
    36a6:	8d 83       	std	Y+5, r24	; 0x05
    36a8:	3f c0       	rjmp	.+126    	; 0x3728 <HLCD_Send_String_8bit+0x120>
	else if (__tmp > 65535)
    36aa:	6f 81       	ldd	r22, Y+7	; 0x07
    36ac:	78 85       	ldd	r23, Y+8	; 0x08
    36ae:	89 85       	ldd	r24, Y+9	; 0x09
    36b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	3f ef       	ldi	r19, 0xFF	; 255
    36b6:	4f e7       	ldi	r20, 0x7F	; 127
    36b8:	57 e4       	ldi	r21, 0x47	; 71
    36ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36be:	18 16       	cp	r1, r24
    36c0:	4c f5       	brge	.+82     	; 0x3714 <HLCD_Send_String_8bit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	40 e2       	ldi	r20, 0x20	; 32
    36d0:	51 e4       	ldi	r21, 0x41	; 65
    36d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d6:	dc 01       	movw	r26, r24
    36d8:	cb 01       	movw	r24, r22
    36da:	bc 01       	movw	r22, r24
    36dc:	cd 01       	movw	r24, r26
    36de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	9e 83       	std	Y+6, r25	; 0x06
    36e8:	8d 83       	std	Y+5, r24	; 0x05
    36ea:	0f c0       	rjmp	.+30     	; 0x370a <HLCD_Send_String_8bit+0x102>
    36ec:	88 ec       	ldi	r24, 0xC8	; 200
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	9c 83       	std	Y+4, r25	; 0x04
    36f2:	8b 83       	std	Y+3, r24	; 0x03
    36f4:	8b 81       	ldd	r24, Y+3	; 0x03
    36f6:	9c 81       	ldd	r25, Y+4	; 0x04
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	f1 f7       	brne	.-4      	; 0x36f8 <HLCD_Send_String_8bit+0xf0>
    36fc:	9c 83       	std	Y+4, r25	; 0x04
    36fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3700:	8d 81       	ldd	r24, Y+5	; 0x05
    3702:	9e 81       	ldd	r25, Y+6	; 0x06
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	9e 83       	std	Y+6, r25	; 0x06
    3708:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    370a:	8d 81       	ldd	r24, Y+5	; 0x05
    370c:	9e 81       	ldd	r25, Y+6	; 0x06
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	69 f7       	brne	.-38     	; 0x36ec <HLCD_Send_String_8bit+0xe4>
    3712:	14 c0       	rjmp	.+40     	; 0x373c <HLCD_Send_String_8bit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3714:	6f 81       	ldd	r22, Y+7	; 0x07
    3716:	78 85       	ldd	r23, Y+8	; 0x08
    3718:	89 85       	ldd	r24, Y+9	; 0x09
    371a:	9a 85       	ldd	r25, Y+10	; 0x0a
    371c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	9e 83       	std	Y+6, r25	; 0x06
    3726:	8d 83       	std	Y+5, r24	; 0x05
    3728:	8d 81       	ldd	r24, Y+5	; 0x05
    372a:	9e 81       	ldd	r25, Y+6	; 0x06
    372c:	9a 83       	std	Y+2, r25	; 0x02
    372e:	89 83       	std	Y+1, r24	; 0x01
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	9a 81       	ldd	r25, Y+2	; 0x02
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <HLCD_Send_String_8bit+0x12c>
    3738:	9a 83       	std	Y+2, r25	; 0x02
    373a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    373c:	82 e0       	ldi	r24, 0x02	; 2
    373e:	66 e0       	ldi	r22, 0x06	; 6
    3740:	40 e0       	ldi	r20, 0x00	; 0
    3742:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
void HLCD_Send_String_8bit( u8 *data)
{
	/*clear rs to select command*/
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_HIGH);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
	while(*data)
    3746:	ef 85       	ldd	r30, Y+15	; 0x0f
    3748:	f8 89       	ldd	r31, Y+16	; 0x10
    374a:	80 81       	ld	r24, Z
    374c:	88 23       	and	r24, r24
    374e:	09 f0       	breq	.+2      	; 0x3752 <HLCD_Send_String_8bit+0x14a>
    3750:	72 cf       	rjmp	.-284    	; 0x3636 <HLCD_Send_String_8bit+0x2e>
		DIO_PORT_WRITE_LOGIC_M(LCD_PORT_DATA,*data++);
		DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
		_delay_ms(2);
		DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
	}
}
    3752:	60 96       	adiw	r28, 0x10	; 16
    3754:	0f b6       	in	r0, 0x3f	; 63
    3756:	f8 94       	cli
    3758:	de bf       	out	0x3e, r29	; 62
    375a:	0f be       	out	0x3f, r0	; 63
    375c:	cd bf       	out	0x3d, r28	; 61
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	08 95       	ret

00003764 <HLCD_Send_Float1>:
/************************/
void HLCD_Send_Float1(const float data) {
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
    376c:	2a 97       	sbiw	r28, 0x0a	; 10
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	0f be       	out	0x3f, r0	; 63
    3776:	cd bf       	out	0x3d, r28	; 61
    3778:	6f 83       	std	Y+7, r22	; 0x07
    377a:	78 87       	std	Y+8, r23	; 0x08
    377c:	89 87       	std	Y+9, r24	; 0x09
    377e:	9a 87       	std	Y+10, r25	; 0x0a
	char *str=NULL;
    3780:	1e 82       	std	Y+6, r1	; 0x06
    3782:	1d 82       	std	Y+5, r1	; 0x05
	int integerPart = (int)data;
    3784:	6f 81       	ldd	r22, Y+7	; 0x07
    3786:	78 85       	ldd	r23, Y+8	; 0x08
    3788:	89 85       	ldd	r24, Y+9	; 0x09
    378a:	9a 85       	ldd	r25, Y+10	; 0x0a
    378c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	9c 83       	std	Y+4, r25	; 0x04
    3796:	8b 83       	std	Y+3, r24	; 0x03
	int decimalPart = (int)((data - integerPart) * 100); // Get two decimal places
    3798:	8b 81       	ldd	r24, Y+3	; 0x03
    379a:	9c 81       	ldd	r25, Y+4	; 0x04
    379c:	aa 27       	eor	r26, r26
    379e:	97 fd       	sbrc	r25, 7
    37a0:	a0 95       	com	r26
    37a2:	ba 2f       	mov	r27, r26
    37a4:	bc 01       	movw	r22, r24
    37a6:	cd 01       	movw	r24, r26
    37a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    37ac:	9b 01       	movw	r18, r22
    37ae:	ac 01       	movw	r20, r24
    37b0:	6f 81       	ldd	r22, Y+7	; 0x07
    37b2:	78 85       	ldd	r23, Y+8	; 0x08
    37b4:	89 85       	ldd	r24, Y+9	; 0x09
    37b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	bc 01       	movw	r22, r24
    37c2:	cd 01       	movw	r24, r26
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	48 ec       	ldi	r20, 0xC8	; 200
    37ca:	52 e4       	ldi	r21, 0x42	; 66
    37cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	bc 01       	movw	r22, r24
    37d6:	cd 01       	movw	r24, r26
    37d8:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	9a 83       	std	Y+2, r25	; 0x02
    37e2:	89 83       	std	Y+1, r24	; 0x01

	// Print the integer part
	convert_uint32_to_string(integerPart,str);
    37e4:	8b 81       	ldd	r24, Y+3	; 0x03
    37e6:	9c 81       	ldd	r25, Y+4	; 0x04
    37e8:	aa 27       	eor	r26, r26
    37ea:	97 fd       	sbrc	r25, 7
    37ec:	a0 95       	com	r26
    37ee:	ba 2f       	mov	r27, r26
    37f0:	2d 81       	ldd	r18, Y+5	; 0x05
    37f2:	3e 81       	ldd	r19, Y+6	; 0x06
    37f4:	bc 01       	movw	r22, r24
    37f6:	cd 01       	movw	r24, r26
    37f8:	a9 01       	movw	r20, r18
    37fa:	0e 94 04 22 	call	0x4408	; 0x4408 <convert_uint32_to_string>
	HLCD_Send_String_8bit(str);
    37fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3800:	9e 81       	ldd	r25, Y+6	; 0x06
    3802:	0e 94 04 1b 	call	0x3608	; 0x3608 <HLCD_Send_String_8bit>

	// Print the decimal point
	HLCD_Send_char_8bit('.');
    3806:	8e e2       	ldi	r24, 0x2E	; 46
    3808:	0e 94 4f 19 	call	0x329e	; 0x329e <HLCD_Send_char_8bit>

	// Print the decimal part with leading zeros if necessary
	if (decimalPart < 10) {
    380c:	89 81       	ldd	r24, Y+1	; 0x01
    380e:	9a 81       	ldd	r25, Y+2	; 0x02
    3810:	8a 30       	cpi	r24, 0x0A	; 10
    3812:	91 05       	cpc	r25, r1
    3814:	1c f4       	brge	.+6      	; 0x381c <HLCD_Send_Float1+0xb8>
		HLCD_Send_char_8bit('0'); // Leading zero
    3816:	80 e3       	ldi	r24, 0x30	; 48
    3818:	0e 94 4f 19 	call	0x329e	; 0x329e <HLCD_Send_char_8bit>
	}
	convert_uint32_to_string(decimalPart,str);
    381c:	89 81       	ldd	r24, Y+1	; 0x01
    381e:	9a 81       	ldd	r25, Y+2	; 0x02
    3820:	aa 27       	eor	r26, r26
    3822:	97 fd       	sbrc	r25, 7
    3824:	a0 95       	com	r26
    3826:	ba 2f       	mov	r27, r26
    3828:	2d 81       	ldd	r18, Y+5	; 0x05
    382a:	3e 81       	ldd	r19, Y+6	; 0x06
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	a9 01       	movw	r20, r18
    3832:	0e 94 04 22 	call	0x4408	; 0x4408 <convert_uint32_to_string>
	HLCD_Send_String_8bit(str);
    3836:	8d 81       	ldd	r24, Y+5	; 0x05
    3838:	9e 81       	ldd	r25, Y+6	; 0x06
    383a:	0e 94 04 1b 	call	0x3608	; 0x3608 <HLCD_Send_String_8bit>
	//    _delay_ms(1000);
}
    383e:	2a 96       	adiw	r28, 0x0a	; 10
    3840:	0f b6       	in	r0, 0x3f	; 63
    3842:	f8 94       	cli
    3844:	de bf       	out	0x3e, r29	; 62
    3846:	0f be       	out	0x3f, r0	; 63
    3848:	cd bf       	out	0x3d, r28	; 61
    384a:	cf 91       	pop	r28
    384c:	df 91       	pop	r29
    384e:	08 95       	ret

00003850 <HLCD_INIT_4bit>:

/**********************************************************/


void HLCD_INIT_4bit(void)
{
    3850:	df 93       	push	r29
    3852:	cf 93       	push	r28
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
    3858:	e4 97       	sbiw	r28, 0x34	; 52
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	de bf       	out	0x3e, r29	; 62
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	cd bf       	out	0x3d, r28	; 61
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	a0 ea       	ldi	r26, 0xA0	; 160
    386a:	b1 e4       	ldi	r27, 0x41	; 65
    386c:	89 ab       	std	Y+49, r24	; 0x31
    386e:	9a ab       	std	Y+50, r25	; 0x32
    3870:	ab ab       	std	Y+51, r26	; 0x33
    3872:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3874:	69 a9       	ldd	r22, Y+49	; 0x31
    3876:	7a a9       	ldd	r23, Y+50	; 0x32
    3878:	8b a9       	ldd	r24, Y+51	; 0x33
    387a:	9c a9       	ldd	r25, Y+52	; 0x34
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	4a ef       	ldi	r20, 0xFA	; 250
    3882:	54 e4       	ldi	r21, 0x44	; 68
    3884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	8d a7       	std	Y+45, r24	; 0x2d
    388e:	9e a7       	std	Y+46, r25	; 0x2e
    3890:	af a7       	std	Y+47, r26	; 0x2f
    3892:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    3894:	6d a5       	ldd	r22, Y+45	; 0x2d
    3896:	7e a5       	ldd	r23, Y+46	; 0x2e
    3898:	8f a5       	ldd	r24, Y+47	; 0x2f
    389a:	98 a9       	ldd	r25, Y+48	; 0x30
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	40 e8       	ldi	r20, 0x80	; 128
    38a2:	5f e3       	ldi	r21, 0x3F	; 63
    38a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38a8:	88 23       	and	r24, r24
    38aa:	2c f4       	brge	.+10     	; 0x38b6 <HLCD_INIT_4bit+0x66>
		__ticks = 1;
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	9c a7       	std	Y+44, r25	; 0x2c
    38b2:	8b a7       	std	Y+43, r24	; 0x2b
    38b4:	3f c0       	rjmp	.+126    	; 0x3934 <HLCD_INIT_4bit+0xe4>
	else if (__tmp > 65535)
    38b6:	6d a5       	ldd	r22, Y+45	; 0x2d
    38b8:	7e a5       	ldd	r23, Y+46	; 0x2e
    38ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    38bc:	98 a9       	ldd	r25, Y+48	; 0x30
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	3f ef       	ldi	r19, 0xFF	; 255
    38c2:	4f e7       	ldi	r20, 0x7F	; 127
    38c4:	57 e4       	ldi	r21, 0x47	; 71
    38c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38ca:	18 16       	cp	r1, r24
    38cc:	4c f5       	brge	.+82     	; 0x3920 <HLCD_INIT_4bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ce:	69 a9       	ldd	r22, Y+49	; 0x31
    38d0:	7a a9       	ldd	r23, Y+50	; 0x32
    38d2:	8b a9       	ldd	r24, Y+51	; 0x33
    38d4:	9c a9       	ldd	r25, Y+52	; 0x34
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	40 e2       	ldi	r20, 0x20	; 32
    38dc:	51 e4       	ldi	r21, 0x41	; 65
    38de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	bc 01       	movw	r22, r24
    38e8:	cd 01       	movw	r24, r26
    38ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	9c a7       	std	Y+44, r25	; 0x2c
    38f4:	8b a7       	std	Y+43, r24	; 0x2b
    38f6:	0f c0       	rjmp	.+30     	; 0x3916 <HLCD_INIT_4bit+0xc6>
    38f8:	88 ec       	ldi	r24, 0xC8	; 200
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	9a a7       	std	Y+42, r25	; 0x2a
    38fe:	89 a7       	std	Y+41, r24	; 0x29
    3900:	89 a5       	ldd	r24, Y+41	; 0x29
    3902:	9a a5       	ldd	r25, Y+42	; 0x2a
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	f1 f7       	brne	.-4      	; 0x3904 <HLCD_INIT_4bit+0xb4>
    3908:	9a a7       	std	Y+42, r25	; 0x2a
    390a:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    390c:	8b a5       	ldd	r24, Y+43	; 0x2b
    390e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	9c a7       	std	Y+44, r25	; 0x2c
    3914:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3916:	8b a5       	ldd	r24, Y+43	; 0x2b
    3918:	9c a5       	ldd	r25, Y+44	; 0x2c
    391a:	00 97       	sbiw	r24, 0x00	; 0
    391c:	69 f7       	brne	.-38     	; 0x38f8 <HLCD_INIT_4bit+0xa8>
    391e:	14 c0       	rjmp	.+40     	; 0x3948 <HLCD_INIT_4bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3920:	6d a5       	ldd	r22, Y+45	; 0x2d
    3922:	7e a5       	ldd	r23, Y+46	; 0x2e
    3924:	8f a5       	ldd	r24, Y+47	; 0x2f
    3926:	98 a9       	ldd	r25, Y+48	; 0x30
    3928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392c:	dc 01       	movw	r26, r24
    392e:	cb 01       	movw	r24, r22
    3930:	9c a7       	std	Y+44, r25	; 0x2c
    3932:	8b a7       	std	Y+43, r24	; 0x2b
    3934:	8b a5       	ldd	r24, Y+43	; 0x2b
    3936:	9c a5       	ldd	r25, Y+44	; 0x2c
    3938:	98 a7       	std	Y+40, r25	; 0x28
    393a:	8f a3       	std	Y+39, r24	; 0x27
    393c:	8f a1       	ldd	r24, Y+39	; 0x27
    393e:	98 a5       	ldd	r25, Y+40	; 0x28
    3940:	01 97       	sbiw	r24, 0x01	; 1
    3942:	f1 f7       	brne	.-4      	; 0x3940 <HLCD_INIT_4bit+0xf0>
    3944:	98 a7       	std	Y+40, r25	; 0x28
    3946:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(20);
	HLCD_Send_Command_4bit(FUNCTION_SET_8bit_Mode_2row_11_line);
    3948:	8c e3       	ldi	r24, 0x3C	; 60
    394a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	a0 ea       	ldi	r26, 0xA0	; 160
    3954:	b0 e4       	ldi	r27, 0x40	; 64
    3956:	8b a3       	std	Y+35, r24	; 0x23
    3958:	9c a3       	std	Y+36, r25	; 0x24
    395a:	ad a3       	std	Y+37, r26	; 0x25
    395c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    395e:	6b a1       	ldd	r22, Y+35	; 0x23
    3960:	7c a1       	ldd	r23, Y+36	; 0x24
    3962:	8d a1       	ldd	r24, Y+37	; 0x25
    3964:	9e a1       	ldd	r25, Y+38	; 0x26
    3966:	20 e0       	ldi	r18, 0x00	; 0
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	4a ef       	ldi	r20, 0xFA	; 250
    396c:	54 e4       	ldi	r21, 0x44	; 68
    396e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	8f 8f       	std	Y+31, r24	; 0x1f
    3978:	98 a3       	std	Y+32, r25	; 0x20
    397a:	a9 a3       	std	Y+33, r26	; 0x21
    397c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    397e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3980:	78 a1       	ldd	r23, Y+32	; 0x20
    3982:	89 a1       	ldd	r24, Y+33	; 0x21
    3984:	9a a1       	ldd	r25, Y+34	; 0x22
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	40 e8       	ldi	r20, 0x80	; 128
    398c:	5f e3       	ldi	r21, 0x3F	; 63
    398e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3992:	88 23       	and	r24, r24
    3994:	2c f4       	brge	.+10     	; 0x39a0 <HLCD_INIT_4bit+0x150>
		__ticks = 1;
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	9e 8f       	std	Y+30, r25	; 0x1e
    399c:	8d 8f       	std	Y+29, r24	; 0x1d
    399e:	3f c0       	rjmp	.+126    	; 0x3a1e <HLCD_INIT_4bit+0x1ce>
	else if (__tmp > 65535)
    39a0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    39a2:	78 a1       	ldd	r23, Y+32	; 0x20
    39a4:	89 a1       	ldd	r24, Y+33	; 0x21
    39a6:	9a a1       	ldd	r25, Y+34	; 0x22
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	3f ef       	ldi	r19, 0xFF	; 255
    39ac:	4f e7       	ldi	r20, 0x7F	; 127
    39ae:	57 e4       	ldi	r21, 0x47	; 71
    39b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39b4:	18 16       	cp	r1, r24
    39b6:	4c f5       	brge	.+82     	; 0x3a0a <HLCD_INIT_4bit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b8:	6b a1       	ldd	r22, Y+35	; 0x23
    39ba:	7c a1       	ldd	r23, Y+36	; 0x24
    39bc:	8d a1       	ldd	r24, Y+37	; 0x25
    39be:	9e a1       	ldd	r25, Y+38	; 0x26
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	40 e2       	ldi	r20, 0x20	; 32
    39c6:	51 e4       	ldi	r21, 0x41	; 65
    39c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	bc 01       	movw	r22, r24
    39d2:	cd 01       	movw	r24, r26
    39d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	9e 8f       	std	Y+30, r25	; 0x1e
    39de:	8d 8f       	std	Y+29, r24	; 0x1d
    39e0:	0f c0       	rjmp	.+30     	; 0x3a00 <HLCD_INIT_4bit+0x1b0>
    39e2:	88 ec       	ldi	r24, 0xC8	; 200
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	9c 8f       	std	Y+28, r25	; 0x1c
    39e8:	8b 8f       	std	Y+27, r24	; 0x1b
    39ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ee:	01 97       	sbiw	r24, 0x01	; 1
    39f0:	f1 f7       	brne	.-4      	; 0x39ee <HLCD_INIT_4bit+0x19e>
    39f2:	9c 8f       	std	Y+28, r25	; 0x1c
    39f4:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39fa:	01 97       	sbiw	r24, 0x01	; 1
    39fc:	9e 8f       	std	Y+30, r25	; 0x1e
    39fe:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a04:	00 97       	sbiw	r24, 0x00	; 0
    3a06:	69 f7       	brne	.-38     	; 0x39e2 <HLCD_INIT_4bit+0x192>
    3a08:	14 c0       	rjmp	.+40     	; 0x3a32 <HLCD_INIT_4bit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a0a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3a0c:	78 a1       	ldd	r23, Y+32	; 0x20
    3a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    3a10:	9a a1       	ldd	r25, Y+34	; 0x22
    3a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	9e 8f       	std	Y+30, r25	; 0x1e
    3a1c:	8d 8f       	std	Y+29, r24	; 0x1d
    3a1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a22:	9a 8f       	std	Y+26, r25	; 0x1a
    3a24:	89 8f       	std	Y+25, r24	; 0x19
    3a26:	89 8d       	ldd	r24, Y+25	; 0x19
    3a28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	f1 f7       	brne	.-4      	; 0x3a2a <HLCD_INIT_4bit+0x1da>
    3a2e:	9a 8f       	std	Y+26, r25	; 0x1a
    3a30:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	HLCD_Send_Command_4bit(FUNCTION_SET_8bit_Mode_2row_11_line);
    3a32:	8c e3       	ldi	r24, 0x3C	; 60
    3a34:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	a6 e1       	ldi	r26, 0x16	; 22
    3a3e:	b3 e4       	ldi	r27, 0x43	; 67
    3a40:	8d 8b       	std	Y+21, r24	; 0x15
    3a42:	9e 8b       	std	Y+22, r25	; 0x16
    3a44:	af 8b       	std	Y+23, r26	; 0x17
    3a46:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a48:	6d 89       	ldd	r22, Y+21	; 0x15
    3a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a50:	2b ea       	ldi	r18, 0xAB	; 171
    3a52:	3a ea       	ldi	r19, 0xAA	; 170
    3a54:	4a e2       	ldi	r20, 0x2A	; 42
    3a56:	50 e4       	ldi	r21, 0x40	; 64
    3a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	89 8b       	std	Y+17, r24	; 0x11
    3a62:	9a 8b       	std	Y+18, r25	; 0x12
    3a64:	ab 8b       	std	Y+19, r26	; 0x13
    3a66:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3a68:	69 89       	ldd	r22, Y+17	; 0x11
    3a6a:	7a 89       	ldd	r23, Y+18	; 0x12
    3a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	40 e8       	ldi	r20, 0x80	; 128
    3a76:	5f e3       	ldi	r21, 0x3F	; 63
    3a78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a7c:	88 23       	and	r24, r24
    3a7e:	1c f4       	brge	.+6      	; 0x3a86 <HLCD_INIT_4bit+0x236>
		__ticks = 1;
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	88 8b       	std	Y+16, r24	; 0x10
    3a84:	91 c0       	rjmp	.+290    	; 0x3ba8 <HLCD_INIT_4bit+0x358>
	else if (__tmp > 255)
    3a86:	69 89       	ldd	r22, Y+17	; 0x11
    3a88:	7a 89       	ldd	r23, Y+18	; 0x12
    3a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	4f e7       	ldi	r20, 0x7F	; 127
    3a94:	53 e4       	ldi	r21, 0x43	; 67
    3a96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a9a:	18 16       	cp	r1, r24
    3a9c:	0c f0       	brlt	.+2      	; 0x3aa0 <HLCD_INIT_4bit+0x250>
    3a9e:	7b c0       	rjmp	.+246    	; 0x3b96 <HLCD_INIT_4bit+0x346>
	{
		_delay_ms(__us / 1000.0);
    3aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	4a e7       	ldi	r20, 0x7A	; 122
    3aae:	54 e4       	ldi	r21, 0x44	; 68
    3ab0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	8c 87       	std	Y+12, r24	; 0x0c
    3aba:	9d 87       	std	Y+13, r25	; 0x0d
    3abc:	ae 87       	std	Y+14, r26	; 0x0e
    3abe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac0:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ac2:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ac4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ac6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	4a ef       	ldi	r20, 0xFA	; 250
    3ace:	54 e4       	ldi	r21, 0x44	; 68
    3ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	88 87       	std	Y+8, r24	; 0x08
    3ada:	99 87       	std	Y+9, r25	; 0x09
    3adc:	aa 87       	std	Y+10, r26	; 0x0a
    3ade:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3ae0:	68 85       	ldd	r22, Y+8	; 0x08
    3ae2:	79 85       	ldd	r23, Y+9	; 0x09
    3ae4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ae6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	40 e8       	ldi	r20, 0x80	; 128
    3aee:	5f e3       	ldi	r21, 0x3F	; 63
    3af0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3af4:	88 23       	and	r24, r24
    3af6:	2c f4       	brge	.+10     	; 0x3b02 <HLCD_INIT_4bit+0x2b2>
		__ticks = 1;
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	9f 83       	std	Y+7, r25	; 0x07
    3afe:	8e 83       	std	Y+6, r24	; 0x06
    3b00:	3f c0       	rjmp	.+126    	; 0x3b80 <HLCD_INIT_4bit+0x330>
	else if (__tmp > 65535)
    3b02:	68 85       	ldd	r22, Y+8	; 0x08
    3b04:	79 85       	ldd	r23, Y+9	; 0x09
    3b06:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b08:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	3f ef       	ldi	r19, 0xFF	; 255
    3b0e:	4f e7       	ldi	r20, 0x7F	; 127
    3b10:	57 e4       	ldi	r21, 0x47	; 71
    3b12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b16:	18 16       	cp	r1, r24
    3b18:	4c f5       	brge	.+82     	; 0x3b6c <HLCD_INIT_4bit+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b1c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b20:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	40 e2       	ldi	r20, 0x20	; 32
    3b28:	51 e4       	ldi	r21, 0x41	; 65
    3b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	bc 01       	movw	r22, r24
    3b34:	cd 01       	movw	r24, r26
    3b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	9f 83       	std	Y+7, r25	; 0x07
    3b40:	8e 83       	std	Y+6, r24	; 0x06
    3b42:	0f c0       	rjmp	.+30     	; 0x3b62 <HLCD_INIT_4bit+0x312>
    3b44:	88 ec       	ldi	r24, 0xC8	; 200
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	9d 83       	std	Y+5, r25	; 0x05
    3b4a:	8c 83       	std	Y+4, r24	; 0x04
    3b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b50:	01 97       	sbiw	r24, 0x01	; 1
    3b52:	f1 f7       	brne	.-4      	; 0x3b50 <HLCD_INIT_4bit+0x300>
    3b54:	9d 83       	std	Y+5, r25	; 0x05
    3b56:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b58:	8e 81       	ldd	r24, Y+6	; 0x06
    3b5a:	9f 81       	ldd	r25, Y+7	; 0x07
    3b5c:	01 97       	sbiw	r24, 0x01	; 1
    3b5e:	9f 83       	std	Y+7, r25	; 0x07
    3b60:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b62:	8e 81       	ldd	r24, Y+6	; 0x06
    3b64:	9f 81       	ldd	r25, Y+7	; 0x07
    3b66:	00 97       	sbiw	r24, 0x00	; 0
    3b68:	69 f7       	brne	.-38     	; 0x3b44 <HLCD_INIT_4bit+0x2f4>
    3b6a:	24 c0       	rjmp	.+72     	; 0x3bb4 <HLCD_INIT_4bit+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6c:	68 85       	ldd	r22, Y+8	; 0x08
    3b6e:	79 85       	ldd	r23, Y+9	; 0x09
    3b70:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b72:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b78:	dc 01       	movw	r26, r24
    3b7a:	cb 01       	movw	r24, r22
    3b7c:	9f 83       	std	Y+7, r25	; 0x07
    3b7e:	8e 83       	std	Y+6, r24	; 0x06
    3b80:	8e 81       	ldd	r24, Y+6	; 0x06
    3b82:	9f 81       	ldd	r25, Y+7	; 0x07
    3b84:	9b 83       	std	Y+3, r25	; 0x03
    3b86:	8a 83       	std	Y+2, r24	; 0x02
    3b88:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	f1 f7       	brne	.-4      	; 0x3b8c <HLCD_INIT_4bit+0x33c>
    3b90:	9b 83       	std	Y+3, r25	; 0x03
    3b92:	8a 83       	std	Y+2, r24	; 0x02
    3b94:	0f c0       	rjmp	.+30     	; 0x3bb4 <HLCD_INIT_4bit+0x364>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b96:	69 89       	ldd	r22, Y+17	; 0x11
    3b98:	7a 89       	ldd	r23, Y+18	; 0x12
    3b9a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b9c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	88 8b       	std	Y+16, r24	; 0x10
    3ba8:	88 89       	ldd	r24, Y+16	; 0x10
    3baa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3bac:	89 81       	ldd	r24, Y+1	; 0x01
    3bae:	8a 95       	dec	r24
    3bb0:	f1 f7       	brne	.-4      	; 0x3bae <HLCD_INIT_4bit+0x35e>
    3bb2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(150);
	HLCD_Send_Command_4bit(FUNCTION_SET_8bit_Mode_2row_11_line);
    3bb4:	8c e3       	ldi	r24, 0x3C	; 60
    3bb6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>

	HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_Command_4bit(LCD_CMD_CURSOR_HOME);
    3bc0:	82 e0       	ldi	r24, 0x02	; 2
    3bc2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_Command_4bit(_LCD_ENTRY_MODE_INC_SHIFT_OFF);
    3bc6:	86 e0       	ldi	r24, 0x06	; 6
    3bc8:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_Command_4bit(LCD_CMD_DISPLAY_ON_CURSOR_OFF_BC_OFF);
    3bcc:	8c e0       	ldi	r24, 0x0C	; 12
    3bce:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_Command_4bit(FUNCTION_SET_4bit_Mode_2row_11_line);
    3bd2:	8c e2       	ldi	r24, 0x2C	; 44
    3bd4:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_Command_4bit( 0x80);
    3bd8:	80 e8       	ldi	r24, 0x80	; 128
    3bda:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>

}
    3bde:	e4 96       	adiw	r28, 0x34	; 52
    3be0:	0f b6       	in	r0, 0x3f	; 63
    3be2:	f8 94       	cli
    3be4:	de bf       	out	0x3e, r29	; 62
    3be6:	0f be       	out	0x3f, r0	; 63
    3be8:	cd bf       	out	0x3d, r28	; 61
    3bea:	cf 91       	pop	r28
    3bec:	df 91       	pop	r29
    3bee:	08 95       	ret

00003bf0 <HLCD_Send_Command_4bit>:
/****************************************/
void HLCD_Send_Command_4bit(const u8 command)
{
    3bf0:	df 93       	push	r29
    3bf2:	cf 93       	push	r28
    3bf4:	cd b7       	in	r28, 0x3d	; 61
    3bf6:	de b7       	in	r29, 0x3e	; 62
    3bf8:	6d 97       	sbiw	r28, 0x1d	; 29
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	de bf       	out	0x3e, r29	; 62
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	8d 8f       	std	Y+29, r24	; 0x1d
	/*clear rs to select command*/
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_LOW);
    3c06:	82 e0       	ldi	r24, 0x02	; 2
    3c08:	67 e0       	ldi	r22, 0x07	; 7
    3c0a:	40 e0       	ldi	r20, 0x00	; 0
    3c0c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
    3c10:	82 e0       	ldi	r24, 0x02	; 2
    3c12:	65 e0       	ldi	r22, 0x05	; 5
    3c14:	40 e0       	ldi	r20, 0x00	; 0
    3c16:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN0,(command>>4)&0x01); //lowest bit on highst nipple 4 ->4
    3c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c1c:	82 95       	swap	r24
    3c1e:	8f 70       	andi	r24, 0x0F	; 15
    3c20:	98 2f       	mov	r25, r24
    3c22:	91 70       	andi	r25, 0x01	; 1
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	60 e0       	ldi	r22, 0x00	; 0
    3c28:	49 2f       	mov	r20, r25
    3c2a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN1,(command>>5)&0x01);
    3c2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c30:	82 95       	swap	r24
    3c32:	86 95       	lsr	r24
    3c34:	87 70       	andi	r24, 0x07	; 7
    3c36:	98 2f       	mov	r25, r24
    3c38:	91 70       	andi	r25, 0x01	; 1
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	61 e0       	ldi	r22, 0x01	; 1
    3c3e:	49 2f       	mov	r20, r25
    3c40:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN2,(command>>6)&0x01);
    3c44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c46:	82 95       	swap	r24
    3c48:	86 95       	lsr	r24
    3c4a:	86 95       	lsr	r24
    3c4c:	83 70       	andi	r24, 0x03	; 3
    3c4e:	98 2f       	mov	r25, r24
    3c50:	91 70       	andi	r25, 0x01	; 1
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	62 e0       	ldi	r22, 0x02	; 2
    3c56:	49 2f       	mov	r20, r25
    3c58:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN3,(command>>7)&0x01);
    3c5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c5e:	98 2f       	mov	r25, r24
    3c60:	99 1f       	adc	r25, r25
    3c62:	99 27       	eor	r25, r25
    3c64:	99 1f       	adc	r25, r25
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	63 e0       	ldi	r22, 0x03	; 3
    3c6a:	49 2f       	mov	r20, r25
    3c6c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    3c70:	82 e0       	ldi	r24, 0x02	; 2
    3c72:	66 e0       	ldi	r22, 0x06	; 6
    3c74:	41 e0       	ldi	r20, 0x01	; 1
    3c76:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	a0 e0       	ldi	r26, 0x00	; 0
    3c80:	b0 e4       	ldi	r27, 0x40	; 64
    3c82:	89 8f       	std	Y+25, r24	; 0x19
    3c84:	9a 8f       	std	Y+26, r25	; 0x1a
    3c86:	ab 8f       	std	Y+27, r26	; 0x1b
    3c88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c8a:	69 8d       	ldd	r22, Y+25	; 0x19
    3c8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	4a ef       	ldi	r20, 0xFA	; 250
    3c98:	54 e4       	ldi	r21, 0x44	; 68
    3c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	8d 8b       	std	Y+21, r24	; 0x15
    3ca4:	9e 8b       	std	Y+22, r25	; 0x16
    3ca6:	af 8b       	std	Y+23, r26	; 0x17
    3ca8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3caa:	6d 89       	ldd	r22, Y+21	; 0x15
    3cac:	7e 89       	ldd	r23, Y+22	; 0x16
    3cae:	8f 89       	ldd	r24, Y+23	; 0x17
    3cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    3cb2:	20 e0       	ldi	r18, 0x00	; 0
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	40 e8       	ldi	r20, 0x80	; 128
    3cb8:	5f e3       	ldi	r21, 0x3F	; 63
    3cba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cbe:	88 23       	and	r24, r24
    3cc0:	2c f4       	brge	.+10     	; 0x3ccc <HLCD_Send_Command_4bit+0xdc>
		__ticks = 1;
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	9c 8b       	std	Y+20, r25	; 0x14
    3cc8:	8b 8b       	std	Y+19, r24	; 0x13
    3cca:	3f c0       	rjmp	.+126    	; 0x3d4a <HLCD_Send_Command_4bit+0x15a>
	else if (__tmp > 65535)
    3ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    3cce:	7e 89       	ldd	r23, Y+22	; 0x16
    3cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    3cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	3f ef       	ldi	r19, 0xFF	; 255
    3cd8:	4f e7       	ldi	r20, 0x7F	; 127
    3cda:	57 e4       	ldi	r21, 0x47	; 71
    3cdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ce0:	18 16       	cp	r1, r24
    3ce2:	4c f5       	brge	.+82     	; 0x3d36 <HLCD_Send_Command_4bit+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce4:	69 8d       	ldd	r22, Y+25	; 0x19
    3ce6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ce8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	40 e2       	ldi	r20, 0x20	; 32
    3cf2:	51 e4       	ldi	r21, 0x41	; 65
    3cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	bc 01       	movw	r22, r24
    3cfe:	cd 01       	movw	r24, r26
    3d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	9c 8b       	std	Y+20, r25	; 0x14
    3d0a:	8b 8b       	std	Y+19, r24	; 0x13
    3d0c:	0f c0       	rjmp	.+30     	; 0x3d2c <HLCD_Send_Command_4bit+0x13c>
    3d0e:	88 ec       	ldi	r24, 0xC8	; 200
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	9a 8b       	std	Y+18, r25	; 0x12
    3d14:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d16:	89 89       	ldd	r24, Y+17	; 0x11
    3d18:	9a 89       	ldd	r25, Y+18	; 0x12
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	f1 f7       	brne	.-4      	; 0x3d1a <HLCD_Send_Command_4bit+0x12a>
    3d1e:	9a 8b       	std	Y+18, r25	; 0x12
    3d20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d22:	8b 89       	ldd	r24, Y+19	; 0x13
    3d24:	9c 89       	ldd	r25, Y+20	; 0x14
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	9c 8b       	std	Y+20, r25	; 0x14
    3d2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	69 f7       	brne	.-38     	; 0x3d0e <HLCD_Send_Command_4bit+0x11e>
    3d34:	14 c0       	rjmp	.+40     	; 0x3d5e <HLCD_Send_Command_4bit+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d36:	6d 89       	ldd	r22, Y+21	; 0x15
    3d38:	7e 89       	ldd	r23, Y+22	; 0x16
    3d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	9c 8b       	std	Y+20, r25	; 0x14
    3d48:	8b 8b       	std	Y+19, r24	; 0x13
    3d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d4e:	98 8b       	std	Y+16, r25	; 0x10
    3d50:	8f 87       	std	Y+15, r24	; 0x0f
    3d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d54:	98 89       	ldd	r25, Y+16	; 0x10
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	f1 f7       	brne	.-4      	; 0x3d56 <HLCD_Send_Command_4bit+0x166>
    3d5a:	98 8b       	std	Y+16, r25	; 0x10
    3d5c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    3d5e:	82 e0       	ldi	r24, 0x02	; 2
    3d60:	66 e0       	ldi	r22, 0x06	; 6
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN0,(command>>0)&0x01);
    3d68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d6a:	98 2f       	mov	r25, r24
    3d6c:	91 70       	andi	r25, 0x01	; 1
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	60 e0       	ldi	r22, 0x00	; 0
    3d72:	49 2f       	mov	r20, r25
    3d74:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN1,(command>>1)&0x01);
    3d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d7a:	86 95       	lsr	r24
    3d7c:	98 2f       	mov	r25, r24
    3d7e:	91 70       	andi	r25, 0x01	; 1
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	61 e0       	ldi	r22, 0x01	; 1
    3d84:	49 2f       	mov	r20, r25
    3d86:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN2,(command>>2)&0x01);
    3d8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d8c:	86 95       	lsr	r24
    3d8e:	86 95       	lsr	r24
    3d90:	98 2f       	mov	r25, r24
    3d92:	91 70       	andi	r25, 0x01	; 1
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	62 e0       	ldi	r22, 0x02	; 2
    3d98:	49 2f       	mov	r20, r25
    3d9a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN3,(command>>3)&0x01);
    3d9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3da0:	86 95       	lsr	r24
    3da2:	86 95       	lsr	r24
    3da4:	86 95       	lsr	r24
    3da6:	98 2f       	mov	r25, r24
    3da8:	91 70       	andi	r25, 0x01	; 1
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	63 e0       	ldi	r22, 0x03	; 3
    3dae:	49 2f       	mov	r20, r25
    3db0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    3db4:	82 e0       	ldi	r24, 0x02	; 2
    3db6:	66 e0       	ldi	r22, 0x06	; 6
    3db8:	41 e0       	ldi	r20, 0x01	; 1
    3dba:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	a0 e0       	ldi	r26, 0x00	; 0
    3dc4:	b0 e4       	ldi	r27, 0x40	; 64
    3dc6:	8b 87       	std	Y+11, r24	; 0x0b
    3dc8:	9c 87       	std	Y+12, r25	; 0x0c
    3dca:	ad 87       	std	Y+13, r26	; 0x0d
    3dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dd6:	20 e0       	ldi	r18, 0x00	; 0
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	4a ef       	ldi	r20, 0xFA	; 250
    3ddc:	54 e4       	ldi	r21, 0x44	; 68
    3dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de2:	dc 01       	movw	r26, r24
    3de4:	cb 01       	movw	r24, r22
    3de6:	8f 83       	std	Y+7, r24	; 0x07
    3de8:	98 87       	std	Y+8, r25	; 0x08
    3dea:	a9 87       	std	Y+9, r26	; 0x09
    3dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dee:	6f 81       	ldd	r22, Y+7	; 0x07
    3df0:	78 85       	ldd	r23, Y+8	; 0x08
    3df2:	89 85       	ldd	r24, Y+9	; 0x09
    3df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	40 e8       	ldi	r20, 0x80	; 128
    3dfc:	5f e3       	ldi	r21, 0x3F	; 63
    3dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e02:	88 23       	and	r24, r24
    3e04:	2c f4       	brge	.+10     	; 0x3e10 <HLCD_Send_Command_4bit+0x220>
		__ticks = 1;
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	9e 83       	std	Y+6, r25	; 0x06
    3e0c:	8d 83       	std	Y+5, r24	; 0x05
    3e0e:	3f c0       	rjmp	.+126    	; 0x3e8e <HLCD_Send_Command_4bit+0x29e>
	else if (__tmp > 65535)
    3e10:	6f 81       	ldd	r22, Y+7	; 0x07
    3e12:	78 85       	ldd	r23, Y+8	; 0x08
    3e14:	89 85       	ldd	r24, Y+9	; 0x09
    3e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	3f ef       	ldi	r19, 0xFF	; 255
    3e1c:	4f e7       	ldi	r20, 0x7F	; 127
    3e1e:	57 e4       	ldi	r21, 0x47	; 71
    3e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e24:	18 16       	cp	r1, r24
    3e26:	4c f5       	brge	.+82     	; 0x3e7a <HLCD_Send_Command_4bit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	40 e2       	ldi	r20, 0x20	; 32
    3e36:	51 e4       	ldi	r21, 0x41	; 65
    3e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	bc 01       	movw	r22, r24
    3e42:	cd 01       	movw	r24, r26
    3e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	9e 83       	std	Y+6, r25	; 0x06
    3e4e:	8d 83       	std	Y+5, r24	; 0x05
    3e50:	0f c0       	rjmp	.+30     	; 0x3e70 <HLCD_Send_Command_4bit+0x280>
    3e52:	88 ec       	ldi	r24, 0xC8	; 200
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	9c 83       	std	Y+4, r25	; 0x04
    3e58:	8b 83       	std	Y+3, r24	; 0x03
    3e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e5e:	01 97       	sbiw	r24, 0x01	; 1
    3e60:	f1 f7       	brne	.-4      	; 0x3e5e <HLCD_Send_Command_4bit+0x26e>
    3e62:	9c 83       	std	Y+4, r25	; 0x04
    3e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e66:	8d 81       	ldd	r24, Y+5	; 0x05
    3e68:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	9e 83       	std	Y+6, r25	; 0x06
    3e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e70:	8d 81       	ldd	r24, Y+5	; 0x05
    3e72:	9e 81       	ldd	r25, Y+6	; 0x06
    3e74:	00 97       	sbiw	r24, 0x00	; 0
    3e76:	69 f7       	brne	.-38     	; 0x3e52 <HLCD_Send_Command_4bit+0x262>
    3e78:	14 c0       	rjmp	.+40     	; 0x3ea2 <HLCD_Send_Command_4bit+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7c:	78 85       	ldd	r23, Y+8	; 0x08
    3e7e:	89 85       	ldd	r24, Y+9	; 0x09
    3e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	9e 83       	std	Y+6, r25	; 0x06
    3e8c:	8d 83       	std	Y+5, r24	; 0x05
    3e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e90:	9e 81       	ldd	r25, Y+6	; 0x06
    3e92:	9a 83       	std	Y+2, r25	; 0x02
    3e94:	89 83       	std	Y+1, r24	; 0x01
    3e96:	89 81       	ldd	r24, Y+1	; 0x01
    3e98:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9a:	01 97       	sbiw	r24, 0x01	; 1
    3e9c:	f1 f7       	brne	.-4      	; 0x3e9a <HLCD_Send_Command_4bit+0x2aa>
    3e9e:	9a 83       	std	Y+2, r25	; 0x02
    3ea0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    3ea2:	82 e0       	ldi	r24, 0x02	; 2
    3ea4:	66 e0       	ldi	r22, 0x06	; 6
    3ea6:	40 e0       	ldi	r20, 0x00	; 0
    3ea8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
}
    3eac:	6d 96       	adiw	r28, 0x1d	; 29
    3eae:	0f b6       	in	r0, 0x3f	; 63
    3eb0:	f8 94       	cli
    3eb2:	de bf       	out	0x3e, r29	; 62
    3eb4:	0f be       	out	0x3f, r0	; 63
    3eb6:	cd bf       	out	0x3d, r28	; 61
    3eb8:	cf 91       	pop	r28
    3eba:	df 91       	pop	r29
    3ebc:	08 95       	ret

00003ebe <HLCD_Send_char_4bit>:
/***********************/
#if LCD_MODE==LCD_4bit_MODE
void HLCD_Send_char_4bit(const u8  data)
{
    3ebe:	df 93       	push	r29
    3ec0:	cf 93       	push	r28
    3ec2:	cd b7       	in	r28, 0x3d	; 61
    3ec4:	de b7       	in	r29, 0x3e	; 62
    3ec6:	6d 97       	sbiw	r28, 0x1d	; 29
    3ec8:	0f b6       	in	r0, 0x3f	; 63
    3eca:	f8 94       	cli
    3ecc:	de bf       	out	0x3e, r29	; 62
    3ece:	0f be       	out	0x3f, r0	; 63
    3ed0:	cd bf       	out	0x3d, r28	; 61
    3ed2:	8d 8f       	std	Y+29, r24	; 0x1d

	/*clear rs to select command*/
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_HIGH);
    3ed4:	82 e0       	ldi	r24, 0x02	; 2
    3ed6:	67 e0       	ldi	r22, 0x07	; 7
    3ed8:	41 e0       	ldi	r20, 0x01	; 1
    3eda:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
    3ede:	82 e0       	ldi	r24, 0x02	; 2
    3ee0:	65 e0       	ldi	r22, 0x05	; 5
    3ee2:	40 e0       	ldi	r20, 0x00	; 0
    3ee4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN0,(data>>4)&0x01);
    3ee8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eea:	82 95       	swap	r24
    3eec:	8f 70       	andi	r24, 0x0F	; 15
    3eee:	98 2f       	mov	r25, r24
    3ef0:	91 70       	andi	r25, 0x01	; 1
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	60 e0       	ldi	r22, 0x00	; 0
    3ef6:	49 2f       	mov	r20, r25
    3ef8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN1,(data>>5)&0x01);
    3efc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3efe:	82 95       	swap	r24
    3f00:	86 95       	lsr	r24
    3f02:	87 70       	andi	r24, 0x07	; 7
    3f04:	98 2f       	mov	r25, r24
    3f06:	91 70       	andi	r25, 0x01	; 1
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	61 e0       	ldi	r22, 0x01	; 1
    3f0c:	49 2f       	mov	r20, r25
    3f0e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN2,(data>>6)&0x01);
    3f12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f14:	82 95       	swap	r24
    3f16:	86 95       	lsr	r24
    3f18:	86 95       	lsr	r24
    3f1a:	83 70       	andi	r24, 0x03	; 3
    3f1c:	98 2f       	mov	r25, r24
    3f1e:	91 70       	andi	r25, 0x01	; 1
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	62 e0       	ldi	r22, 0x02	; 2
    3f24:	49 2f       	mov	r20, r25
    3f26:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN3,(data>>7)&0x01);
    3f2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f2c:	98 2f       	mov	r25, r24
    3f2e:	99 1f       	adc	r25, r25
    3f30:	99 27       	eor	r25, r25
    3f32:	99 1f       	adc	r25, r25
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	63 e0       	ldi	r22, 0x03	; 3
    3f38:	49 2f       	mov	r20, r25
    3f3a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    3f3e:	82 e0       	ldi	r24, 0x02	; 2
    3f40:	66 e0       	ldi	r22, 0x06	; 6
    3f42:	41 e0       	ldi	r20, 0x01	; 1
    3f44:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	a0 e0       	ldi	r26, 0x00	; 0
    3f4e:	b0 e4       	ldi	r27, 0x40	; 64
    3f50:	89 8f       	std	Y+25, r24	; 0x19
    3f52:	9a 8f       	std	Y+26, r25	; 0x1a
    3f54:	ab 8f       	std	Y+27, r26	; 0x1b
    3f56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f58:	69 8d       	ldd	r22, Y+25	; 0x19
    3f5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f60:	20 e0       	ldi	r18, 0x00	; 0
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	4a ef       	ldi	r20, 0xFA	; 250
    3f66:	54 e4       	ldi	r21, 0x44	; 68
    3f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f6c:	dc 01       	movw	r26, r24
    3f6e:	cb 01       	movw	r24, r22
    3f70:	8d 8b       	std	Y+21, r24	; 0x15
    3f72:	9e 8b       	std	Y+22, r25	; 0x16
    3f74:	af 8b       	std	Y+23, r26	; 0x17
    3f76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f78:	6d 89       	ldd	r22, Y+21	; 0x15
    3f7a:	7e 89       	ldd	r23, Y+22	; 0x16
    3f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	40 e8       	ldi	r20, 0x80	; 128
    3f86:	5f e3       	ldi	r21, 0x3F	; 63
    3f88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f8c:	88 23       	and	r24, r24
    3f8e:	2c f4       	brge	.+10     	; 0x3f9a <HLCD_Send_char_4bit+0xdc>
		__ticks = 1;
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	9c 8b       	std	Y+20, r25	; 0x14
    3f96:	8b 8b       	std	Y+19, r24	; 0x13
    3f98:	3f c0       	rjmp	.+126    	; 0x4018 <HLCD_Send_char_4bit+0x15a>
	else if (__tmp > 65535)
    3f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    3fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	3f ef       	ldi	r19, 0xFF	; 255
    3fa6:	4f e7       	ldi	r20, 0x7F	; 127
    3fa8:	57 e4       	ldi	r21, 0x47	; 71
    3faa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fae:	18 16       	cp	r1, r24
    3fb0:	4c f5       	brge	.+82     	; 0x4004 <HLCD_Send_char_4bit+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb2:	69 8d       	ldd	r22, Y+25	; 0x19
    3fb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	40 e2       	ldi	r20, 0x20	; 32
    3fc0:	51 e4       	ldi	r21, 0x41	; 65
    3fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc6:	dc 01       	movw	r26, r24
    3fc8:	cb 01       	movw	r24, r22
    3fca:	bc 01       	movw	r22, r24
    3fcc:	cd 01       	movw	r24, r26
    3fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	9c 8b       	std	Y+20, r25	; 0x14
    3fd8:	8b 8b       	std	Y+19, r24	; 0x13
    3fda:	0f c0       	rjmp	.+30     	; 0x3ffa <HLCD_Send_char_4bit+0x13c>
    3fdc:	88 ec       	ldi	r24, 0xC8	; 200
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	9a 8b       	std	Y+18, r25	; 0x12
    3fe2:	89 8b       	std	Y+17, r24	; 0x11
    3fe4:	89 89       	ldd	r24, Y+17	; 0x11
    3fe6:	9a 89       	ldd	r25, Y+18	; 0x12
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	f1 f7       	brne	.-4      	; 0x3fe8 <HLCD_Send_char_4bit+0x12a>
    3fec:	9a 8b       	std	Y+18, r25	; 0x12
    3fee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ff0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ff2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ff4:	01 97       	sbiw	r24, 0x01	; 1
    3ff6:	9c 8b       	std	Y+20, r25	; 0x14
    3ff8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    3ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ffe:	00 97       	sbiw	r24, 0x00	; 0
    4000:	69 f7       	brne	.-38     	; 0x3fdc <HLCD_Send_char_4bit+0x11e>
    4002:	14 c0       	rjmp	.+40     	; 0x402c <HLCD_Send_char_4bit+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4004:	6d 89       	ldd	r22, Y+21	; 0x15
    4006:	7e 89       	ldd	r23, Y+22	; 0x16
    4008:	8f 89       	ldd	r24, Y+23	; 0x17
    400a:	98 8d       	ldd	r25, Y+24	; 0x18
    400c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	9c 8b       	std	Y+20, r25	; 0x14
    4016:	8b 8b       	std	Y+19, r24	; 0x13
    4018:	8b 89       	ldd	r24, Y+19	; 0x13
    401a:	9c 89       	ldd	r25, Y+20	; 0x14
    401c:	98 8b       	std	Y+16, r25	; 0x10
    401e:	8f 87       	std	Y+15, r24	; 0x0f
    4020:	8f 85       	ldd	r24, Y+15	; 0x0f
    4022:	98 89       	ldd	r25, Y+16	; 0x10
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	f1 f7       	brne	.-4      	; 0x4024 <HLCD_Send_char_4bit+0x166>
    4028:	98 8b       	std	Y+16, r25	; 0x10
    402a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    402c:	82 e0       	ldi	r24, 0x02	; 2
    402e:	66 e0       	ldi	r22, 0x06	; 6
    4030:	40 e0       	ldi	r20, 0x00	; 0
    4032:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN0,(data>>0)&0x01);
    4036:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4038:	98 2f       	mov	r25, r24
    403a:	91 70       	andi	r25, 0x01	; 1
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	60 e0       	ldi	r22, 0x00	; 0
    4040:	49 2f       	mov	r20, r25
    4042:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN1,(data>>1)&0x01);
    4046:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4048:	86 95       	lsr	r24
    404a:	98 2f       	mov	r25, r24
    404c:	91 70       	andi	r25, 0x01	; 1
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	61 e0       	ldi	r22, 0x01	; 1
    4052:	49 2f       	mov	r20, r25
    4054:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN2,(data>>2)&0x01);
    4058:	8d 8d       	ldd	r24, Y+29	; 0x1d
    405a:	86 95       	lsr	r24
    405c:	86 95       	lsr	r24
    405e:	98 2f       	mov	r25, r24
    4060:	91 70       	andi	r25, 0x01	; 1
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	62 e0       	ldi	r22, 0x02	; 2
    4066:	49 2f       	mov	r20, r25
    4068:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN3,(data>>3)&0x01);
    406c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    406e:	86 95       	lsr	r24
    4070:	86 95       	lsr	r24
    4072:	86 95       	lsr	r24
    4074:	98 2f       	mov	r25, r24
    4076:	91 70       	andi	r25, 0x01	; 1
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	63 e0       	ldi	r22, 0x03	; 3
    407c:	49 2f       	mov	r20, r25
    407e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    4082:	82 e0       	ldi	r24, 0x02	; 2
    4084:	66 e0       	ldi	r22, 0x06	; 6
    4086:	41 e0       	ldi	r20, 0x01	; 1
    4088:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	a0 e0       	ldi	r26, 0x00	; 0
    4092:	b0 e4       	ldi	r27, 0x40	; 64
    4094:	8b 87       	std	Y+11, r24	; 0x0b
    4096:	9c 87       	std	Y+12, r25	; 0x0c
    4098:	ad 87       	std	Y+13, r26	; 0x0d
    409a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    409c:	6b 85       	ldd	r22, Y+11	; 0x0b
    409e:	7c 85       	ldd	r23, Y+12	; 0x0c
    40a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40a4:	20 e0       	ldi	r18, 0x00	; 0
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	4a ef       	ldi	r20, 0xFA	; 250
    40aa:	54 e4       	ldi	r21, 0x44	; 68
    40ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b0:	dc 01       	movw	r26, r24
    40b2:	cb 01       	movw	r24, r22
    40b4:	8f 83       	std	Y+7, r24	; 0x07
    40b6:	98 87       	std	Y+8, r25	; 0x08
    40b8:	a9 87       	std	Y+9, r26	; 0x09
    40ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40bc:	6f 81       	ldd	r22, Y+7	; 0x07
    40be:	78 85       	ldd	r23, Y+8	; 0x08
    40c0:	89 85       	ldd	r24, Y+9	; 0x09
    40c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	40 e8       	ldi	r20, 0x80	; 128
    40ca:	5f e3       	ldi	r21, 0x3F	; 63
    40cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40d0:	88 23       	and	r24, r24
    40d2:	2c f4       	brge	.+10     	; 0x40de <HLCD_Send_char_4bit+0x220>
		__ticks = 1;
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	9e 83       	std	Y+6, r25	; 0x06
    40da:	8d 83       	std	Y+5, r24	; 0x05
    40dc:	3f c0       	rjmp	.+126    	; 0x415c <HLCD_Send_char_4bit+0x29e>
	else if (__tmp > 65535)
    40de:	6f 81       	ldd	r22, Y+7	; 0x07
    40e0:	78 85       	ldd	r23, Y+8	; 0x08
    40e2:	89 85       	ldd	r24, Y+9	; 0x09
    40e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	3f ef       	ldi	r19, 0xFF	; 255
    40ea:	4f e7       	ldi	r20, 0x7F	; 127
    40ec:	57 e4       	ldi	r21, 0x47	; 71
    40ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40f2:	18 16       	cp	r1, r24
    40f4:	4c f5       	brge	.+82     	; 0x4148 <HLCD_Send_char_4bit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    40f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    40fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    40fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	40 e2       	ldi	r20, 0x20	; 32
    4104:	51 e4       	ldi	r21, 0x41	; 65
    4106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	bc 01       	movw	r22, r24
    4110:	cd 01       	movw	r24, r26
    4112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	9e 83       	std	Y+6, r25	; 0x06
    411c:	8d 83       	std	Y+5, r24	; 0x05
    411e:	0f c0       	rjmp	.+30     	; 0x413e <HLCD_Send_char_4bit+0x280>
    4120:	88 ec       	ldi	r24, 0xC8	; 200
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	9c 83       	std	Y+4, r25	; 0x04
    4126:	8b 83       	std	Y+3, r24	; 0x03
    4128:	8b 81       	ldd	r24, Y+3	; 0x03
    412a:	9c 81       	ldd	r25, Y+4	; 0x04
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	f1 f7       	brne	.-4      	; 0x412c <HLCD_Send_char_4bit+0x26e>
    4130:	9c 83       	std	Y+4, r25	; 0x04
    4132:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4134:	8d 81       	ldd	r24, Y+5	; 0x05
    4136:	9e 81       	ldd	r25, Y+6	; 0x06
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	9e 83       	std	Y+6, r25	; 0x06
    413c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    413e:	8d 81       	ldd	r24, Y+5	; 0x05
    4140:	9e 81       	ldd	r25, Y+6	; 0x06
    4142:	00 97       	sbiw	r24, 0x00	; 0
    4144:	69 f7       	brne	.-38     	; 0x4120 <HLCD_Send_char_4bit+0x262>
    4146:	14 c0       	rjmp	.+40     	; 0x4170 <HLCD_Send_char_4bit+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4148:	6f 81       	ldd	r22, Y+7	; 0x07
    414a:	78 85       	ldd	r23, Y+8	; 0x08
    414c:	89 85       	ldd	r24, Y+9	; 0x09
    414e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	9e 83       	std	Y+6, r25	; 0x06
    415a:	8d 83       	std	Y+5, r24	; 0x05
    415c:	8d 81       	ldd	r24, Y+5	; 0x05
    415e:	9e 81       	ldd	r25, Y+6	; 0x06
    4160:	9a 83       	std	Y+2, r25	; 0x02
    4162:	89 83       	std	Y+1, r24	; 0x01
    4164:	89 81       	ldd	r24, Y+1	; 0x01
    4166:	9a 81       	ldd	r25, Y+2	; 0x02
    4168:	01 97       	sbiw	r24, 0x01	; 1
    416a:	f1 f7       	brne	.-4      	; 0x4168 <HLCD_Send_char_4bit+0x2aa>
    416c:	9a 83       	std	Y+2, r25	; 0x02
    416e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    4170:	82 e0       	ldi	r24, 0x02	; 2
    4172:	66 e0       	ldi	r22, 0x06	; 6
    4174:	40 e0       	ldi	r20, 0x00	; 0
    4176:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

}
    417a:	6d 96       	adiw	r28, 0x1d	; 29
    417c:	0f b6       	in	r0, 0x3f	; 63
    417e:	f8 94       	cli
    4180:	de bf       	out	0x3e, r29	; 62
    4182:	0f be       	out	0x3f, r0	; 63
    4184:	cd bf       	out	0x3d, r28	; 61
    4186:	cf 91       	pop	r28
    4188:	df 91       	pop	r29
    418a:	08 95       	ret

0000418c <HLCD_Send_String_4bit>:
/*********************************************/
void HLCD_Send_String_4bit( u8 *data)
{
    418c:	df 93       	push	r29
    418e:	cf 93       	push	r28
    4190:	00 d0       	rcall	.+0      	; 0x4192 <HLCD_Send_String_4bit+0x6>
    4192:	cd b7       	in	r28, 0x3d	; 61
    4194:	de b7       	in	r29, 0x3e	; 62
    4196:	9a 83       	std	Y+2, r25	; 0x02
    4198:	89 83       	std	Y+1, r24	; 0x01
	/*clear rs to select command*/
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_HIGH);
    419a:	82 e0       	ldi	r24, 0x02	; 2
    419c:	67 e0       	ldi	r22, 0x07	; 7
    419e:	41 e0       	ldi	r20, 0x01	; 1
    41a0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
    41a4:	82 e0       	ldi	r24, 0x02	; 2
    41a6:	65 e0       	ldi	r22, 0x05	; 5
    41a8:	40 e0       	ldi	r20, 0x00	; 0
    41aa:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    41ae:	0b c0       	rjmp	.+22     	; 0x41c6 <HLCD_Send_String_4bit+0x3a>
	while(*data)
	{
		HLCD_Send_char_4bit(*data++);
    41b0:	e9 81       	ldd	r30, Y+1	; 0x01
    41b2:	fa 81       	ldd	r31, Y+2	; 0x02
    41b4:	20 81       	ld	r18, Z
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ba:	01 96       	adiw	r24, 0x01	; 1
    41bc:	9a 83       	std	Y+2, r25	; 0x02
    41be:	89 83       	std	Y+1, r24	; 0x01
    41c0:	82 2f       	mov	r24, r18
    41c2:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <HLCD_Send_char_4bit>
void HLCD_Send_String_4bit( u8 *data)
{
	/*clear rs to select command*/
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_HIGH);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
	while(*data)
    41c6:	e9 81       	ldd	r30, Y+1	; 0x01
    41c8:	fa 81       	ldd	r31, Y+2	; 0x02
    41ca:	80 81       	ld	r24, Z
    41cc:	88 23       	and	r24, r24
    41ce:	81 f7       	brne	.-32     	; 0x41b0 <HLCD_Send_String_4bit+0x24>
	{
		HLCD_Send_char_4bit(*data++);
	}
}
    41d0:	0f 90       	pop	r0
    41d2:	0f 90       	pop	r0
    41d4:	cf 91       	pop	r28
    41d6:	df 91       	pop	r29
    41d8:	08 95       	ret

000041da <HLCD_Send_String_Position_4bit>:
/*****************************************/

Std_ReturnType HLCD_Send_String_Position_4bit(u8 *string,u8 row , u8 column)
{
    41da:	df 93       	push	r29
    41dc:	cf 93       	push	r28
    41de:	cd b7       	in	r28, 0x3d	; 61
    41e0:	de b7       	in	r29, 0x3e	; 62
    41e2:	27 97       	sbiw	r28, 0x07	; 7
    41e4:	0f b6       	in	r0, 0x3f	; 63
    41e6:	f8 94       	cli
    41e8:	de bf       	out	0x3e, r29	; 62
    41ea:	0f be       	out	0x3f, r0	; 63
    41ec:	cd bf       	out	0x3d, r28	; 61
    41ee:	9b 83       	std	Y+3, r25	; 0x03
    41f0:	8a 83       	std	Y+2, r24	; 0x02
    41f2:	6c 83       	std	Y+4, r22	; 0x04
    41f4:	4d 83       	std	Y+5, r20	; 0x05
	Std_ReturnType status =E_OK;
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	89 83       	std	Y+1, r24	; 0x01
	switch(row)
    41fa:	8c 81       	ldd	r24, Y+4	; 0x04
    41fc:	28 2f       	mov	r18, r24
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	3f 83       	std	Y+7, r19	; 0x07
    4202:	2e 83       	std	Y+6, r18	; 0x06
    4204:	8e 81       	ldd	r24, Y+6	; 0x06
    4206:	9f 81       	ldd	r25, Y+7	; 0x07
    4208:	84 39       	cpi	r24, 0x94	; 148
    420a:	91 05       	cpc	r25, r1
    420c:	61 f1       	breq	.+88     	; 0x4266 <HLCD_Send_String_Position_4bit+0x8c>
    420e:	2e 81       	ldd	r18, Y+6	; 0x06
    4210:	3f 81       	ldd	r19, Y+7	; 0x07
    4212:	25 39       	cpi	r18, 0x95	; 149
    4214:	31 05       	cpc	r19, r1
    4216:	34 f4       	brge	.+12     	; 0x4224 <HLCD_Send_String_Position_4bit+0x4a>
    4218:	8e 81       	ldd	r24, Y+6	; 0x06
    421a:	9f 81       	ldd	r25, Y+7	; 0x07
    421c:	80 38       	cpi	r24, 0x80	; 128
    421e:	91 05       	cpc	r25, r1
    4220:	61 f0       	breq	.+24     	; 0x423a <HLCD_Send_String_Position_4bit+0x60>
    4222:	37 c0       	rjmp	.+110    	; 0x4292 <HLCD_Send_String_Position_4bit+0xb8>
    4224:	2e 81       	ldd	r18, Y+6	; 0x06
    4226:	3f 81       	ldd	r19, Y+7	; 0x07
    4228:	20 3c       	cpi	r18, 0xC0	; 192
    422a:	31 05       	cpc	r19, r1
    422c:	89 f0       	breq	.+34     	; 0x4250 <HLCD_Send_String_Position_4bit+0x76>
    422e:	8e 81       	ldd	r24, Y+6	; 0x06
    4230:	9f 81       	ldd	r25, Y+7	; 0x07
    4232:	84 3d       	cpi	r24, 0xD4	; 212
    4234:	91 05       	cpc	r25, r1
    4236:	11 f1       	breq	.+68     	; 0x427c <HLCD_Send_String_Position_4bit+0xa2>
    4238:	2c c0       	rjmp	.+88     	; 0x4292 <HLCD_Send_String_Position_4bit+0xb8>
	{
	case LCD_GO_ROW1 : HLCD_Send_Command_4bit(LCD_GO_ROW1+column);status =E_OK;
    423a:	8d 81       	ldd	r24, Y+5	; 0x05
    423c:	80 58       	subi	r24, 0x80	; 128
    423e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_4bit(string); break;
    4246:	8a 81       	ldd	r24, Y+2	; 0x02
    4248:	9b 81       	ldd	r25, Y+3	; 0x03
    424a:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
    424e:	22 c0       	rjmp	.+68     	; 0x4294 <HLCD_Send_String_Position_4bit+0xba>

	case LCD_GO_ROW2 : HLCD_Send_Command_4bit(LCD_GO_ROW2+column);status =E_OK;
    4250:	8d 81       	ldd	r24, Y+5	; 0x05
    4252:	80 54       	subi	r24, 0x40	; 64
    4254:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_4bit(string); break;
    425c:	8a 81       	ldd	r24, Y+2	; 0x02
    425e:	9b 81       	ldd	r25, Y+3	; 0x03
    4260:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
    4264:	17 c0       	rjmp	.+46     	; 0x4294 <HLCD_Send_String_Position_4bit+0xba>

	case LCD_GO_ROW3 : HLCD_Send_Command_4bit(LCD_GO_ROW3+column);status =E_OK;
    4266:	8d 81       	ldd	r24, Y+5	; 0x05
    4268:	8c 56       	subi	r24, 0x6C	; 108
    426a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_4bit(string); break;
    4272:	8a 81       	ldd	r24, Y+2	; 0x02
    4274:	9b 81       	ldd	r25, Y+3	; 0x03
    4276:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
    427a:	0c c0       	rjmp	.+24     	; 0x4294 <HLCD_Send_String_Position_4bit+0xba>

	case LCD_GO_ROW4 : HLCD_Send_Command_4bit(LCD_GO_ROW4+column);status =E_OK;
    427c:	8d 81       	ldd	r24, Y+5	; 0x05
    427e:	8c 52       	subi	r24, 0x2C	; 44
    4280:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_4bit(string); break;
    4288:	8a 81       	ldd	r24, Y+2	; 0x02
    428a:	9b 81       	ldd	r25, Y+3	; 0x03
    428c:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
    4290:	01 c0       	rjmp	.+2      	; 0x4294 <HLCD_Send_String_Position_4bit+0xba>

	default :status =E_NOT_OK; break;
    4292:	19 82       	std	Y+1, r1	; 0x01
	}
	return status ;
    4294:	89 81       	ldd	r24, Y+1	; 0x01
}
    4296:	27 96       	adiw	r28, 0x07	; 7
    4298:	0f b6       	in	r0, 0x3f	; 63
    429a:	f8 94       	cli
    429c:	de bf       	out	0x3e, r29	; 62
    429e:	0f be       	out	0x3f, r0	; 63
    42a0:	cd bf       	out	0x3d, r28	; 61
    42a2:	cf 91       	pop	r28
    42a4:	df 91       	pop	r29
    42a6:	08 95       	ret

000042a8 <HLCD_Send_CursorPosition_4bit>:

/********************************/
Std_ReturnType HLCD_Send_CursorPosition_4bit(u8 row , u8 column)
{
    42a8:	df 93       	push	r29
    42aa:	cf 93       	push	r28
    42ac:	00 d0       	rcall	.+0      	; 0x42ae <HLCD_Send_CursorPosition_4bit+0x6>
    42ae:	00 d0       	rcall	.+0      	; 0x42b0 <HLCD_Send_CursorPosition_4bit+0x8>
    42b0:	0f 92       	push	r0
    42b2:	cd b7       	in	r28, 0x3d	; 61
    42b4:	de b7       	in	r29, 0x3e	; 62
    42b6:	8a 83       	std	Y+2, r24	; 0x02
    42b8:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType status =E_OK;
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	89 83       	std	Y+1, r24	; 0x01
	switch(row)
    42be:	8a 81       	ldd	r24, Y+2	; 0x02
    42c0:	28 2f       	mov	r18, r24
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	3d 83       	std	Y+5, r19	; 0x05
    42c6:	2c 83       	std	Y+4, r18	; 0x04
    42c8:	8c 81       	ldd	r24, Y+4	; 0x04
    42ca:	9d 81       	ldd	r25, Y+5	; 0x05
    42cc:	84 39       	cpi	r24, 0x94	; 148
    42ce:	91 05       	cpc	r25, r1
    42d0:	21 f1       	breq	.+72     	; 0x431a <HLCD_Send_CursorPosition_4bit+0x72>
    42d2:	2c 81       	ldd	r18, Y+4	; 0x04
    42d4:	3d 81       	ldd	r19, Y+5	; 0x05
    42d6:	25 39       	cpi	r18, 0x95	; 149
    42d8:	31 05       	cpc	r19, r1
    42da:	34 f4       	brge	.+12     	; 0x42e8 <HLCD_Send_CursorPosition_4bit+0x40>
    42dc:	8c 81       	ldd	r24, Y+4	; 0x04
    42de:	9d 81       	ldd	r25, Y+5	; 0x05
    42e0:	80 38       	cpi	r24, 0x80	; 128
    42e2:	91 05       	cpc	r25, r1
    42e4:	61 f0       	breq	.+24     	; 0x42fe <HLCD_Send_CursorPosition_4bit+0x56>
    42e6:	27 c0       	rjmp	.+78     	; 0x4336 <HLCD_Send_CursorPosition_4bit+0x8e>
    42e8:	2c 81       	ldd	r18, Y+4	; 0x04
    42ea:	3d 81       	ldd	r19, Y+5	; 0x05
    42ec:	20 3c       	cpi	r18, 0xC0	; 192
    42ee:	31 05       	cpc	r19, r1
    42f0:	69 f0       	breq	.+26     	; 0x430c <HLCD_Send_CursorPosition_4bit+0x64>
    42f2:	8c 81       	ldd	r24, Y+4	; 0x04
    42f4:	9d 81       	ldd	r25, Y+5	; 0x05
    42f6:	84 3d       	cpi	r24, 0xD4	; 212
    42f8:	91 05       	cpc	r25, r1
    42fa:	b1 f0       	breq	.+44     	; 0x4328 <HLCD_Send_CursorPosition_4bit+0x80>
    42fc:	1c c0       	rjmp	.+56     	; 0x4336 <HLCD_Send_CursorPosition_4bit+0x8e>
	{
	case LCD_GO_ROW1 : HLCD_Send_Command_4bit(LCD_GO_ROW1+column);status =E_OK;
    42fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4300:	80 58       	subi	r24, 0x80	; 128
    4302:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	89 83       	std	Y+1, r24	; 0x01
    430a:	16 c0       	rjmp	.+44     	; 0x4338 <HLCD_Send_CursorPosition_4bit+0x90>
	break;

	case LCD_GO_ROW2 : HLCD_Send_Command_4bit(LCD_GO_ROW2+column);status =E_OK;
    430c:	8b 81       	ldd	r24, Y+3	; 0x03
    430e:	80 54       	subi	r24, 0x40	; 64
    4310:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	89 83       	std	Y+1, r24	; 0x01
    4318:	0f c0       	rjmp	.+30     	; 0x4338 <HLCD_Send_CursorPosition_4bit+0x90>
	break;

	case LCD_GO_ROW3 : HLCD_Send_Command_4bit(LCD_GO_ROW3+column);status =E_OK;
    431a:	8b 81       	ldd	r24, Y+3	; 0x03
    431c:	8c 56       	subi	r24, 0x6C	; 108
    431e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	89 83       	std	Y+1, r24	; 0x01
    4326:	08 c0       	rjmp	.+16     	; 0x4338 <HLCD_Send_CursorPosition_4bit+0x90>
	break;

	case LCD_GO_ROW4 : HLCD_Send_Command_4bit(LCD_GO_ROW4+column);status =E_OK;
    4328:	8b 81       	ldd	r24, Y+3	; 0x03
    432a:	8c 52       	subi	r24, 0x2C	; 44
    432c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	89 83       	std	Y+1, r24	; 0x01
    4334:	01 c0       	rjmp	.+2      	; 0x4338 <HLCD_Send_CursorPosition_4bit+0x90>
	break;

	default :status =E_NOT_OK; break;
    4336:	19 82       	std	Y+1, r1	; 0x01
	}
	return status ;
    4338:	89 81       	ldd	r24, Y+1	; 0x01
}
    433a:	0f 90       	pop	r0
    433c:	0f 90       	pop	r0
    433e:	0f 90       	pop	r0
    4340:	0f 90       	pop	r0
    4342:	0f 90       	pop	r0
    4344:	cf 91       	pop	r28
    4346:	df 91       	pop	r29
    4348:	08 95       	ret

0000434a <HLCD_Send_char_Position_4bit>:
/**************************************/
Std_ReturnType HLCD_Send_char_Position_4bit(u8 data,u8 row , u8 column)
{
    434a:	df 93       	push	r29
    434c:	cf 93       	push	r28
    434e:	00 d0       	rcall	.+0      	; 0x4350 <HLCD_Send_char_Position_4bit+0x6>
    4350:	00 d0       	rcall	.+0      	; 0x4352 <HLCD_Send_char_Position_4bit+0x8>
    4352:	00 d0       	rcall	.+0      	; 0x4354 <HLCD_Send_char_Position_4bit+0xa>
    4354:	cd b7       	in	r28, 0x3d	; 61
    4356:	de b7       	in	r29, 0x3e	; 62
    4358:	8a 83       	std	Y+2, r24	; 0x02
    435a:	6b 83       	std	Y+3, r22	; 0x03
    435c:	4c 83       	std	Y+4, r20	; 0x04
	Std_ReturnType status =E_OK;
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	89 83       	std	Y+1, r24	; 0x01
	switch(row)
    4362:	8b 81       	ldd	r24, Y+3	; 0x03
    4364:	28 2f       	mov	r18, r24
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	3e 83       	std	Y+6, r19	; 0x06
    436a:	2d 83       	std	Y+5, r18	; 0x05
    436c:	8d 81       	ldd	r24, Y+5	; 0x05
    436e:	9e 81       	ldd	r25, Y+6	; 0x06
    4370:	84 39       	cpi	r24, 0x94	; 148
    4372:	91 05       	cpc	r25, r1
    4374:	51 f1       	breq	.+84     	; 0x43ca <HLCD_Send_char_Position_4bit+0x80>
    4376:	2d 81       	ldd	r18, Y+5	; 0x05
    4378:	3e 81       	ldd	r19, Y+6	; 0x06
    437a:	25 39       	cpi	r18, 0x95	; 149
    437c:	31 05       	cpc	r19, r1
    437e:	34 f4       	brge	.+12     	; 0x438c <HLCD_Send_char_Position_4bit+0x42>
    4380:	8d 81       	ldd	r24, Y+5	; 0x05
    4382:	9e 81       	ldd	r25, Y+6	; 0x06
    4384:	80 38       	cpi	r24, 0x80	; 128
    4386:	91 05       	cpc	r25, r1
    4388:	61 f0       	breq	.+24     	; 0x43a2 <HLCD_Send_char_Position_4bit+0x58>
    438a:	33 c0       	rjmp	.+102    	; 0x43f2 <HLCD_Send_char_Position_4bit+0xa8>
    438c:	2d 81       	ldd	r18, Y+5	; 0x05
    438e:	3e 81       	ldd	r19, Y+6	; 0x06
    4390:	20 3c       	cpi	r18, 0xC0	; 192
    4392:	31 05       	cpc	r19, r1
    4394:	81 f0       	breq	.+32     	; 0x43b6 <HLCD_Send_char_Position_4bit+0x6c>
    4396:	8d 81       	ldd	r24, Y+5	; 0x05
    4398:	9e 81       	ldd	r25, Y+6	; 0x06
    439a:	84 3d       	cpi	r24, 0xD4	; 212
    439c:	91 05       	cpc	r25, r1
    439e:	f9 f0       	breq	.+62     	; 0x43de <HLCD_Send_char_Position_4bit+0x94>
    43a0:	28 c0       	rjmp	.+80     	; 0x43f2 <HLCD_Send_char_Position_4bit+0xa8>
	{
	case LCD_GO_ROW1 : HLCD_Send_Command_4bit(LCD_GO_ROW1+column);status =E_OK;
    43a2:	8c 81       	ldd	r24, Y+4	; 0x04
    43a4:	80 58       	subi	r24, 0x80	; 128
    43a6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_4bit(data);break;
    43ae:	8a 81       	ldd	r24, Y+2	; 0x02
    43b0:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <HLCD_Send_char_4bit>
    43b4:	1f c0       	rjmp	.+62     	; 0x43f4 <HLCD_Send_char_Position_4bit+0xaa>

	case LCD_GO_ROW2 : HLCD_Send_Command_4bit(LCD_GO_ROW2+column);status =E_OK;
    43b6:	8c 81       	ldd	r24, Y+4	; 0x04
    43b8:	80 54       	subi	r24, 0x40	; 64
    43ba:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_4bit(data); break;
    43c2:	8a 81       	ldd	r24, Y+2	; 0x02
    43c4:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <HLCD_Send_char_4bit>
    43c8:	15 c0       	rjmp	.+42     	; 0x43f4 <HLCD_Send_char_Position_4bit+0xaa>

	case LCD_GO_ROW3 : HLCD_Send_Command_4bit(LCD_GO_ROW3+column);status =E_OK;
    43ca:	8c 81       	ldd	r24, Y+4	; 0x04
    43cc:	8c 56       	subi	r24, 0x6C	; 108
    43ce:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_4bit(data); break;
    43d6:	8a 81       	ldd	r24, Y+2	; 0x02
    43d8:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <HLCD_Send_char_4bit>
    43dc:	0b c0       	rjmp	.+22     	; 0x43f4 <HLCD_Send_char_Position_4bit+0xaa>

	case LCD_GO_ROW4 : HLCD_Send_Command_4bit(LCD_GO_ROW4+column);status =E_OK;
    43de:	8c 81       	ldd	r24, Y+4	; 0x04
    43e0:	8c 52       	subi	r24, 0x2C	; 44
    43e2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_4bit(data); break;
    43ea:	8a 81       	ldd	r24, Y+2	; 0x02
    43ec:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <HLCD_Send_char_4bit>
    43f0:	01 c0       	rjmp	.+2      	; 0x43f4 <HLCD_Send_char_Position_4bit+0xaa>

	default :status =E_NOT_OK; break;
    43f2:	19 82       	std	Y+1, r1	; 0x01
	}
	return status ;
    43f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    43f6:	26 96       	adiw	r28, 0x06	; 6
    43f8:	0f b6       	in	r0, 0x3f	; 63
    43fa:	f8 94       	cli
    43fc:	de bf       	out	0x3e, r29	; 62
    43fe:	0f be       	out	0x3f, r0	; 63
    4400:	cd bf       	out	0x3d, r28	; 61
    4402:	cf 91       	pop	r28
    4404:	df 91       	pop	r29
    4406:	08 95       	ret

00004408 <convert_uint32_to_string>:
/*********************************************/
#endif
/********************** helper functions ***********************/

/***********************/
Std_ReturnType convert_uint32_to_string(u32 value, u8 *str){
    4408:	df 93       	push	r29
    440a:	cf 93       	push	r28
    440c:	cd b7       	in	r28, 0x3d	; 61
    440e:	de b7       	in	r29, 0x3e	; 62
    4410:	27 97       	sbiw	r28, 0x07	; 7
    4412:	0f b6       	in	r0, 0x3f	; 63
    4414:	f8 94       	cli
    4416:	de bf       	out	0x3e, r29	; 62
    4418:	0f be       	out	0x3f, r0	; 63
    441a:	cd bf       	out	0x3d, r28	; 61
    441c:	6a 83       	std	Y+2, r22	; 0x02
    441e:	7b 83       	std	Y+3, r23	; 0x03
    4420:	8c 83       	std	Y+4, r24	; 0x04
    4422:	9d 83       	std	Y+5, r25	; 0x05
    4424:	5f 83       	std	Y+7, r21	; 0x07
    4426:	4e 83       	std	Y+6, r20	; 0x06
	Std_ReturnType ret = E_OK;
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == str){
    442c:	8e 81       	ldd	r24, Y+6	; 0x06
    442e:	9f 81       	ldd	r25, Y+7	; 0x07
    4430:	00 97       	sbiw	r24, 0x00	; 0
    4432:	11 f4       	brne	.+4      	; 0x4438 <convert_uint32_to_string+0x30>
		ret = E_NOT_OK;
    4434:	19 82       	std	Y+1, r1	; 0x01
    4436:	2d c0       	rjmp	.+90     	; 0x4492 <convert_uint32_to_string+0x8a>
	}
	else{
		memset((u8 *)str, '\0', 11);
    4438:	8e 81       	ldd	r24, Y+6	; 0x06
    443a:	9f 81       	ldd	r25, Y+7	; 0x07
    443c:	60 e0       	ldi	r22, 0x00	; 0
    443e:	70 e0       	ldi	r23, 0x00	; 0
    4440:	4b e0       	ldi	r20, 0x0B	; 11
    4442:	50 e0       	ldi	r21, 0x00	; 0
    4444:	0e 94 40 30 	call	0x6080	; 0x6080 <memset>
		sprintf(str, "%i", value);
    4448:	8d b7       	in	r24, 0x3d	; 61
    444a:	9e b7       	in	r25, 0x3e	; 62
    444c:	08 97       	sbiw	r24, 0x08	; 8
    444e:	0f b6       	in	r0, 0x3f	; 63
    4450:	f8 94       	cli
    4452:	9e bf       	out	0x3e, r25	; 62
    4454:	0f be       	out	0x3f, r0	; 63
    4456:	8d bf       	out	0x3d, r24	; 61
    4458:	ed b7       	in	r30, 0x3d	; 61
    445a:	fe b7       	in	r31, 0x3e	; 62
    445c:	31 96       	adiw	r30, 0x01	; 1
    445e:	8e 81       	ldd	r24, Y+6	; 0x06
    4460:	9f 81       	ldd	r25, Y+7	; 0x07
    4462:	91 83       	std	Z+1, r25	; 0x01
    4464:	80 83       	st	Z, r24
    4466:	80 e6       	ldi	r24, 0x60	; 96
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	93 83       	std	Z+3, r25	; 0x03
    446c:	82 83       	std	Z+2, r24	; 0x02
    446e:	8a 81       	ldd	r24, Y+2	; 0x02
    4470:	9b 81       	ldd	r25, Y+3	; 0x03
    4472:	ac 81       	ldd	r26, Y+4	; 0x04
    4474:	bd 81       	ldd	r27, Y+5	; 0x05
    4476:	84 83       	std	Z+4, r24	; 0x04
    4478:	95 83       	std	Z+5, r25	; 0x05
    447a:	a6 83       	std	Z+6, r26	; 0x06
    447c:	b7 83       	std	Z+7, r27	; 0x07
    447e:	0e 94 47 30 	call	0x608e	; 0x608e <sprintf>
    4482:	8d b7       	in	r24, 0x3d	; 61
    4484:	9e b7       	in	r25, 0x3e	; 62
    4486:	08 96       	adiw	r24, 0x08	; 8
    4488:	0f b6       	in	r0, 0x3f	; 63
    448a:	f8 94       	cli
    448c:	9e bf       	out	0x3e, r25	; 62
    448e:	0f be       	out	0x3f, r0	; 63
    4490:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    4492:	89 81       	ldd	r24, Y+1	; 0x01
}
    4494:	27 96       	adiw	r28, 0x07	; 7
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	de bf       	out	0x3e, r29	; 62
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	cd bf       	out	0x3d, r28	; 61
    44a0:	cf 91       	pop	r28
    44a2:	df 91       	pop	r29
    44a4:	08 95       	ret

000044a6 <convert_uint8_to_string>:
/**************************************************************/
Std_ReturnType convert_uint8_to_string(u8 value, u8 *str){
    44a6:	df 93       	push	r29
    44a8:	cf 93       	push	r28
    44aa:	00 d0       	rcall	.+0      	; 0x44ac <convert_uint8_to_string+0x6>
    44ac:	00 d0       	rcall	.+0      	; 0x44ae <convert_uint8_to_string+0x8>
    44ae:	cd b7       	in	r28, 0x3d	; 61
    44b0:	de b7       	in	r29, 0x3e	; 62
    44b2:	8a 83       	std	Y+2, r24	; 0x02
    44b4:	7c 83       	std	Y+4, r23	; 0x04
    44b6:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_NOT_OK;
    44b8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == str){
    44ba:	8b 81       	ldd	r24, Y+3	; 0x03
    44bc:	9c 81       	ldd	r25, Y+4	; 0x04
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	11 f4       	brne	.+4      	; 0x44c6 <convert_uint8_to_string+0x20>
		ret = E_NOT_OK;
    44c2:	19 82       	std	Y+1, r1	; 0x01
    44c4:	27 c0       	rjmp	.+78     	; 0x4514 <convert_uint8_to_string+0x6e>
	}
	else{
		memset((char *)str, '\0', 4);
    44c6:	8b 81       	ldd	r24, Y+3	; 0x03
    44c8:	9c 81       	ldd	r25, Y+4	; 0x04
    44ca:	60 e0       	ldi	r22, 0x00	; 0
    44cc:	70 e0       	ldi	r23, 0x00	; 0
    44ce:	44 e0       	ldi	r20, 0x04	; 4
    44d0:	50 e0       	ldi	r21, 0x00	; 0
    44d2:	0e 94 40 30 	call	0x6080	; 0x6080 <memset>
		sprintf(str, "%i", value);
    44d6:	8a 81       	ldd	r24, Y+2	; 0x02
    44d8:	28 2f       	mov	r18, r24
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	00 d0       	rcall	.+0      	; 0x44de <convert_uint8_to_string+0x38>
    44de:	00 d0       	rcall	.+0      	; 0x44e0 <convert_uint8_to_string+0x3a>
    44e0:	00 d0       	rcall	.+0      	; 0x44e2 <convert_uint8_to_string+0x3c>
    44e2:	ed b7       	in	r30, 0x3d	; 61
    44e4:	fe b7       	in	r31, 0x3e	; 62
    44e6:	31 96       	adiw	r30, 0x01	; 1
    44e8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ea:	9c 81       	ldd	r25, Y+4	; 0x04
    44ec:	91 83       	std	Z+1, r25	; 0x01
    44ee:	80 83       	st	Z, r24
    44f0:	80 e6       	ldi	r24, 0x60	; 96
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	93 83       	std	Z+3, r25	; 0x03
    44f6:	82 83       	std	Z+2, r24	; 0x02
    44f8:	35 83       	std	Z+5, r19	; 0x05
    44fa:	24 83       	std	Z+4, r18	; 0x04
    44fc:	0e 94 47 30 	call	0x608e	; 0x608e <sprintf>
    4500:	8d b7       	in	r24, 0x3d	; 61
    4502:	9e b7       	in	r25, 0x3e	; 62
    4504:	06 96       	adiw	r24, 0x06	; 6
    4506:	0f b6       	in	r0, 0x3f	; 63
    4508:	f8 94       	cli
    450a:	9e bf       	out	0x3e, r25	; 62
    450c:	0f be       	out	0x3f, r0	; 63
    450e:	8d bf       	out	0x3d, r24	; 61
		ret=E_OK;
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    4514:	89 81       	ldd	r24, Y+1	; 0x01
}
    4516:	0f 90       	pop	r0
    4518:	0f 90       	pop	r0
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	cf 91       	pop	r28
    4520:	df 91       	pop	r29
    4522:	08 95       	ret

00004524 <convert_uint16_to_string>:
/***************************************/
Std_ReturnType convert_uint16_to_string(u16 value, u8 *str){
    4524:	df 93       	push	r29
    4526:	cf 93       	push	r28
    4528:	00 d0       	rcall	.+0      	; 0x452a <convert_uint16_to_string+0x6>
    452a:	00 d0       	rcall	.+0      	; 0x452c <convert_uint16_to_string+0x8>
    452c:	0f 92       	push	r0
    452e:	cd b7       	in	r28, 0x3d	; 61
    4530:	de b7       	in	r29, 0x3e	; 62
    4532:	9b 83       	std	Y+3, r25	; 0x03
    4534:	8a 83       	std	Y+2, r24	; 0x02
    4536:	7d 83       	std	Y+5, r23	; 0x05
    4538:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_NOT_OK;
    453a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == str){
    453c:	8c 81       	ldd	r24, Y+4	; 0x04
    453e:	9d 81       	ldd	r25, Y+5	; 0x05
    4540:	00 97       	sbiw	r24, 0x00	; 0
    4542:	11 f4       	brne	.+4      	; 0x4548 <convert_uint16_to_string+0x24>
		ret = E_NOT_OK;
    4544:	19 82       	std	Y+1, r1	; 0x01
    4546:	26 c0       	rjmp	.+76     	; 0x4594 <convert_uint16_to_string+0x70>
	}
	else{
		memset((char *)str, '\0', 8);
    4548:	8c 81       	ldd	r24, Y+4	; 0x04
    454a:	9d 81       	ldd	r25, Y+5	; 0x05
    454c:	60 e0       	ldi	r22, 0x00	; 0
    454e:	70 e0       	ldi	r23, 0x00	; 0
    4550:	48 e0       	ldi	r20, 0x08	; 8
    4552:	50 e0       	ldi	r21, 0x00	; 0
    4554:	0e 94 40 30 	call	0x6080	; 0x6080 <memset>
		sprintf(str, "%i", value);
    4558:	00 d0       	rcall	.+0      	; 0x455a <convert_uint16_to_string+0x36>
    455a:	00 d0       	rcall	.+0      	; 0x455c <convert_uint16_to_string+0x38>
    455c:	00 d0       	rcall	.+0      	; 0x455e <convert_uint16_to_string+0x3a>
    455e:	ed b7       	in	r30, 0x3d	; 61
    4560:	fe b7       	in	r31, 0x3e	; 62
    4562:	31 96       	adiw	r30, 0x01	; 1
    4564:	8c 81       	ldd	r24, Y+4	; 0x04
    4566:	9d 81       	ldd	r25, Y+5	; 0x05
    4568:	91 83       	std	Z+1, r25	; 0x01
    456a:	80 83       	st	Z, r24
    456c:	80 e6       	ldi	r24, 0x60	; 96
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	93 83       	std	Z+3, r25	; 0x03
    4572:	82 83       	std	Z+2, r24	; 0x02
    4574:	8a 81       	ldd	r24, Y+2	; 0x02
    4576:	9b 81       	ldd	r25, Y+3	; 0x03
    4578:	95 83       	std	Z+5, r25	; 0x05
    457a:	84 83       	std	Z+4, r24	; 0x04
    457c:	0e 94 47 30 	call	0x608e	; 0x608e <sprintf>
    4580:	8d b7       	in	r24, 0x3d	; 61
    4582:	9e b7       	in	r25, 0x3e	; 62
    4584:	06 96       	adiw	r24, 0x06	; 6
    4586:	0f b6       	in	r0, 0x3f	; 63
    4588:	f8 94       	cli
    458a:	9e bf       	out	0x3e, r25	; 62
    458c:	0f be       	out	0x3f, r0	; 63
    458e:	8d bf       	out	0x3d, r24	; 61
		ret=E_OK;
    4590:	81 e0       	ldi	r24, 0x01	; 1
    4592:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    4594:	89 81       	ldd	r24, Y+1	; 0x01
}
    4596:	0f 90       	pop	r0
    4598:	0f 90       	pop	r0
    459a:	0f 90       	pop	r0
    459c:	0f 90       	pop	r0
    459e:	0f 90       	pop	r0
    45a0:	cf 91       	pop	r28
    45a2:	df 91       	pop	r29
    45a4:	08 95       	ret

000045a6 <SEND_U16_8BIT>:
 * @param row the required row
 * @param column  the required column
 */
/*************************************/
void SEND_U16_8BIT(u16 value,u8 row ,u8 column)
{
    45a6:	df 93       	push	r29
    45a8:	cf 93       	push	r28
    45aa:	cd b7       	in	r28, 0x3d	; 61
    45ac:	de b7       	in	r29, 0x3e	; 62
    45ae:	2c 97       	sbiw	r28, 0x0c	; 12
    45b0:	0f b6       	in	r0, 0x3f	; 63
    45b2:	f8 94       	cli
    45b4:	de bf       	out	0x3e, r29	; 62
    45b6:	0f be       	out	0x3f, r0	; 63
    45b8:	cd bf       	out	0x3d, r28	; 61
    45ba:	9a 87       	std	Y+10, r25	; 0x0a
    45bc:	89 87       	std	Y+9, r24	; 0x09
    45be:	6b 87       	std	Y+11, r22	; 0x0b
    45c0:	4c 87       	std	Y+12, r20	; 0x0c
	u8 arr[8];
	convert_uint16_to_string(value,arr);
    45c2:	89 85       	ldd	r24, Y+9	; 0x09
    45c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45c6:	9e 01       	movw	r18, r28
    45c8:	2f 5f       	subi	r18, 0xFF	; 255
    45ca:	3f 4f       	sbci	r19, 0xFF	; 255
    45cc:	b9 01       	movw	r22, r18
    45ce:	0e 94 92 22 	call	0x4524	; 0x4524 <convert_uint16_to_string>
	HLCD_Send_String_Position_8bit(arr,row ,column);
    45d2:	ce 01       	movw	r24, r28
    45d4:	01 96       	adiw	r24, 0x01	; 1
    45d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    45d8:	4c 85       	ldd	r20, Y+12	; 0x0c
    45da:	0e 94 ed 19 	call	0x33da	; 0x33da <HLCD_Send_String_Position_8bit>
}
    45de:	2c 96       	adiw	r28, 0x0c	; 12
    45e0:	0f b6       	in	r0, 0x3f	; 63
    45e2:	f8 94       	cli
    45e4:	de bf       	out	0x3e, r29	; 62
    45e6:	0f be       	out	0x3f, r0	; 63
    45e8:	cd bf       	out	0x3d, r28	; 61
    45ea:	cf 91       	pop	r28
    45ec:	df 91       	pop	r29
    45ee:	08 95       	ret

000045f0 <SEND_U16_4BIT>:
 * @param row the required row
 * @param column  the required column
 */
/*************************************/
void SEND_U16_4BIT(u16 value,u8 row ,u8 column)
{
    45f0:	df 93       	push	r29
    45f2:	cf 93       	push	r28
    45f4:	cd b7       	in	r28, 0x3d	; 61
    45f6:	de b7       	in	r29, 0x3e	; 62
    45f8:	2c 97       	sbiw	r28, 0x0c	; 12
    45fa:	0f b6       	in	r0, 0x3f	; 63
    45fc:	f8 94       	cli
    45fe:	de bf       	out	0x3e, r29	; 62
    4600:	0f be       	out	0x3f, r0	; 63
    4602:	cd bf       	out	0x3d, r28	; 61
    4604:	9a 87       	std	Y+10, r25	; 0x0a
    4606:	89 87       	std	Y+9, r24	; 0x09
    4608:	6b 87       	std	Y+11, r22	; 0x0b
    460a:	4c 87       	std	Y+12, r20	; 0x0c
	u8 arr[8];
	convert_uint16_to_string(value,arr);
    460c:	89 85       	ldd	r24, Y+9	; 0x09
    460e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4610:	9e 01       	movw	r18, r28
    4612:	2f 5f       	subi	r18, 0xFF	; 255
    4614:	3f 4f       	sbci	r19, 0xFF	; 255
    4616:	b9 01       	movw	r22, r18
    4618:	0e 94 92 22 	call	0x4524	; 0x4524 <convert_uint16_to_string>
	HLCD_Send_String_Position_4bit(arr,row ,column);
    461c:	ce 01       	movw	r24, r28
    461e:	01 96       	adiw	r24, 0x01	; 1
    4620:	6b 85       	ldd	r22, Y+11	; 0x0b
    4622:	4c 85       	ldd	r20, Y+12	; 0x0c
    4624:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
}
    4628:	2c 96       	adiw	r28, 0x0c	; 12
    462a:	0f b6       	in	r0, 0x3f	; 63
    462c:	f8 94       	cli
    462e:	de bf       	out	0x3e, r29	; 62
    4630:	0f be       	out	0x3f, r0	; 63
    4632:	cd bf       	out	0x3d, r28	; 61
    4634:	cf 91       	pop	r28
    4636:	df 91       	pop	r29
    4638:	08 95       	ret

0000463a <keypad_read>:
//        {'#', '0', '=', '+'}   \
//    }

/*this function is used to scan and read the pressed buttons of keypad*/
void keypad_read(char *button_pos_ )
{
    463a:	df 93       	push	r29
    463c:	cf 93       	push	r28
    463e:	cd b7       	in	r28, 0x3d	; 61
    4640:	de b7       	in	r29, 0x3e	; 62
    4642:	ac 97       	sbiw	r28, 0x2c	; 44
    4644:	0f b6       	in	r0, 0x3f	; 63
    4646:	f8 94       	cli
    4648:	de bf       	out	0x3e, r29	; 62
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	cd bf       	out	0x3d, r28	; 61
    464e:	9c a7       	std	Y+44, r25	; 0x2c
    4650:	8b a7       	std	Y+43, r24	; 0x2b
	u8 l_row_counter=0;
    4652:	1a a6       	std	Y+42, r1	; 0x2a
	u8 l_column_counter=0;
    4654:	19 a6       	std	Y+41, r1	; 0x29
	u8 counter=0;
    4656:	18 a6       	std	Y+40, r1	; 0x28
	u8 buttonn =0;
    4658:	1f a2       	std	Y+39, r1	; 0x27

	*button_pos_=0;
    465a:	eb a5       	ldd	r30, Y+43	; 0x2b
    465c:	fc a5       	ldd	r31, Y+44	; 0x2c
    465e:	10 82       	st	Z, r1

	for(l_row_counter=0 ;l_row_counter<keypad_columns;l_row_counter++)
    4660:	1a a6       	std	Y+42, r1	; 0x2a
    4662:	79 c1       	rjmp	.+754    	; 0x4956 <keypad_read+0x31c>
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_rows_PORT,row_port_pins[l_row_counter],PIN_HIGH);
    4664:	8a a5       	ldd	r24, Y+42	; 0x2a
    4666:	88 2f       	mov	r24, r24
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	fc 01       	movw	r30, r24
    466c:	e7 5b       	subi	r30, 0xB7	; 183
    466e:	fd 4f       	sbci	r31, 0xFD	; 253
    4670:	90 81       	ld	r25, Z
    4672:	83 e0       	ldi	r24, 0x03	; 3
    4674:	69 2f       	mov	r22, r25
    4676:	41 e0       	ldi	r20, 0x01	; 1
    4678:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	a8 e4       	ldi	r26, 0x48	; 72
    4682:	b2 e4       	ldi	r27, 0x42	; 66
    4684:	8b a3       	std	Y+35, r24	; 0x23
    4686:	9c a3       	std	Y+36, r25	; 0x24
    4688:	ad a3       	std	Y+37, r26	; 0x25
    468a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    468c:	6b a1       	ldd	r22, Y+35	; 0x23
    468e:	7c a1       	ldd	r23, Y+36	; 0x24
    4690:	8d a1       	ldd	r24, Y+37	; 0x25
    4692:	9e a1       	ldd	r25, Y+38	; 0x26
    4694:	2b ea       	ldi	r18, 0xAB	; 171
    4696:	3a ea       	ldi	r19, 0xAA	; 170
    4698:	4a e2       	ldi	r20, 0x2A	; 42
    469a:	50 e4       	ldi	r21, 0x40	; 64
    469c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	8f 8f       	std	Y+31, r24	; 0x1f
    46a6:	98 a3       	std	Y+32, r25	; 0x20
    46a8:	a9 a3       	std	Y+33, r26	; 0x21
    46aa:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    46ac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    46ae:	78 a1       	ldd	r23, Y+32	; 0x20
    46b0:	89 a1       	ldd	r24, Y+33	; 0x21
    46b2:	9a a1       	ldd	r25, Y+34	; 0x22
    46b4:	20 e0       	ldi	r18, 0x00	; 0
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	40 e8       	ldi	r20, 0x80	; 128
    46ba:	5f e3       	ldi	r21, 0x3F	; 63
    46bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46c0:	88 23       	and	r24, r24
    46c2:	1c f4       	brge	.+6      	; 0x46ca <keypad_read+0x90>
		__ticks = 1;
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	8e 8f       	std	Y+30, r24	; 0x1e
    46c8:	91 c0       	rjmp	.+290    	; 0x47ec <keypad_read+0x1b2>
	else if (__tmp > 255)
    46ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    46cc:	78 a1       	ldd	r23, Y+32	; 0x20
    46ce:	89 a1       	ldd	r24, Y+33	; 0x21
    46d0:	9a a1       	ldd	r25, Y+34	; 0x22
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	4f e7       	ldi	r20, 0x7F	; 127
    46d8:	53 e4       	ldi	r21, 0x43	; 67
    46da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46de:	18 16       	cp	r1, r24
    46e0:	0c f0       	brlt	.+2      	; 0x46e4 <keypad_read+0xaa>
    46e2:	7b c0       	rjmp	.+246    	; 0x47da <keypad_read+0x1a0>
	{
		_delay_ms(__us / 1000.0);
    46e4:	6b a1       	ldd	r22, Y+35	; 0x23
    46e6:	7c a1       	ldd	r23, Y+36	; 0x24
    46e8:	8d a1       	ldd	r24, Y+37	; 0x25
    46ea:	9e a1       	ldd	r25, Y+38	; 0x26
    46ec:	20 e0       	ldi	r18, 0x00	; 0
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	4a e7       	ldi	r20, 0x7A	; 122
    46f2:	54 e4       	ldi	r21, 0x44	; 68
    46f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    46f8:	dc 01       	movw	r26, r24
    46fa:	cb 01       	movw	r24, r22
    46fc:	8a 8f       	std	Y+26, r24	; 0x1a
    46fe:	9b 8f       	std	Y+27, r25	; 0x1b
    4700:	ac 8f       	std	Y+28, r26	; 0x1c
    4702:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4704:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4706:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4708:	8c 8d       	ldd	r24, Y+28	; 0x1c
    470a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	4a ef       	ldi	r20, 0xFA	; 250
    4712:	54 e4       	ldi	r21, 0x44	; 68
    4714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4718:	dc 01       	movw	r26, r24
    471a:	cb 01       	movw	r24, r22
    471c:	8e 8b       	std	Y+22, r24	; 0x16
    471e:	9f 8b       	std	Y+23, r25	; 0x17
    4720:	a8 8f       	std	Y+24, r26	; 0x18
    4722:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    4724:	6e 89       	ldd	r22, Y+22	; 0x16
    4726:	7f 89       	ldd	r23, Y+23	; 0x17
    4728:	88 8d       	ldd	r24, Y+24	; 0x18
    472a:	99 8d       	ldd	r25, Y+25	; 0x19
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	40 e8       	ldi	r20, 0x80	; 128
    4732:	5f e3       	ldi	r21, 0x3F	; 63
    4734:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4738:	88 23       	and	r24, r24
    473a:	2c f4       	brge	.+10     	; 0x4746 <keypad_read+0x10c>
		__ticks = 1;
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	9d 8b       	std	Y+21, r25	; 0x15
    4742:	8c 8b       	std	Y+20, r24	; 0x14
    4744:	3f c0       	rjmp	.+126    	; 0x47c4 <keypad_read+0x18a>
	else if (__tmp > 65535)
    4746:	6e 89       	ldd	r22, Y+22	; 0x16
    4748:	7f 89       	ldd	r23, Y+23	; 0x17
    474a:	88 8d       	ldd	r24, Y+24	; 0x18
    474c:	99 8d       	ldd	r25, Y+25	; 0x19
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	3f ef       	ldi	r19, 0xFF	; 255
    4752:	4f e7       	ldi	r20, 0x7F	; 127
    4754:	57 e4       	ldi	r21, 0x47	; 71
    4756:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    475a:	18 16       	cp	r1, r24
    475c:	4c f5       	brge	.+82     	; 0x47b0 <keypad_read+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    475e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4760:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4762:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4764:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4766:	20 e0       	ldi	r18, 0x00	; 0
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	40 e2       	ldi	r20, 0x20	; 32
    476c:	51 e4       	ldi	r21, 0x41	; 65
    476e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4772:	dc 01       	movw	r26, r24
    4774:	cb 01       	movw	r24, r22
    4776:	bc 01       	movw	r22, r24
    4778:	cd 01       	movw	r24, r26
    477a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    477e:	dc 01       	movw	r26, r24
    4780:	cb 01       	movw	r24, r22
    4782:	9d 8b       	std	Y+21, r25	; 0x15
    4784:	8c 8b       	std	Y+20, r24	; 0x14
    4786:	0f c0       	rjmp	.+30     	; 0x47a6 <keypad_read+0x16c>
    4788:	88 ec       	ldi	r24, 0xC8	; 200
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	9b 8b       	std	Y+19, r25	; 0x13
    478e:	8a 8b       	std	Y+18, r24	; 0x12
    4790:	8a 89       	ldd	r24, Y+18	; 0x12
    4792:	9b 89       	ldd	r25, Y+19	; 0x13
    4794:	01 97       	sbiw	r24, 0x01	; 1
    4796:	f1 f7       	brne	.-4      	; 0x4794 <keypad_read+0x15a>
    4798:	9b 8b       	std	Y+19, r25	; 0x13
    479a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    479c:	8c 89       	ldd	r24, Y+20	; 0x14
    479e:	9d 89       	ldd	r25, Y+21	; 0x15
    47a0:	01 97       	sbiw	r24, 0x01	; 1
    47a2:	9d 8b       	std	Y+21, r25	; 0x15
    47a4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47a6:	8c 89       	ldd	r24, Y+20	; 0x14
    47a8:	9d 89       	ldd	r25, Y+21	; 0x15
    47aa:	00 97       	sbiw	r24, 0x00	; 0
    47ac:	69 f7       	brne	.-38     	; 0x4788 <keypad_read+0x14e>
    47ae:	24 c0       	rjmp	.+72     	; 0x47f8 <keypad_read+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47b0:	6e 89       	ldd	r22, Y+22	; 0x16
    47b2:	7f 89       	ldd	r23, Y+23	; 0x17
    47b4:	88 8d       	ldd	r24, Y+24	; 0x18
    47b6:	99 8d       	ldd	r25, Y+25	; 0x19
    47b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47bc:	dc 01       	movw	r26, r24
    47be:	cb 01       	movw	r24, r22
    47c0:	9d 8b       	std	Y+21, r25	; 0x15
    47c2:	8c 8b       	std	Y+20, r24	; 0x14
    47c4:	8c 89       	ldd	r24, Y+20	; 0x14
    47c6:	9d 89       	ldd	r25, Y+21	; 0x15
    47c8:	99 8b       	std	Y+17, r25	; 0x11
    47ca:	88 8b       	std	Y+16, r24	; 0x10
    47cc:	88 89       	ldd	r24, Y+16	; 0x10
    47ce:	99 89       	ldd	r25, Y+17	; 0x11
    47d0:	01 97       	sbiw	r24, 0x01	; 1
    47d2:	f1 f7       	brne	.-4      	; 0x47d0 <keypad_read+0x196>
    47d4:	99 8b       	std	Y+17, r25	; 0x11
    47d6:	88 8b       	std	Y+16, r24	; 0x10
    47d8:	0f c0       	rjmp	.+30     	; 0x47f8 <keypad_read+0x1be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    47da:	6f 8d       	ldd	r22, Y+31	; 0x1f
    47dc:	78 a1       	ldd	r23, Y+32	; 0x20
    47de:	89 a1       	ldd	r24, Y+33	; 0x21
    47e0:	9a a1       	ldd	r25, Y+34	; 0x22
    47e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47e6:	dc 01       	movw	r26, r24
    47e8:	cb 01       	movw	r24, r22
    47ea:	8e 8f       	std	Y+30, r24	; 0x1e
    47ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    47ee:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    47f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    47f2:	8a 95       	dec	r24
    47f4:	f1 f7       	brne	.-4      	; 0x47f2 <keypad_read+0x1b8>
    47f6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(50);
		for(l_column_counter=0 ; l_column_counter<keypad_columns;l_column_counter++)
    47f8:	19 a6       	std	Y+41, r1	; 0x29
    47fa:	a6 c0       	rjmp	.+332    	; 0x4948 <keypad_read+0x30e>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_columns_PORT,column_port_pins[l_column_counter]);
    47fc:	89 a5       	ldd	r24, Y+41	; 0x29
    47fe:	88 2f       	mov	r24, r24
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	fc 01       	movw	r30, r24
    4804:	eb 5b       	subi	r30, 0xBB	; 187
    4806:	fd 4f       	sbci	r31, 0xFD	; 253
    4808:	90 81       	ld	r25, Z
    480a:	80 e0       	ldi	r24, 0x00	; 0
    480c:	69 2f       	mov	r22, r25
    480e:	0e 94 6f 14 	call	0x28de	; 0x28de <DIO_PIN_READ_LOGIC_LEVEL_M>
    4812:	8f a3       	std	Y+39, r24	; 0x27
			if(PIN_HIGH==buttonn)
    4814:	8f a1       	ldd	r24, Y+39	; 0x27
    4816:	81 30       	cpi	r24, 0x01	; 1
    4818:	09 f0       	breq	.+2      	; 0x481c <keypad_read+0x1e2>
    481a:	93 c0       	rjmp	.+294    	; 0x4942 <keypad_read+0x308>
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	a8 e4       	ldi	r26, 0x48	; 72
    4822:	b2 e4       	ldi	r27, 0x42	; 66
    4824:	8b 87       	std	Y+11, r24	; 0x0b
    4826:	9c 87       	std	Y+12, r25	; 0x0c
    4828:	ad 87       	std	Y+13, r26	; 0x0d
    482a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    482c:	6b 85       	ldd	r22, Y+11	; 0x0b
    482e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4830:	8d 85       	ldd	r24, Y+13	; 0x0d
    4832:	9e 85       	ldd	r25, Y+14	; 0x0e
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	4a ef       	ldi	r20, 0xFA	; 250
    483a:	54 e4       	ldi	r21, 0x44	; 68
    483c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4840:	dc 01       	movw	r26, r24
    4842:	cb 01       	movw	r24, r22
    4844:	8f 83       	std	Y+7, r24	; 0x07
    4846:	98 87       	std	Y+8, r25	; 0x08
    4848:	a9 87       	std	Y+9, r26	; 0x09
    484a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    484c:	6f 81       	ldd	r22, Y+7	; 0x07
    484e:	78 85       	ldd	r23, Y+8	; 0x08
    4850:	89 85       	ldd	r24, Y+9	; 0x09
    4852:	9a 85       	ldd	r25, Y+10	; 0x0a
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	40 e8       	ldi	r20, 0x80	; 128
    485a:	5f e3       	ldi	r21, 0x3F	; 63
    485c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4860:	88 23       	and	r24, r24
    4862:	2c f4       	brge	.+10     	; 0x486e <keypad_read+0x234>
		__ticks = 1;
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	9e 83       	std	Y+6, r25	; 0x06
    486a:	8d 83       	std	Y+5, r24	; 0x05
    486c:	3f c0       	rjmp	.+126    	; 0x48ec <keypad_read+0x2b2>
	else if (__tmp > 65535)
    486e:	6f 81       	ldd	r22, Y+7	; 0x07
    4870:	78 85       	ldd	r23, Y+8	; 0x08
    4872:	89 85       	ldd	r24, Y+9	; 0x09
    4874:	9a 85       	ldd	r25, Y+10	; 0x0a
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	3f ef       	ldi	r19, 0xFF	; 255
    487a:	4f e7       	ldi	r20, 0x7F	; 127
    487c:	57 e4       	ldi	r21, 0x47	; 71
    487e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4882:	18 16       	cp	r1, r24
    4884:	4c f5       	brge	.+82     	; 0x48d8 <keypad_read+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4886:	6b 85       	ldd	r22, Y+11	; 0x0b
    4888:	7c 85       	ldd	r23, Y+12	; 0x0c
    488a:	8d 85       	ldd	r24, Y+13	; 0x0d
    488c:	9e 85       	ldd	r25, Y+14	; 0x0e
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	40 e2       	ldi	r20, 0x20	; 32
    4894:	51 e4       	ldi	r21, 0x41	; 65
    4896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489a:	dc 01       	movw	r26, r24
    489c:	cb 01       	movw	r24, r22
    489e:	bc 01       	movw	r22, r24
    48a0:	cd 01       	movw	r24, r26
    48a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a6:	dc 01       	movw	r26, r24
    48a8:	cb 01       	movw	r24, r22
    48aa:	9e 83       	std	Y+6, r25	; 0x06
    48ac:	8d 83       	std	Y+5, r24	; 0x05
    48ae:	0f c0       	rjmp	.+30     	; 0x48ce <keypad_read+0x294>
    48b0:	88 ec       	ldi	r24, 0xC8	; 200
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	9c 83       	std	Y+4, r25	; 0x04
    48b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    48b8:	8b 81       	ldd	r24, Y+3	; 0x03
    48ba:	9c 81       	ldd	r25, Y+4	; 0x04
    48bc:	01 97       	sbiw	r24, 0x01	; 1
    48be:	f1 f7       	brne	.-4      	; 0x48bc <keypad_read+0x282>
    48c0:	9c 83       	std	Y+4, r25	; 0x04
    48c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c4:	8d 81       	ldd	r24, Y+5	; 0x05
    48c6:	9e 81       	ldd	r25, Y+6	; 0x06
    48c8:	01 97       	sbiw	r24, 0x01	; 1
    48ca:	9e 83       	std	Y+6, r25	; 0x06
    48cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ce:	8d 81       	ldd	r24, Y+5	; 0x05
    48d0:	9e 81       	ldd	r25, Y+6	; 0x06
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	69 f7       	brne	.-38     	; 0x48b0 <keypad_read+0x276>
    48d6:	14 c0       	rjmp	.+40     	; 0x4900 <keypad_read+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48d8:	6f 81       	ldd	r22, Y+7	; 0x07
    48da:	78 85       	ldd	r23, Y+8	; 0x08
    48dc:	89 85       	ldd	r24, Y+9	; 0x09
    48de:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e4:	dc 01       	movw	r26, r24
    48e6:	cb 01       	movw	r24, r22
    48e8:	9e 83       	std	Y+6, r25	; 0x06
    48ea:	8d 83       	std	Y+5, r24	; 0x05
    48ec:	8d 81       	ldd	r24, Y+5	; 0x05
    48ee:	9e 81       	ldd	r25, Y+6	; 0x06
    48f0:	9a 83       	std	Y+2, r25	; 0x02
    48f2:	89 83       	std	Y+1, r24	; 0x01
    48f4:	89 81       	ldd	r24, Y+1	; 0x01
    48f6:	9a 81       	ldd	r25, Y+2	; 0x02
    48f8:	01 97       	sbiw	r24, 0x01	; 1
    48fa:	f1 f7       	brne	.-4      	; 0x48f8 <keypad_read+0x2be>
    48fc:	9a 83       	std	Y+2, r25	; 0x02
    48fe:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				*button_pos_=button_pos[l_row_counter][l_row_counter];
    4900:	8a a5       	ldd	r24, Y+42	; 0x2a
    4902:	48 2f       	mov	r20, r24
    4904:	50 e0       	ldi	r21, 0x00	; 0
    4906:	8a a5       	ldd	r24, Y+42	; 0x2a
    4908:	28 2f       	mov	r18, r24
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	ca 01       	movw	r24, r20
    490e:	88 0f       	add	r24, r24
    4910:	99 1f       	adc	r25, r25
    4912:	88 0f       	add	r24, r24
    4914:	99 1f       	adc	r25, r25
    4916:	82 0f       	add	r24, r18
    4918:	93 1f       	adc	r25, r19
    491a:	fc 01       	movw	r30, r24
    491c:	e3 5b       	subi	r30, 0xB3	; 179
    491e:	fd 4f       	sbci	r31, 0xFD	; 253
    4920:	80 81       	ld	r24, Z
    4922:	eb a5       	ldd	r30, Y+43	; 0x2b
    4924:	fc a5       	ldd	r31, Y+44	; 0x2c
    4926:	80 83       	st	Z, r24
				DIO_PIN_WRITE_LOGIC_M(keypad_rows_PORT,row_port_pins[counter],PIN_LOW);
    4928:	88 a5       	ldd	r24, Y+40	; 0x28
    492a:	88 2f       	mov	r24, r24
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	fc 01       	movw	r30, r24
    4930:	e7 5b       	subi	r30, 0xB7	; 183
    4932:	fd 4f       	sbci	r31, 0xFD	; 253
    4934:	90 81       	ld	r25, Z
    4936:	83 e0       	ldi	r24, 0x03	; 3
    4938:	69 2f       	mov	r22, r25
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    4940:	07 c0       	rjmp	.+14     	; 0x4950 <keypad_read+0x316>

	for(l_row_counter=0 ;l_row_counter<keypad_columns;l_row_counter++)
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_rows_PORT,row_port_pins[l_row_counter],PIN_HIGH);
		_delay_us(50);
		for(l_column_counter=0 ; l_column_counter<keypad_columns;l_column_counter++)
    4942:	89 a5       	ldd	r24, Y+41	; 0x29
    4944:	8f 5f       	subi	r24, 0xFF	; 255
    4946:	89 a7       	std	Y+41, r24	; 0x29
    4948:	89 a5       	ldd	r24, Y+41	; 0x29
    494a:	84 30       	cpi	r24, 0x04	; 4
    494c:	08 f4       	brcc	.+2      	; 0x4950 <keypad_read+0x316>
    494e:	56 cf       	rjmp	.-340    	; 0x47fc <keypad_read+0x1c2>
	u8 counter=0;
	u8 buttonn =0;

	*button_pos_=0;

	for(l_row_counter=0 ;l_row_counter<keypad_columns;l_row_counter++)
    4950:	8a a5       	ldd	r24, Y+42	; 0x2a
    4952:	8f 5f       	subi	r24, 0xFF	; 255
    4954:	8a a7       	std	Y+42, r24	; 0x2a
    4956:	8a a5       	ldd	r24, Y+42	; 0x2a
    4958:	84 30       	cpi	r24, 0x04	; 4
    495a:	08 f4       	brcc	.+2      	; 0x495e <keypad_read+0x324>
    495c:	83 ce       	rjmp	.-762    	; 0x4664 <keypad_read+0x2a>
				break;
			}
		}
	}

}
    495e:	ac 96       	adiw	r28, 0x2c	; 44
    4960:	0f b6       	in	r0, 0x3f	; 63
    4962:	f8 94       	cli
    4964:	de bf       	out	0x3e, r29	; 62
    4966:	0f be       	out	0x3f, r0	; 63
    4968:	cd bf       	out	0x3d, r28	; 61
    496a:	cf 91       	pop	r28
    496c:	df 91       	pop	r29
    496e:	08 95       	ret

00004970 <keypad_read_1>:
/******************/
void keypad_read_1(char *button_pos_ )
{
    4970:	df 93       	push	r29
    4972:	cf 93       	push	r28
    4974:	cd b7       	in	r28, 0x3d	; 61
    4976:	de b7       	in	r29, 0x3e	; 62
    4978:	63 97       	sbiw	r28, 0x13	; 19
    497a:	0f b6       	in	r0, 0x3f	; 63
    497c:	f8 94       	cli
    497e:	de bf       	out	0x3e, r29	; 62
    4980:	0f be       	out	0x3f, r0	; 63
    4982:	cd bf       	out	0x3d, r28	; 61
    4984:	9b 8b       	std	Y+19, r25	; 0x13
    4986:	8a 8b       	std	Y+18, r24	; 0x12
	u8 l_row_counter=0;
    4988:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_column_counter=0;
    498a:	18 8a       	std	Y+16, r1	; 0x10

	u8 buttonn =0;
    498c:	1f 86       	std	Y+15, r1	; 0x0f
	*button_pos_=0;
    498e:	ea 89       	ldd	r30, Y+18	; 0x12
    4990:	fb 89       	ldd	r31, Y+19	; 0x13
    4992:	10 82       	st	Z, r1

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4994:	18 8a       	std	Y+16, r1	; 0x10
    4996:	bb c0       	rjmp	.+374    	; 0x4b0e <keypad_read_1+0x19e>
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    4998:	88 89       	ldd	r24, Y+16	; 0x10
    499a:	88 2f       	mov	r24, r24
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	fc 01       	movw	r30, r24
    49a0:	eb 5b       	subi	r30, 0xBB	; 187
    49a2:	fd 4f       	sbci	r31, 0xFD	; 253
    49a4:	90 81       	ld	r25, Z
    49a6:	80 e0       	ldi	r24, 0x00	; 0
    49a8:	69 2f       	mov	r22, r25
    49aa:	40 e0       	ldi	r20, 0x00	; 0
    49ac:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    49b0:	19 8a       	std	Y+17, r1	; 0x11
    49b2:	a6 c0       	rjmp	.+332    	; 0x4b00 <keypad_read_1+0x190>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    49b4:	89 89       	ldd	r24, Y+17	; 0x11
    49b6:	88 2f       	mov	r24, r24
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	fc 01       	movw	r30, r24
    49bc:	e7 5b       	subi	r30, 0xB7	; 183
    49be:	fd 4f       	sbci	r31, 0xFD	; 253
    49c0:	90 81       	ld	r25, Z
    49c2:	83 e0       	ldi	r24, 0x03	; 3
    49c4:	69 2f       	mov	r22, r25
    49c6:	0e 94 6f 14 	call	0x28de	; 0x28de <DIO_PIN_READ_LOGIC_LEVEL_M>
    49ca:	8f 87       	std	Y+15, r24	; 0x0f
			if(PIN_LOW==buttonn)
    49cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    49ce:	88 23       	and	r24, r24
    49d0:	09 f0       	breq	.+2      	; 0x49d4 <keypad_read_1+0x64>
    49d2:	93 c0       	rjmp	.+294    	; 0x4afa <keypad_read_1+0x18a>
    49d4:	80 e0       	ldi	r24, 0x00	; 0
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	a8 e4       	ldi	r26, 0x48	; 72
    49da:	b2 e4       	ldi	r27, 0x42	; 66
    49dc:	8b 87       	std	Y+11, r24	; 0x0b
    49de:	9c 87       	std	Y+12, r25	; 0x0c
    49e0:	ad 87       	std	Y+13, r26	; 0x0d
    49e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    49e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    49e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    49ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    49ec:	20 e0       	ldi	r18, 0x00	; 0
    49ee:	30 e0       	ldi	r19, 0x00	; 0
    49f0:	4a ef       	ldi	r20, 0xFA	; 250
    49f2:	54 e4       	ldi	r21, 0x44	; 68
    49f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f8:	dc 01       	movw	r26, r24
    49fa:	cb 01       	movw	r24, r22
    49fc:	8f 83       	std	Y+7, r24	; 0x07
    49fe:	98 87       	std	Y+8, r25	; 0x08
    4a00:	a9 87       	std	Y+9, r26	; 0x09
    4a02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a04:	6f 81       	ldd	r22, Y+7	; 0x07
    4a06:	78 85       	ldd	r23, Y+8	; 0x08
    4a08:	89 85       	ldd	r24, Y+9	; 0x09
    4a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a0c:	20 e0       	ldi	r18, 0x00	; 0
    4a0e:	30 e0       	ldi	r19, 0x00	; 0
    4a10:	40 e8       	ldi	r20, 0x80	; 128
    4a12:	5f e3       	ldi	r21, 0x3F	; 63
    4a14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a18:	88 23       	and	r24, r24
    4a1a:	2c f4       	brge	.+10     	; 0x4a26 <keypad_read_1+0xb6>
		__ticks = 1;
    4a1c:	81 e0       	ldi	r24, 0x01	; 1
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	9e 83       	std	Y+6, r25	; 0x06
    4a22:	8d 83       	std	Y+5, r24	; 0x05
    4a24:	3f c0       	rjmp	.+126    	; 0x4aa4 <keypad_read_1+0x134>
	else if (__tmp > 65535)
    4a26:	6f 81       	ldd	r22, Y+7	; 0x07
    4a28:	78 85       	ldd	r23, Y+8	; 0x08
    4a2a:	89 85       	ldd	r24, Y+9	; 0x09
    4a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a2e:	20 e0       	ldi	r18, 0x00	; 0
    4a30:	3f ef       	ldi	r19, 0xFF	; 255
    4a32:	4f e7       	ldi	r20, 0x7F	; 127
    4a34:	57 e4       	ldi	r21, 0x47	; 71
    4a36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a3a:	18 16       	cp	r1, r24
    4a3c:	4c f5       	brge	.+82     	; 0x4a90 <keypad_read_1+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a40:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a46:	20 e0       	ldi	r18, 0x00	; 0
    4a48:	30 e0       	ldi	r19, 0x00	; 0
    4a4a:	40 e2       	ldi	r20, 0x20	; 32
    4a4c:	51 e4       	ldi	r21, 0x41	; 65
    4a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a52:	dc 01       	movw	r26, r24
    4a54:	cb 01       	movw	r24, r22
    4a56:	bc 01       	movw	r22, r24
    4a58:	cd 01       	movw	r24, r26
    4a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	9e 83       	std	Y+6, r25	; 0x06
    4a64:	8d 83       	std	Y+5, r24	; 0x05
    4a66:	0f c0       	rjmp	.+30     	; 0x4a86 <keypad_read_1+0x116>
    4a68:	88 ec       	ldi	r24, 0xC8	; 200
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	9c 83       	std	Y+4, r25	; 0x04
    4a6e:	8b 83       	std	Y+3, r24	; 0x03
    4a70:	8b 81       	ldd	r24, Y+3	; 0x03
    4a72:	9c 81       	ldd	r25, Y+4	; 0x04
    4a74:	01 97       	sbiw	r24, 0x01	; 1
    4a76:	f1 f7       	brne	.-4      	; 0x4a74 <keypad_read_1+0x104>
    4a78:	9c 83       	std	Y+4, r25	; 0x04
    4a7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a80:	01 97       	sbiw	r24, 0x01	; 1
    4a82:	9e 83       	std	Y+6, r25	; 0x06
    4a84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a86:	8d 81       	ldd	r24, Y+5	; 0x05
    4a88:	9e 81       	ldd	r25, Y+6	; 0x06
    4a8a:	00 97       	sbiw	r24, 0x00	; 0
    4a8c:	69 f7       	brne	.-38     	; 0x4a68 <keypad_read_1+0xf8>
    4a8e:	14 c0       	rjmp	.+40     	; 0x4ab8 <keypad_read_1+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a90:	6f 81       	ldd	r22, Y+7	; 0x07
    4a92:	78 85       	ldd	r23, Y+8	; 0x08
    4a94:	89 85       	ldd	r24, Y+9	; 0x09
    4a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a9c:	dc 01       	movw	r26, r24
    4a9e:	cb 01       	movw	r24, r22
    4aa0:	9e 83       	std	Y+6, r25	; 0x06
    4aa2:	8d 83       	std	Y+5, r24	; 0x05
    4aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    4aa8:	9a 83       	std	Y+2, r25	; 0x02
    4aaa:	89 83       	std	Y+1, r24	; 0x01
    4aac:	89 81       	ldd	r24, Y+1	; 0x01
    4aae:	9a 81       	ldd	r25, Y+2	; 0x02
    4ab0:	01 97       	sbiw	r24, 0x01	; 1
    4ab2:	f1 f7       	brne	.-4      	; 0x4ab0 <keypad_read_1+0x140>
    4ab4:	9a 83       	std	Y+2, r25	; 0x02
    4ab6:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    4ab8:	89 89       	ldd	r24, Y+17	; 0x11
    4aba:	48 2f       	mov	r20, r24
    4abc:	50 e0       	ldi	r21, 0x00	; 0
    4abe:	88 89       	ldd	r24, Y+16	; 0x10
    4ac0:	28 2f       	mov	r18, r24
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
    4ac4:	ca 01       	movw	r24, r20
    4ac6:	88 0f       	add	r24, r24
    4ac8:	99 1f       	adc	r25, r25
    4aca:	88 0f       	add	r24, r24
    4acc:	99 1f       	adc	r25, r25
    4ace:	82 0f       	add	r24, r18
    4ad0:	93 1f       	adc	r25, r19
    4ad2:	fc 01       	movw	r30, r24
    4ad4:	e3 5b       	subi	r30, 0xB3	; 179
    4ad6:	fd 4f       	sbci	r31, 0xFD	; 253
    4ad8:	80 81       	ld	r24, Z
    4ada:	ea 89       	ldd	r30, Y+18	; 0x12
    4adc:	fb 89       	ldd	r31, Y+19	; 0x13
    4ade:	80 83       	st	Z, r24
				DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    4ae0:	88 89       	ldd	r24, Y+16	; 0x10
    4ae2:	88 2f       	mov	r24, r24
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	fc 01       	movw	r30, r24
    4ae8:	eb 5b       	subi	r30, 0xBB	; 187
    4aea:	fd 4f       	sbci	r31, 0xFD	; 253
    4aec:	90 81       	ld	r25, Z
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	69 2f       	mov	r22, r25
    4af2:	41 e0       	ldi	r20, 0x01	; 1
    4af4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
    4af8:	07 c0       	rjmp	.+14     	; 0x4b08 <keypad_read_1+0x198>
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    4afa:	89 89       	ldd	r24, Y+17	; 0x11
    4afc:	8f 5f       	subi	r24, 0xFF	; 255
    4afe:	89 8b       	std	Y+17, r24	; 0x11
    4b00:	89 89       	ldd	r24, Y+17	; 0x11
    4b02:	84 30       	cpi	r24, 0x04	; 4
    4b04:	08 f4       	brcc	.+2      	; 0x4b08 <keypad_read_1+0x198>
    4b06:	56 cf       	rjmp	.-340    	; 0x49b4 <keypad_read_1+0x44>
	u8 l_column_counter=0;

	u8 buttonn =0;
	*button_pos_=0;

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4b08:	88 89       	ldd	r24, Y+16	; 0x10
    4b0a:	8f 5f       	subi	r24, 0xFF	; 255
    4b0c:	88 8b       	std	Y+16, r24	; 0x10
    4b0e:	88 89       	ldd	r24, Y+16	; 0x10
    4b10:	84 30       	cpi	r24, 0x04	; 4
    4b12:	08 f4       	brcc	.+2      	; 0x4b16 <keypad_read_1+0x1a6>
    4b14:	41 cf       	rjmp	.-382    	; 0x4998 <keypad_read_1+0x28>
			}
			else
			{}
		}
	}
}
    4b16:	63 96       	adiw	r28, 0x13	; 19
    4b18:	0f b6       	in	r0, 0x3f	; 63
    4b1a:	f8 94       	cli
    4b1c:	de bf       	out	0x3e, r29	; 62
    4b1e:	0f be       	out	0x3f, r0	; 63
    4b20:	cd bf       	out	0x3d, r28	; 61
    4b22:	cf 91       	pop	r28
    4b24:	df 91       	pop	r29
    4b26:	08 95       	ret

00004b28 <keypad_read_2>:

/******************/
void keypad_read_2(char *button_pos_ )
{
    4b28:	df 93       	push	r29
    4b2a:	cf 93       	push	r28
    4b2c:	00 d0       	rcall	.+0      	; 0x4b2e <keypad_read_2+0x6>
    4b2e:	00 d0       	rcall	.+0      	; 0x4b30 <keypad_read_2+0x8>
    4b30:	00 d0       	rcall	.+0      	; 0x4b32 <keypad_read_2+0xa>
    4b32:	cd b7       	in	r28, 0x3d	; 61
    4b34:	de b7       	in	r29, 0x3e	; 62
    4b36:	9e 83       	std	Y+6, r25	; 0x06
    4b38:	8d 83       	std	Y+5, r24	; 0x05
	u8 l_row_counter=0;
    4b3a:	1c 82       	std	Y+4, r1	; 0x04
	u8 l_column_counter=0;
    4b3c:	1b 82       	std	Y+3, r1	; 0x03
	u8 buttonn =0;
    4b3e:	1a 82       	std	Y+2, r1	; 0x02
	*button_pos_=0;
    4b40:	ed 81       	ldd	r30, Y+5	; 0x05
    4b42:	fe 81       	ldd	r31, Y+6	; 0x06
    4b44:	10 82       	st	Z, r1
	u8 flag=0;
    4b46:	19 82       	std	Y+1, r1	; 0x01

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4b48:	1b 82       	std	Y+3, r1	; 0x03
    4b4a:	4c c0       	rjmp	.+152    	; 0x4be4 <keypad_read_2+0xbc>
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    4b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b4e:	88 2f       	mov	r24, r24
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	fc 01       	movw	r30, r24
    4b54:	eb 5b       	subi	r30, 0xBB	; 187
    4b56:	fd 4f       	sbci	r31, 0xFD	; 253
    4b58:	90 81       	ld	r25, Z
    4b5a:	80 e0       	ldi	r24, 0x00	; 0
    4b5c:	69 2f       	mov	r22, r25
    4b5e:	40 e0       	ldi	r20, 0x00	; 0
    4b60:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    4b64:	1c 82       	std	Y+4, r1	; 0x04
    4b66:	29 c0       	rjmp	.+82     	; 0x4bba <keypad_read_2+0x92>
		{
			buttonn= DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    4b68:	8c 81       	ldd	r24, Y+4	; 0x04
    4b6a:	88 2f       	mov	r24, r24
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	fc 01       	movw	r30, r24
    4b70:	e7 5b       	subi	r30, 0xB7	; 183
    4b72:	fd 4f       	sbci	r31, 0xFD	; 253
    4b74:	90 81       	ld	r25, Z
    4b76:	83 e0       	ldi	r24, 0x03	; 3
    4b78:	69 2f       	mov	r22, r25
    4b7a:	0e 94 6f 14 	call	0x28de	; 0x28de <DIO_PIN_READ_LOGIC_LEVEL_M>
    4b7e:	8a 83       	std	Y+2, r24	; 0x02
			if(PIN_LOW==buttonn)
    4b80:	8a 81       	ldd	r24, Y+2	; 0x02
    4b82:	88 23       	and	r24, r24
    4b84:	b9 f4       	brne	.+46     	; 0x4bb4 <keypad_read_2+0x8c>
			{
				flag=1;
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	89 83       	std	Y+1, r24	; 0x01
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    4b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b8c:	48 2f       	mov	r20, r24
    4b8e:	50 e0       	ldi	r21, 0x00	; 0
    4b90:	8b 81       	ldd	r24, Y+3	; 0x03
    4b92:	28 2f       	mov	r18, r24
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	ca 01       	movw	r24, r20
    4b98:	88 0f       	add	r24, r24
    4b9a:	99 1f       	adc	r25, r25
    4b9c:	88 0f       	add	r24, r24
    4b9e:	99 1f       	adc	r25, r25
    4ba0:	82 0f       	add	r24, r18
    4ba2:	93 1f       	adc	r25, r19
    4ba4:	fc 01       	movw	r30, r24
    4ba6:	e3 5b       	subi	r30, 0xB3	; 179
    4ba8:	fd 4f       	sbci	r31, 0xFD	; 253
    4baa:	80 81       	ld	r24, Z
    4bac:	ed 81       	ldd	r30, Y+5	; 0x05
    4bae:	fe 81       	ldd	r31, Y+6	; 0x06
    4bb0:	80 83       	st	Z, r24
    4bb2:	06 c0       	rjmp	.+12     	; 0x4bc0 <keypad_read_2+0x98>
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    4bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    4bb6:	8f 5f       	subi	r24, 0xFF	; 255
    4bb8:	8c 83       	std	Y+4, r24	; 0x04
    4bba:	8c 81       	ldd	r24, Y+4	; 0x04
    4bbc:	84 30       	cpi	r24, 0x04	; 4
    4bbe:	a0 f2       	brcs	.-88     	; 0x4b68 <keypad_read_2+0x40>
				break;
			}
			else
			{}
		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    4bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc2:	88 2f       	mov	r24, r24
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	fc 01       	movw	r30, r24
    4bc8:	eb 5b       	subi	r30, 0xBB	; 187
    4bca:	fd 4f       	sbci	r31, 0xFD	; 253
    4bcc:	90 81       	ld	r25, Z
    4bce:	80 e0       	ldi	r24, 0x00	; 0
    4bd0:	69 2f       	mov	r22, r25
    4bd2:	41 e0       	ldi	r20, 0x01	; 1
    4bd4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

		if(1==flag)
    4bd8:	89 81       	ldd	r24, Y+1	; 0x01
    4bda:	81 30       	cpi	r24, 0x01	; 1
    4bdc:	39 f0       	breq	.+14     	; 0x4bec <keypad_read_2+0xc4>
	u8 l_column_counter=0;
	u8 buttonn =0;
	*button_pos_=0;
	u8 flag=0;

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4bde:	8b 81       	ldd	r24, Y+3	; 0x03
    4be0:	8f 5f       	subi	r24, 0xFF	; 255
    4be2:	8b 83       	std	Y+3, r24	; 0x03
    4be4:	8b 81       	ldd	r24, Y+3	; 0x03
    4be6:	84 30       	cpi	r24, 0x04	; 4
    4be8:	08 f4       	brcc	.+2      	; 0x4bec <keypad_read_2+0xc4>
    4bea:	b0 cf       	rjmp	.-160    	; 0x4b4c <keypad_read_2+0x24>
		{
			break;
		}

	}
}
    4bec:	26 96       	adiw	r28, 0x06	; 6
    4bee:	0f b6       	in	r0, 0x3f	; 63
    4bf0:	f8 94       	cli
    4bf2:	de bf       	out	0x3e, r29	; 62
    4bf4:	0f be       	out	0x3f, r0	; 63
    4bf6:	cd bf       	out	0x3d, r28	; 61
    4bf8:	cf 91       	pop	r28
    4bfa:	df 91       	pop	r29
    4bfc:	08 95       	ret

00004bfe <keypad_read_4>:

/******************/
void keypad_read_4(char *button_pos_ )
{
    4bfe:	df 93       	push	r29
    4c00:	cf 93       	push	r28
    4c02:	00 d0       	rcall	.+0      	; 0x4c04 <keypad_read_4+0x6>
    4c04:	00 d0       	rcall	.+0      	; 0x4c06 <keypad_read_4+0x8>
    4c06:	0f 92       	push	r0
    4c08:	cd b7       	in	r28, 0x3d	; 61
    4c0a:	de b7       	in	r29, 0x3e	; 62
    4c0c:	9d 83       	std	Y+5, r25	; 0x05
    4c0e:	8c 83       	std	Y+4, r24	; 0x04
	u8 l_row_counter=0;
    4c10:	1b 82       	std	Y+3, r1	; 0x03
	u8 l_column_counter=0;
    4c12:	1a 82       	std	Y+2, r1	; 0x02

	u8 buttonn =0;
    4c14:	19 82       	std	Y+1, r1	; 0x01
	*button_pos_=0;
    4c16:	ec 81       	ldd	r30, Y+4	; 0x04
    4c18:	fd 81       	ldd	r31, Y+5	; 0x05
    4c1a:	10 82       	st	Z, r1

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4c1c:	1a 82       	std	Y+2, r1	; 0x02
    4c1e:	57 c0       	rjmp	.+174    	; 0x4cce <keypad_read_4+0xd0>
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    4c20:	8a 81       	ldd	r24, Y+2	; 0x02
    4c22:	88 2f       	mov	r24, r24
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	fc 01       	movw	r30, r24
    4c28:	eb 5b       	subi	r30, 0xBB	; 187
    4c2a:	fd 4f       	sbci	r31, 0xFD	; 253
    4c2c:	90 81       	ld	r25, Z
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	69 2f       	mov	r22, r25
    4c32:	40 e0       	ldi	r20, 0x00	; 0
    4c34:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    4c38:	1b 82       	std	Y+3, r1	; 0x03
    4c3a:	37 c0       	rjmp	.+110    	; 0x4caa <keypad_read_4+0xac>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    4c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c3e:	88 2f       	mov	r24, r24
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	fc 01       	movw	r30, r24
    4c44:	e7 5b       	subi	r30, 0xB7	; 183
    4c46:	fd 4f       	sbci	r31, 0xFD	; 253
    4c48:	90 81       	ld	r25, Z
    4c4a:	83 e0       	ldi	r24, 0x03	; 3
    4c4c:	69 2f       	mov	r22, r25
    4c4e:	0e 94 6f 14 	call	0x28de	; 0x28de <DIO_PIN_READ_LOGIC_LEVEL_M>
    4c52:	89 83       	std	Y+1, r24	; 0x01
			if(PIN_LOW==buttonn)
    4c54:	89 81       	ldd	r24, Y+1	; 0x01
    4c56:	88 23       	and	r24, r24
    4c58:	29 f5       	brne	.+74     	; 0x4ca4 <keypad_read_4+0xa6>
    4c5a:	0c c0       	rjmp	.+24     	; 0x4c74 <keypad_read_4+0x76>
			{
				while(PIN_LOW!=buttonn)
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    4c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c5e:	88 2f       	mov	r24, r24
    4c60:	90 e0       	ldi	r25, 0x00	; 0
    4c62:	fc 01       	movw	r30, r24
    4c64:	e7 5b       	subi	r30, 0xB7	; 183
    4c66:	fd 4f       	sbci	r31, 0xFD	; 253
    4c68:	90 81       	ld	r25, Z
    4c6a:	83 e0       	ldi	r24, 0x03	; 3
    4c6c:	69 2f       	mov	r22, r25
    4c6e:	0e 94 6f 14 	call	0x28de	; 0x28de <DIO_PIN_READ_LOGIC_LEVEL_M>
    4c72:	89 83       	std	Y+1, r24	; 0x01
		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
			if(PIN_LOW==buttonn)
			{
				while(PIN_LOW!=buttonn)
    4c74:	89 81       	ldd	r24, Y+1	; 0x01
    4c76:	88 23       	and	r24, r24
    4c78:	89 f7       	brne	.-30     	; 0x4c5c <keypad_read_4+0x5e>
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
				}
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    4c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c7c:	48 2f       	mov	r20, r24
    4c7e:	50 e0       	ldi	r21, 0x00	; 0
    4c80:	8a 81       	ldd	r24, Y+2	; 0x02
    4c82:	28 2f       	mov	r18, r24
    4c84:	30 e0       	ldi	r19, 0x00	; 0
    4c86:	ca 01       	movw	r24, r20
    4c88:	88 0f       	add	r24, r24
    4c8a:	99 1f       	adc	r25, r25
    4c8c:	88 0f       	add	r24, r24
    4c8e:	99 1f       	adc	r25, r25
    4c90:	82 0f       	add	r24, r18
    4c92:	93 1f       	adc	r25, r19
    4c94:	fc 01       	movw	r30, r24
    4c96:	e3 5b       	subi	r30, 0xB3	; 179
    4c98:	fd 4f       	sbci	r31, 0xFD	; 253
    4c9a:	80 81       	ld	r24, Z
    4c9c:	ec 81       	ldd	r30, Y+4	; 0x04
    4c9e:	fd 81       	ldd	r31, Y+5	; 0x05
    4ca0:	80 83       	st	Z, r24
    4ca2:	06 c0       	rjmp	.+12     	; 0x4cb0 <keypad_read_4+0xb2>

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    4ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca6:	8f 5f       	subi	r24, 0xFF	; 255
    4ca8:	8b 83       	std	Y+3, r24	; 0x03
    4caa:	8b 81       	ldd	r24, Y+3	; 0x03
    4cac:	84 30       	cpi	r24, 0x04	; 4
    4cae:	30 f2       	brcs	.-116    	; 0x4c3c <keypad_read_4+0x3e>
				break;
			}
			else
			{}
		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    4cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb2:	88 2f       	mov	r24, r24
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	fc 01       	movw	r30, r24
    4cb8:	eb 5b       	subi	r30, 0xBB	; 187
    4cba:	fd 4f       	sbci	r31, 0xFD	; 253
    4cbc:	90 81       	ld	r25, Z
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	69 2f       	mov	r22, r25
    4cc2:	41 e0       	ldi	r20, 0x01	; 1
    4cc4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	u8 l_column_counter=0;

	u8 buttonn =0;
	*button_pos_=0;

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cca:	8f 5f       	subi	r24, 0xFF	; 255
    4ccc:	8a 83       	std	Y+2, r24	; 0x02
    4cce:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd0:	84 30       	cpi	r24, 0x04	; 4
    4cd2:	08 f4       	brcc	.+2      	; 0x4cd6 <keypad_read_4+0xd8>
    4cd4:	a5 cf       	rjmp	.-182    	; 0x4c20 <keypad_read_4+0x22>
		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);

	}

}
    4cd6:	0f 90       	pop	r0
    4cd8:	0f 90       	pop	r0
    4cda:	0f 90       	pop	r0
    4cdc:	0f 90       	pop	r0
    4cde:	0f 90       	pop	r0
    4ce0:	cf 91       	pop	r28
    4ce2:	df 91       	pop	r29
    4ce4:	08 95       	ret

00004ce6 <keypad_readd>:

/************************/

/******************/
button_state_t keypad_readd(char *button_pos_ )
{
    4ce6:	df 93       	push	r29
    4ce8:	cf 93       	push	r28
    4cea:	cd b7       	in	r28, 0x3d	; 61
    4cec:	de b7       	in	r29, 0x3e	; 62
    4cee:	27 97       	sbiw	r28, 0x07	; 7
    4cf0:	0f b6       	in	r0, 0x3f	; 63
    4cf2:	f8 94       	cli
    4cf4:	de bf       	out	0x3e, r29	; 62
    4cf6:	0f be       	out	0x3f, r0	; 63
    4cf8:	cd bf       	out	0x3d, r28	; 61
    4cfa:	9f 83       	std	Y+7, r25	; 0x07
    4cfc:	8e 83       	std	Y+6, r24	; 0x06
	button_state_t button_state=BUTTON_RELEASED;
    4cfe:	1d 82       	std	Y+5, r1	; 0x05
	u8 l_row_counter=0;
    4d00:	1c 82       	std	Y+4, r1	; 0x04
	u8 l_column_counter=0;
    4d02:	1b 82       	std	Y+3, r1	; 0x03

	u8 buttonn =0;
    4d04:	1a 82       	std	Y+2, r1	; 0x02
	*button_pos_=0;
    4d06:	ee 81       	ldd	r30, Y+6	; 0x06
    4d08:	ff 81       	ldd	r31, Y+7	; 0x07
    4d0a:	10 82       	st	Z, r1
	u8 flag=0;
    4d0c:	19 82       	std	Y+1, r1	; 0x01
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4d0e:	1b 82       	std	Y+3, r1	; 0x03
    4d10:	5f c0       	rjmp	.+190    	; 0x4dd0 <keypad_readd+0xea>
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    4d12:	8b 81       	ldd	r24, Y+3	; 0x03
    4d14:	88 2f       	mov	r24, r24
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	fc 01       	movw	r30, r24
    4d1a:	eb 5b       	subi	r30, 0xBB	; 187
    4d1c:	fd 4f       	sbci	r31, 0xFD	; 253
    4d1e:	90 81       	ld	r25, Z
    4d20:	80 e0       	ldi	r24, 0x00	; 0
    4d22:	69 2f       	mov	r22, r25
    4d24:	40 e0       	ldi	r20, 0x00	; 0
    4d26:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    4d2a:	1c 82       	std	Y+4, r1	; 0x04
    4d2c:	3c c0       	rjmp	.+120    	; 0x4da6 <keypad_readd+0xc0>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    4d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    4d30:	88 2f       	mov	r24, r24
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	fc 01       	movw	r30, r24
    4d36:	e7 5b       	subi	r30, 0xB7	; 183
    4d38:	fd 4f       	sbci	r31, 0xFD	; 253
    4d3a:	90 81       	ld	r25, Z
    4d3c:	83 e0       	ldi	r24, 0x03	; 3
    4d3e:	69 2f       	mov	r22, r25
    4d40:	0e 94 6f 14 	call	0x28de	; 0x28de <DIO_PIN_READ_LOGIC_LEVEL_M>
    4d44:	8a 83       	std	Y+2, r24	; 0x02
			if(0==buttonn)
    4d46:	8a 81       	ldd	r24, Y+2	; 0x02
    4d48:	88 23       	and	r24, r24
    4d4a:	49 f5       	brne	.+82     	; 0x4d9e <keypad_readd+0xb8>
			{
				button_state=BUTTON_PRESSED;
    4d4c:	81 e0       	ldi	r24, 0x01	; 1
    4d4e:	8d 83       	std	Y+5, r24	; 0x05
				flag=1;
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	89 83       	std	Y+1, r24	; 0x01
    4d54:	0c c0       	rjmp	.+24     	; 0x4d6e <keypad_readd+0x88>
				while(0==buttonn)
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    4d56:	8c 81       	ldd	r24, Y+4	; 0x04
    4d58:	88 2f       	mov	r24, r24
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	fc 01       	movw	r30, r24
    4d5e:	e7 5b       	subi	r30, 0xB7	; 183
    4d60:	fd 4f       	sbci	r31, 0xFD	; 253
    4d62:	90 81       	ld	r25, Z
    4d64:	83 e0       	ldi	r24, 0x03	; 3
    4d66:	69 2f       	mov	r22, r25
    4d68:	0e 94 6f 14 	call	0x28de	; 0x28de <DIO_PIN_READ_LOGIC_LEVEL_M>
    4d6c:	8a 83       	std	Y+2, r24	; 0x02
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
			if(0==buttonn)
			{
				button_state=BUTTON_PRESSED;
				flag=1;
				while(0==buttonn)
    4d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d70:	88 23       	and	r24, r24
    4d72:	89 f3       	breq	.-30     	; 0x4d56 <keypad_readd+0x70>
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
				}
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    4d74:	8c 81       	ldd	r24, Y+4	; 0x04
    4d76:	48 2f       	mov	r20, r24
    4d78:	50 e0       	ldi	r21, 0x00	; 0
    4d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d7c:	28 2f       	mov	r18, r24
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	ca 01       	movw	r24, r20
    4d82:	88 0f       	add	r24, r24
    4d84:	99 1f       	adc	r25, r25
    4d86:	88 0f       	add	r24, r24
    4d88:	99 1f       	adc	r25, r25
    4d8a:	82 0f       	add	r24, r18
    4d8c:	93 1f       	adc	r25, r19
    4d8e:	fc 01       	movw	r30, r24
    4d90:	e3 5b       	subi	r30, 0xB3	; 179
    4d92:	fd 4f       	sbci	r31, 0xFD	; 253
    4d94:	80 81       	ld	r24, Z
    4d96:	ee 81       	ldd	r30, Y+6	; 0x06
    4d98:	ff 81       	ldd	r31, Y+7	; 0x07
    4d9a:	80 83       	st	Z, r24
    4d9c:	07 c0       	rjmp	.+14     	; 0x4dac <keypad_readd+0xc6>
				break;
			}
			else
			{ button_state=BUTTON_RELEASED;}
    4d9e:	1d 82       	std	Y+5, r1	; 0x05
	*button_pos_=0;
	u8 flag=0;
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    4da0:	8c 81       	ldd	r24, Y+4	; 0x04
    4da2:	8f 5f       	subi	r24, 0xFF	; 255
    4da4:	8c 83       	std	Y+4, r24	; 0x04
    4da6:	8c 81       	ldd	r24, Y+4	; 0x04
    4da8:	84 30       	cpi	r24, 0x04	; 4
    4daa:	08 f2       	brcs	.-126    	; 0x4d2e <keypad_readd+0x48>
			}
			else
			{ button_state=BUTTON_RELEASED;}

		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    4dac:	8b 81       	ldd	r24, Y+3	; 0x03
    4dae:	88 2f       	mov	r24, r24
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	fc 01       	movw	r30, r24
    4db4:	eb 5b       	subi	r30, 0xBB	; 187
    4db6:	fd 4f       	sbci	r31, 0xFD	; 253
    4db8:	90 81       	ld	r25, Z
    4dba:	80 e0       	ldi	r24, 0x00	; 0
    4dbc:	69 2f       	mov	r22, r25
    4dbe:	41 e0       	ldi	r20, 0x01	; 1
    4dc0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
		if(1==flag)
    4dc4:	89 81       	ldd	r24, Y+1	; 0x01
    4dc6:	81 30       	cpi	r24, 0x01	; 1
    4dc8:	39 f0       	breq	.+14     	; 0x4dd8 <keypad_readd+0xf2>
	u8 l_column_counter=0;

	u8 buttonn =0;
	*button_pos_=0;
	u8 flag=0;
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4dca:	8b 81       	ldd	r24, Y+3	; 0x03
    4dcc:	8f 5f       	subi	r24, 0xFF	; 255
    4dce:	8b 83       	std	Y+3, r24	; 0x03
    4dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4dd2:	84 30       	cpi	r24, 0x04	; 4
    4dd4:	08 f4       	brcc	.+2      	; 0x4dd8 <keypad_readd+0xf2>
    4dd6:	9d cf       	rjmp	.-198    	; 0x4d12 <keypad_readd+0x2c>

			break;
		}
	}

	return button_state;
    4dd8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4dda:	27 96       	adiw	r28, 0x07	; 7
    4ddc:	0f b6       	in	r0, 0x3f	; 63
    4dde:	f8 94       	cli
    4de0:	de bf       	out	0x3e, r29	; 62
    4de2:	0f be       	out	0x3f, r0	; 63
    4de4:	cd bf       	out	0x3d, r28	; 61
    4de6:	cf 91       	pop	r28
    4de8:	df 91       	pop	r29
    4dea:	08 95       	ret

00004dec <HEEPROM_WRITE>:
#include"HAL_EEPROM_INT.h"



void HEEPROM_WRITE(u8 data,u8 address)
{
    4dec:	df 93       	push	r29
    4dee:	cf 93       	push	r28
    4df0:	00 d0       	rcall	.+0      	; 0x4df2 <HEEPROM_WRITE+0x6>
    4df2:	cd b7       	in	r28, 0x3d	; 61
    4df4:	de b7       	in	r29, 0x3e	; 62
    4df6:	89 83       	std	Y+1, r24	; 0x01
    4df8:	6a 83       	std	Y+2, r22	; 0x02
 I2C_START();
    4dfa:	0e 94 1b 10 	call	0x2036	; 0x2036 <I2C_START>
 /*slave address with write*/

 I2C_WRITE(0xA0);
    4dfe:	80 ea       	ldi	r24, 0xA0	; 160
    4e00:	0e 94 2b 10 	call	0x2056	; 0x2056 <I2C_WRITE>
 /*send memory LOCATION*/

 I2C_WRITE(address);
    4e04:	8a 81       	ldd	r24, Y+2	; 0x02
    4e06:	0e 94 2b 10 	call	0x2056	; 0x2056 <I2C_WRITE>

 I2C_WRITE(data);
    4e0a:	89 81       	ldd	r24, Y+1	; 0x01
    4e0c:	0e 94 2b 10 	call	0x2056	; 0x2056 <I2C_WRITE>

 I2C_STOP();
    4e10:	0e 94 77 10 	call	0x20ee	; 0x20ee <I2C_STOP>
}
    4e14:	0f 90       	pop	r0
    4e16:	0f 90       	pop	r0
    4e18:	cf 91       	pop	r28
    4e1a:	df 91       	pop	r29
    4e1c:	08 95       	ret

00004e1e <HEEPROM_WRITE_STRING>:
/**************************************/
void HEEPROM_WRITE_STRING(u8 *user,u8 user_length,u8 s_address)
{
    4e1e:	df 93       	push	r29
    4e20:	cf 93       	push	r28
    4e22:	cd b7       	in	r28, 0x3d	; 61
    4e24:	de b7       	in	r29, 0x3e	; 62
    4e26:	64 97       	sbiw	r28, 0x14	; 20
    4e28:	0f b6       	in	r0, 0x3f	; 63
    4e2a:	f8 94       	cli
    4e2c:	de bf       	out	0x3e, r29	; 62
    4e2e:	0f be       	out	0x3f, r0	; 63
    4e30:	cd bf       	out	0x3d, r28	; 61
    4e32:	9a 8b       	std	Y+18, r25	; 0x12
    4e34:	89 8b       	std	Y+17, r24	; 0x11
    4e36:	6b 8b       	std	Y+19, r22	; 0x13
    4e38:	4c 8b       	std	Y+20, r20	; 0x14
 int i=0;
    4e3a:	18 8a       	std	Y+16, r1	; 0x10
    4e3c:	1f 86       	std	Y+15, r1	; 0x0f
  for(i=0;i<user_length;i++)
    4e3e:	18 8a       	std	Y+16, r1	; 0x10
    4e40:	1f 86       	std	Y+15, r1	; 0x0f
    4e42:	89 c0       	rjmp	.+274    	; 0x4f56 <HEEPROM_WRITE_STRING+0x138>
  {
	  HEEPROM_WRITE(user[i]-'0',s_address++);
    4e44:	2f 85       	ldd	r18, Y+15	; 0x0f
    4e46:	38 89       	ldd	r19, Y+16	; 0x10
    4e48:	89 89       	ldd	r24, Y+17	; 0x11
    4e4a:	9a 89       	ldd	r25, Y+18	; 0x12
    4e4c:	fc 01       	movw	r30, r24
    4e4e:	e2 0f       	add	r30, r18
    4e50:	f3 1f       	adc	r31, r19
    4e52:	80 81       	ld	r24, Z
    4e54:	98 2f       	mov	r25, r24
    4e56:	90 53       	subi	r25, 0x30	; 48
    4e58:	2c 89       	ldd	r18, Y+20	; 0x14
    4e5a:	8c 89       	ldd	r24, Y+20	; 0x14
    4e5c:	8f 5f       	subi	r24, 0xFF	; 255
    4e5e:	8c 8b       	std	Y+20, r24	; 0x14
    4e60:	89 2f       	mov	r24, r25
    4e62:	62 2f       	mov	r22, r18
    4e64:	0e 94 f6 26 	call	0x4dec	; 0x4dec <HEEPROM_WRITE>
    4e68:	80 e0       	ldi	r24, 0x00	; 0
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	a8 ec       	ldi	r26, 0xC8	; 200
    4e6e:	b2 e4       	ldi	r27, 0x42	; 66
    4e70:	8b 87       	std	Y+11, r24	; 0x0b
    4e72:	9c 87       	std	Y+12, r25	; 0x0c
    4e74:	ad 87       	std	Y+13, r26	; 0x0d
    4e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	4a ef       	ldi	r20, 0xFA	; 250
    4e86:	54 e4       	ldi	r21, 0x44	; 68
    4e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e8c:	dc 01       	movw	r26, r24
    4e8e:	cb 01       	movw	r24, r22
    4e90:	8f 83       	std	Y+7, r24	; 0x07
    4e92:	98 87       	std	Y+8, r25	; 0x08
    4e94:	a9 87       	std	Y+9, r26	; 0x09
    4e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e98:	6f 81       	ldd	r22, Y+7	; 0x07
    4e9a:	78 85       	ldd	r23, Y+8	; 0x08
    4e9c:	89 85       	ldd	r24, Y+9	; 0x09
    4e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ea0:	20 e0       	ldi	r18, 0x00	; 0
    4ea2:	30 e0       	ldi	r19, 0x00	; 0
    4ea4:	40 e8       	ldi	r20, 0x80	; 128
    4ea6:	5f e3       	ldi	r21, 0x3F	; 63
    4ea8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4eac:	88 23       	and	r24, r24
    4eae:	2c f4       	brge	.+10     	; 0x4eba <HEEPROM_WRITE_STRING+0x9c>
		__ticks = 1;
    4eb0:	81 e0       	ldi	r24, 0x01	; 1
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	9e 83       	std	Y+6, r25	; 0x06
    4eb6:	8d 83       	std	Y+5, r24	; 0x05
    4eb8:	3f c0       	rjmp	.+126    	; 0x4f38 <HEEPROM_WRITE_STRING+0x11a>
	else if (__tmp > 65535)
    4eba:	6f 81       	ldd	r22, Y+7	; 0x07
    4ebc:	78 85       	ldd	r23, Y+8	; 0x08
    4ebe:	89 85       	ldd	r24, Y+9	; 0x09
    4ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ec2:	20 e0       	ldi	r18, 0x00	; 0
    4ec4:	3f ef       	ldi	r19, 0xFF	; 255
    4ec6:	4f e7       	ldi	r20, 0x7F	; 127
    4ec8:	57 e4       	ldi	r21, 0x47	; 71
    4eca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ece:	18 16       	cp	r1, r24
    4ed0:	4c f5       	brge	.+82     	; 0x4f24 <HEEPROM_WRITE_STRING+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eda:	20 e0       	ldi	r18, 0x00	; 0
    4edc:	30 e0       	ldi	r19, 0x00	; 0
    4ede:	40 e2       	ldi	r20, 0x20	; 32
    4ee0:	51 e4       	ldi	r21, 0x41	; 65
    4ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ee6:	dc 01       	movw	r26, r24
    4ee8:	cb 01       	movw	r24, r22
    4eea:	bc 01       	movw	r22, r24
    4eec:	cd 01       	movw	r24, r26
    4eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef2:	dc 01       	movw	r26, r24
    4ef4:	cb 01       	movw	r24, r22
    4ef6:	9e 83       	std	Y+6, r25	; 0x06
    4ef8:	8d 83       	std	Y+5, r24	; 0x05
    4efa:	0f c0       	rjmp	.+30     	; 0x4f1a <HEEPROM_WRITE_STRING+0xfc>
    4efc:	88 ec       	ldi	r24, 0xC8	; 200
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	9c 83       	std	Y+4, r25	; 0x04
    4f02:	8b 83       	std	Y+3, r24	; 0x03
    4f04:	8b 81       	ldd	r24, Y+3	; 0x03
    4f06:	9c 81       	ldd	r25, Y+4	; 0x04
    4f08:	01 97       	sbiw	r24, 0x01	; 1
    4f0a:	f1 f7       	brne	.-4      	; 0x4f08 <HEEPROM_WRITE_STRING+0xea>
    4f0c:	9c 83       	std	Y+4, r25	; 0x04
    4f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f10:	8d 81       	ldd	r24, Y+5	; 0x05
    4f12:	9e 81       	ldd	r25, Y+6	; 0x06
    4f14:	01 97       	sbiw	r24, 0x01	; 1
    4f16:	9e 83       	std	Y+6, r25	; 0x06
    4f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f1e:	00 97       	sbiw	r24, 0x00	; 0
    4f20:	69 f7       	brne	.-38     	; 0x4efc <HEEPROM_WRITE_STRING+0xde>
    4f22:	14 c0       	rjmp	.+40     	; 0x4f4c <HEEPROM_WRITE_STRING+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f24:	6f 81       	ldd	r22, Y+7	; 0x07
    4f26:	78 85       	ldd	r23, Y+8	; 0x08
    4f28:	89 85       	ldd	r24, Y+9	; 0x09
    4f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f30:	dc 01       	movw	r26, r24
    4f32:	cb 01       	movw	r24, r22
    4f34:	9e 83       	std	Y+6, r25	; 0x06
    4f36:	8d 83       	std	Y+5, r24	; 0x05
    4f38:	8d 81       	ldd	r24, Y+5	; 0x05
    4f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f3c:	9a 83       	std	Y+2, r25	; 0x02
    4f3e:	89 83       	std	Y+1, r24	; 0x01
    4f40:	89 81       	ldd	r24, Y+1	; 0x01
    4f42:	9a 81       	ldd	r25, Y+2	; 0x02
    4f44:	01 97       	sbiw	r24, 0x01	; 1
    4f46:	f1 f7       	brne	.-4      	; 0x4f44 <HEEPROM_WRITE_STRING+0x126>
    4f48:	9a 83       	std	Y+2, r25	; 0x02
    4f4a:	89 83       	std	Y+1, r24	; 0x01
}
/**************************************/
void HEEPROM_WRITE_STRING(u8 *user,u8 user_length,u8 s_address)
{
 int i=0;
  for(i=0;i<user_length;i++)
    4f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f4e:	98 89       	ldd	r25, Y+16	; 0x10
    4f50:	01 96       	adiw	r24, 0x01	; 1
    4f52:	98 8b       	std	Y+16, r25	; 0x10
    4f54:	8f 87       	std	Y+15, r24	; 0x0f
    4f56:	8b 89       	ldd	r24, Y+19	; 0x13
    4f58:	28 2f       	mov	r18, r24
    4f5a:	30 e0       	ldi	r19, 0x00	; 0
    4f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f5e:	98 89       	ldd	r25, Y+16	; 0x10
    4f60:	82 17       	cp	r24, r18
    4f62:	93 07       	cpc	r25, r19
    4f64:	0c f4       	brge	.+2      	; 0x4f68 <HEEPROM_WRITE_STRING+0x14a>
    4f66:	6e cf       	rjmp	.-292    	; 0x4e44 <HEEPROM_WRITE_STRING+0x26>
  {
	  HEEPROM_WRITE(user[i]-'0',s_address++);
	  _delay_ms(100);
  }

}
    4f68:	64 96       	adiw	r28, 0x14	; 20
    4f6a:	0f b6       	in	r0, 0x3f	; 63
    4f6c:	f8 94       	cli
    4f6e:	de bf       	out	0x3e, r29	; 62
    4f70:	0f be       	out	0x3f, r0	; 63
    4f72:	cd bf       	out	0x3d, r28	; 61
    4f74:	cf 91       	pop	r28
    4f76:	df 91       	pop	r29
    4f78:	08 95       	ret

00004f7a <HEEPROM_READ_STRING>:
/**************************************/
void HEEPROM_READ_STRING(u8 *user,u8 user_length,u8 s_address)
{
    4f7a:	df 93       	push	r29
    4f7c:	cf 93       	push	r28
    4f7e:	00 d0       	rcall	.+0      	; 0x4f80 <HEEPROM_READ_STRING+0x6>
    4f80:	00 d0       	rcall	.+0      	; 0x4f82 <HEEPROM_READ_STRING+0x8>
    4f82:	00 d0       	rcall	.+0      	; 0x4f84 <HEEPROM_READ_STRING+0xa>
    4f84:	cd b7       	in	r28, 0x3d	; 61
    4f86:	de b7       	in	r29, 0x3e	; 62
    4f88:	9c 83       	std	Y+4, r25	; 0x04
    4f8a:	8b 83       	std	Y+3, r24	; 0x03
    4f8c:	6d 83       	std	Y+5, r22	; 0x05
    4f8e:	4e 83       	std	Y+6, r20	; 0x06
 int i=0;
    4f90:	1a 82       	std	Y+2, r1	; 0x02
    4f92:	19 82       	std	Y+1, r1	; 0x01
  for(i=0;i<user_length;i++)
    4f94:	1a 82       	std	Y+2, r1	; 0x02
    4f96:	19 82       	std	Y+1, r1	; 0x01
    4f98:	13 c0       	rjmp	.+38     	; 0x4fc0 <HEEPROM_READ_STRING+0x46>
  {
	  HEEPROM_READ(s_address+i,&user[i]);
    4f9a:	99 81       	ldd	r25, Y+1	; 0x01
    4f9c:	8e 81       	ldd	r24, Y+6	; 0x06
    4f9e:	49 2f       	mov	r20, r25
    4fa0:	48 0f       	add	r20, r24
    4fa2:	29 81       	ldd	r18, Y+1	; 0x01
    4fa4:	3a 81       	ldd	r19, Y+2	; 0x02
    4fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    4faa:	28 0f       	add	r18, r24
    4fac:	39 1f       	adc	r19, r25
    4fae:	84 2f       	mov	r24, r20
    4fb0:	b9 01       	movw	r22, r18
    4fb2:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <HEEPROM_READ>
}
/**************************************/
void HEEPROM_READ_STRING(u8 *user,u8 user_length,u8 s_address)
{
 int i=0;
  for(i=0;i<user_length;i++)
    4fb6:	89 81       	ldd	r24, Y+1	; 0x01
    4fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fba:	01 96       	adiw	r24, 0x01	; 1
    4fbc:	9a 83       	std	Y+2, r25	; 0x02
    4fbe:	89 83       	std	Y+1, r24	; 0x01
    4fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc2:	28 2f       	mov	r18, r24
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	89 81       	ldd	r24, Y+1	; 0x01
    4fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fca:	82 17       	cp	r24, r18
    4fcc:	93 07       	cpc	r25, r19
    4fce:	2c f3       	brlt	.-54     	; 0x4f9a <HEEPROM_READ_STRING+0x20>
  {
	  HEEPROM_READ(s_address+i,&user[i]);
  }

}
    4fd0:	26 96       	adiw	r28, 0x06	; 6
    4fd2:	0f b6       	in	r0, 0x3f	; 63
    4fd4:	f8 94       	cli
    4fd6:	de bf       	out	0x3e, r29	; 62
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	cd bf       	out	0x3d, r28	; 61
    4fdc:	cf 91       	pop	r28
    4fde:	df 91       	pop	r29
    4fe0:	08 95       	ret

00004fe2 <HEEPROM_READ>:
/*************************************/
void HEEPROM_READ(u8 Address,u8 *data)
{
    4fe2:	df 93       	push	r29
    4fe4:	cf 93       	push	r28
    4fe6:	00 d0       	rcall	.+0      	; 0x4fe8 <HEEPROM_READ+0x6>
    4fe8:	0f 92       	push	r0
    4fea:	cd b7       	in	r28, 0x3d	; 61
    4fec:	de b7       	in	r29, 0x3e	; 62
    4fee:	89 83       	std	Y+1, r24	; 0x01
    4ff0:	7b 83       	std	Y+3, r23	; 0x03
    4ff2:	6a 83       	std	Y+2, r22	; 0x02
	 I2C_START();
    4ff4:	0e 94 1b 10 	call	0x2036	; 0x2036 <I2C_START>
	 /*slave address with write*/
	 I2C_WRITE(0xA0);
    4ff8:	80 ea       	ldi	r24, 0xA0	; 160
    4ffa:	0e 94 2b 10 	call	0x2056	; 0x2056 <I2C_WRITE>
	 /*send memory LOCATION*/
	 I2C_WRITE(Address);
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01
    5000:	0e 94 2b 10 	call	0x2056	; 0x2056 <I2C_WRITE>
	 I2C_START();
    5004:	0e 94 1b 10 	call	0x2036	; 0x2036 <I2C_START>
	 /*slave address with Read*/
	 I2C_WRITE(0xA1);
    5008:	81 ea       	ldi	r24, 0xA1	; 161
    500a:	0e 94 2b 10 	call	0x2056	; 0x2056 <I2C_WRITE>
	 /*master read*/
	 *data=I2C_READ_WITH_ACK();
    500e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <I2C_READ_WITH_ACK>
    5012:	ea 81       	ldd	r30, Y+2	; 0x02
    5014:	fb 81       	ldd	r31, Y+3	; 0x03
    5016:	80 83       	st	Z, r24
	 I2C_STOP();
    5018:	0e 94 77 10 	call	0x20ee	; 0x20ee <I2C_STOP>

}
    501c:	0f 90       	pop	r0
    501e:	0f 90       	pop	r0
    5020:	0f 90       	pop	r0
    5022:	cf 91       	pop	r28
    5024:	df 91       	pop	r29
    5026:	08 95       	ret

00005028 <main>:
u8 GET_NEW_USER(void);
u8 GET_NEW_PASS(void);
void SPI_SEND(void);
/**********FUNCTION DECLERATION*********/
int main()
{
    5028:	df 93       	push	r29
    502a:	cf 93       	push	r28
    502c:	cd b7       	in	r28, 0x3d	; 61
    502e:	de b7       	in	r29, 0x3e	; 62
	PORT_DIRECTION_INIT();
    5030:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <PORT_DIRECTION_INIT>
	PORT_LOGICLEVEL_INIT();
    5034:	0e 94 81 15 	call	0x2b02	; 0x2b02 <PORT_LOGICLEVEL_INIT>
	RTOS_INIT();
    5038:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <RTOS_INIT>
	HLCD_INIT_4bit();
    503c:	0e 94 28 1c 	call	0x3850	; 0x3850 <HLCD_INIT_4bit>
	MSPI_Init(NULL);
    5040:	80 e0       	ldi	r24, 0x00	; 0
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <MSPI_Init>
	I2C_INIT(NULL);
    5048:	80 e0       	ldi	r24, 0x00	; 0
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <I2C_INIT>
	MUART_INIT(NULL,NULL,NULL);
    5050:	80 e0       	ldi	r24, 0x00	; 0
    5052:	90 e0       	ldi	r25, 0x00	; 0
    5054:	60 e0       	ldi	r22, 0x00	; 0
    5056:	70 e0       	ldi	r23, 0x00	; 0
    5058:	40 e0       	ldi	r20, 0x00	; 0
    505a:	50 e0       	ldi	r21, 0x00	; 0
    505c:	0e 94 05 09 	call	0x120a	; 0x120a <MUART_INIT>
	MADC_voidInit();
    5060:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MADC_voidInit>
	HEEPROM_READ(0xFF,&number_Of_user);
    5064:	24 ea       	ldi	r18, 0xA4	; 164
    5066:	32 e0       	ldi	r19, 0x02	; 2
    5068:	8f ef       	ldi	r24, 0xFF	; 255
    506a:	b9 01       	movw	r22, r18
    506c:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <HEEPROM_READ>
	IDLE_FRAME();
    5070:	0e 94 4b 2b 	call	0x5696	; 0x5696 <IDLE_FRAME>
	while(1)
	{

		kp_state=keypad_readd(&kp_val);
    5074:	83 e9       	ldi	r24, 0x93	; 147
    5076:	92 e0       	ldi	r25, 0x02	; 2
    5078:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <keypad_readd>
    507c:	80 93 b4 02 	sts	0x02B4, r24
		if(BUTTON_PRESSED==kp_state)
    5080:	80 91 b4 02 	lds	r24, 0x02B4
    5084:	81 30       	cpi	r24, 0x01	; 1
    5086:	09 f0       	breq	.+2      	; 0x508a <main+0x62>
    5088:	96 c0       	rjmp	.+300    	; 0x51b6 <main+0x18e>
		{
			if(entry==0)
    508a:	80 91 a5 02 	lds	r24, 0x02A5
    508e:	90 91 a6 02 	lds	r25, 0x02A6
    5092:	00 97       	sbiw	r24, 0x00	; 0
    5094:	49 f4       	brne	.+18     	; 0x50a8 <main+0x80>
			{
				IDLE_STATE();
    5096:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <IDLE_STATE>
				entry=1;
    509a:	81 e0       	ldi	r24, 0x01	; 1
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	90 93 a6 02 	sts	0x02A6, r25
    50a2:	80 93 a5 02 	sts	0x02A5, r24
    50a6:	e6 cf       	rjmp	.-52     	; 0x5074 <main+0x4c>
			}
			else if(entry==1)/*else if we are not in entry mode*/
    50a8:	80 91 a5 02 	lds	r24, 0x02A5
    50ac:	90 91 a6 02 	lds	r25, 0x02A6
    50b0:	81 30       	cpi	r24, 0x01	; 1
    50b2:	91 05       	cpc	r25, r1
    50b4:	f9 f6       	brne	.-66     	; 0x5074 <main+0x4c>
			{
				if(OPEN_CHANGE_FLAG==1) // Open System
    50b6:	80 91 a7 02 	lds	r24, 0x02A7
    50ba:	90 91 a8 02 	lds	r25, 0x02A8
    50be:	81 30       	cpi	r24, 0x01	; 1
    50c0:	91 05       	cpc	r25, r1
    50c2:	d9 f4       	brne	.+54     	; 0x50fa <main+0xd2>
				{
					if(SIGN_STATE==ENTER_USER)
    50c4:	80 91 5d 02 	lds	r24, 0x025D
    50c8:	84 30       	cpi	r24, 0x04	; 4
    50ca:	31 f4       	brne	.+12     	; 0x50d8 <main+0xb0>
					{
						SIGN_STATE=GET_ACCOUNT(USER);
    50cc:	81 e0       	ldi	r24, 0x01	; 1
    50ce:	0e 94 a5 2c 	call	0x594a	; 0x594a <GET_ACCOUNT>
    50d2:	80 93 5d 02 	sts	0x025D, r24
    50d6:	ce cf       	rjmp	.-100    	; 0x5074 <main+0x4c>
					}
					else if(SIGN_STATE==ENTER_PASSWORD)
    50d8:	80 91 5d 02 	lds	r24, 0x025D
    50dc:	86 30       	cpi	r24, 0x06	; 6
    50de:	51 f6       	brne	.-108    	; 0x5074 <main+0x4c>
					{
						SIGN_STATE=GET_ACCOUNT(PASS);
    50e0:	82 e0       	ldi	r24, 0x02	; 2
    50e2:	0e 94 a5 2c 	call	0x594a	; 0x594a <GET_ACCOUNT>
    50e6:	80 93 5d 02 	sts	0x025D, r24
						if(SIGN_STATE==SYS_OPENED)
    50ea:	80 91 5d 02 	lds	r24, 0x025D
    50ee:	87 30       	cpi	r24, 0x07	; 7
    50f0:	09 f6       	brne	.-126    	; 0x5074 <main+0x4c>
						{
							SIGN_STATE=SYSTEM_STARTED;
    50f2:	8a e0       	ldi	r24, 0x0A	; 10
    50f4:	80 93 5d 02 	sts	0x025D, r24
    50f8:	bd cf       	rjmp	.-134    	; 0x5074 <main+0x4c>
						}
					}
				}
				else if(OPEN_CHANGE_FLAG==2) // change password
    50fa:	80 91 a7 02 	lds	r24, 0x02A7
    50fe:	90 91 a8 02 	lds	r25, 0x02A8
    5102:	82 30       	cpi	r24, 0x02	; 2
    5104:	91 05       	cpc	r25, r1
    5106:	e1 f5       	brne	.+120    	; 0x5180 <main+0x158>
				{
					if(SIGN_STATE==ENTER_USER)
    5108:	80 91 5d 02 	lds	r24, 0x025D
    510c:	84 30       	cpi	r24, 0x04	; 4
    510e:	31 f4       	brne	.+12     	; 0x511c <main+0xf4>
					{
						SIGN_STATE=GET_ACCOUNT(USER);
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	0e 94 a5 2c 	call	0x594a	; 0x594a <GET_ACCOUNT>
    5116:	80 93 5d 02 	sts	0x025D, r24
    511a:	ac cf       	rjmp	.-168    	; 0x5074 <main+0x4c>
					}
					else if(SIGN_STATE==ENTER_PASSWORD)
    511c:	80 91 5d 02 	lds	r24, 0x025D
    5120:	86 30       	cpi	r24, 0x06	; 6
    5122:	69 f4       	brne	.+26     	; 0x513e <main+0x116>
					{
						SIGN_STATE=GET_ACCOUNT(PASS);
    5124:	82 e0       	ldi	r24, 0x02	; 2
    5126:	0e 94 a5 2c 	call	0x594a	; 0x594a <GET_ACCOUNT>
    512a:	80 93 5d 02 	sts	0x025D, r24
						if(SIGN_STATE==SYS_OPENED)
    512e:	80 91 5d 02 	lds	r24, 0x025D
    5132:	87 30       	cpi	r24, 0x07	; 7
    5134:	09 f0       	breq	.+2      	; 0x5138 <main+0x110>
    5136:	9e cf       	rjmp	.-196    	; 0x5074 <main+0x4c>
						{
							ENTER_NEW_PASS_FRAME();
    5138:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <ENTER_NEW_PASS_FRAME>
    513c:	9b cf       	rjmp	.-202    	; 0x5074 <main+0x4c>
						}
					}
					else if(SIGN_STATE==SYS_OPENED)
    513e:	80 91 5d 02 	lds	r24, 0x025D
    5142:	87 30       	cpi	r24, 0x07	; 7
    5144:	09 f0       	breq	.+2      	; 0x5148 <main+0x120>
    5146:	96 cf       	rjmp	.-212    	; 0x5074 <main+0x4c>
					{
						SIGN_STATE=CHANGE_PASSWORD();
    5148:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <CHANGE_PASSWORD>
    514c:	80 93 5d 02 	sts	0x025D, r24
						if(SIGN_STATE==PASSWORD_CHANGED)
    5150:	80 91 5d 02 	lds	r24, 0x025D
    5154:	89 30       	cpi	r24, 0x09	; 9
    5156:	09 f0       	breq	.+2      	; 0x515a <main+0x132>
    5158:	8d cf       	rjmp	.-230    	; 0x5074 <main+0x4c>
						{
							OPEN_CHANGE_FLAG=0;
    515a:	10 92 a8 02 	sts	0x02A8, r1
    515e:	10 92 a7 02 	sts	0x02A7, r1
							entry=0;
    5162:	10 92 a6 02 	sts	0x02A6, r1
    5166:	10 92 a5 02 	sts	0x02A5, r1
							kp_val=0;
    516a:	10 92 93 02 	sts	0x0293, r1
							SIGN_STATE=ENTER_USER;
    516e:	84 e0       	ldi	r24, 0x04	; 4
    5170:	80 93 5d 02 	sts	0x025D, r24
							HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    5174:	81 e0       	ldi	r24, 0x01	; 1
    5176:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
							IDLE_FRAME();
    517a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <IDLE_FRAME>
    517e:	7a cf       	rjmp	.-268    	; 0x5074 <main+0x4c>
						}
					}
					else{}
				}
				else if(OPEN_CHANGE_FLAG==3)//add user
    5180:	80 91 a7 02 	lds	r24, 0x02A7
    5184:	90 91 a8 02 	lds	r25, 0x02A8
    5188:	83 30       	cpi	r24, 0x03	; 3
    518a:	91 05       	cpc	r25, r1
    518c:	09 f0       	breq	.+2      	; 0x5190 <main+0x168>
    518e:	72 cf       	rjmp	.-284    	; 0x5074 <main+0x4c>
				{
					if(SIGN_STATE==ENTER_USER)
    5190:	80 91 5d 02 	lds	r24, 0x025D
    5194:	84 30       	cpi	r24, 0x04	; 4
    5196:	29 f4       	brne	.+10     	; 0x51a2 <main+0x17a>
					{
						SIGN_STATE=GET_NEW_USER();
    5198:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <GET_NEW_USER>
    519c:	80 93 5d 02 	sts	0x025D, r24
    51a0:	69 cf       	rjmp	.-302    	; 0x5074 <main+0x4c>
					}
					else if(USER_SETTED==SIGN_STATE)
    51a2:	80 91 5d 02 	lds	r24, 0x025D
    51a6:	8c 30       	cpi	r24, 0x0C	; 12
    51a8:	09 f0       	breq	.+2      	; 0x51ac <main+0x184>
    51aa:	64 cf       	rjmp	.-312    	; 0x5074 <main+0x4c>
					{
						SIGN_STATE=GET_NEW_PASS();
    51ac:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <GET_NEW_PASS>
    51b0:	80 93 5d 02 	sts	0x025D, r24
    51b4:	5f cf       	rjmp	.-322    	; 0x5074 <main+0x4c>
				}
			}
			else{
			}
		}
		else if((BUTTON_RELEASED==kp_state)&&(SYSTEM_STARTED==SIGN_STATE))
    51b6:	80 91 b4 02 	lds	r24, 0x02B4
    51ba:	88 23       	and	r24, r24
    51bc:	09 f0       	breq	.+2      	; 0x51c0 <main+0x198>
    51be:	5a cf       	rjmp	.-332    	; 0x5074 <main+0x4c>
    51c0:	80 91 5d 02 	lds	r24, 0x025D
    51c4:	8a 30       	cpi	r24, 0x0A	; 10
    51c6:	09 f0       	breq	.+2      	; 0x51ca <main+0x1a2>
    51c8:	55 cf       	rjmp	.-342    	; 0x5074 <main+0x4c>
		{


			RTOS_START();
    51ca:	0e 94 00 08 	call	0x1000	; 0x1000 <RTOS_START>
    51ce:	52 cf       	rjmp	.-348    	; 0x5074 <main+0x4c>

000051d0 <COMPARE_USER>:
	}
}
/**********************************************************/

u8 COMPARE_USER(void)
{
    51d0:	df 93       	push	r29
    51d2:	cf 93       	push	r28
    51d4:	cd b7       	in	r28, 0x3d	; 61
    51d6:	de b7       	in	r29, 0x3e	; 62
    51d8:	65 97       	sbiw	r28, 0x15	; 21
    51da:	0f b6       	in	r0, 0x3f	; 63
    51dc:	f8 94       	cli
    51de:	de bf       	out	0x3e, r29	; 62
    51e0:	0f be       	out	0x3f, r0	; 63
    51e2:	cd bf       	out	0x3d, r28	; 61
	static int user_pos=0;
	u8 required_user_flag=0;
    51e4:	1d 8a       	std	Y+21, r1	; 0x15
	int user=PROCESS_USER;
    51e6:	85 e0       	ldi	r24, 0x05	; 5
    51e8:	90 e0       	ldi	r25, 0x00	; 0
    51ea:	9c 8b       	std	Y+20, r25	; 0x14
    51ec:	8b 8b       	std	Y+19, r24	; 0x13
	for(int y=0;y<number_Of_user;y++)
    51ee:	1a 8a       	std	Y+18, r1	; 0x12
    51f0:	19 8a       	std	Y+17, r1	; 0x11
    51f2:	58 c0       	rjmp	.+176    	; 0x52a4 <COMPARE_USER+0xd4>
	{
		user=PROCESS_USER;
    51f4:	85 e0       	ldi	r24, 0x05	; 5
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	9c 8b       	std	Y+20, r25	; 0x14
    51fa:	8b 8b       	std	Y+19, r24	; 0x13
		for(int i =0 ; i <=3 ; ++i)
    51fc:	18 8a       	std	Y+16, r1	; 0x10
    51fe:	1f 86       	std	Y+15, r1	; 0x0f
    5200:	2d c0       	rjmp	.+90     	; 0x525c <COMPARE_USER+0x8c>
		{
			HEEPROM_READ((y*FIRST_USER)+i,&DEF_EEPROM[i]);
    5202:	89 89       	ldd	r24, Y+17	; 0x11
    5204:	9a 89       	ldd	r25, Y+18	; 0x12
    5206:	88 0f       	add	r24, r24
    5208:	99 1f       	adc	r25, r25
    520a:	88 0f       	add	r24, r24
    520c:	99 1f       	adc	r25, r25
    520e:	88 0f       	add	r24, r24
    5210:	99 1f       	adc	r25, r25
    5212:	98 2f       	mov	r25, r24
    5214:	8f 85       	ldd	r24, Y+15	; 0x0f
    5216:	49 2f       	mov	r20, r25
    5218:	48 0f       	add	r20, r24
    521a:	8f 85       	ldd	r24, Y+15	; 0x0f
    521c:	98 89       	ldd	r25, Y+16	; 0x10
    521e:	9c 01       	movw	r18, r24
    5220:	24 56       	subi	r18, 0x64	; 100
    5222:	3d 4f       	sbci	r19, 0xFD	; 253
    5224:	84 2f       	mov	r24, r20
    5226:	b9 01       	movw	r22, r18
    5228:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <HEEPROM_READ>
			if(DEF_USER[i]==DEF_EEPROM[i])
    522c:	8f 85       	ldd	r24, Y+15	; 0x0f
    522e:	98 89       	ldd	r25, Y+16	; 0x10
    5230:	fc 01       	movw	r30, r24
    5232:	e8 56       	subi	r30, 0x68	; 104
    5234:	fd 4f       	sbci	r31, 0xFD	; 253
    5236:	20 81       	ld	r18, Z
    5238:	8f 85       	ldd	r24, Y+15	; 0x0f
    523a:	98 89       	ldd	r25, Y+16	; 0x10
    523c:	fc 01       	movw	r30, r24
    523e:	e4 56       	subi	r30, 0x64	; 100
    5240:	fd 4f       	sbci	r31, 0xFD	; 253
    5242:	80 81       	ld	r24, Z
    5244:	28 17       	cp	r18, r24
    5246:	29 f0       	breq	.+10     	; 0x5252 <COMPARE_USER+0x82>
			{

			}
			else
			{
				user=ENTER_USER;
    5248:	84 e0       	ldi	r24, 0x04	; 4
    524a:	90 e0       	ldi	r25, 0x00	; 0
    524c:	9c 8b       	std	Y+20, r25	; 0x14
    524e:	8b 8b       	std	Y+19, r24	; 0x13
    5250:	0a c0       	rjmp	.+20     	; 0x5266 <COMPARE_USER+0x96>
	u8 required_user_flag=0;
	int user=PROCESS_USER;
	for(int y=0;y<number_Of_user;y++)
	{
		user=PROCESS_USER;
		for(int i =0 ; i <=3 ; ++i)
    5252:	8f 85       	ldd	r24, Y+15	; 0x0f
    5254:	98 89       	ldd	r25, Y+16	; 0x10
    5256:	01 96       	adiw	r24, 0x01	; 1
    5258:	98 8b       	std	Y+16, r25	; 0x10
    525a:	8f 87       	std	Y+15, r24	; 0x0f
    525c:	8f 85       	ldd	r24, Y+15	; 0x0f
    525e:	98 89       	ldd	r25, Y+16	; 0x10
    5260:	84 30       	cpi	r24, 0x04	; 4
    5262:	91 05       	cpc	r25, r1
    5264:	74 f2       	brlt	.-100    	; 0x5202 <COMPARE_USER+0x32>
			{
				user=ENTER_USER;
				break;
			}
		}
		if(user==PROCESS_USER)
    5266:	8b 89       	ldd	r24, Y+19	; 0x13
    5268:	9c 89       	ldd	r25, Y+20	; 0x14
    526a:	85 30       	cpi	r24, 0x05	; 5
    526c:	91 05       	cpc	r25, r1
    526e:	a9 f4       	brne	.+42     	; 0x529a <COMPARE_USER+0xca>
		{
			user=ENTER_PASSWORD;
    5270:	86 e0       	ldi	r24, 0x06	; 6
    5272:	90 e0       	ldi	r25, 0x00	; 0
    5274:	9c 8b       	std	Y+20, r25	; 0x14
    5276:	8b 8b       	std	Y+19, r24	; 0x13
			ENTER_PASS_FRAME();
    5278:	0e 94 8c 2b 	call	0x5718	; 0x5718 <ENTER_PASS_FRAME>
			user_pos=0;
    527c:	10 92 ae 02 	sts	0x02AE, r1
    5280:	10 92 ad 02 	sts	0x02AD, r1
			compared_password_pos=(y*FIRST_USER);
    5284:	89 89       	ldd	r24, Y+17	; 0x11
    5286:	9a 89       	ldd	r25, Y+18	; 0x12
    5288:	88 0f       	add	r24, r24
    528a:	99 1f       	adc	r25, r25
    528c:	88 0f       	add	r24, r24
    528e:	99 1f       	adc	r25, r25
    5290:	88 0f       	add	r24, r24
    5292:	99 1f       	adc	r25, r25
    5294:	80 93 b3 02 	sts	0x02B3, r24
    5298:	0f c0       	rjmp	.+30     	; 0x52b8 <COMPARE_USER+0xe8>
u8 COMPARE_USER(void)
{
	static int user_pos=0;
	u8 required_user_flag=0;
	int user=PROCESS_USER;
	for(int y=0;y<number_Of_user;y++)
    529a:	89 89       	ldd	r24, Y+17	; 0x11
    529c:	9a 89       	ldd	r25, Y+18	; 0x12
    529e:	01 96       	adiw	r24, 0x01	; 1
    52a0:	9a 8b       	std	Y+18, r25	; 0x12
    52a2:	89 8b       	std	Y+17, r24	; 0x11
    52a4:	80 91 a4 02 	lds	r24, 0x02A4
    52a8:	28 2f       	mov	r18, r24
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	89 89       	ldd	r24, Y+17	; 0x11
    52ae:	9a 89       	ldd	r25, Y+18	; 0x12
    52b0:	82 17       	cp	r24, r18
    52b2:	93 07       	cpc	r25, r19
    52b4:	0c f4       	brge	.+2      	; 0x52b8 <COMPARE_USER+0xe8>
    52b6:	9e cf       	rjmp	.-196    	; 0x51f4 <COMPARE_USER+0x24>
			user_pos=0;
			compared_password_pos=(y*FIRST_USER);
			break;
		}
	}
	if(user==ENTER_USER)
    52b8:	8b 89       	ldd	r24, Y+19	; 0x13
    52ba:	9c 89       	ldd	r25, Y+20	; 0x14
    52bc:	84 30       	cpi	r24, 0x04	; 4
    52be:	91 05       	cpc	r25, r1
    52c0:	09 f0       	breq	.+2      	; 0x52c4 <COMPARE_USER+0xf4>
    52c2:	85 c0       	rjmp	.+266    	; 0x53ce <COMPARE_USER+0x1fe>
	{
		user_pos++;
    52c4:	80 91 ad 02 	lds	r24, 0x02AD
    52c8:	90 91 ae 02 	lds	r25, 0x02AE
    52cc:	01 96       	adiw	r24, 0x01	; 1
    52ce:	90 93 ae 02 	sts	0x02AE, r25
    52d2:	80 93 ad 02 	sts	0x02AD, r24
		user=ENTER_USER;
    52d6:	84 e0       	ldi	r24, 0x04	; 4
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	9c 8b       	std	Y+20, r25	; 0x14
    52dc:	8b 8b       	std	Y+19, r24	; 0x13
		WRONG_USER_FRAME(user_pos);
    52de:	80 91 ad 02 	lds	r24, 0x02AD
    52e2:	90 91 ae 02 	lds	r25, 0x02AE
    52e6:	0e 94 85 2c 	call	0x590a	; 0x590a <WRONG_USER_FRAME>
    52ea:	80 e0       	ldi	r24, 0x00	; 0
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	aa e7       	ldi	r26, 0x7A	; 122
    52f0:	b4 e4       	ldi	r27, 0x44	; 68
    52f2:	8b 87       	std	Y+11, r24	; 0x0b
    52f4:	9c 87       	std	Y+12, r25	; 0x0c
    52f6:	ad 87       	std	Y+13, r26	; 0x0d
    52f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    52fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    52fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5300:	9e 85       	ldd	r25, Y+14	; 0x0e
    5302:	20 e0       	ldi	r18, 0x00	; 0
    5304:	30 e0       	ldi	r19, 0x00	; 0
    5306:	4a ef       	ldi	r20, 0xFA	; 250
    5308:	54 e4       	ldi	r21, 0x44	; 68
    530a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    530e:	dc 01       	movw	r26, r24
    5310:	cb 01       	movw	r24, r22
    5312:	8f 83       	std	Y+7, r24	; 0x07
    5314:	98 87       	std	Y+8, r25	; 0x08
    5316:	a9 87       	std	Y+9, r26	; 0x09
    5318:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    531a:	6f 81       	ldd	r22, Y+7	; 0x07
    531c:	78 85       	ldd	r23, Y+8	; 0x08
    531e:	89 85       	ldd	r24, Y+9	; 0x09
    5320:	9a 85       	ldd	r25, Y+10	; 0x0a
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	40 e8       	ldi	r20, 0x80	; 128
    5328:	5f e3       	ldi	r21, 0x3F	; 63
    532a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    532e:	88 23       	and	r24, r24
    5330:	2c f4       	brge	.+10     	; 0x533c <COMPARE_USER+0x16c>
		__ticks = 1;
    5332:	81 e0       	ldi	r24, 0x01	; 1
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	9e 83       	std	Y+6, r25	; 0x06
    5338:	8d 83       	std	Y+5, r24	; 0x05
    533a:	3f c0       	rjmp	.+126    	; 0x53ba <COMPARE_USER+0x1ea>
	else if (__tmp > 65535)
    533c:	6f 81       	ldd	r22, Y+7	; 0x07
    533e:	78 85       	ldd	r23, Y+8	; 0x08
    5340:	89 85       	ldd	r24, Y+9	; 0x09
    5342:	9a 85       	ldd	r25, Y+10	; 0x0a
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	3f ef       	ldi	r19, 0xFF	; 255
    5348:	4f e7       	ldi	r20, 0x7F	; 127
    534a:	57 e4       	ldi	r21, 0x47	; 71
    534c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5350:	18 16       	cp	r1, r24
    5352:	4c f5       	brge	.+82     	; 0x53a6 <COMPARE_USER+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5354:	6b 85       	ldd	r22, Y+11	; 0x0b
    5356:	7c 85       	ldd	r23, Y+12	; 0x0c
    5358:	8d 85       	ldd	r24, Y+13	; 0x0d
    535a:	9e 85       	ldd	r25, Y+14	; 0x0e
    535c:	20 e0       	ldi	r18, 0x00	; 0
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	40 e2       	ldi	r20, 0x20	; 32
    5362:	51 e4       	ldi	r21, 0x41	; 65
    5364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5368:	dc 01       	movw	r26, r24
    536a:	cb 01       	movw	r24, r22
    536c:	bc 01       	movw	r22, r24
    536e:	cd 01       	movw	r24, r26
    5370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5374:	dc 01       	movw	r26, r24
    5376:	cb 01       	movw	r24, r22
    5378:	9e 83       	std	Y+6, r25	; 0x06
    537a:	8d 83       	std	Y+5, r24	; 0x05
    537c:	0f c0       	rjmp	.+30     	; 0x539c <COMPARE_USER+0x1cc>
    537e:	88 ec       	ldi	r24, 0xC8	; 200
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	9c 83       	std	Y+4, r25	; 0x04
    5384:	8b 83       	std	Y+3, r24	; 0x03
    5386:	8b 81       	ldd	r24, Y+3	; 0x03
    5388:	9c 81       	ldd	r25, Y+4	; 0x04
    538a:	01 97       	sbiw	r24, 0x01	; 1
    538c:	f1 f7       	brne	.-4      	; 0x538a <COMPARE_USER+0x1ba>
    538e:	9c 83       	std	Y+4, r25	; 0x04
    5390:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5392:	8d 81       	ldd	r24, Y+5	; 0x05
    5394:	9e 81       	ldd	r25, Y+6	; 0x06
    5396:	01 97       	sbiw	r24, 0x01	; 1
    5398:	9e 83       	std	Y+6, r25	; 0x06
    539a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    539c:	8d 81       	ldd	r24, Y+5	; 0x05
    539e:	9e 81       	ldd	r25, Y+6	; 0x06
    53a0:	00 97       	sbiw	r24, 0x00	; 0
    53a2:	69 f7       	brne	.-38     	; 0x537e <COMPARE_USER+0x1ae>
    53a4:	14 c0       	rjmp	.+40     	; 0x53ce <COMPARE_USER+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53a6:	6f 81       	ldd	r22, Y+7	; 0x07
    53a8:	78 85       	ldd	r23, Y+8	; 0x08
    53aa:	89 85       	ldd	r24, Y+9	; 0x09
    53ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53b2:	dc 01       	movw	r26, r24
    53b4:	cb 01       	movw	r24, r22
    53b6:	9e 83       	std	Y+6, r25	; 0x06
    53b8:	8d 83       	std	Y+5, r24	; 0x05
    53ba:	8d 81       	ldd	r24, Y+5	; 0x05
    53bc:	9e 81       	ldd	r25, Y+6	; 0x06
    53be:	9a 83       	std	Y+2, r25	; 0x02
    53c0:	89 83       	std	Y+1, r24	; 0x01
    53c2:	89 81       	ldd	r24, Y+1	; 0x01
    53c4:	9a 81       	ldd	r25, Y+2	; 0x02
    53c6:	01 97       	sbiw	r24, 0x01	; 1
    53c8:	f1 f7       	brne	.-4      	; 0x53c6 <COMPARE_USER+0x1f6>
    53ca:	9a 83       	std	Y+2, r25	; 0x02
    53cc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}


	if(user_pos==3)
    53ce:	80 91 ad 02 	lds	r24, 0x02AD
    53d2:	90 91 ae 02 	lds	r25, 0x02AE
    53d6:	83 30       	cpi	r24, 0x03	; 3
    53d8:	91 05       	cpc	r25, r1
    53da:	f1 f4       	brne	.+60     	; 0x5418 <COMPARE_USER+0x248>
	{
		entry=0;
    53dc:	10 92 a6 02 	sts	0x02A6, r1
    53e0:	10 92 a5 02 	sts	0x02A5, r1
		memset(DEF_USER,0,4);
    53e4:	88 e9       	ldi	r24, 0x98	; 152
    53e6:	92 e0       	ldi	r25, 0x02	; 2
    53e8:	60 e0       	ldi	r22, 0x00	; 0
    53ea:	70 e0       	ldi	r23, 0x00	; 0
    53ec:	44 e0       	ldi	r20, 0x04	; 4
    53ee:	50 e0       	ldi	r21, 0x00	; 0
    53f0:	0e 94 40 30 	call	0x6080	; 0x6080 <memset>
		memset(DEF_PASSWORD,0,4);
    53f4:	80 ea       	ldi	r24, 0xA0	; 160
    53f6:	92 e0       	ldi	r25, 0x02	; 2
    53f8:	60 e0       	ldi	r22, 0x00	; 0
    53fa:	70 e0       	ldi	r23, 0x00	; 0
    53fc:	44 e0       	ldi	r20, 0x04	; 4
    53fe:	50 e0       	ldi	r21, 0x00	; 0
    5400:	0e 94 40 30 	call	0x6080	; 0x6080 <memset>
		SIGN_STATE=ENTER_USER;
    5404:	84 e0       	ldi	r24, 0x04	; 4
    5406:	80 93 5d 02 	sts	0x025D, r24
		IDLE_FRAME();
    540a:	0e 94 4b 2b 	call	0x5696	; 0x5696 <IDLE_FRAME>
		user_pos=0;
    540e:	10 92 ae 02 	sts	0x02AE, r1
    5412:	10 92 ad 02 	sts	0x02AD, r1
    5416:	19 c0       	rjmp	.+50     	; 0x544a <COMPARE_USER+0x27a>
	}
	else if((user_pos!=0)&&(user_pos!=3))
    5418:	80 91 ad 02 	lds	r24, 0x02AD
    541c:	90 91 ae 02 	lds	r25, 0x02AE
    5420:	00 97       	sbiw	r24, 0x00	; 0
    5422:	99 f0       	breq	.+38     	; 0x544a <COMPARE_USER+0x27a>
    5424:	80 91 ad 02 	lds	r24, 0x02AD
    5428:	90 91 ae 02 	lds	r25, 0x02AE
    542c:	83 30       	cpi	r24, 0x03	; 3
    542e:	91 05       	cpc	r25, r1
    5430:	61 f0       	breq	.+24     	; 0x544a <COMPARE_USER+0x27a>
	{
		HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    5432:	81 e0       	ldi	r24, 0x01	; 1
    5434:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
		ENTER_USER_FRAME();
    5438:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <ENTER_USER_FRAME>
		SIGN_STATE=ENTER_USER;
    543c:	84 e0       	ldi	r24, 0x04	; 4
    543e:	80 93 5d 02 	sts	0x025D, r24
		user=ENTER_USER;
    5442:	84 e0       	ldi	r24, 0x04	; 4
    5444:	90 e0       	ldi	r25, 0x00	; 0
    5446:	9c 8b       	std	Y+20, r25	; 0x14
    5448:	8b 8b       	std	Y+19, r24	; 0x13
	}
	else
	{

	}
	return user;
    544a:	8b 89       	ldd	r24, Y+19	; 0x13
}
    544c:	65 96       	adiw	r28, 0x15	; 21
    544e:	0f b6       	in	r0, 0x3f	; 63
    5450:	f8 94       	cli
    5452:	de bf       	out	0x3e, r29	; 62
    5454:	0f be       	out	0x3f, r0	; 63
    5456:	cd bf       	out	0x3d, r28	; 61
    5458:	cf 91       	pop	r28
    545a:	df 91       	pop	r29
    545c:	08 95       	ret

0000545e <COMPARE_PASSWORD>:
u8 COMPARE_PASSWORD(void)
{
    545e:	df 93       	push	r29
    5460:	cf 93       	push	r28
    5462:	cd b7       	in	r28, 0x3d	; 61
    5464:	de b7       	in	r29, 0x3e	; 62
    5466:	62 97       	sbiw	r28, 0x12	; 18
    5468:	0f b6       	in	r0, 0x3f	; 63
    546a:	f8 94       	cli
    546c:	de bf       	out	0x3e, r29	; 62
    546e:	0f be       	out	0x3f, r0	; 63
    5470:	cd bf       	out	0x3d, r28	; 61
	int user=PROCESS_PASSWORD;
    5472:	88 e0       	ldi	r24, 0x08	; 8
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	9a 8b       	std	Y+18, r25	; 0x12
    5478:	89 8b       	std	Y+17, r24	; 0x11
	static int pass_pos=0;
	for(int i =0 ; i <=3; ++i)
    547a:	18 8a       	std	Y+16, r1	; 0x10
    547c:	1f 86       	std	Y+15, r1	; 0x0f
    547e:	a9 c0       	rjmp	.+338    	; 0x55d2 <COMPARE_PASSWORD+0x174>
	{
		HEEPROM_READ((compared_password_pos+4+i),&DEF_EEPROM[i]);
    5480:	9f 85       	ldd	r25, Y+15	; 0x0f
    5482:	80 91 b3 02 	lds	r24, 0x02B3
    5486:	89 0f       	add	r24, r25
    5488:	48 2f       	mov	r20, r24
    548a:	4c 5f       	subi	r20, 0xFC	; 252
    548c:	8f 85       	ldd	r24, Y+15	; 0x0f
    548e:	98 89       	ldd	r25, Y+16	; 0x10
    5490:	9c 01       	movw	r18, r24
    5492:	24 56       	subi	r18, 0x64	; 100
    5494:	3d 4f       	sbci	r19, 0xFD	; 253
    5496:	84 2f       	mov	r24, r20
    5498:	b9 01       	movw	r22, r18
    549a:	0e 94 f1 27 	call	0x4fe2	; 0x4fe2 <HEEPROM_READ>


		if(DEF_PASSWORD[i]==DEF_EEPROM[i])
    549e:	8f 85       	ldd	r24, Y+15	; 0x0f
    54a0:	98 89       	ldd	r25, Y+16	; 0x10
    54a2:	fc 01       	movw	r30, r24
    54a4:	e0 56       	subi	r30, 0x60	; 96
    54a6:	fd 4f       	sbci	r31, 0xFD	; 253
    54a8:	20 81       	ld	r18, Z
    54aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    54ac:	98 89       	ldd	r25, Y+16	; 0x10
    54ae:	fc 01       	movw	r30, r24
    54b0:	e4 56       	subi	r30, 0x64	; 100
    54b2:	fd 4f       	sbci	r31, 0xFD	; 253
    54b4:	80 81       	ld	r24, Z
    54b6:	28 17       	cp	r18, r24
    54b8:	09 f4       	brne	.+2      	; 0x54bc <COMPARE_PASSWORD+0x5e>
    54ba:	86 c0       	rjmp	.+268    	; 0x55c8 <COMPARE_PASSWORD+0x16a>
		{

		}
		else
		{
			pass_pos++;
    54bc:	80 91 af 02 	lds	r24, 0x02AF
    54c0:	90 91 b0 02 	lds	r25, 0x02B0
    54c4:	01 96       	adiw	r24, 0x01	; 1
    54c6:	90 93 b0 02 	sts	0x02B0, r25
    54ca:	80 93 af 02 	sts	0x02AF, r24
			user=ENTER_PASSWORD;
    54ce:	86 e0       	ldi	r24, 0x06	; 6
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	9a 8b       	std	Y+18, r25	; 0x12
    54d4:	89 8b       	std	Y+17, r24	; 0x11
			WRONG_PASS_FRAME(pass_pos);
    54d6:	80 91 af 02 	lds	r24, 0x02AF
    54da:	90 91 b0 02 	lds	r25, 0x02B0
    54de:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <WRONG_PASS_FRAME>
    54e2:	80 e0       	ldi	r24, 0x00	; 0
    54e4:	90 e0       	ldi	r25, 0x00	; 0
    54e6:	aa e7       	ldi	r26, 0x7A	; 122
    54e8:	b4 e4       	ldi	r27, 0x44	; 68
    54ea:	8b 87       	std	Y+11, r24	; 0x0b
    54ec:	9c 87       	std	Y+12, r25	; 0x0c
    54ee:	ad 87       	std	Y+13, r26	; 0x0d
    54f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    54f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    54f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    54f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    54fa:	20 e0       	ldi	r18, 0x00	; 0
    54fc:	30 e0       	ldi	r19, 0x00	; 0
    54fe:	4a ef       	ldi	r20, 0xFA	; 250
    5500:	54 e4       	ldi	r21, 0x44	; 68
    5502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5506:	dc 01       	movw	r26, r24
    5508:	cb 01       	movw	r24, r22
    550a:	8f 83       	std	Y+7, r24	; 0x07
    550c:	98 87       	std	Y+8, r25	; 0x08
    550e:	a9 87       	std	Y+9, r26	; 0x09
    5510:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5512:	6f 81       	ldd	r22, Y+7	; 0x07
    5514:	78 85       	ldd	r23, Y+8	; 0x08
    5516:	89 85       	ldd	r24, Y+9	; 0x09
    5518:	9a 85       	ldd	r25, Y+10	; 0x0a
    551a:	20 e0       	ldi	r18, 0x00	; 0
    551c:	30 e0       	ldi	r19, 0x00	; 0
    551e:	40 e8       	ldi	r20, 0x80	; 128
    5520:	5f e3       	ldi	r21, 0x3F	; 63
    5522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5526:	88 23       	and	r24, r24
    5528:	2c f4       	brge	.+10     	; 0x5534 <COMPARE_PASSWORD+0xd6>
		__ticks = 1;
    552a:	81 e0       	ldi	r24, 0x01	; 1
    552c:	90 e0       	ldi	r25, 0x00	; 0
    552e:	9e 83       	std	Y+6, r25	; 0x06
    5530:	8d 83       	std	Y+5, r24	; 0x05
    5532:	3f c0       	rjmp	.+126    	; 0x55b2 <COMPARE_PASSWORD+0x154>
	else if (__tmp > 65535)
    5534:	6f 81       	ldd	r22, Y+7	; 0x07
    5536:	78 85       	ldd	r23, Y+8	; 0x08
    5538:	89 85       	ldd	r24, Y+9	; 0x09
    553a:	9a 85       	ldd	r25, Y+10	; 0x0a
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	3f ef       	ldi	r19, 0xFF	; 255
    5540:	4f e7       	ldi	r20, 0x7F	; 127
    5542:	57 e4       	ldi	r21, 0x47	; 71
    5544:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5548:	18 16       	cp	r1, r24
    554a:	4c f5       	brge	.+82     	; 0x559e <COMPARE_PASSWORD+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    554c:	6b 85       	ldd	r22, Y+11	; 0x0b
    554e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5550:	8d 85       	ldd	r24, Y+13	; 0x0d
    5552:	9e 85       	ldd	r25, Y+14	; 0x0e
    5554:	20 e0       	ldi	r18, 0x00	; 0
    5556:	30 e0       	ldi	r19, 0x00	; 0
    5558:	40 e2       	ldi	r20, 0x20	; 32
    555a:	51 e4       	ldi	r21, 0x41	; 65
    555c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5560:	dc 01       	movw	r26, r24
    5562:	cb 01       	movw	r24, r22
    5564:	bc 01       	movw	r22, r24
    5566:	cd 01       	movw	r24, r26
    5568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    556c:	dc 01       	movw	r26, r24
    556e:	cb 01       	movw	r24, r22
    5570:	9e 83       	std	Y+6, r25	; 0x06
    5572:	8d 83       	std	Y+5, r24	; 0x05
    5574:	0f c0       	rjmp	.+30     	; 0x5594 <COMPARE_PASSWORD+0x136>
    5576:	88 ec       	ldi	r24, 0xC8	; 200
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	9c 83       	std	Y+4, r25	; 0x04
    557c:	8b 83       	std	Y+3, r24	; 0x03
    557e:	8b 81       	ldd	r24, Y+3	; 0x03
    5580:	9c 81       	ldd	r25, Y+4	; 0x04
    5582:	01 97       	sbiw	r24, 0x01	; 1
    5584:	f1 f7       	brne	.-4      	; 0x5582 <COMPARE_PASSWORD+0x124>
    5586:	9c 83       	std	Y+4, r25	; 0x04
    5588:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    558a:	8d 81       	ldd	r24, Y+5	; 0x05
    558c:	9e 81       	ldd	r25, Y+6	; 0x06
    558e:	01 97       	sbiw	r24, 0x01	; 1
    5590:	9e 83       	std	Y+6, r25	; 0x06
    5592:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5594:	8d 81       	ldd	r24, Y+5	; 0x05
    5596:	9e 81       	ldd	r25, Y+6	; 0x06
    5598:	00 97       	sbiw	r24, 0x00	; 0
    559a:	69 f7       	brne	.-38     	; 0x5576 <COMPARE_PASSWORD+0x118>
    559c:	20 c0       	rjmp	.+64     	; 0x55de <COMPARE_PASSWORD+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    559e:	6f 81       	ldd	r22, Y+7	; 0x07
    55a0:	78 85       	ldd	r23, Y+8	; 0x08
    55a2:	89 85       	ldd	r24, Y+9	; 0x09
    55a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    55a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55aa:	dc 01       	movw	r26, r24
    55ac:	cb 01       	movw	r24, r22
    55ae:	9e 83       	std	Y+6, r25	; 0x06
    55b0:	8d 83       	std	Y+5, r24	; 0x05
    55b2:	8d 81       	ldd	r24, Y+5	; 0x05
    55b4:	9e 81       	ldd	r25, Y+6	; 0x06
    55b6:	9a 83       	std	Y+2, r25	; 0x02
    55b8:	89 83       	std	Y+1, r24	; 0x01
    55ba:	89 81       	ldd	r24, Y+1	; 0x01
    55bc:	9a 81       	ldd	r25, Y+2	; 0x02
    55be:	01 97       	sbiw	r24, 0x01	; 1
    55c0:	f1 f7       	brne	.-4      	; 0x55be <COMPARE_PASSWORD+0x160>
    55c2:	9a 83       	std	Y+2, r25	; 0x02
    55c4:	89 83       	std	Y+1, r24	; 0x01
    55c6:	0b c0       	rjmp	.+22     	; 0x55de <COMPARE_PASSWORD+0x180>
}
u8 COMPARE_PASSWORD(void)
{
	int user=PROCESS_PASSWORD;
	static int pass_pos=0;
	for(int i =0 ; i <=3; ++i)
    55c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    55ca:	98 89       	ldd	r25, Y+16	; 0x10
    55cc:	01 96       	adiw	r24, 0x01	; 1
    55ce:	98 8b       	std	Y+16, r25	; 0x10
    55d0:	8f 87       	std	Y+15, r24	; 0x0f
    55d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    55d4:	98 89       	ldd	r25, Y+16	; 0x10
    55d6:	84 30       	cpi	r24, 0x04	; 4
    55d8:	91 05       	cpc	r25, r1
    55da:	0c f4       	brge	.+2      	; 0x55de <COMPARE_PASSWORD+0x180>
    55dc:	51 cf       	rjmp	.-350    	; 0x5480 <COMPARE_PASSWORD+0x22>
			WRONG_PASS_FRAME(pass_pos);
			_delay_ms(1000);
			break;
		}
	}
	if(user==PROCESS_PASSWORD)
    55de:	89 89       	ldd	r24, Y+17	; 0x11
    55e0:	9a 89       	ldd	r25, Y+18	; 0x12
    55e2:	88 30       	cpi	r24, 0x08	; 8
    55e4:	91 05       	cpc	r25, r1
    55e6:	69 f4       	brne	.+26     	; 0x5602 <COMPARE_PASSWORD+0x1a4>
	{
		HLCD_Send_String_4bit((u8 *)"SYS OPEND");
    55e8:	83 e6       	ldi	r24, 0x63	; 99
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
		pass_pos=0;
    55f0:	10 92 b0 02 	sts	0x02B0, r1
    55f4:	10 92 af 02 	sts	0x02AF, r1
		user=SYS_OPENED;
    55f8:	87 e0       	ldi	r24, 0x07	; 7
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	9a 8b       	std	Y+18, r25	; 0x12
    55fe:	89 8b       	std	Y+17, r24	; 0x11
    5600:	40 c0       	rjmp	.+128    	; 0x5682 <COMPARE_PASSWORD+0x224>
	}
	else
	{
		if(pass_pos==3)
    5602:	80 91 af 02 	lds	r24, 0x02AF
    5606:	90 91 b0 02 	lds	r25, 0x02B0
    560a:	83 30       	cpi	r24, 0x03	; 3
    560c:	91 05       	cpc	r25, r1
    560e:	19 f5       	brne	.+70     	; 0x5656 <COMPARE_PASSWORD+0x1f8>
		{
			entry=0;
    5610:	10 92 a6 02 	sts	0x02A6, r1
    5614:	10 92 a5 02 	sts	0x02A5, r1
			memset(DEF_USER,0,4);
    5618:	88 e9       	ldi	r24, 0x98	; 152
    561a:	92 e0       	ldi	r25, 0x02	; 2
    561c:	60 e0       	ldi	r22, 0x00	; 0
    561e:	70 e0       	ldi	r23, 0x00	; 0
    5620:	44 e0       	ldi	r20, 0x04	; 4
    5622:	50 e0       	ldi	r21, 0x00	; 0
    5624:	0e 94 40 30 	call	0x6080	; 0x6080 <memset>
			memset(DEF_PASSWORD,0,4);
    5628:	80 ea       	ldi	r24, 0xA0	; 160
    562a:	92 e0       	ldi	r25, 0x02	; 2
    562c:	60 e0       	ldi	r22, 0x00	; 0
    562e:	70 e0       	ldi	r23, 0x00	; 0
    5630:	44 e0       	ldi	r20, 0x04	; 4
    5632:	50 e0       	ldi	r21, 0x00	; 0
    5634:	0e 94 40 30 	call	0x6080	; 0x6080 <memset>
			USER_POS_=0;
    5638:	10 92 94 02 	sts	0x0294, r1
			PASS_POS_=0;
    563c:	10 92 96 02 	sts	0x0296, r1
			user=ENTER_USER;
    5640:	84 e0       	ldi	r24, 0x04	; 4
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	9a 8b       	std	Y+18, r25	; 0x12
    5646:	89 8b       	std	Y+17, r24	; 0x11
			pass_pos=0;
    5648:	10 92 b0 02 	sts	0x02B0, r1
    564c:	10 92 af 02 	sts	0x02AF, r1
			IDLE_FRAME();
    5650:	0e 94 4b 2b 	call	0x5696	; 0x5696 <IDLE_FRAME>
    5654:	16 c0       	rjmp	.+44     	; 0x5682 <COMPARE_PASSWORD+0x224>
		}
		else if((pass_pos!=0)&&(pass_pos!=3))
    5656:	80 91 af 02 	lds	r24, 0x02AF
    565a:	90 91 b0 02 	lds	r25, 0x02B0
    565e:	00 97       	sbiw	r24, 0x00	; 0
    5660:	81 f0       	breq	.+32     	; 0x5682 <COMPARE_PASSWORD+0x224>
    5662:	80 91 af 02 	lds	r24, 0x02AF
    5666:	90 91 b0 02 	lds	r25, 0x02B0
    566a:	83 30       	cpi	r24, 0x03	; 3
    566c:	91 05       	cpc	r25, r1
    566e:	49 f0       	breq	.+18     	; 0x5682 <COMPARE_PASSWORD+0x224>
		{
			HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    5670:	81 e0       	ldi	r24, 0x01	; 1
    5672:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
			ENTER_PASS_FRAME();
    5676:	0e 94 8c 2b 	call	0x5718	; 0x5718 <ENTER_PASS_FRAME>
			user=ENTER_PASSWORD;
    567a:	86 e0       	ldi	r24, 0x06	; 6
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	9a 8b       	std	Y+18, r25	; 0x12
    5680:	89 8b       	std	Y+17, r24	; 0x11
		}
		else
		{}
	}
	return user;
    5682:	89 89       	ldd	r24, Y+17	; 0x11
}
    5684:	62 96       	adiw	r28, 0x12	; 18
    5686:	0f b6       	in	r0, 0x3f	; 63
    5688:	f8 94       	cli
    568a:	de bf       	out	0x3e, r29	; 62
    568c:	0f be       	out	0x3f, r0	; 63
    568e:	cd bf       	out	0x3d, r28	; 61
    5690:	cf 91       	pop	r28
    5692:	df 91       	pop	r29
    5694:	08 95       	ret

00005696 <IDLE_FRAME>:
/*****************LCD_FRAMES****************/

void IDLE_FRAME(void)
{
    5696:	df 93       	push	r29
    5698:	cf 93       	push	r28
    569a:	cd b7       	in	r28, 0x3d	; 61
    569c:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  1- Open SmartSystem
   2- Change Password
   3- Add User
	 */
	HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    569e:	81 e0       	ldi	r24, 0x01	; 1
    56a0:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_String_Position_4bit((u8 *)"2->Open Sys",LCD_GO_ROW2,0x00);
    56a4:	8d e6       	ldi	r24, 0x6D	; 109
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	60 ec       	ldi	r22, 0xC0	; 192
    56aa:	40 e0       	ldi	r20, 0x00	; 0
    56ac:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
	HLCD_Send_String_Position_4bit((u8 *)"3->..",LCD_GO_ROW2,0x0C);
    56b0:	89 e7       	ldi	r24, 0x79	; 121
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	60 ec       	ldi	r22, 0xC0	; 192
    56b6:	4c e0       	ldi	r20, 0x0C	; 12
    56b8:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
	HLCD_Send_String_Position_4bit((u8 *)"1->Change Pass",LCD_GO_ROW1,0x00);
    56bc:	8f e7       	ldi	r24, 0x7F	; 127
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	60 e8       	ldi	r22, 0x80	; 128
    56c2:	40 e0       	ldi	r20, 0x00	; 0
    56c4:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
}
    56c8:	cf 91       	pop	r28
    56ca:	df 91       	pop	r29
    56cc:	08 95       	ret

000056ce <SET_DEFAULT_USER_PASS>:


/*****************LCD_FRAMES****************/

void SET_DEFAULT_USER_PASS(void)
{
    56ce:	df 93       	push	r29
    56d0:	cf 93       	push	r28
    56d2:	cd b7       	in	r28, 0x3d	; 61
    56d4:	de b7       	in	r29, 0x3e	; 62
	HEEPROM_WRITE_STRING((u8 *)"1234",4,0x00);
    56d6:	8e e8       	ldi	r24, 0x8E	; 142
    56d8:	90 e0       	ldi	r25, 0x00	; 0
    56da:	64 e0       	ldi	r22, 0x04	; 4
    56dc:	40 e0       	ldi	r20, 0x00	; 0
    56de:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <HEEPROM_WRITE_STRING>
	HEEPROM_WRITE_STRING((u8 *)"1234",4,0x04);
    56e2:	8e e8       	ldi	r24, 0x8E	; 142
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	64 e0       	ldi	r22, 0x04	; 4
    56e8:	44 e0       	ldi	r20, 0x04	; 4
    56ea:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <HEEPROM_WRITE_STRING>
}
    56ee:	cf 91       	pop	r28
    56f0:	df 91       	pop	r29
    56f2:	08 95       	ret

000056f4 <ENTER_USER_FRAME>:
/*********************************************/

void ENTER_USER_FRAME(void)
{
    56f4:	df 93       	push	r29
    56f6:	cf 93       	push	r28
    56f8:	cd b7       	in	r28, 0x3d	; 61
    56fa:	de b7       	in	r29, 0x3e	; 62
	HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_String_4bit((u8*)"Enter User");
    5702:	83 e9       	ldi	r24, 0x93	; 147
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
	HLCD_Send_CursorPosition_4bit(LCD_GO_ROW2,0x00);
    570a:	80 ec       	ldi	r24, 0xC0	; 192
    570c:	60 e0       	ldi	r22, 0x00	; 0
    570e:	0e 94 54 21 	call	0x42a8	; 0x42a8 <HLCD_Send_CursorPosition_4bit>
}
    5712:	cf 91       	pop	r28
    5714:	df 91       	pop	r29
    5716:	08 95       	ret

00005718 <ENTER_PASS_FRAME>:
/*********************************************/
void ENTER_PASS_FRAME(void)
{
    5718:	df 93       	push	r29
    571a:	cf 93       	push	r28
    571c:	cd b7       	in	r28, 0x3d	; 61
    571e:	de b7       	in	r29, 0x3e	; 62
	HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    5720:	81 e0       	ldi	r24, 0x01	; 1
    5722:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_String_4bit((u8*)"Enter PASSWORD");
    5726:	8e e9       	ldi	r24, 0x9E	; 158
    5728:	90 e0       	ldi	r25, 0x00	; 0
    572a:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
	HLCD_Send_CursorPosition_4bit(LCD_GO_ROW2,0x00);
    572e:	80 ec       	ldi	r24, 0xC0	; 192
    5730:	60 e0       	ldi	r22, 0x00	; 0
    5732:	0e 94 54 21 	call	0x42a8	; 0x42a8 <HLCD_Send_CursorPosition_4bit>
}
    5736:	cf 91       	pop	r28
    5738:	df 91       	pop	r29
    573a:	08 95       	ret

0000573c <CHANGE_PASSWORD_FRAME>:
/*********************************************/
void CHANGE_PASSWORD_FRAME(void)
{
    573c:	df 93       	push	r29
    573e:	cf 93       	push	r28
    5740:	cd b7       	in	r28, 0x3d	; 61
    5742:	de b7       	in	r29, 0x3e	; 62
    5744:	2e 97       	sbiw	r28, 0x0e	; 14
    5746:	0f b6       	in	r0, 0x3f	; 63
    5748:	f8 94       	cli
    574a:	de bf       	out	0x3e, r29	; 62
    574c:	0f be       	out	0x3f, r0	; 63
    574e:	cd bf       	out	0x3d, r28	; 61
	HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    5750:	81 e0       	ldi	r24, 0x01	; 1
    5752:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_String_Position_4bit((u8 *)"ENTER USER YOU",LCD_GO_ROW1,0x01);
    5756:	8d ea       	ldi	r24, 0xAD	; 173
    5758:	90 e0       	ldi	r25, 0x00	; 0
    575a:	60 e8       	ldi	r22, 0x80	; 128
    575c:	41 e0       	ldi	r20, 0x01	; 1
    575e:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
	HLCD_Send_String_Position_4bit((u8 *)"WANT TO CHANGE",LCD_GO_ROW2,0x01);
    5762:	8c eb       	ldi	r24, 0xBC	; 188
    5764:	90 e0       	ldi	r25, 0x00	; 0
    5766:	60 ec       	ldi	r22, 0xC0	; 192
    5768:	41 e0       	ldi	r20, 0x01	; 1
    576a:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
    576e:	80 e0       	ldi	r24, 0x00	; 0
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	aa e7       	ldi	r26, 0x7A	; 122
    5774:	b4 e4       	ldi	r27, 0x44	; 68
    5776:	8b 87       	std	Y+11, r24	; 0x0b
    5778:	9c 87       	std	Y+12, r25	; 0x0c
    577a:	ad 87       	std	Y+13, r26	; 0x0d
    577c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    577e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5780:	7c 85       	ldd	r23, Y+12	; 0x0c
    5782:	8d 85       	ldd	r24, Y+13	; 0x0d
    5784:	9e 85       	ldd	r25, Y+14	; 0x0e
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	30 e0       	ldi	r19, 0x00	; 0
    578a:	4a ef       	ldi	r20, 0xFA	; 250
    578c:	54 e4       	ldi	r21, 0x44	; 68
    578e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5792:	dc 01       	movw	r26, r24
    5794:	cb 01       	movw	r24, r22
    5796:	8f 83       	std	Y+7, r24	; 0x07
    5798:	98 87       	std	Y+8, r25	; 0x08
    579a:	a9 87       	std	Y+9, r26	; 0x09
    579c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    579e:	6f 81       	ldd	r22, Y+7	; 0x07
    57a0:	78 85       	ldd	r23, Y+8	; 0x08
    57a2:	89 85       	ldd	r24, Y+9	; 0x09
    57a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	40 e8       	ldi	r20, 0x80	; 128
    57ac:	5f e3       	ldi	r21, 0x3F	; 63
    57ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57b2:	88 23       	and	r24, r24
    57b4:	2c f4       	brge	.+10     	; 0x57c0 <CHANGE_PASSWORD_FRAME+0x84>
		__ticks = 1;
    57b6:	81 e0       	ldi	r24, 0x01	; 1
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	9e 83       	std	Y+6, r25	; 0x06
    57bc:	8d 83       	std	Y+5, r24	; 0x05
    57be:	3f c0       	rjmp	.+126    	; 0x583e <CHANGE_PASSWORD_FRAME+0x102>
	else if (__tmp > 65535)
    57c0:	6f 81       	ldd	r22, Y+7	; 0x07
    57c2:	78 85       	ldd	r23, Y+8	; 0x08
    57c4:	89 85       	ldd	r24, Y+9	; 0x09
    57c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57c8:	20 e0       	ldi	r18, 0x00	; 0
    57ca:	3f ef       	ldi	r19, 0xFF	; 255
    57cc:	4f e7       	ldi	r20, 0x7F	; 127
    57ce:	57 e4       	ldi	r21, 0x47	; 71
    57d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57d4:	18 16       	cp	r1, r24
    57d6:	4c f5       	brge	.+82     	; 0x582a <CHANGE_PASSWORD_FRAME+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    57da:	7c 85       	ldd	r23, Y+12	; 0x0c
    57dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    57de:	9e 85       	ldd	r25, Y+14	; 0x0e
    57e0:	20 e0       	ldi	r18, 0x00	; 0
    57e2:	30 e0       	ldi	r19, 0x00	; 0
    57e4:	40 e2       	ldi	r20, 0x20	; 32
    57e6:	51 e4       	ldi	r21, 0x41	; 65
    57e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57ec:	dc 01       	movw	r26, r24
    57ee:	cb 01       	movw	r24, r22
    57f0:	bc 01       	movw	r22, r24
    57f2:	cd 01       	movw	r24, r26
    57f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57f8:	dc 01       	movw	r26, r24
    57fa:	cb 01       	movw	r24, r22
    57fc:	9e 83       	std	Y+6, r25	; 0x06
    57fe:	8d 83       	std	Y+5, r24	; 0x05
    5800:	0f c0       	rjmp	.+30     	; 0x5820 <CHANGE_PASSWORD_FRAME+0xe4>
    5802:	88 ec       	ldi	r24, 0xC8	; 200
    5804:	90 e0       	ldi	r25, 0x00	; 0
    5806:	9c 83       	std	Y+4, r25	; 0x04
    5808:	8b 83       	std	Y+3, r24	; 0x03
    580a:	8b 81       	ldd	r24, Y+3	; 0x03
    580c:	9c 81       	ldd	r25, Y+4	; 0x04
    580e:	01 97       	sbiw	r24, 0x01	; 1
    5810:	f1 f7       	brne	.-4      	; 0x580e <CHANGE_PASSWORD_FRAME+0xd2>
    5812:	9c 83       	std	Y+4, r25	; 0x04
    5814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5816:	8d 81       	ldd	r24, Y+5	; 0x05
    5818:	9e 81       	ldd	r25, Y+6	; 0x06
    581a:	01 97       	sbiw	r24, 0x01	; 1
    581c:	9e 83       	std	Y+6, r25	; 0x06
    581e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5820:	8d 81       	ldd	r24, Y+5	; 0x05
    5822:	9e 81       	ldd	r25, Y+6	; 0x06
    5824:	00 97       	sbiw	r24, 0x00	; 0
    5826:	69 f7       	brne	.-38     	; 0x5802 <CHANGE_PASSWORD_FRAME+0xc6>
    5828:	14 c0       	rjmp	.+40     	; 0x5852 <CHANGE_PASSWORD_FRAME+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    582a:	6f 81       	ldd	r22, Y+7	; 0x07
    582c:	78 85       	ldd	r23, Y+8	; 0x08
    582e:	89 85       	ldd	r24, Y+9	; 0x09
    5830:	9a 85       	ldd	r25, Y+10	; 0x0a
    5832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5836:	dc 01       	movw	r26, r24
    5838:	cb 01       	movw	r24, r22
    583a:	9e 83       	std	Y+6, r25	; 0x06
    583c:	8d 83       	std	Y+5, r24	; 0x05
    583e:	8d 81       	ldd	r24, Y+5	; 0x05
    5840:	9e 81       	ldd	r25, Y+6	; 0x06
    5842:	9a 83       	std	Y+2, r25	; 0x02
    5844:	89 83       	std	Y+1, r24	; 0x01
    5846:	89 81       	ldd	r24, Y+1	; 0x01
    5848:	9a 81       	ldd	r25, Y+2	; 0x02
    584a:	01 97       	sbiw	r24, 0x01	; 1
    584c:	f1 f7       	brne	.-4      	; 0x584a <CHANGE_PASSWORD_FRAME+0x10e>
    584e:	9a 83       	std	Y+2, r25	; 0x02
    5850:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    5852:	81 e0       	ldi	r24, 0x01	; 1
    5854:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_String_Position_4bit((u8 *)"ENTER USER ",LCD_GO_ROW1,0x00);
    5858:	8b ec       	ldi	r24, 0xCB	; 203
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	60 e8       	ldi	r22, 0x80	; 128
    585e:	40 e0       	ldi	r20, 0x00	; 0
    5860:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
	HLCD_Send_CursorPosition_4bit(LCD_GO_ROW2,0x00);
    5864:	80 ec       	ldi	r24, 0xC0	; 192
    5866:	60 e0       	ldi	r22, 0x00	; 0
    5868:	0e 94 54 21 	call	0x42a8	; 0x42a8 <HLCD_Send_CursorPosition_4bit>


}
    586c:	2e 96       	adiw	r28, 0x0e	; 14
    586e:	0f b6       	in	r0, 0x3f	; 63
    5870:	f8 94       	cli
    5872:	de bf       	out	0x3e, r29	; 62
    5874:	0f be       	out	0x3f, r0	; 63
    5876:	cd bf       	out	0x3d, r28	; 61
    5878:	cf 91       	pop	r28
    587a:	df 91       	pop	r29
    587c:	08 95       	ret

0000587e <ADD_USER_FRAME>:
/************SECURITY SYS API's**************/
void ADD_USER_FRAME(void)
{
    587e:	df 93       	push	r29
    5880:	cf 93       	push	r28
    5882:	cd b7       	in	r28, 0x3d	; 61
    5884:	de b7       	in	r29, 0x3e	; 62
	HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    5886:	81 e0       	ldi	r24, 0x01	; 1
    5888:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_String_Position_4bit((u8 *)"ENTER USER ",LCD_GO_ROW1,0x03);
    588c:	8b ec       	ldi	r24, 0xCB	; 203
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	60 e8       	ldi	r22, 0x80	; 128
    5892:	43 e0       	ldi	r20, 0x03	; 3
    5894:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
	HLCD_Send_CursorPosition_4bit(LCD_GO_ROW2,0x00);
    5898:	80 ec       	ldi	r24, 0xC0	; 192
    589a:	60 e0       	ldi	r22, 0x00	; 0
    589c:	0e 94 54 21 	call	0x42a8	; 0x42a8 <HLCD_Send_CursorPosition_4bit>
}
    58a0:	cf 91       	pop	r28
    58a2:	df 91       	pop	r29
    58a4:	08 95       	ret

000058a6 <WRONG_PASS_FRAME>:


void WRONG_PASS_FRAME(u8 pass)
{
    58a6:	df 93       	push	r29
    58a8:	cf 93       	push	r28
    58aa:	0f 92       	push	r0
    58ac:	cd b7       	in	r28, 0x3d	; 61
    58ae:	de b7       	in	r29, 0x3e	; 62
    58b0:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_4bit((u8 *)"WRONG PASS");
    58b2:	87 ed       	ldi	r24, 0xD7	; 215
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
	HLCD_Send_String_Position_4bit((u8 *)"For ->",LCD_GO_ROW2,0x00);
    58ba:	82 ee       	ldi	r24, 0xE2	; 226
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	60 ec       	ldi	r22, 0xC0	; 192
    58c0:	40 e0       	ldi	r20, 0x00	; 0
    58c2:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
	HLCD_Send_char_Position_4bit(pass+'0',LCD_GO_ROW2,0x8);
    58c6:	89 81       	ldd	r24, Y+1	; 0x01
    58c8:	80 5d       	subi	r24, 0xD0	; 208
    58ca:	60 ec       	ldi	r22, 0xC0	; 192
    58cc:	48 e0       	ldi	r20, 0x08	; 8
    58ce:	0e 94 a5 21 	call	0x434a	; 0x434a <HLCD_Send_char_Position_4bit>
	HLCD_Send_String_Position_4bit((u8 *)"/3 Times",LCD_GO_ROW2,0x0A);
    58d2:	89 ee       	ldi	r24, 0xE9	; 233
    58d4:	90 e0       	ldi	r25, 0x00	; 0
    58d6:	60 ec       	ldi	r22, 0xC0	; 192
    58d8:	4a e0       	ldi	r20, 0x0A	; 10
    58da:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
}
    58de:	0f 90       	pop	r0
    58e0:	cf 91       	pop	r28
    58e2:	df 91       	pop	r29
    58e4:	08 95       	ret

000058e6 <ENTER_NEW_PASS_FRAME>:
/*********************************************************************/
void ENTER_NEW_PASS_FRAME(void)
{
    58e6:	df 93       	push	r29
    58e8:	cf 93       	push	r28
    58ea:	cd b7       	in	r28, 0x3d	; 61
    58ec:	de b7       	in	r29, 0x3e	; 62
	HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    58ee:	81 e0       	ldi	r24, 0x01	; 1
    58f0:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
	HLCD_Send_String_4bit((u8*)"ENTER NEW PASS");
    58f4:	82 ef       	ldi	r24, 0xF2	; 242
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
	HLCD_Send_CursorPosition_4bit(LCD_GO_ROW2,0x00);
    58fc:	80 ec       	ldi	r24, 0xC0	; 192
    58fe:	60 e0       	ldi	r22, 0x00	; 0
    5900:	0e 94 54 21 	call	0x42a8	; 0x42a8 <HLCD_Send_CursorPosition_4bit>
}
    5904:	cf 91       	pop	r28
    5906:	df 91       	pop	r29
    5908:	08 95       	ret

0000590a <WRONG_USER_FRAME>:
/*********************************************************************/
void WRONG_USER_FRAME(u8 pass)
{
    590a:	df 93       	push	r29
    590c:	cf 93       	push	r28
    590e:	0f 92       	push	r0
    5910:	cd b7       	in	r28, 0x3d	; 61
    5912:	de b7       	in	r29, 0x3e	; 62
    5914:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_4bit((u8 *)"WRONG USER");
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	91 e0       	ldi	r25, 0x01	; 1
    591a:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
	HLCD_Send_String_Position_4bit((u8 *)"For ->",LCD_GO_ROW2,0x00);
    591e:	82 ee       	ldi	r24, 0xE2	; 226
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	60 ec       	ldi	r22, 0xC0	; 192
    5924:	40 e0       	ldi	r20, 0x00	; 0
    5926:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
	HLCD_Send_char_Position_4bit(pass+'0',LCD_GO_ROW2,0x8);
    592a:	89 81       	ldd	r24, Y+1	; 0x01
    592c:	80 5d       	subi	r24, 0xD0	; 208
    592e:	60 ec       	ldi	r22, 0xC0	; 192
    5930:	48 e0       	ldi	r20, 0x08	; 8
    5932:	0e 94 a5 21 	call	0x434a	; 0x434a <HLCD_Send_char_Position_4bit>
	HLCD_Send_String_Position_4bit((u8 *)"/3 Times",LCD_GO_ROW2,0x0A);
    5936:	89 ee       	ldi	r24, 0xE9	; 233
    5938:	90 e0       	ldi	r25, 0x00	; 0
    593a:	60 ec       	ldi	r22, 0xC0	; 192
    593c:	4a e0       	ldi	r20, 0x0A	; 10
    593e:	0e 94 ed 20 	call	0x41da	; 0x41da <HLCD_Send_String_Position_4bit>
}
    5942:	0f 90       	pop	r0
    5944:	cf 91       	pop	r28
    5946:	df 91       	pop	r29
    5948:	08 95       	ret

0000594a <GET_ACCOUNT>:
/************SECURITY SYS API's**************/
u8 GET_ACCOUNT(u8 USER_OR_PASS)
{
    594a:	df 93       	push	r29
    594c:	cf 93       	push	r28
    594e:	00 d0       	rcall	.+0      	; 0x5950 <GET_ACCOUNT+0x6>
    5950:	00 d0       	rcall	.+0      	; 0x5952 <GET_ACCOUNT+0x8>
    5952:	cd b7       	in	r28, 0x3d	; 61
    5954:	de b7       	in	r29, 0x3e	; 62
    5956:	8a 83       	std	Y+2, r24	; 0x02
	SIGN_STATE_T pass_flag=ENTER_USER;
    5958:	84 e0       	ldi	r24, 0x04	; 4
    595a:	89 83       	std	Y+1, r24	; 0x01
	switch(USER_OR_PASS)
    595c:	8a 81       	ldd	r24, Y+2	; 0x02
    595e:	28 2f       	mov	r18, r24
    5960:	30 e0       	ldi	r19, 0x00	; 0
    5962:	3c 83       	std	Y+4, r19	; 0x04
    5964:	2b 83       	std	Y+3, r18	; 0x03
    5966:	8b 81       	ldd	r24, Y+3	; 0x03
    5968:	9c 81       	ldd	r25, Y+4	; 0x04
    596a:	81 30       	cpi	r24, 0x01	; 1
    596c:	91 05       	cpc	r25, r1
    596e:	31 f0       	breq	.+12     	; 0x597c <GET_ACCOUNT+0x32>
    5970:	2b 81       	ldd	r18, Y+3	; 0x03
    5972:	3c 81       	ldd	r19, Y+4	; 0x04
    5974:	22 30       	cpi	r18, 0x02	; 2
    5976:	31 05       	cpc	r19, r1
    5978:	11 f1       	breq	.+68     	; 0x59be <GET_ACCOUNT+0x74>
    597a:	45 c0       	rjmp	.+138    	; 0x5a06 <GET_ACCOUNT+0xbc>
	{
	case USER :
		DEF_USER[USER_POS_]=kp_val-'0';
    597c:	80 91 94 02 	lds	r24, 0x0294
    5980:	28 2f       	mov	r18, r24
    5982:	30 e0       	ldi	r19, 0x00	; 0
    5984:	80 91 93 02 	lds	r24, 0x0293
    5988:	80 53       	subi	r24, 0x30	; 48
    598a:	f9 01       	movw	r30, r18
    598c:	e8 56       	subi	r30, 0x68	; 104
    598e:	fd 4f       	sbci	r31, 0xFD	; 253
    5990:	80 83       	st	Z, r24
		HLCD_Send_char_4bit(kp_val);
    5992:	80 91 93 02 	lds	r24, 0x0293
    5996:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <HLCD_Send_char_4bit>
		USER_POS_++;
    599a:	80 91 94 02 	lds	r24, 0x0294
    599e:	8f 5f       	subi	r24, 0xFF	; 255
    59a0:	80 93 94 02 	sts	0x0294, r24
		if(USER_POS_==4)
    59a4:	80 91 94 02 	lds	r24, 0x0294
    59a8:	84 30       	cpi	r24, 0x04	; 4
    59aa:	69 f5       	brne	.+90     	; 0x5a06 <GET_ACCOUNT+0xbc>
		{
			USER_POS_=0;
    59ac:	10 92 94 02 	sts	0x0294, r1
			HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    59b0:	81 e0       	ldi	r24, 0x01	; 1
    59b2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
			pass_flag=COMPARE_USER();
    59b6:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <COMPARE_USER>
    59ba:	89 83       	std	Y+1, r24	; 0x01
    59bc:	24 c0       	rjmp	.+72     	; 0x5a06 <GET_ACCOUNT+0xbc>
		}
		break;
	case PASS:
		DEF_PASSWORD[PASS_POS_]=kp_val-'0';
    59be:	80 91 96 02 	lds	r24, 0x0296
    59c2:	28 2f       	mov	r18, r24
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    59c6:	80 91 93 02 	lds	r24, 0x0293
    59ca:	80 53       	subi	r24, 0x30	; 48
    59cc:	f9 01       	movw	r30, r18
    59ce:	e0 56       	subi	r30, 0x60	; 96
    59d0:	fd 4f       	sbci	r31, 0xFD	; 253
    59d2:	80 83       	st	Z, r24
		HLCD_Send_char_4bit(kp_val);
    59d4:	80 91 93 02 	lds	r24, 0x0293
    59d8:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <HLCD_Send_char_4bit>
		PASS_POS_++;
    59dc:	80 91 96 02 	lds	r24, 0x0296
    59e0:	8f 5f       	subi	r24, 0xFF	; 255
    59e2:	80 93 96 02 	sts	0x0296, r24
		pass_flag=ENTER_PASSWORD;
    59e6:	86 e0       	ldi	r24, 0x06	; 6
    59e8:	89 83       	std	Y+1, r24	; 0x01
		if(PASS_POS_==4)
    59ea:	80 91 96 02 	lds	r24, 0x0296
    59ee:	84 30       	cpi	r24, 0x04	; 4
    59f0:	51 f4       	brne	.+20     	; 0x5a06 <GET_ACCOUNT+0xbc>
		{
			pass_flag=SYS_OPENED;
    59f2:	87 e0       	ldi	r24, 0x07	; 7
    59f4:	89 83       	std	Y+1, r24	; 0x01
			PASS_POS_=0;
    59f6:	10 92 96 02 	sts	0x0296, r1
			HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    59fa:	81 e0       	ldi	r24, 0x01	; 1
    59fc:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
			pass_flag=COMPARE_PASSWORD();
    5a00:	0e 94 2f 2a 	call	0x545e	; 0x545e <COMPARE_PASSWORD>
    5a04:	89 83       	std	Y+1, r24	; 0x01
		}
		break;

	default : break;
	}
	return pass_flag;
    5a06:	89 81       	ldd	r24, Y+1	; 0x01
}
    5a08:	0f 90       	pop	r0
    5a0a:	0f 90       	pop	r0
    5a0c:	0f 90       	pop	r0
    5a0e:	0f 90       	pop	r0
    5a10:	cf 91       	pop	r28
    5a12:	df 91       	pop	r29
    5a14:	08 95       	ret

00005a16 <ACCOUNT_CHECK>:

/******************************************************/
void ACCOUNT_CHECK(void)
{
    5a16:	df 93       	push	r29
    5a18:	cf 93       	push	r28
    5a1a:	cd b7       	in	r28, 0x3d	; 61
    5a1c:	de b7       	in	r29, 0x3e	; 62




}
    5a1e:	cf 91       	pop	r28
    5a20:	df 91       	pop	r29
    5a22:	08 95       	ret

00005a24 <CHANGE_PASSWORD>:
/******************************************************/
/***
 * @brief this FUNCTION is used to change password of a user
 */
u8 CHANGE_PASSWORD(void)
{
    5a24:	df 93       	push	r29
    5a26:	cf 93       	push	r28
    5a28:	cd b7       	in	r28, 0x3d	; 61
    5a2a:	de b7       	in	r29, 0x3e	; 62
    5a2c:	2f 97       	sbiw	r28, 0x0f	; 15
    5a2e:	0f b6       	in	r0, 0x3f	; 63
    5a30:	f8 94       	cli
    5a32:	de bf       	out	0x3e, r29	; 62
    5a34:	0f be       	out	0x3f, r0	; 63
    5a36:	cd bf       	out	0x3d, r28	; 61
	u8 STATUS=SYS_OPENED;
    5a38:	87 e0       	ldi	r24, 0x07	; 7
    5a3a:	8f 87       	std	Y+15, r24	; 0x0f
	HLCD_Send_char_4bit(kp_val);
    5a3c:	80 91 93 02 	lds	r24, 0x0293
    5a40:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <HLCD_Send_char_4bit>
	DEF_PASSWORD[PASS_POS]=kp_val;
    5a44:	80 91 95 02 	lds	r24, 0x0295
    5a48:	88 2f       	mov	r24, r24
    5a4a:	90 e0       	ldi	r25, 0x00	; 0
    5a4c:	20 91 93 02 	lds	r18, 0x0293
    5a50:	fc 01       	movw	r30, r24
    5a52:	e0 56       	subi	r30, 0x60	; 96
    5a54:	fd 4f       	sbci	r31, 0xFD	; 253
    5a56:	20 83       	st	Z, r18
	PASS_POS++;
    5a58:	80 91 95 02 	lds	r24, 0x0295
    5a5c:	8f 5f       	subi	r24, 0xFF	; 255
    5a5e:	80 93 95 02 	sts	0x0295, r24
	if(PASS_POS==4)
    5a62:	80 91 95 02 	lds	r24, 0x0295
    5a66:	84 30       	cpi	r24, 0x04	; 4
    5a68:	09 f0       	breq	.+2      	; 0x5a6c <CHANGE_PASSWORD+0x48>
    5a6a:	87 c0       	rjmp	.+270    	; 0x5b7a <CHANGE_PASSWORD+0x156>
	{
		HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    5a6c:	81 e0       	ldi	r24, 0x01	; 1
    5a6e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
		HEEPROM_WRITE_STRING(&DEF_PASSWORD,4,compared_password_pos+0x04);
    5a72:	80 91 b3 02 	lds	r24, 0x02B3
    5a76:	28 2f       	mov	r18, r24
    5a78:	2c 5f       	subi	r18, 0xFC	; 252
    5a7a:	80 ea       	ldi	r24, 0xA0	; 160
    5a7c:	92 e0       	ldi	r25, 0x02	; 2
    5a7e:	64 e0       	ldi	r22, 0x04	; 4
    5a80:	42 2f       	mov	r20, r18
    5a82:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <HEEPROM_WRITE_STRING>
		HLCD_Send_String_4bit((u8 *)"New Pass Has Set");
    5a86:	8c e0       	ldi	r24, 0x0C	; 12
    5a88:	91 e0       	ldi	r25, 0x01	; 1
    5a8a:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
    5a8e:	80 e0       	ldi	r24, 0x00	; 0
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	aa e7       	ldi	r26, 0x7A	; 122
    5a94:	b4 e4       	ldi	r27, 0x44	; 68
    5a96:	8b 87       	std	Y+11, r24	; 0x0b
    5a98:	9c 87       	std	Y+12, r25	; 0x0c
    5a9a:	ad 87       	std	Y+13, r26	; 0x0d
    5a9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5aa6:	20 e0       	ldi	r18, 0x00	; 0
    5aa8:	30 e0       	ldi	r19, 0x00	; 0
    5aaa:	4a ef       	ldi	r20, 0xFA	; 250
    5aac:	54 e4       	ldi	r21, 0x44	; 68
    5aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ab2:	dc 01       	movw	r26, r24
    5ab4:	cb 01       	movw	r24, r22
    5ab6:	8f 83       	std	Y+7, r24	; 0x07
    5ab8:	98 87       	std	Y+8, r25	; 0x08
    5aba:	a9 87       	std	Y+9, r26	; 0x09
    5abc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5abe:	6f 81       	ldd	r22, Y+7	; 0x07
    5ac0:	78 85       	ldd	r23, Y+8	; 0x08
    5ac2:	89 85       	ldd	r24, Y+9	; 0x09
    5ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ac6:	20 e0       	ldi	r18, 0x00	; 0
    5ac8:	30 e0       	ldi	r19, 0x00	; 0
    5aca:	40 e8       	ldi	r20, 0x80	; 128
    5acc:	5f e3       	ldi	r21, 0x3F	; 63
    5ace:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ad2:	88 23       	and	r24, r24
    5ad4:	2c f4       	brge	.+10     	; 0x5ae0 <CHANGE_PASSWORD+0xbc>
		__ticks = 1;
    5ad6:	81 e0       	ldi	r24, 0x01	; 1
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	9e 83       	std	Y+6, r25	; 0x06
    5adc:	8d 83       	std	Y+5, r24	; 0x05
    5ade:	3f c0       	rjmp	.+126    	; 0x5b5e <CHANGE_PASSWORD+0x13a>
	else if (__tmp > 65535)
    5ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    5ae2:	78 85       	ldd	r23, Y+8	; 0x08
    5ae4:	89 85       	ldd	r24, Y+9	; 0x09
    5ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ae8:	20 e0       	ldi	r18, 0x00	; 0
    5aea:	3f ef       	ldi	r19, 0xFF	; 255
    5aec:	4f e7       	ldi	r20, 0x7F	; 127
    5aee:	57 e4       	ldi	r21, 0x47	; 71
    5af0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5af4:	18 16       	cp	r1, r24
    5af6:	4c f5       	brge	.+82     	; 0x5b4a <CHANGE_PASSWORD+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    5afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b00:	20 e0       	ldi	r18, 0x00	; 0
    5b02:	30 e0       	ldi	r19, 0x00	; 0
    5b04:	40 e2       	ldi	r20, 0x20	; 32
    5b06:	51 e4       	ldi	r21, 0x41	; 65
    5b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b0c:	dc 01       	movw	r26, r24
    5b0e:	cb 01       	movw	r24, r22
    5b10:	bc 01       	movw	r22, r24
    5b12:	cd 01       	movw	r24, r26
    5b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b18:	dc 01       	movw	r26, r24
    5b1a:	cb 01       	movw	r24, r22
    5b1c:	9e 83       	std	Y+6, r25	; 0x06
    5b1e:	8d 83       	std	Y+5, r24	; 0x05
    5b20:	0f c0       	rjmp	.+30     	; 0x5b40 <CHANGE_PASSWORD+0x11c>
    5b22:	88 ec       	ldi	r24, 0xC8	; 200
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	9c 83       	std	Y+4, r25	; 0x04
    5b28:	8b 83       	std	Y+3, r24	; 0x03
    5b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    5b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    5b2e:	01 97       	sbiw	r24, 0x01	; 1
    5b30:	f1 f7       	brne	.-4      	; 0x5b2e <CHANGE_PASSWORD+0x10a>
    5b32:	9c 83       	std	Y+4, r25	; 0x04
    5b34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b36:	8d 81       	ldd	r24, Y+5	; 0x05
    5b38:	9e 81       	ldd	r25, Y+6	; 0x06
    5b3a:	01 97       	sbiw	r24, 0x01	; 1
    5b3c:	9e 83       	std	Y+6, r25	; 0x06
    5b3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b40:	8d 81       	ldd	r24, Y+5	; 0x05
    5b42:	9e 81       	ldd	r25, Y+6	; 0x06
    5b44:	00 97       	sbiw	r24, 0x00	; 0
    5b46:	69 f7       	brne	.-38     	; 0x5b22 <CHANGE_PASSWORD+0xfe>
    5b48:	14 c0       	rjmp	.+40     	; 0x5b72 <CHANGE_PASSWORD+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    5b4c:	78 85       	ldd	r23, Y+8	; 0x08
    5b4e:	89 85       	ldd	r24, Y+9	; 0x09
    5b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b56:	dc 01       	movw	r26, r24
    5b58:	cb 01       	movw	r24, r22
    5b5a:	9e 83       	std	Y+6, r25	; 0x06
    5b5c:	8d 83       	std	Y+5, r24	; 0x05
    5b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5b60:	9e 81       	ldd	r25, Y+6	; 0x06
    5b62:	9a 83       	std	Y+2, r25	; 0x02
    5b64:	89 83       	std	Y+1, r24	; 0x01
    5b66:	89 81       	ldd	r24, Y+1	; 0x01
    5b68:	9a 81       	ldd	r25, Y+2	; 0x02
    5b6a:	01 97       	sbiw	r24, 0x01	; 1
    5b6c:	f1 f7       	brne	.-4      	; 0x5b6a <CHANGE_PASSWORD+0x146>
    5b6e:	9a 83       	std	Y+2, r25	; 0x02
    5b70:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		PASS_POS=0;
    5b72:	10 92 95 02 	sts	0x0295, r1
		STATUS=PASSWORD_CHANGED;
    5b76:	89 e0       	ldi	r24, 0x09	; 9
    5b78:	8f 87       	std	Y+15, r24	; 0x0f

	}
	return STATUS;
    5b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    5b7c:	2f 96       	adiw	r28, 0x0f	; 15
    5b7e:	0f b6       	in	r0, 0x3f	; 63
    5b80:	f8 94       	cli
    5b82:	de bf       	out	0x3e, r29	; 62
    5b84:	0f be       	out	0x3f, r0	; 63
    5b86:	cd bf       	out	0x3d, r28	; 61
    5b88:	cf 91       	pop	r28
    5b8a:	df 91       	pop	r29
    5b8c:	08 95       	ret

00005b8e <IDLE_STATE>:

void IDLE_STATE(void)
{
    5b8e:	df 93       	push	r29
    5b90:	cf 93       	push	r28
    5b92:	cd b7       	in	r28, 0x3d	; 61
    5b94:	de b7       	in	r29, 0x3e	; 62

	if('2'==kp_val) // Open System
    5b96:	80 91 93 02 	lds	r24, 0x0293
    5b9a:	82 33       	cpi	r24, 0x32	; 50
    5b9c:	49 f4       	brne	.+18     	; 0x5bb0 <IDLE_STATE+0x22>
	{
		ENTER_USER_FRAME();
    5b9e:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <ENTER_USER_FRAME>
		OPEN_CHANGE_FLAG=1;
    5ba2:	81 e0       	ldi	r24, 0x01	; 1
    5ba4:	90 e0       	ldi	r25, 0x00	; 0
    5ba6:	90 93 a8 02 	sts	0x02A8, r25
    5baa:	80 93 a7 02 	sts	0x02A7, r24
    5bae:	19 c0       	rjmp	.+50     	; 0x5be2 <IDLE_STATE+0x54>
	}
	else if('1'==kp_val) // change password
    5bb0:	80 91 93 02 	lds	r24, 0x0293
    5bb4:	81 33       	cpi	r24, 0x31	; 49
    5bb6:	49 f4       	brne	.+18     	; 0x5bca <IDLE_STATE+0x3c>
	{
		CHANGE_PASSWORD_FRAME();
    5bb8:	0e 94 9e 2b 	call	0x573c	; 0x573c <CHANGE_PASSWORD_FRAME>
		OPEN_CHANGE_FLAG=2;
    5bbc:	82 e0       	ldi	r24, 0x02	; 2
    5bbe:	90 e0       	ldi	r25, 0x00	; 0
    5bc0:	90 93 a8 02 	sts	0x02A8, r25
    5bc4:	80 93 a7 02 	sts	0x02A7, r24
    5bc8:	0c c0       	rjmp	.+24     	; 0x5be2 <IDLE_STATE+0x54>
	}
	else if ('3'==kp_val)//add user
    5bca:	80 91 93 02 	lds	r24, 0x0293
    5bce:	83 33       	cpi	r24, 0x33	; 51
    5bd0:	41 f4       	brne	.+16     	; 0x5be2 <IDLE_STATE+0x54>
	{
		ADD_USER_FRAME();
    5bd2:	0e 94 3f 2c 	call	0x587e	; 0x587e <ADD_USER_FRAME>
		OPEN_CHANGE_FLAG=3;
    5bd6:	83 e0       	ldi	r24, 0x03	; 3
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	90 93 a8 02 	sts	0x02A8, r25
    5bde:	80 93 a7 02 	sts	0x02A7, r24
	}
	else{/*else of entry kp_val is not 1 or 2*/}
	//	entry=1;
}
    5be2:	cf 91       	pop	r28
    5be4:	df 91       	pop	r29
    5be6:	08 95       	ret

00005be8 <BLUETOOTH_SYSTEM_OPENED>:
void BLUETOOTH_SYSTEM_OPENED(void)
{
    5be8:	df 93       	push	r29
    5bea:	cf 93       	push	r28
    5bec:	0f 92       	push	r0
    5bee:	cd b7       	in	r28, 0x3d	; 61
    5bf0:	de b7       	in	r29, 0x3e	; 62
	char data;
	data=UART_RECEIVE_CHAR_POOLING();
    5bf2:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_RECEIVE_CHAR_POOLING>
    5bf6:	89 83       	std	Y+1, r24	; 0x01
	if('1'==data)
    5bf8:	89 81       	ldd	r24, Y+1	; 0x01
    5bfa:	81 33       	cpi	r24, 0x31	; 49
    5bfc:	21 f4       	brne	.+8      	; 0x5c06 <BLUETOOTH_SYSTEM_OPENED+0x1e>
	{
		MSPI_TRANSCIEVE_BLOCKING('1');
    5bfe:	81 e3       	ldi	r24, 0x31	; 49
    5c00:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>
    5c04:	30 c0       	rjmp	.+96     	; 0x5c66 <BLUETOOTH_SYSTEM_OPENED+0x7e>
	}
	else if('2'==data)
    5c06:	89 81       	ldd	r24, Y+1	; 0x01
    5c08:	82 33       	cpi	r24, 0x32	; 50
    5c0a:	21 f4       	brne	.+8      	; 0x5c14 <BLUETOOTH_SYSTEM_OPENED+0x2c>
	{
		MSPI_TRANSCIEVE_BLOCKING('2');
    5c0c:	82 e3       	ldi	r24, 0x32	; 50
    5c0e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>
    5c12:	29 c0       	rjmp	.+82     	; 0x5c66 <BLUETOOTH_SYSTEM_OPENED+0x7e>
	}
	else if('3'==data)
    5c14:	89 81       	ldd	r24, Y+1	; 0x01
    5c16:	83 33       	cpi	r24, 0x33	; 51
    5c18:	21 f4       	brne	.+8      	; 0x5c22 <BLUETOOTH_SYSTEM_OPENED+0x3a>
	{
		MSPI_TRANSCIEVE_BLOCKING('3');
    5c1a:	83 e3       	ldi	r24, 0x33	; 51
    5c1c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>
    5c20:	22 c0       	rjmp	.+68     	; 0x5c66 <BLUETOOTH_SYSTEM_OPENED+0x7e>

	}
	else if('4'==data)
    5c22:	89 81       	ldd	r24, Y+1	; 0x01
    5c24:	84 33       	cpi	r24, 0x34	; 52
    5c26:	21 f4       	brne	.+8      	; 0x5c30 <BLUETOOTH_SYSTEM_OPENED+0x48>
	{
		MSPI_TRANSCIEVE_BLOCKING('4');
    5c28:	84 e3       	ldi	r24, 0x34	; 52
    5c2a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>
    5c2e:	1b c0       	rjmp	.+54     	; 0x5c66 <BLUETOOTH_SYSTEM_OPENED+0x7e>


	}
	else if('5'==data)
    5c30:	89 81       	ldd	r24, Y+1	; 0x01
    5c32:	85 33       	cpi	r24, 0x35	; 53
    5c34:	21 f4       	brne	.+8      	; 0x5c3e <BLUETOOTH_SYSTEM_OPENED+0x56>
	{
		MSPI_TRANSCIEVE_BLOCKING('5');
    5c36:	85 e3       	ldi	r24, 0x35	; 53
    5c38:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>
    5c3c:	14 c0       	rjmp	.+40     	; 0x5c66 <BLUETOOTH_SYSTEM_OPENED+0x7e>


	}
	else if('6'==data)
    5c3e:	89 81       	ldd	r24, Y+1	; 0x01
    5c40:	86 33       	cpi	r24, 0x36	; 54
    5c42:	21 f4       	brne	.+8      	; 0x5c4c <BLUETOOTH_SYSTEM_OPENED+0x64>
	{
		MSPI_TRANSCIEVE_BLOCKING('6');
    5c44:	86 e3       	ldi	r24, 0x36	; 54
    5c46:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>
    5c4a:	0d c0       	rjmp	.+26     	; 0x5c66 <BLUETOOTH_SYSTEM_OPENED+0x7e>


	}
	else if('7'==data)
    5c4c:	89 81       	ldd	r24, Y+1	; 0x01
    5c4e:	87 33       	cpi	r24, 0x37	; 55
    5c50:	21 f4       	brne	.+8      	; 0x5c5a <BLUETOOTH_SYSTEM_OPENED+0x72>
	{
		MSPI_TRANSCIEVE_BLOCKING('7');
    5c52:	87 e3       	ldi	r24, 0x37	; 55
    5c54:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>
    5c58:	06 c0       	rjmp	.+12     	; 0x5c66 <BLUETOOTH_SYSTEM_OPENED+0x7e>
	}
	else if('8'==data)
    5c5a:	89 81       	ldd	r24, Y+1	; 0x01
    5c5c:	88 33       	cpi	r24, 0x38	; 56
    5c5e:	19 f4       	brne	.+6      	; 0x5c66 <BLUETOOTH_SYSTEM_OPENED+0x7e>
	{
		MSPI_TRANSCIEVE_BLOCKING('8');
    5c60:	88 e3       	ldi	r24, 0x38	; 56
    5c62:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>
	}
}
    5c66:	0f 90       	pop	r0
    5c68:	cf 91       	pop	r28
    5c6a:	df 91       	pop	r29
    5c6c:	08 95       	ret

00005c6e <READ_LDR>:

void READ_LDR(void)
{
    5c6e:	0f 93       	push	r16
    5c70:	1f 93       	push	r17
    5c72:	df 93       	push	r29
    5c74:	cf 93       	push	r28
    5c76:	cd b7       	in	r28, 0x3d	; 61
    5c78:	de b7       	in	r29, 0x3e	; 62

	LDR_VAL=MADC_u16_GetVal_BLOCKING(CHANNEL_1);
    5c7a:	80 e0       	ldi	r24, 0x00	; 0
    5c7c:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <MADC_u16_GetVal_BLOCKING>
    5c80:	90 93 aa 02 	sts	0x02AA, r25
    5c84:	80 93 a9 02 	sts	0x02A9, r24
	Light_val=Mapping_Values(255,0,1023,0,LDR_VAL);
    5c88:	e0 91 a9 02 	lds	r30, 0x02A9
    5c8c:	f0 91 aa 02 	lds	r31, 0x02AA
    5c90:	8f ef       	ldi	r24, 0xFF	; 255
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	60 e0       	ldi	r22, 0x00	; 0
    5c96:	70 e0       	ldi	r23, 0x00	; 0
    5c98:	4f ef       	ldi	r20, 0xFF	; 255
    5c9a:	53 e0       	ldi	r21, 0x03	; 3
    5c9c:	20 e0       	ldi	r18, 0x00	; 0
    5c9e:	30 e0       	ldi	r19, 0x00	; 0
    5ca0:	8f 01       	movw	r16, r30
    5ca2:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <Mapping_Values>
    5ca6:	dc 01       	movw	r26, r24
    5ca8:	cb 01       	movw	r24, r22
    5caa:	bc 01       	movw	r22, r24
    5cac:	cd 01       	movw	r24, r26
    5cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cb2:	dc 01       	movw	r26, r24
    5cb4:	cb 01       	movw	r24, r22
    5cb6:	80 93 b8 02 	sts	0x02B8, r24


}
    5cba:	cf 91       	pop	r28
    5cbc:	df 91       	pop	r29
    5cbe:	1f 91       	pop	r17
    5cc0:	0f 91       	pop	r16
    5cc2:	08 95       	ret

00005cc4 <READ_LM35>:
void READ_LM35(void)
{
    5cc4:	0f 93       	push	r16
    5cc6:	1f 93       	push	r17
    5cc8:	df 93       	push	r29
    5cca:	cf 93       	push	r28
    5ccc:	cd b7       	in	r28, 0x3d	; 61
    5cce:	de b7       	in	r29, 0x3e	; 62

	LM35_VAL=MADC_u16_GetVal_BLOCKING(CHANNEL_2);
    5cd0:	81 e0       	ldi	r24, 0x01	; 1
    5cd2:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <MADC_u16_GetVal_BLOCKING>
    5cd6:	90 93 ac 02 	sts	0x02AC, r25
    5cda:	80 93 ab 02 	sts	0x02AB, r24
	temp=Mapping_Values(99,0,1023,0,LM35_VAL);
    5cde:	e0 91 ab 02 	lds	r30, 0x02AB
    5ce2:	f0 91 ac 02 	lds	r31, 0x02AC
    5ce6:	83 e6       	ldi	r24, 0x63	; 99
    5ce8:	90 e0       	ldi	r25, 0x00	; 0
    5cea:	60 e0       	ldi	r22, 0x00	; 0
    5cec:	70 e0       	ldi	r23, 0x00	; 0
    5cee:	4f ef       	ldi	r20, 0xFF	; 255
    5cf0:	53 e0       	ldi	r21, 0x03	; 3
    5cf2:	20 e0       	ldi	r18, 0x00	; 0
    5cf4:	30 e0       	ldi	r19, 0x00	; 0
    5cf6:	8f 01       	movw	r16, r30
    5cf8:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <Mapping_Values>
    5cfc:	dc 01       	movw	r26, r24
    5cfe:	cb 01       	movw	r24, r22
    5d00:	bc 01       	movw	r22, r24
    5d02:	cd 01       	movw	r24, r26
    5d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d08:	dc 01       	movw	r26, r24
    5d0a:	cb 01       	movw	r24, r22
    5d0c:	80 93 b5 02 	sts	0x02B5, r24



}
    5d10:	cf 91       	pop	r28
    5d12:	df 91       	pop	r29
    5d14:	1f 91       	pop	r17
    5d16:	0f 91       	pop	r16
    5d18:	08 95       	ret

00005d1a <SPI_SEND>:
void SPI_SEND(void)
{
    5d1a:	df 93       	push	r29
    5d1c:	cf 93       	push	r28
    5d1e:	cd b7       	in	r28, 0x3d	; 61
    5d20:	de b7       	in	r29, 0x3e	; 62
	DIO_PIN_WRITE_LOGIC_M(PORTD_,pin2,PIN_LOW);
    5d22:	83 e0       	ldi	r24, 0x03	; 3
    5d24:	62 e0       	ldi	r22, 0x02	; 2
    5d26:	40 e0       	ldi	r20, 0x00	; 0
    5d28:	0e 94 f6 11 	call	0x23ec	; 0x23ec <DIO_PIN_WRITE_LOGIC_M>
	MSPI_TRANSCIEVE_BLOCKING('A');
    5d2c:	81 e4       	ldi	r24, 0x41	; 65
    5d2e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>
	MSPI_TRANSCIEVE_BLOCKING(temp);
    5d32:	80 91 b5 02 	lds	r24, 0x02B5
    5d36:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>
	MSPI_TRANSCIEVE_BLOCKING('9');
    5d3a:	89 e3       	ldi	r24, 0x39	; 57
    5d3c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>
	MSPI_TRANSCIEVE_BLOCKING(Light_val);
    5d40:	80 91 b8 02 	lds	r24, 0x02B8
    5d44:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <MSPI_TRANSCIEVE_BLOCKING>


//	DIO_PIN_WRITE_LOGIC_M(PORTD_,pin2,PIN_HIGH);

}
    5d48:	cf 91       	pop	r28
    5d4a:	df 91       	pop	r29
    5d4c:	08 95       	ret

00005d4e <RTOS_INIT>:
void RTOS_INIT(void)
{
    5d4e:	df 93       	push	r29
    5d50:	cf 93       	push	r28
    5d52:	cd b7       	in	r28, 0x3d	; 61
    5d54:	de b7       	in	r29, 0x3e	; 62

	tasks_state=Create_Task(1,100,0,&BLUETOOTH_SYSTEM_OPENED);
    5d56:	24 ef       	ldi	r18, 0xF4	; 244
    5d58:	3d e2       	ldi	r19, 0x2D	; 45
    5d5a:	81 e0       	ldi	r24, 0x01	; 1
    5d5c:	64 e6       	ldi	r22, 0x64	; 100
    5d5e:	70 e0       	ldi	r23, 0x00	; 0
    5d60:	40 e0       	ldi	r20, 0x00	; 0
    5d62:	0e 94 75 07 	call	0xeea	; 0xeea <Create_Task>
    5d66:	80 93 97 02 	sts	0x0297, r24
	tasks_state&=Create_Task(0,250,250,&READ_LDR);
    5d6a:	27 e3       	ldi	r18, 0x37	; 55
    5d6c:	3e e2       	ldi	r19, 0x2E	; 46
    5d6e:	80 e0       	ldi	r24, 0x00	; 0
    5d70:	6a ef       	ldi	r22, 0xFA	; 250
    5d72:	70 e0       	ldi	r23, 0x00	; 0
    5d74:	4a ef       	ldi	r20, 0xFA	; 250
    5d76:	0e 94 75 07 	call	0xeea	; 0xeea <Create_Task>
    5d7a:	98 2f       	mov	r25, r24
    5d7c:	80 91 97 02 	lds	r24, 0x0297
    5d80:	89 23       	and	r24, r25
    5d82:	80 93 97 02 	sts	0x0297, r24
	tasks_state&=Create_Task(2,250,0,&READ_LM35);
    5d86:	22 e6       	ldi	r18, 0x62	; 98
    5d88:	3e e2       	ldi	r19, 0x2E	; 46
    5d8a:	82 e0       	ldi	r24, 0x02	; 2
    5d8c:	6a ef       	ldi	r22, 0xFA	; 250
    5d8e:	70 e0       	ldi	r23, 0x00	; 0
    5d90:	40 e0       	ldi	r20, 0x00	; 0
    5d92:	0e 94 75 07 	call	0xeea	; 0xeea <Create_Task>
    5d96:	98 2f       	mov	r25, r24
    5d98:	80 91 97 02 	lds	r24, 0x0297
    5d9c:	89 23       	and	r24, r25
    5d9e:	80 93 97 02 	sts	0x0297, r24
	tasks_state&=Create_Task(3,600,0,&SPI_SEND);
    5da2:	2d e8       	ldi	r18, 0x8D	; 141
    5da4:	3e e2       	ldi	r19, 0x2E	; 46
    5da6:	83 e0       	ldi	r24, 0x03	; 3
    5da8:	68 e5       	ldi	r22, 0x58	; 88
    5daa:	72 e0       	ldi	r23, 0x02	; 2
    5dac:	40 e0       	ldi	r20, 0x00	; 0
    5dae:	0e 94 75 07 	call	0xeea	; 0xeea <Create_Task>
    5db2:	98 2f       	mov	r25, r24
    5db4:	80 91 97 02 	lds	r24, 0x0297
    5db8:	89 23       	and	r24, r25
    5dba:	80 93 97 02 	sts	0x0297, r24

}
    5dbe:	cf 91       	pop	r28
    5dc0:	df 91       	pop	r29
    5dc2:	08 95       	ret

00005dc4 <GET_NEW_PASS>:

u8 GET_NEW_PASS(void)
{
    5dc4:	df 93       	push	r29
    5dc6:	cf 93       	push	r28
    5dc8:	cd b7       	in	r28, 0x3d	; 61
    5dca:	de b7       	in	r29, 0x3e	; 62
    5dcc:	2f 97       	sbiw	r28, 0x0f	; 15
    5dce:	0f b6       	in	r0, 0x3f	; 63
    5dd0:	f8 94       	cli
    5dd2:	de bf       	out	0x3e, r29	; 62
    5dd4:	0f be       	out	0x3f, r0	; 63
    5dd6:	cd bf       	out	0x3d, r28	; 61
	static u8 S_address;
	if(USER_POS_==0)
    5dd8:	80 91 94 02 	lds	r24, 0x0294
    5ddc:	88 23       	and	r24, r24
    5dde:	61 f4       	brne	.+24     	; 0x5df8 <GET_NEW_PASS+0x34>
	{
		S_address=(number_Of_user*FIRST_USER);
    5de0:	80 91 a4 02 	lds	r24, 0x02A4
    5de4:	88 2f       	mov	r24, r24
    5de6:	90 e0       	ldi	r25, 0x00	; 0
    5de8:	88 0f       	add	r24, r24
    5dea:	99 1f       	adc	r25, r25
    5dec:	88 0f       	add	r24, r24
    5dee:	99 1f       	adc	r25, r25
    5df0:	88 0f       	add	r24, r24
    5df2:	99 1f       	adc	r25, r25
    5df4:	80 93 b1 02 	sts	0x02B1, r24
	}

	u8 STATUS=USER_SETTED;
    5df8:	8c e0       	ldi	r24, 0x0C	; 12
    5dfa:	8f 87       	std	Y+15, r24	; 0x0f
	HLCD_Send_char_4bit(kp_val);
    5dfc:	80 91 93 02 	lds	r24, 0x0293
    5e00:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <HLCD_Send_char_4bit>
	DEF_PASSWORD[PASS_POS_]=kp_val;
    5e04:	80 91 96 02 	lds	r24, 0x0296
    5e08:	88 2f       	mov	r24, r24
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	20 91 93 02 	lds	r18, 0x0293
    5e10:	fc 01       	movw	r30, r24
    5e12:	e0 56       	subi	r30, 0x60	; 96
    5e14:	fd 4f       	sbci	r31, 0xFD	; 253
    5e16:	20 83       	st	Z, r18
	PASS_POS_++;
    5e18:	80 91 96 02 	lds	r24, 0x0296
    5e1c:	8f 5f       	subi	r24, 0xFF	; 255
    5e1e:	80 93 96 02 	sts	0x0296, r24
	if(PASS_POS_==4)
    5e22:	80 91 96 02 	lds	r24, 0x0296
    5e26:	84 30       	cpi	r24, 0x04	; 4
    5e28:	09 f0       	breq	.+2      	; 0x5e2c <GET_NEW_PASS+0x68>
    5e2a:	9f c0       	rjmp	.+318    	; 0x5f6a <GET_NEW_PASS+0x1a6>
	{
		HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    5e2c:	81 e0       	ldi	r24, 0x01	; 1
    5e2e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
		HEEPROM_WRITE_STRING(&DEF_PASSWORD,4,S_address+0x04);
    5e32:	80 91 b1 02 	lds	r24, 0x02B1
    5e36:	28 2f       	mov	r18, r24
    5e38:	2c 5f       	subi	r18, 0xFC	; 252
    5e3a:	80 ea       	ldi	r24, 0xA0	; 160
    5e3c:	92 e0       	ldi	r25, 0x02	; 2
    5e3e:	64 e0       	ldi	r22, 0x04	; 4
    5e40:	42 2f       	mov	r20, r18
    5e42:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <HEEPROM_WRITE_STRING>
		PASS_POS_=0;
    5e46:	10 92 96 02 	sts	0x0296, r1
		STATUS=ENTER_USER;
    5e4a:	84 e0       	ldi	r24, 0x04	; 4
    5e4c:	8f 87       	std	Y+15, r24	; 0x0f
		entry=0;
    5e4e:	10 92 a6 02 	sts	0x02A6, r1
    5e52:	10 92 a5 02 	sts	0x02A5, r1
		++number_Of_user;
    5e56:	80 91 a4 02 	lds	r24, 0x02A4
    5e5a:	8f 5f       	subi	r24, 0xFF	; 255
    5e5c:	80 93 a4 02 	sts	0x02A4, r24
		HEEPROM_WRITE(number_Of_user,0xFF);
    5e60:	80 91 a4 02 	lds	r24, 0x02A4
    5e64:	6f ef       	ldi	r22, 0xFF	; 255
    5e66:	0e 94 f6 26 	call	0x4dec	; 0x4dec <HEEPROM_WRITE>
		HLCD_Send_String_4bit((u8 *)"New User Has Set");
    5e6a:	8d e1       	ldi	r24, 0x1D	; 29
    5e6c:	91 e0       	ldi	r25, 0x01	; 1
    5e6e:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
    5e72:	80 e0       	ldi	r24, 0x00	; 0
    5e74:	90 e0       	ldi	r25, 0x00	; 0
    5e76:	aa e7       	ldi	r26, 0x7A	; 122
    5e78:	b4 e4       	ldi	r27, 0x44	; 68
    5e7a:	8b 87       	std	Y+11, r24	; 0x0b
    5e7c:	9c 87       	std	Y+12, r25	; 0x0c
    5e7e:	ad 87       	std	Y+13, r26	; 0x0d
    5e80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e8a:	20 e0       	ldi	r18, 0x00	; 0
    5e8c:	30 e0       	ldi	r19, 0x00	; 0
    5e8e:	4a ef       	ldi	r20, 0xFA	; 250
    5e90:	54 e4       	ldi	r21, 0x44	; 68
    5e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e96:	dc 01       	movw	r26, r24
    5e98:	cb 01       	movw	r24, r22
    5e9a:	8f 83       	std	Y+7, r24	; 0x07
    5e9c:	98 87       	std	Y+8, r25	; 0x08
    5e9e:	a9 87       	std	Y+9, r26	; 0x09
    5ea0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    5ea4:	78 85       	ldd	r23, Y+8	; 0x08
    5ea6:	89 85       	ldd	r24, Y+9	; 0x09
    5ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5eaa:	20 e0       	ldi	r18, 0x00	; 0
    5eac:	30 e0       	ldi	r19, 0x00	; 0
    5eae:	40 e8       	ldi	r20, 0x80	; 128
    5eb0:	5f e3       	ldi	r21, 0x3F	; 63
    5eb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5eb6:	88 23       	and	r24, r24
    5eb8:	2c f4       	brge	.+10     	; 0x5ec4 <GET_NEW_PASS+0x100>
		__ticks = 1;
    5eba:	81 e0       	ldi	r24, 0x01	; 1
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	9e 83       	std	Y+6, r25	; 0x06
    5ec0:	8d 83       	std	Y+5, r24	; 0x05
    5ec2:	3f c0       	rjmp	.+126    	; 0x5f42 <GET_NEW_PASS+0x17e>
	else if (__tmp > 65535)
    5ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    5ec6:	78 85       	ldd	r23, Y+8	; 0x08
    5ec8:	89 85       	ldd	r24, Y+9	; 0x09
    5eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ecc:	20 e0       	ldi	r18, 0x00	; 0
    5ece:	3f ef       	ldi	r19, 0xFF	; 255
    5ed0:	4f e7       	ldi	r20, 0x7F	; 127
    5ed2:	57 e4       	ldi	r21, 0x47	; 71
    5ed4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ed8:	18 16       	cp	r1, r24
    5eda:	4c f5       	brge	.+82     	; 0x5f2e <GET_NEW_PASS+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ee4:	20 e0       	ldi	r18, 0x00	; 0
    5ee6:	30 e0       	ldi	r19, 0x00	; 0
    5ee8:	40 e2       	ldi	r20, 0x20	; 32
    5eea:	51 e4       	ldi	r21, 0x41	; 65
    5eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	cb 01       	movw	r24, r22
    5ef4:	bc 01       	movw	r22, r24
    5ef6:	cd 01       	movw	r24, r26
    5ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5efc:	dc 01       	movw	r26, r24
    5efe:	cb 01       	movw	r24, r22
    5f00:	9e 83       	std	Y+6, r25	; 0x06
    5f02:	8d 83       	std	Y+5, r24	; 0x05
    5f04:	0f c0       	rjmp	.+30     	; 0x5f24 <GET_NEW_PASS+0x160>
    5f06:	88 ec       	ldi	r24, 0xC8	; 200
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	9c 83       	std	Y+4, r25	; 0x04
    5f0c:	8b 83       	std	Y+3, r24	; 0x03
    5f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    5f10:	9c 81       	ldd	r25, Y+4	; 0x04
    5f12:	01 97       	sbiw	r24, 0x01	; 1
    5f14:	f1 f7       	brne	.-4      	; 0x5f12 <GET_NEW_PASS+0x14e>
    5f16:	9c 83       	std	Y+4, r25	; 0x04
    5f18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    5f1e:	01 97       	sbiw	r24, 0x01	; 1
    5f20:	9e 83       	std	Y+6, r25	; 0x06
    5f22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f24:	8d 81       	ldd	r24, Y+5	; 0x05
    5f26:	9e 81       	ldd	r25, Y+6	; 0x06
    5f28:	00 97       	sbiw	r24, 0x00	; 0
    5f2a:	69 f7       	brne	.-38     	; 0x5f06 <GET_NEW_PASS+0x142>
    5f2c:	14 c0       	rjmp	.+40     	; 0x5f56 <GET_NEW_PASS+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    5f30:	78 85       	ldd	r23, Y+8	; 0x08
    5f32:	89 85       	ldd	r24, Y+9	; 0x09
    5f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f3a:	dc 01       	movw	r26, r24
    5f3c:	cb 01       	movw	r24, r22
    5f3e:	9e 83       	std	Y+6, r25	; 0x06
    5f40:	8d 83       	std	Y+5, r24	; 0x05
    5f42:	8d 81       	ldd	r24, Y+5	; 0x05
    5f44:	9e 81       	ldd	r25, Y+6	; 0x06
    5f46:	9a 83       	std	Y+2, r25	; 0x02
    5f48:	89 83       	std	Y+1, r24	; 0x01
    5f4a:	89 81       	ldd	r24, Y+1	; 0x01
    5f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f4e:	01 97       	sbiw	r24, 0x01	; 1
    5f50:	f1 f7       	brne	.-4      	; 0x5f4e <GET_NEW_PASS+0x18a>
    5f52:	9a 83       	std	Y+2, r25	; 0x02
    5f54:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		entry=0;
    5f56:	10 92 a6 02 	sts	0x02A6, r1
    5f5a:	10 92 a5 02 	sts	0x02A5, r1
		USER_POS_=0;
    5f5e:	10 92 94 02 	sts	0x0294, r1
		PASS_POS_=0;
    5f62:	10 92 96 02 	sts	0x0296, r1
		IDLE_FRAME();
    5f66:	0e 94 4b 2b 	call	0x5696	; 0x5696 <IDLE_FRAME>

	}
	return STATUS;
    5f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    5f6c:	2f 96       	adiw	r28, 0x0f	; 15
    5f6e:	0f b6       	in	r0, 0x3f	; 63
    5f70:	f8 94       	cli
    5f72:	de bf       	out	0x3e, r29	; 62
    5f74:	0f be       	out	0x3f, r0	; 63
    5f76:	cd bf       	out	0x3d, r28	; 61
    5f78:	cf 91       	pop	r28
    5f7a:	df 91       	pop	r29
    5f7c:	08 95       	ret

00005f7e <GET_NEW_USER>:

u8 GET_NEW_USER(void)
{
    5f7e:	df 93       	push	r29
    5f80:	cf 93       	push	r28
    5f82:	0f 92       	push	r0
    5f84:	cd b7       	in	r28, 0x3d	; 61
    5f86:	de b7       	in	r29, 0x3e	; 62
	//	static u8 number_Of_user;
	static u8 S_address;
	if(USER_POS_==0)
    5f88:	80 91 94 02 	lds	r24, 0x0294
    5f8c:	88 23       	and	r24, r24
    5f8e:	61 f4       	brne	.+24     	; 0x5fa8 <GET_NEW_USER+0x2a>
	{
		S_address=(number_Of_user*FIRST_USER);
    5f90:	80 91 a4 02 	lds	r24, 0x02A4
    5f94:	88 2f       	mov	r24, r24
    5f96:	90 e0       	ldi	r25, 0x00	; 0
    5f98:	88 0f       	add	r24, r24
    5f9a:	99 1f       	adc	r25, r25
    5f9c:	88 0f       	add	r24, r24
    5f9e:	99 1f       	adc	r25, r25
    5fa0:	88 0f       	add	r24, r24
    5fa2:	99 1f       	adc	r25, r25
    5fa4:	80 93 b2 02 	sts	0x02B2, r24
	}
	u8 STATUS=ENTER_USER;
    5fa8:	84 e0       	ldi	r24, 0x04	; 4
    5faa:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_4bit(kp_val);
    5fac:	80 91 93 02 	lds	r24, 0x0293
    5fb0:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <HLCD_Send_char_4bit>
	DEF_USER[USER_POS_]=kp_val;
    5fb4:	80 91 94 02 	lds	r24, 0x0294
    5fb8:	88 2f       	mov	r24, r24
    5fba:	90 e0       	ldi	r25, 0x00	; 0
    5fbc:	20 91 93 02 	lds	r18, 0x0293
    5fc0:	fc 01       	movw	r30, r24
    5fc2:	e8 56       	subi	r30, 0x68	; 104
    5fc4:	fd 4f       	sbci	r31, 0xFD	; 253
    5fc6:	20 83       	st	Z, r18
	USER_POS_++;
    5fc8:	80 91 94 02 	lds	r24, 0x0294
    5fcc:	8f 5f       	subi	r24, 0xFF	; 255
    5fce:	80 93 94 02 	sts	0x0294, r24
	if(USER_POS_==4)
    5fd2:	80 91 94 02 	lds	r24, 0x0294
    5fd6:	84 30       	cpi	r24, 0x04	; 4
    5fd8:	b9 f4       	brne	.+46     	; 0x6008 <GET_NEW_USER+0x8a>
	{
		HEEPROM_WRITE_STRING(&DEF_USER,4,S_address);
    5fda:	20 91 b2 02 	lds	r18, 0x02B2
    5fde:	88 e9       	ldi	r24, 0x98	; 152
    5fe0:	92 e0       	ldi	r25, 0x02	; 2
    5fe2:	64 e0       	ldi	r22, 0x04	; 4
    5fe4:	42 2f       	mov	r20, r18
    5fe6:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <HEEPROM_WRITE_STRING>
		HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    5fea:	81 e0       	ldi	r24, 0x01	; 1
    5fec:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HLCD_Send_Command_4bit>
		HLCD_Send_String_4bit((u8 *)"ENTER PASSWORD");
    5ff0:	8e e2       	ldi	r24, 0x2E	; 46
    5ff2:	91 e0       	ldi	r25, 0x01	; 1
    5ff4:	0e 94 c6 20 	call	0x418c	; 0x418c <HLCD_Send_String_4bit>
		HLCD_Send_CursorPosition_4bit(LCD_GO_ROW2,0x00);
    5ff8:	80 ec       	ldi	r24, 0xC0	; 192
    5ffa:	60 e0       	ldi	r22, 0x00	; 0
    5ffc:	0e 94 54 21 	call	0x42a8	; 0x42a8 <HLCD_Send_CursorPosition_4bit>
		USER_POS_=0;
    6000:	10 92 94 02 	sts	0x0294, r1
		STATUS=USER_SETTED;
    6004:	8c e0       	ldi	r24, 0x0C	; 12
    6006:	89 83       	std	Y+1, r24	; 0x01
	}

	return STATUS;
    6008:	89 81       	ldd	r24, Y+1	; 0x01
}
    600a:	0f 90       	pop	r0
    600c:	cf 91       	pop	r28
    600e:	df 91       	pop	r29
    6010:	08 95       	ret

00006012 <__prologue_saves__>:
    6012:	2f 92       	push	r2
    6014:	3f 92       	push	r3
    6016:	4f 92       	push	r4
    6018:	5f 92       	push	r5
    601a:	6f 92       	push	r6
    601c:	7f 92       	push	r7
    601e:	8f 92       	push	r8
    6020:	9f 92       	push	r9
    6022:	af 92       	push	r10
    6024:	bf 92       	push	r11
    6026:	cf 92       	push	r12
    6028:	df 92       	push	r13
    602a:	ef 92       	push	r14
    602c:	ff 92       	push	r15
    602e:	0f 93       	push	r16
    6030:	1f 93       	push	r17
    6032:	cf 93       	push	r28
    6034:	df 93       	push	r29
    6036:	cd b7       	in	r28, 0x3d	; 61
    6038:	de b7       	in	r29, 0x3e	; 62
    603a:	ca 1b       	sub	r28, r26
    603c:	db 0b       	sbc	r29, r27
    603e:	0f b6       	in	r0, 0x3f	; 63
    6040:	f8 94       	cli
    6042:	de bf       	out	0x3e, r29	; 62
    6044:	0f be       	out	0x3f, r0	; 63
    6046:	cd bf       	out	0x3d, r28	; 61
    6048:	09 94       	ijmp

0000604a <__epilogue_restores__>:
    604a:	2a 88       	ldd	r2, Y+18	; 0x12
    604c:	39 88       	ldd	r3, Y+17	; 0x11
    604e:	48 88       	ldd	r4, Y+16	; 0x10
    6050:	5f 84       	ldd	r5, Y+15	; 0x0f
    6052:	6e 84       	ldd	r6, Y+14	; 0x0e
    6054:	7d 84       	ldd	r7, Y+13	; 0x0d
    6056:	8c 84       	ldd	r8, Y+12	; 0x0c
    6058:	9b 84       	ldd	r9, Y+11	; 0x0b
    605a:	aa 84       	ldd	r10, Y+10	; 0x0a
    605c:	b9 84       	ldd	r11, Y+9	; 0x09
    605e:	c8 84       	ldd	r12, Y+8	; 0x08
    6060:	df 80       	ldd	r13, Y+7	; 0x07
    6062:	ee 80       	ldd	r14, Y+6	; 0x06
    6064:	fd 80       	ldd	r15, Y+5	; 0x05
    6066:	0c 81       	ldd	r16, Y+4	; 0x04
    6068:	1b 81       	ldd	r17, Y+3	; 0x03
    606a:	aa 81       	ldd	r26, Y+2	; 0x02
    606c:	b9 81       	ldd	r27, Y+1	; 0x01
    606e:	ce 0f       	add	r28, r30
    6070:	d1 1d       	adc	r29, r1
    6072:	0f b6       	in	r0, 0x3f	; 63
    6074:	f8 94       	cli
    6076:	de bf       	out	0x3e, r29	; 62
    6078:	0f be       	out	0x3f, r0	; 63
    607a:	cd bf       	out	0x3d, r28	; 61
    607c:	ed 01       	movw	r28, r26
    607e:	08 95       	ret

00006080 <memset>:
    6080:	dc 01       	movw	r26, r24
    6082:	01 c0       	rjmp	.+2      	; 0x6086 <memset+0x6>
    6084:	6d 93       	st	X+, r22
    6086:	41 50       	subi	r20, 0x01	; 1
    6088:	50 40       	sbci	r21, 0x00	; 0
    608a:	e0 f7       	brcc	.-8      	; 0x6084 <memset+0x4>
    608c:	08 95       	ret

0000608e <sprintf>:
    608e:	ae e0       	ldi	r26, 0x0E	; 14
    6090:	b0 e0       	ldi	r27, 0x00	; 0
    6092:	ed e4       	ldi	r30, 0x4D	; 77
    6094:	f0 e3       	ldi	r31, 0x30	; 48
    6096:	0c 94 17 30 	jmp	0x602e	; 0x602e <__prologue_saves__+0x1c>
    609a:	0d 89       	ldd	r16, Y+21	; 0x15
    609c:	1e 89       	ldd	r17, Y+22	; 0x16
    609e:	86 e0       	ldi	r24, 0x06	; 6
    60a0:	8c 83       	std	Y+4, r24	; 0x04
    60a2:	1a 83       	std	Y+2, r17	; 0x02
    60a4:	09 83       	std	Y+1, r16	; 0x01
    60a6:	8f ef       	ldi	r24, 0xFF	; 255
    60a8:	9f e7       	ldi	r25, 0x7F	; 127
    60aa:	9e 83       	std	Y+6, r25	; 0x06
    60ac:	8d 83       	std	Y+5, r24	; 0x05
    60ae:	9e 01       	movw	r18, r28
    60b0:	27 5e       	subi	r18, 0xE7	; 231
    60b2:	3f 4f       	sbci	r19, 0xFF	; 255
    60b4:	ce 01       	movw	r24, r28
    60b6:	01 96       	adiw	r24, 0x01	; 1
    60b8:	6f 89       	ldd	r22, Y+23	; 0x17
    60ba:	78 8d       	ldd	r23, Y+24	; 0x18
    60bc:	a9 01       	movw	r20, r18
    60be:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <vfprintf>
    60c2:	2f 81       	ldd	r18, Y+7	; 0x07
    60c4:	38 85       	ldd	r19, Y+8	; 0x08
    60c6:	02 0f       	add	r16, r18
    60c8:	13 1f       	adc	r17, r19
    60ca:	f8 01       	movw	r30, r16
    60cc:	10 82       	st	Z, r1
    60ce:	2e 96       	adiw	r28, 0x0e	; 14
    60d0:	e4 e0       	ldi	r30, 0x04	; 4
    60d2:	0c 94 33 30 	jmp	0x6066	; 0x6066 <__epilogue_restores__+0x1c>

000060d6 <vfprintf>:
    60d6:	ab e0       	ldi	r26, 0x0B	; 11
    60d8:	b0 e0       	ldi	r27, 0x00	; 0
    60da:	e1 e7       	ldi	r30, 0x71	; 113
    60dc:	f0 e3       	ldi	r31, 0x30	; 48
    60de:	0c 94 09 30 	jmp	0x6012	; 0x6012 <__prologue_saves__>
    60e2:	3c 01       	movw	r6, r24
    60e4:	2b 01       	movw	r4, r22
    60e6:	5a 01       	movw	r10, r20
    60e8:	fc 01       	movw	r30, r24
    60ea:	17 82       	std	Z+7, r1	; 0x07
    60ec:	16 82       	std	Z+6, r1	; 0x06
    60ee:	83 81       	ldd	r24, Z+3	; 0x03
    60f0:	81 fd       	sbrc	r24, 1
    60f2:	03 c0       	rjmp	.+6      	; 0x60fa <vfprintf+0x24>
    60f4:	6f ef       	ldi	r22, 0xFF	; 255
    60f6:	7f ef       	ldi	r23, 0xFF	; 255
    60f8:	c6 c1       	rjmp	.+908    	; 0x6486 <vfprintf+0x3b0>
    60fa:	9a e0       	ldi	r25, 0x0A	; 10
    60fc:	89 2e       	mov	r8, r25
    60fe:	1e 01       	movw	r2, r28
    6100:	08 94       	sec
    6102:	21 1c       	adc	r2, r1
    6104:	31 1c       	adc	r3, r1
    6106:	f3 01       	movw	r30, r6
    6108:	23 81       	ldd	r18, Z+3	; 0x03
    610a:	f2 01       	movw	r30, r4
    610c:	23 fd       	sbrc	r18, 3
    610e:	85 91       	lpm	r24, Z+
    6110:	23 ff       	sbrs	r18, 3
    6112:	81 91       	ld	r24, Z+
    6114:	2f 01       	movw	r4, r30
    6116:	88 23       	and	r24, r24
    6118:	09 f4       	brne	.+2      	; 0x611c <vfprintf+0x46>
    611a:	b2 c1       	rjmp	.+868    	; 0x6480 <vfprintf+0x3aa>
    611c:	85 32       	cpi	r24, 0x25	; 37
    611e:	39 f4       	brne	.+14     	; 0x612e <vfprintf+0x58>
    6120:	23 fd       	sbrc	r18, 3
    6122:	85 91       	lpm	r24, Z+
    6124:	23 ff       	sbrs	r18, 3
    6126:	81 91       	ld	r24, Z+
    6128:	2f 01       	movw	r4, r30
    612a:	85 32       	cpi	r24, 0x25	; 37
    612c:	29 f4       	brne	.+10     	; 0x6138 <vfprintf+0x62>
    612e:	90 e0       	ldi	r25, 0x00	; 0
    6130:	b3 01       	movw	r22, r6
    6132:	0e 94 5e 32 	call	0x64bc	; 0x64bc <fputc>
    6136:	e7 cf       	rjmp	.-50     	; 0x6106 <vfprintf+0x30>
    6138:	98 2f       	mov	r25, r24
    613a:	ff 24       	eor	r15, r15
    613c:	ee 24       	eor	r14, r14
    613e:	99 24       	eor	r9, r9
    6140:	ff e1       	ldi	r31, 0x1F	; 31
    6142:	ff 15       	cp	r31, r15
    6144:	d0 f0       	brcs	.+52     	; 0x617a <vfprintf+0xa4>
    6146:	9b 32       	cpi	r25, 0x2B	; 43
    6148:	69 f0       	breq	.+26     	; 0x6164 <vfprintf+0x8e>
    614a:	9c 32       	cpi	r25, 0x2C	; 44
    614c:	28 f4       	brcc	.+10     	; 0x6158 <vfprintf+0x82>
    614e:	90 32       	cpi	r25, 0x20	; 32
    6150:	59 f0       	breq	.+22     	; 0x6168 <vfprintf+0x92>
    6152:	93 32       	cpi	r25, 0x23	; 35
    6154:	91 f4       	brne	.+36     	; 0x617a <vfprintf+0xa4>
    6156:	0e c0       	rjmp	.+28     	; 0x6174 <vfprintf+0x9e>
    6158:	9d 32       	cpi	r25, 0x2D	; 45
    615a:	49 f0       	breq	.+18     	; 0x616e <vfprintf+0x98>
    615c:	90 33       	cpi	r25, 0x30	; 48
    615e:	69 f4       	brne	.+26     	; 0x617a <vfprintf+0xa4>
    6160:	41 e0       	ldi	r20, 0x01	; 1
    6162:	24 c0       	rjmp	.+72     	; 0x61ac <vfprintf+0xd6>
    6164:	52 e0       	ldi	r21, 0x02	; 2
    6166:	f5 2a       	or	r15, r21
    6168:	84 e0       	ldi	r24, 0x04	; 4
    616a:	f8 2a       	or	r15, r24
    616c:	28 c0       	rjmp	.+80     	; 0x61be <vfprintf+0xe8>
    616e:	98 e0       	ldi	r25, 0x08	; 8
    6170:	f9 2a       	or	r15, r25
    6172:	25 c0       	rjmp	.+74     	; 0x61be <vfprintf+0xe8>
    6174:	e0 e1       	ldi	r30, 0x10	; 16
    6176:	fe 2a       	or	r15, r30
    6178:	22 c0       	rjmp	.+68     	; 0x61be <vfprintf+0xe8>
    617a:	f7 fc       	sbrc	r15, 7
    617c:	29 c0       	rjmp	.+82     	; 0x61d0 <vfprintf+0xfa>
    617e:	89 2f       	mov	r24, r25
    6180:	80 53       	subi	r24, 0x30	; 48
    6182:	8a 30       	cpi	r24, 0x0A	; 10
    6184:	70 f4       	brcc	.+28     	; 0x61a2 <vfprintf+0xcc>
    6186:	f6 fe       	sbrs	r15, 6
    6188:	05 c0       	rjmp	.+10     	; 0x6194 <vfprintf+0xbe>
    618a:	98 9c       	mul	r9, r8
    618c:	90 2c       	mov	r9, r0
    618e:	11 24       	eor	r1, r1
    6190:	98 0e       	add	r9, r24
    6192:	15 c0       	rjmp	.+42     	; 0x61be <vfprintf+0xe8>
    6194:	e8 9c       	mul	r14, r8
    6196:	e0 2c       	mov	r14, r0
    6198:	11 24       	eor	r1, r1
    619a:	e8 0e       	add	r14, r24
    619c:	f0 e2       	ldi	r31, 0x20	; 32
    619e:	ff 2a       	or	r15, r31
    61a0:	0e c0       	rjmp	.+28     	; 0x61be <vfprintf+0xe8>
    61a2:	9e 32       	cpi	r25, 0x2E	; 46
    61a4:	29 f4       	brne	.+10     	; 0x61b0 <vfprintf+0xda>
    61a6:	f6 fc       	sbrc	r15, 6
    61a8:	6b c1       	rjmp	.+726    	; 0x6480 <vfprintf+0x3aa>
    61aa:	40 e4       	ldi	r20, 0x40	; 64
    61ac:	f4 2a       	or	r15, r20
    61ae:	07 c0       	rjmp	.+14     	; 0x61be <vfprintf+0xe8>
    61b0:	9c 36       	cpi	r25, 0x6C	; 108
    61b2:	19 f4       	brne	.+6      	; 0x61ba <vfprintf+0xe4>
    61b4:	50 e8       	ldi	r21, 0x80	; 128
    61b6:	f5 2a       	or	r15, r21
    61b8:	02 c0       	rjmp	.+4      	; 0x61be <vfprintf+0xe8>
    61ba:	98 36       	cpi	r25, 0x68	; 104
    61bc:	49 f4       	brne	.+18     	; 0x61d0 <vfprintf+0xfa>
    61be:	f2 01       	movw	r30, r4
    61c0:	23 fd       	sbrc	r18, 3
    61c2:	95 91       	lpm	r25, Z+
    61c4:	23 ff       	sbrs	r18, 3
    61c6:	91 91       	ld	r25, Z+
    61c8:	2f 01       	movw	r4, r30
    61ca:	99 23       	and	r25, r25
    61cc:	09 f0       	breq	.+2      	; 0x61d0 <vfprintf+0xfa>
    61ce:	b8 cf       	rjmp	.-144    	; 0x6140 <vfprintf+0x6a>
    61d0:	89 2f       	mov	r24, r25
    61d2:	85 54       	subi	r24, 0x45	; 69
    61d4:	83 30       	cpi	r24, 0x03	; 3
    61d6:	18 f0       	brcs	.+6      	; 0x61de <vfprintf+0x108>
    61d8:	80 52       	subi	r24, 0x20	; 32
    61da:	83 30       	cpi	r24, 0x03	; 3
    61dc:	38 f4       	brcc	.+14     	; 0x61ec <vfprintf+0x116>
    61de:	44 e0       	ldi	r20, 0x04	; 4
    61e0:	50 e0       	ldi	r21, 0x00	; 0
    61e2:	a4 0e       	add	r10, r20
    61e4:	b5 1e       	adc	r11, r21
    61e6:	5f e3       	ldi	r21, 0x3F	; 63
    61e8:	59 83       	std	Y+1, r21	; 0x01
    61ea:	0f c0       	rjmp	.+30     	; 0x620a <vfprintf+0x134>
    61ec:	93 36       	cpi	r25, 0x63	; 99
    61ee:	31 f0       	breq	.+12     	; 0x61fc <vfprintf+0x126>
    61f0:	93 37       	cpi	r25, 0x73	; 115
    61f2:	79 f0       	breq	.+30     	; 0x6212 <vfprintf+0x13c>
    61f4:	93 35       	cpi	r25, 0x53	; 83
    61f6:	09 f0       	breq	.+2      	; 0x61fa <vfprintf+0x124>
    61f8:	56 c0       	rjmp	.+172    	; 0x62a6 <vfprintf+0x1d0>
    61fa:	20 c0       	rjmp	.+64     	; 0x623c <vfprintf+0x166>
    61fc:	f5 01       	movw	r30, r10
    61fe:	80 81       	ld	r24, Z
    6200:	89 83       	std	Y+1, r24	; 0x01
    6202:	42 e0       	ldi	r20, 0x02	; 2
    6204:	50 e0       	ldi	r21, 0x00	; 0
    6206:	a4 0e       	add	r10, r20
    6208:	b5 1e       	adc	r11, r21
    620a:	61 01       	movw	r12, r2
    620c:	01 e0       	ldi	r16, 0x01	; 1
    620e:	10 e0       	ldi	r17, 0x00	; 0
    6210:	12 c0       	rjmp	.+36     	; 0x6236 <vfprintf+0x160>
    6212:	f5 01       	movw	r30, r10
    6214:	c0 80       	ld	r12, Z
    6216:	d1 80       	ldd	r13, Z+1	; 0x01
    6218:	f6 fc       	sbrc	r15, 6
    621a:	03 c0       	rjmp	.+6      	; 0x6222 <vfprintf+0x14c>
    621c:	6f ef       	ldi	r22, 0xFF	; 255
    621e:	7f ef       	ldi	r23, 0xFF	; 255
    6220:	02 c0       	rjmp	.+4      	; 0x6226 <vfprintf+0x150>
    6222:	69 2d       	mov	r22, r9
    6224:	70 e0       	ldi	r23, 0x00	; 0
    6226:	42 e0       	ldi	r20, 0x02	; 2
    6228:	50 e0       	ldi	r21, 0x00	; 0
    622a:	a4 0e       	add	r10, r20
    622c:	b5 1e       	adc	r11, r21
    622e:	c6 01       	movw	r24, r12
    6230:	0e 94 53 32 	call	0x64a6	; 0x64a6 <strnlen>
    6234:	8c 01       	movw	r16, r24
    6236:	5f e7       	ldi	r21, 0x7F	; 127
    6238:	f5 22       	and	r15, r21
    623a:	14 c0       	rjmp	.+40     	; 0x6264 <vfprintf+0x18e>
    623c:	f5 01       	movw	r30, r10
    623e:	c0 80       	ld	r12, Z
    6240:	d1 80       	ldd	r13, Z+1	; 0x01
    6242:	f6 fc       	sbrc	r15, 6
    6244:	03 c0       	rjmp	.+6      	; 0x624c <vfprintf+0x176>
    6246:	6f ef       	ldi	r22, 0xFF	; 255
    6248:	7f ef       	ldi	r23, 0xFF	; 255
    624a:	02 c0       	rjmp	.+4      	; 0x6250 <vfprintf+0x17a>
    624c:	69 2d       	mov	r22, r9
    624e:	70 e0       	ldi	r23, 0x00	; 0
    6250:	42 e0       	ldi	r20, 0x02	; 2
    6252:	50 e0       	ldi	r21, 0x00	; 0
    6254:	a4 0e       	add	r10, r20
    6256:	b5 1e       	adc	r11, r21
    6258:	c6 01       	movw	r24, r12
    625a:	0e 94 48 32 	call	0x6490	; 0x6490 <strnlen_P>
    625e:	8c 01       	movw	r16, r24
    6260:	50 e8       	ldi	r21, 0x80	; 128
    6262:	f5 2a       	or	r15, r21
    6264:	f3 fe       	sbrs	r15, 3
    6266:	07 c0       	rjmp	.+14     	; 0x6276 <vfprintf+0x1a0>
    6268:	1a c0       	rjmp	.+52     	; 0x629e <vfprintf+0x1c8>
    626a:	80 e2       	ldi	r24, 0x20	; 32
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	b3 01       	movw	r22, r6
    6270:	0e 94 5e 32 	call	0x64bc	; 0x64bc <fputc>
    6274:	ea 94       	dec	r14
    6276:	8e 2d       	mov	r24, r14
    6278:	90 e0       	ldi	r25, 0x00	; 0
    627a:	08 17       	cp	r16, r24
    627c:	19 07       	cpc	r17, r25
    627e:	a8 f3       	brcs	.-22     	; 0x626a <vfprintf+0x194>
    6280:	0e c0       	rjmp	.+28     	; 0x629e <vfprintf+0x1c8>
    6282:	f6 01       	movw	r30, r12
    6284:	f7 fc       	sbrc	r15, 7
    6286:	85 91       	lpm	r24, Z+
    6288:	f7 fe       	sbrs	r15, 7
    628a:	81 91       	ld	r24, Z+
    628c:	6f 01       	movw	r12, r30
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	b3 01       	movw	r22, r6
    6292:	0e 94 5e 32 	call	0x64bc	; 0x64bc <fputc>
    6296:	e1 10       	cpse	r14, r1
    6298:	ea 94       	dec	r14
    629a:	01 50       	subi	r16, 0x01	; 1
    629c:	10 40       	sbci	r17, 0x00	; 0
    629e:	01 15       	cp	r16, r1
    62a0:	11 05       	cpc	r17, r1
    62a2:	79 f7       	brne	.-34     	; 0x6282 <vfprintf+0x1ac>
    62a4:	ea c0       	rjmp	.+468    	; 0x647a <vfprintf+0x3a4>
    62a6:	94 36       	cpi	r25, 0x64	; 100
    62a8:	11 f0       	breq	.+4      	; 0x62ae <vfprintf+0x1d8>
    62aa:	99 36       	cpi	r25, 0x69	; 105
    62ac:	69 f5       	brne	.+90     	; 0x6308 <vfprintf+0x232>
    62ae:	f7 fe       	sbrs	r15, 7
    62b0:	08 c0       	rjmp	.+16     	; 0x62c2 <vfprintf+0x1ec>
    62b2:	f5 01       	movw	r30, r10
    62b4:	20 81       	ld	r18, Z
    62b6:	31 81       	ldd	r19, Z+1	; 0x01
    62b8:	42 81       	ldd	r20, Z+2	; 0x02
    62ba:	53 81       	ldd	r21, Z+3	; 0x03
    62bc:	84 e0       	ldi	r24, 0x04	; 4
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	0a c0       	rjmp	.+20     	; 0x62d6 <vfprintf+0x200>
    62c2:	f5 01       	movw	r30, r10
    62c4:	80 81       	ld	r24, Z
    62c6:	91 81       	ldd	r25, Z+1	; 0x01
    62c8:	9c 01       	movw	r18, r24
    62ca:	44 27       	eor	r20, r20
    62cc:	37 fd       	sbrc	r19, 7
    62ce:	40 95       	com	r20
    62d0:	54 2f       	mov	r21, r20
    62d2:	82 e0       	ldi	r24, 0x02	; 2
    62d4:	90 e0       	ldi	r25, 0x00	; 0
    62d6:	a8 0e       	add	r10, r24
    62d8:	b9 1e       	adc	r11, r25
    62da:	9f e6       	ldi	r25, 0x6F	; 111
    62dc:	f9 22       	and	r15, r25
    62de:	57 ff       	sbrs	r21, 7
    62e0:	09 c0       	rjmp	.+18     	; 0x62f4 <vfprintf+0x21e>
    62e2:	50 95       	com	r21
    62e4:	40 95       	com	r20
    62e6:	30 95       	com	r19
    62e8:	21 95       	neg	r18
    62ea:	3f 4f       	sbci	r19, 0xFF	; 255
    62ec:	4f 4f       	sbci	r20, 0xFF	; 255
    62ee:	5f 4f       	sbci	r21, 0xFF	; 255
    62f0:	e0 e8       	ldi	r30, 0x80	; 128
    62f2:	fe 2a       	or	r15, r30
    62f4:	ca 01       	movw	r24, r20
    62f6:	b9 01       	movw	r22, r18
    62f8:	a1 01       	movw	r20, r2
    62fa:	2a e0       	ldi	r18, 0x0A	; 10
    62fc:	30 e0       	ldi	r19, 0x00	; 0
    62fe:	0e 94 8a 32 	call	0x6514	; 0x6514 <__ultoa_invert>
    6302:	d8 2e       	mov	r13, r24
    6304:	d2 18       	sub	r13, r2
    6306:	40 c0       	rjmp	.+128    	; 0x6388 <vfprintf+0x2b2>
    6308:	95 37       	cpi	r25, 0x75	; 117
    630a:	29 f4       	brne	.+10     	; 0x6316 <vfprintf+0x240>
    630c:	1f 2d       	mov	r17, r15
    630e:	1f 7e       	andi	r17, 0xEF	; 239
    6310:	2a e0       	ldi	r18, 0x0A	; 10
    6312:	30 e0       	ldi	r19, 0x00	; 0
    6314:	1d c0       	rjmp	.+58     	; 0x6350 <vfprintf+0x27a>
    6316:	1f 2d       	mov	r17, r15
    6318:	19 7f       	andi	r17, 0xF9	; 249
    631a:	9f 36       	cpi	r25, 0x6F	; 111
    631c:	61 f0       	breq	.+24     	; 0x6336 <vfprintf+0x260>
    631e:	90 37       	cpi	r25, 0x70	; 112
    6320:	20 f4       	brcc	.+8      	; 0x632a <vfprintf+0x254>
    6322:	98 35       	cpi	r25, 0x58	; 88
    6324:	09 f0       	breq	.+2      	; 0x6328 <vfprintf+0x252>
    6326:	ac c0       	rjmp	.+344    	; 0x6480 <vfprintf+0x3aa>
    6328:	0f c0       	rjmp	.+30     	; 0x6348 <vfprintf+0x272>
    632a:	90 37       	cpi	r25, 0x70	; 112
    632c:	39 f0       	breq	.+14     	; 0x633c <vfprintf+0x266>
    632e:	98 37       	cpi	r25, 0x78	; 120
    6330:	09 f0       	breq	.+2      	; 0x6334 <vfprintf+0x25e>
    6332:	a6 c0       	rjmp	.+332    	; 0x6480 <vfprintf+0x3aa>
    6334:	04 c0       	rjmp	.+8      	; 0x633e <vfprintf+0x268>
    6336:	28 e0       	ldi	r18, 0x08	; 8
    6338:	30 e0       	ldi	r19, 0x00	; 0
    633a:	0a c0       	rjmp	.+20     	; 0x6350 <vfprintf+0x27a>
    633c:	10 61       	ori	r17, 0x10	; 16
    633e:	14 fd       	sbrc	r17, 4
    6340:	14 60       	ori	r17, 0x04	; 4
    6342:	20 e1       	ldi	r18, 0x10	; 16
    6344:	30 e0       	ldi	r19, 0x00	; 0
    6346:	04 c0       	rjmp	.+8      	; 0x6350 <vfprintf+0x27a>
    6348:	14 fd       	sbrc	r17, 4
    634a:	16 60       	ori	r17, 0x06	; 6
    634c:	20 e1       	ldi	r18, 0x10	; 16
    634e:	32 e0       	ldi	r19, 0x02	; 2
    6350:	17 ff       	sbrs	r17, 7
    6352:	08 c0       	rjmp	.+16     	; 0x6364 <vfprintf+0x28e>
    6354:	f5 01       	movw	r30, r10
    6356:	60 81       	ld	r22, Z
    6358:	71 81       	ldd	r23, Z+1	; 0x01
    635a:	82 81       	ldd	r24, Z+2	; 0x02
    635c:	93 81       	ldd	r25, Z+3	; 0x03
    635e:	44 e0       	ldi	r20, 0x04	; 4
    6360:	50 e0       	ldi	r21, 0x00	; 0
    6362:	08 c0       	rjmp	.+16     	; 0x6374 <vfprintf+0x29e>
    6364:	f5 01       	movw	r30, r10
    6366:	80 81       	ld	r24, Z
    6368:	91 81       	ldd	r25, Z+1	; 0x01
    636a:	bc 01       	movw	r22, r24
    636c:	80 e0       	ldi	r24, 0x00	; 0
    636e:	90 e0       	ldi	r25, 0x00	; 0
    6370:	42 e0       	ldi	r20, 0x02	; 2
    6372:	50 e0       	ldi	r21, 0x00	; 0
    6374:	a4 0e       	add	r10, r20
    6376:	b5 1e       	adc	r11, r21
    6378:	a1 01       	movw	r20, r2
    637a:	0e 94 8a 32 	call	0x6514	; 0x6514 <__ultoa_invert>
    637e:	d8 2e       	mov	r13, r24
    6380:	d2 18       	sub	r13, r2
    6382:	8f e7       	ldi	r24, 0x7F	; 127
    6384:	f8 2e       	mov	r15, r24
    6386:	f1 22       	and	r15, r17
    6388:	f6 fe       	sbrs	r15, 6
    638a:	0b c0       	rjmp	.+22     	; 0x63a2 <vfprintf+0x2cc>
    638c:	5e ef       	ldi	r21, 0xFE	; 254
    638e:	f5 22       	and	r15, r21
    6390:	d9 14       	cp	r13, r9
    6392:	38 f4       	brcc	.+14     	; 0x63a2 <vfprintf+0x2cc>
    6394:	f4 fe       	sbrs	r15, 4
    6396:	07 c0       	rjmp	.+14     	; 0x63a6 <vfprintf+0x2d0>
    6398:	f2 fc       	sbrc	r15, 2
    639a:	05 c0       	rjmp	.+10     	; 0x63a6 <vfprintf+0x2d0>
    639c:	8f ee       	ldi	r24, 0xEF	; 239
    639e:	f8 22       	and	r15, r24
    63a0:	02 c0       	rjmp	.+4      	; 0x63a6 <vfprintf+0x2d0>
    63a2:	1d 2d       	mov	r17, r13
    63a4:	01 c0       	rjmp	.+2      	; 0x63a8 <vfprintf+0x2d2>
    63a6:	19 2d       	mov	r17, r9
    63a8:	f4 fe       	sbrs	r15, 4
    63aa:	0d c0       	rjmp	.+26     	; 0x63c6 <vfprintf+0x2f0>
    63ac:	fe 01       	movw	r30, r28
    63ae:	ed 0d       	add	r30, r13
    63b0:	f1 1d       	adc	r31, r1
    63b2:	80 81       	ld	r24, Z
    63b4:	80 33       	cpi	r24, 0x30	; 48
    63b6:	19 f4       	brne	.+6      	; 0x63be <vfprintf+0x2e8>
    63b8:	99 ee       	ldi	r25, 0xE9	; 233
    63ba:	f9 22       	and	r15, r25
    63bc:	08 c0       	rjmp	.+16     	; 0x63ce <vfprintf+0x2f8>
    63be:	1f 5f       	subi	r17, 0xFF	; 255
    63c0:	f2 fe       	sbrs	r15, 2
    63c2:	05 c0       	rjmp	.+10     	; 0x63ce <vfprintf+0x2f8>
    63c4:	03 c0       	rjmp	.+6      	; 0x63cc <vfprintf+0x2f6>
    63c6:	8f 2d       	mov	r24, r15
    63c8:	86 78       	andi	r24, 0x86	; 134
    63ca:	09 f0       	breq	.+2      	; 0x63ce <vfprintf+0x2f8>
    63cc:	1f 5f       	subi	r17, 0xFF	; 255
    63ce:	0f 2d       	mov	r16, r15
    63d0:	f3 fc       	sbrc	r15, 3
    63d2:	14 c0       	rjmp	.+40     	; 0x63fc <vfprintf+0x326>
    63d4:	f0 fe       	sbrs	r15, 0
    63d6:	0f c0       	rjmp	.+30     	; 0x63f6 <vfprintf+0x320>
    63d8:	1e 15       	cp	r17, r14
    63da:	10 f0       	brcs	.+4      	; 0x63e0 <vfprintf+0x30a>
    63dc:	9d 2c       	mov	r9, r13
    63de:	0b c0       	rjmp	.+22     	; 0x63f6 <vfprintf+0x320>
    63e0:	9d 2c       	mov	r9, r13
    63e2:	9e 0c       	add	r9, r14
    63e4:	91 1a       	sub	r9, r17
    63e6:	1e 2d       	mov	r17, r14
    63e8:	06 c0       	rjmp	.+12     	; 0x63f6 <vfprintf+0x320>
    63ea:	80 e2       	ldi	r24, 0x20	; 32
    63ec:	90 e0       	ldi	r25, 0x00	; 0
    63ee:	b3 01       	movw	r22, r6
    63f0:	0e 94 5e 32 	call	0x64bc	; 0x64bc <fputc>
    63f4:	1f 5f       	subi	r17, 0xFF	; 255
    63f6:	1e 15       	cp	r17, r14
    63f8:	c0 f3       	brcs	.-16     	; 0x63ea <vfprintf+0x314>
    63fa:	04 c0       	rjmp	.+8      	; 0x6404 <vfprintf+0x32e>
    63fc:	1e 15       	cp	r17, r14
    63fe:	10 f4       	brcc	.+4      	; 0x6404 <vfprintf+0x32e>
    6400:	e1 1a       	sub	r14, r17
    6402:	01 c0       	rjmp	.+2      	; 0x6406 <vfprintf+0x330>
    6404:	ee 24       	eor	r14, r14
    6406:	04 ff       	sbrs	r16, 4
    6408:	0f c0       	rjmp	.+30     	; 0x6428 <vfprintf+0x352>
    640a:	80 e3       	ldi	r24, 0x30	; 48
    640c:	90 e0       	ldi	r25, 0x00	; 0
    640e:	b3 01       	movw	r22, r6
    6410:	0e 94 5e 32 	call	0x64bc	; 0x64bc <fputc>
    6414:	02 ff       	sbrs	r16, 2
    6416:	1d c0       	rjmp	.+58     	; 0x6452 <vfprintf+0x37c>
    6418:	01 fd       	sbrc	r16, 1
    641a:	03 c0       	rjmp	.+6      	; 0x6422 <vfprintf+0x34c>
    641c:	88 e7       	ldi	r24, 0x78	; 120
    641e:	90 e0       	ldi	r25, 0x00	; 0
    6420:	0e c0       	rjmp	.+28     	; 0x643e <vfprintf+0x368>
    6422:	88 e5       	ldi	r24, 0x58	; 88
    6424:	90 e0       	ldi	r25, 0x00	; 0
    6426:	0b c0       	rjmp	.+22     	; 0x643e <vfprintf+0x368>
    6428:	80 2f       	mov	r24, r16
    642a:	86 78       	andi	r24, 0x86	; 134
    642c:	91 f0       	breq	.+36     	; 0x6452 <vfprintf+0x37c>
    642e:	01 ff       	sbrs	r16, 1
    6430:	02 c0       	rjmp	.+4      	; 0x6436 <vfprintf+0x360>
    6432:	8b e2       	ldi	r24, 0x2B	; 43
    6434:	01 c0       	rjmp	.+2      	; 0x6438 <vfprintf+0x362>
    6436:	80 e2       	ldi	r24, 0x20	; 32
    6438:	f7 fc       	sbrc	r15, 7
    643a:	8d e2       	ldi	r24, 0x2D	; 45
    643c:	90 e0       	ldi	r25, 0x00	; 0
    643e:	b3 01       	movw	r22, r6
    6440:	0e 94 5e 32 	call	0x64bc	; 0x64bc <fputc>
    6444:	06 c0       	rjmp	.+12     	; 0x6452 <vfprintf+0x37c>
    6446:	80 e3       	ldi	r24, 0x30	; 48
    6448:	90 e0       	ldi	r25, 0x00	; 0
    644a:	b3 01       	movw	r22, r6
    644c:	0e 94 5e 32 	call	0x64bc	; 0x64bc <fputc>
    6450:	9a 94       	dec	r9
    6452:	d9 14       	cp	r13, r9
    6454:	c0 f3       	brcs	.-16     	; 0x6446 <vfprintf+0x370>
    6456:	da 94       	dec	r13
    6458:	f1 01       	movw	r30, r2
    645a:	ed 0d       	add	r30, r13
    645c:	f1 1d       	adc	r31, r1
    645e:	80 81       	ld	r24, Z
    6460:	90 e0       	ldi	r25, 0x00	; 0
    6462:	b3 01       	movw	r22, r6
    6464:	0e 94 5e 32 	call	0x64bc	; 0x64bc <fputc>
    6468:	dd 20       	and	r13, r13
    646a:	a9 f7       	brne	.-22     	; 0x6456 <vfprintf+0x380>
    646c:	06 c0       	rjmp	.+12     	; 0x647a <vfprintf+0x3a4>
    646e:	80 e2       	ldi	r24, 0x20	; 32
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	b3 01       	movw	r22, r6
    6474:	0e 94 5e 32 	call	0x64bc	; 0x64bc <fputc>
    6478:	ea 94       	dec	r14
    647a:	ee 20       	and	r14, r14
    647c:	c1 f7       	brne	.-16     	; 0x646e <vfprintf+0x398>
    647e:	43 ce       	rjmp	.-890    	; 0x6106 <vfprintf+0x30>
    6480:	f3 01       	movw	r30, r6
    6482:	66 81       	ldd	r22, Z+6	; 0x06
    6484:	77 81       	ldd	r23, Z+7	; 0x07
    6486:	cb 01       	movw	r24, r22
    6488:	2b 96       	adiw	r28, 0x0b	; 11
    648a:	e2 e1       	ldi	r30, 0x12	; 18
    648c:	0c 94 25 30 	jmp	0x604a	; 0x604a <__epilogue_restores__>

00006490 <strnlen_P>:
    6490:	fc 01       	movw	r30, r24
    6492:	05 90       	lpm	r0, Z+
    6494:	61 50       	subi	r22, 0x01	; 1
    6496:	70 40       	sbci	r23, 0x00	; 0
    6498:	01 10       	cpse	r0, r1
    649a:	d8 f7       	brcc	.-10     	; 0x6492 <strnlen_P+0x2>
    649c:	80 95       	com	r24
    649e:	90 95       	com	r25
    64a0:	8e 0f       	add	r24, r30
    64a2:	9f 1f       	adc	r25, r31
    64a4:	08 95       	ret

000064a6 <strnlen>:
    64a6:	fc 01       	movw	r30, r24
    64a8:	61 50       	subi	r22, 0x01	; 1
    64aa:	70 40       	sbci	r23, 0x00	; 0
    64ac:	01 90       	ld	r0, Z+
    64ae:	01 10       	cpse	r0, r1
    64b0:	d8 f7       	brcc	.-10     	; 0x64a8 <strnlen+0x2>
    64b2:	80 95       	com	r24
    64b4:	90 95       	com	r25
    64b6:	8e 0f       	add	r24, r30
    64b8:	9f 1f       	adc	r25, r31
    64ba:	08 95       	ret

000064bc <fputc>:
    64bc:	0f 93       	push	r16
    64be:	1f 93       	push	r17
    64c0:	cf 93       	push	r28
    64c2:	df 93       	push	r29
    64c4:	8c 01       	movw	r16, r24
    64c6:	eb 01       	movw	r28, r22
    64c8:	8b 81       	ldd	r24, Y+3	; 0x03
    64ca:	81 ff       	sbrs	r24, 1
    64cc:	1b c0       	rjmp	.+54     	; 0x6504 <fputc+0x48>
    64ce:	82 ff       	sbrs	r24, 2
    64d0:	0d c0       	rjmp	.+26     	; 0x64ec <fputc+0x30>
    64d2:	2e 81       	ldd	r18, Y+6	; 0x06
    64d4:	3f 81       	ldd	r19, Y+7	; 0x07
    64d6:	8c 81       	ldd	r24, Y+4	; 0x04
    64d8:	9d 81       	ldd	r25, Y+5	; 0x05
    64da:	28 17       	cp	r18, r24
    64dc:	39 07       	cpc	r19, r25
    64de:	64 f4       	brge	.+24     	; 0x64f8 <fputc+0x3c>
    64e0:	e8 81       	ld	r30, Y
    64e2:	f9 81       	ldd	r31, Y+1	; 0x01
    64e4:	01 93       	st	Z+, r16
    64e6:	f9 83       	std	Y+1, r31	; 0x01
    64e8:	e8 83       	st	Y, r30
    64ea:	06 c0       	rjmp	.+12     	; 0x64f8 <fputc+0x3c>
    64ec:	e8 85       	ldd	r30, Y+8	; 0x08
    64ee:	f9 85       	ldd	r31, Y+9	; 0x09
    64f0:	80 2f       	mov	r24, r16
    64f2:	09 95       	icall
    64f4:	89 2b       	or	r24, r25
    64f6:	31 f4       	brne	.+12     	; 0x6504 <fputc+0x48>
    64f8:	8e 81       	ldd	r24, Y+6	; 0x06
    64fa:	9f 81       	ldd	r25, Y+7	; 0x07
    64fc:	01 96       	adiw	r24, 0x01	; 1
    64fe:	9f 83       	std	Y+7, r25	; 0x07
    6500:	8e 83       	std	Y+6, r24	; 0x06
    6502:	02 c0       	rjmp	.+4      	; 0x6508 <fputc+0x4c>
    6504:	0f ef       	ldi	r16, 0xFF	; 255
    6506:	1f ef       	ldi	r17, 0xFF	; 255
    6508:	c8 01       	movw	r24, r16
    650a:	df 91       	pop	r29
    650c:	cf 91       	pop	r28
    650e:	1f 91       	pop	r17
    6510:	0f 91       	pop	r16
    6512:	08 95       	ret

00006514 <__ultoa_invert>:
    6514:	fa 01       	movw	r30, r20
    6516:	aa 27       	eor	r26, r26
    6518:	28 30       	cpi	r18, 0x08	; 8
    651a:	51 f1       	breq	.+84     	; 0x6570 <__ultoa_invert+0x5c>
    651c:	20 31       	cpi	r18, 0x10	; 16
    651e:	81 f1       	breq	.+96     	; 0x6580 <__ultoa_invert+0x6c>
    6520:	e8 94       	clt
    6522:	6f 93       	push	r22
    6524:	6e 7f       	andi	r22, 0xFE	; 254
    6526:	6e 5f       	subi	r22, 0xFE	; 254
    6528:	7f 4f       	sbci	r23, 0xFF	; 255
    652a:	8f 4f       	sbci	r24, 0xFF	; 255
    652c:	9f 4f       	sbci	r25, 0xFF	; 255
    652e:	af 4f       	sbci	r26, 0xFF	; 255
    6530:	b1 e0       	ldi	r27, 0x01	; 1
    6532:	3e d0       	rcall	.+124    	; 0x65b0 <__ultoa_invert+0x9c>
    6534:	b4 e0       	ldi	r27, 0x04	; 4
    6536:	3c d0       	rcall	.+120    	; 0x65b0 <__ultoa_invert+0x9c>
    6538:	67 0f       	add	r22, r23
    653a:	78 1f       	adc	r23, r24
    653c:	89 1f       	adc	r24, r25
    653e:	9a 1f       	adc	r25, r26
    6540:	a1 1d       	adc	r26, r1
    6542:	68 0f       	add	r22, r24
    6544:	79 1f       	adc	r23, r25
    6546:	8a 1f       	adc	r24, r26
    6548:	91 1d       	adc	r25, r1
    654a:	a1 1d       	adc	r26, r1
    654c:	6a 0f       	add	r22, r26
    654e:	71 1d       	adc	r23, r1
    6550:	81 1d       	adc	r24, r1
    6552:	91 1d       	adc	r25, r1
    6554:	a1 1d       	adc	r26, r1
    6556:	20 d0       	rcall	.+64     	; 0x6598 <__ultoa_invert+0x84>
    6558:	09 f4       	brne	.+2      	; 0x655c <__ultoa_invert+0x48>
    655a:	68 94       	set
    655c:	3f 91       	pop	r19
    655e:	2a e0       	ldi	r18, 0x0A	; 10
    6560:	26 9f       	mul	r18, r22
    6562:	11 24       	eor	r1, r1
    6564:	30 19       	sub	r19, r0
    6566:	30 5d       	subi	r19, 0xD0	; 208
    6568:	31 93       	st	Z+, r19
    656a:	de f6       	brtc	.-74     	; 0x6522 <__ultoa_invert+0xe>
    656c:	cf 01       	movw	r24, r30
    656e:	08 95       	ret
    6570:	46 2f       	mov	r20, r22
    6572:	47 70       	andi	r20, 0x07	; 7
    6574:	40 5d       	subi	r20, 0xD0	; 208
    6576:	41 93       	st	Z+, r20
    6578:	b3 e0       	ldi	r27, 0x03	; 3
    657a:	0f d0       	rcall	.+30     	; 0x659a <__ultoa_invert+0x86>
    657c:	c9 f7       	brne	.-14     	; 0x6570 <__ultoa_invert+0x5c>
    657e:	f6 cf       	rjmp	.-20     	; 0x656c <__ultoa_invert+0x58>
    6580:	46 2f       	mov	r20, r22
    6582:	4f 70       	andi	r20, 0x0F	; 15
    6584:	40 5d       	subi	r20, 0xD0	; 208
    6586:	4a 33       	cpi	r20, 0x3A	; 58
    6588:	18 f0       	brcs	.+6      	; 0x6590 <__ultoa_invert+0x7c>
    658a:	49 5d       	subi	r20, 0xD9	; 217
    658c:	31 fd       	sbrc	r19, 1
    658e:	40 52       	subi	r20, 0x20	; 32
    6590:	41 93       	st	Z+, r20
    6592:	02 d0       	rcall	.+4      	; 0x6598 <__ultoa_invert+0x84>
    6594:	a9 f7       	brne	.-22     	; 0x6580 <__ultoa_invert+0x6c>
    6596:	ea cf       	rjmp	.-44     	; 0x656c <__ultoa_invert+0x58>
    6598:	b4 e0       	ldi	r27, 0x04	; 4
    659a:	a6 95       	lsr	r26
    659c:	97 95       	ror	r25
    659e:	87 95       	ror	r24
    65a0:	77 95       	ror	r23
    65a2:	67 95       	ror	r22
    65a4:	ba 95       	dec	r27
    65a6:	c9 f7       	brne	.-14     	; 0x659a <__ultoa_invert+0x86>
    65a8:	00 97       	sbiw	r24, 0x00	; 0
    65aa:	61 05       	cpc	r22, r1
    65ac:	71 05       	cpc	r23, r1
    65ae:	08 95       	ret
    65b0:	9b 01       	movw	r18, r22
    65b2:	ac 01       	movw	r20, r24
    65b4:	0a 2e       	mov	r0, r26
    65b6:	06 94       	lsr	r0
    65b8:	57 95       	ror	r21
    65ba:	47 95       	ror	r20
    65bc:	37 95       	ror	r19
    65be:	27 95       	ror	r18
    65c0:	ba 95       	dec	r27
    65c2:	c9 f7       	brne	.-14     	; 0x65b6 <__ultoa_invert+0xa2>
    65c4:	62 0f       	add	r22, r18
    65c6:	73 1f       	adc	r23, r19
    65c8:	84 1f       	adc	r24, r20
    65ca:	95 1f       	adc	r25, r21
    65cc:	a0 1d       	adc	r26, r0
    65ce:	08 95       	ret

000065d0 <_exit>:
    65d0:	f8 94       	cli

000065d2 <__stop_program>:
    65d2:	ff cf       	rjmp	.-2      	; 0x65d2 <__stop_program>
