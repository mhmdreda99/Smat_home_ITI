
lecture_one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000067ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000027c  00800060  000067ca  0000685e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  008002dc  008002dc  00006ada  2**0
                  ALLOC
  3 .stab         00006ee8  00000000  00000000  00006adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a89  00000000  00000000  0000d9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0001044d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0001060d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00010821  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00012e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00014301  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001560c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000157ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00015af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001650d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__vector_1>
       8:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__vector_2>
       c:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_13>
      38:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__vector_14>
      3c:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f7 e6       	ldi	r31, 0x67	; 103
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 39 24 	call	0x4872	; 0x4872 <main>
      8a:	0c 94 e3 33 	jmp	0x67c6	; 0x67c6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 31 	jmp	0x6208	; 0x6208 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa eb       	ldi	r26, 0xBA	; 186
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 31 	jmp	0x6240	; 0x6240 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 31 	jmp	0x6220	; 0x6220 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 31 	jmp	0x6258	; 0x6258 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 31 	jmp	0x6220	; 0x6220 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 31 	jmp	0x6258	; 0x6258 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 31 	jmp	0x6208	; 0x6208 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a eb       	ldi	r24, 0xBA	; 186
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 31 	jmp	0x6240	; 0x6240 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0c 31 	jmp	0x6218	; 0x6218 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a eb       	ldi	r22, 0xBA	; 186
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 28 31 	jmp	0x6250	; 0x6250 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 10 31 	jmp	0x6220	; 0x6220 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2c 31 	jmp	0x6258	; 0x6258 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 10 31 	jmp	0x6220	; 0x6220 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2c 31 	jmp	0x6258	; 0x6258 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 10 31 	jmp	0x6220	; 0x6220 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2c 31 	jmp	0x6258	; 0x6258 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0d 31 	jmp	0x621a	; 0x621a <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 29 31 	jmp	0x6252	; 0x6252 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 14 31 	jmp	0x6228	; 0x6228 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 30 31 	jmp	0x6260	; 0x6260 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 0c 31 	jmp	0x6218	; 0x6218 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 28 31 	jmp	0x6250	; 0x6250 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ee 53       	subi	r30, 0x3E	; 62
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Create_Task>:
 * @param periodicity periodicity time of the task
 * @param PTR call back function
 * @return Std_ReturnType function executed correctly or not
 */
Std_ReturnType Create_Task(u8 Priority, u16 periodicity,u8 First_delay ,void(*ptr)(void))
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	27 97       	sbiw	r28, 0x07	; 7
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	8a 83       	std	Y+2, r24	; 0x02
     f00:	7c 83       	std	Y+4, r23	; 0x04
     f02:	6b 83       	std	Y+3, r22	; 0x03
     f04:	4d 83       	std	Y+5, r20	; 0x05
     f06:	3f 83       	std	Y+7, r19	; 0x07
     f08:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType Status=E_NOT_OK;
     f0a:	19 82       	std	Y+1, r1	; 0x01
	if(Tasks[Priority].pf!=NULL)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	c9 01       	movw	r24, r18
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	82 1b       	sub	r24, r18
     f22:	93 0b       	sbc	r25, r19
     f24:	fc 01       	movw	r30, r24
     f26:	e4 52       	subi	r30, 0x24	; 36
     f28:	fd 4f       	sbci	r31, 0xFD	; 253
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	19 f0       	breq	.+6      	; 0xf38 <Create_Task+0x4e>
	{
		Status=E_RESERVED;
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	5a c0       	rjmp	.+180    	; 0xfec <Create_Task+0x102>
	}
	else
	{
		Tasks[Priority].periodicity= periodicity;
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	c9 01       	movw	r24, r18
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	82 1b       	sub	r24, r18
     f4e:	93 0b       	sbc	r25, r19
     f50:	fc 01       	movw	r30, r24
     f52:	e1 52       	subi	r30, 0x21	; 33
     f54:	fd 4f       	sbci	r31, 0xFD	; 253
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	80 83       	st	Z, r24
		Tasks[Priority].pf=ptr;
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	c9 01       	movw	r24, r18
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	82 1b       	sub	r24, r18
     f74:	93 0b       	sbc	r25, r19
     f76:	fc 01       	movw	r30, r24
     f78:	e4 52       	subi	r30, 0x24	; 36
     f7a:	fd 4f       	sbci	r31, 0xFD	; 253
     f7c:	8e 81       	ldd	r24, Y+6	; 0x06
     f7e:	9f 81       	ldd	r25, Y+7	; 0x07
     f80:	91 83       	std	Z+1, r25	; 0x01
     f82:	80 83       	st	Z, r24
		Tasks[Priority].priority=Priority;
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	c9 01       	movw	r24, r18
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	82 1b       	sub	r24, r18
     f9a:	93 0b       	sbc	r25, r19
     f9c:	fc 01       	movw	r30, r24
     f9e:	e2 52       	subi	r30, 0x22	; 34
     fa0:	fd 4f       	sbci	r31, 0xFD	; 253
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	80 83       	st	Z, r24
		Tasks[Priority].F_Delay=First_delay;
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	c9 01       	movw	r24, r18
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	82 1b       	sub	r24, r18
     fbc:	93 0b       	sbc	r25, r19
     fbe:	fc 01       	movw	r30, r24
     fc0:	ee 51       	subi	r30, 0x1E	; 30
     fc2:	fd 4f       	sbci	r31, 0xFD	; 253
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	80 83       	st	Z, r24
		Tasks[Priority].state=TASK_IDLE;
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	c9 01       	movw	r24, r18
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	82 1b       	sub	r24, r18
     fde:	93 0b       	sbc	r25, r19
     fe0:	fc 01       	movw	r30, r24
     fe2:	ef 51       	subi	r30, 0x1F	; 31
     fe4:	fd 4f       	sbci	r31, 0xFD	; 253
     fe6:	10 82       	st	Z, r1
		Status=E_OK;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	89 83       	std	Y+1, r24	; 0x01
	}
	return Status;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
}
     fee:	27 96       	adiw	r28, 0x07	; 7
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <RTOS_START>:

void RTOS_START(void)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	TIMER0_SETCALLBACK(&Schedular);
    1008:	84 e6       	ldi	r24, 0x64	; 100
    100a:	98 e0       	ldi	r25, 0x08	; 8
    100c:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <TIMER0_SETCALLBACK>
	Enable_Global_Interrupt();
    1010:	af e5       	ldi	r26, 0x5F	; 95
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	ef e5       	ldi	r30, 0x5F	; 95
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	80 68       	ori	r24, 0x80	; 128
    101c:	8c 93       	st	X, r24
	MTIMER0_VoidInit();
    101e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <MTIMER0_VoidInit>
}
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <Task_Suspend>:
/***************************************/
void Task_Suspend(u8 Priority)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	0f 92       	push	r0
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	89 83       	std	Y+1, r24	; 0x01
	Tasks[Priority].state=TASK_SUSPENDED;
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	c9 01       	movw	r24, r18
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	82 1b       	sub	r24, r18
    104a:	93 0b       	sbc	r25, r19
    104c:	fc 01       	movw	r30, r24
    104e:	ef 51       	subi	r30, 0x1F	; 31
    1050:	fd 4f       	sbci	r31, 0xFD	; 253
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 83       	st	Z, r24
}
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <Task_Resume>:
/***************************************/
void Task_Resume(u8 Priority)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	89 83       	std	Y+1, r24	; 0x01
	Tasks[Priority].state=TASK_IDLE;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	c9 01       	movw	r24, r18
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	82 1b       	sub	r24, r18
    1080:	93 0b       	sbc	r25, r19
    1082:	fc 01       	movw	r30, r24
    1084:	ef 51       	subi	r30, 0x1F	; 31
    1086:	fd 4f       	sbci	r31, 0xFD	; 253
    1088:	10 82       	st	Z, r1
}
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <Task_Delete>:
/***************************************/
void Task_Delete(u8 Priority)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	89 83       	std	Y+1, r24	; 0x01
	Tasks[Priority].pf=NULL;
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	c9 01       	movw	r24, r18
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	82 1b       	sub	r24, r18
    10b4:	93 0b       	sbc	r25, r19
    10b6:	fc 01       	movw	r30, r24
    10b8:	e4 52       	subi	r30, 0x24	; 36
    10ba:	fd 4f       	sbci	r31, 0xFD	; 253
    10bc:	11 82       	std	Z+1, r1	; 0x01
    10be:	10 82       	st	Z, r1
}
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <Schedular>:
/***************************************/

void Schedular(void)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
 	u8 Task_Counter=0;
    10d2:	19 82       	std	Y+1, r1	; 0x01

	for(Task_Counter=0;Task_Counter<TASK_MAX_NUMBER;Task_Counter++)
    10d4:	19 82       	std	Y+1, r1	; 0x01
    10d6:	91 c0       	rjmp	.+290    	; 0x11fa <Schedular+0x132>
	{
		if(Tasks[Task_Counter].state==TASK_IDLE)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	c9 01       	movw	r24, r18
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	82 1b       	sub	r24, r18
    10ee:	93 0b       	sbc	r25, r19
    10f0:	fc 01       	movw	r30, r24
    10f2:	ef 51       	subi	r30, 0x1F	; 31
    10f4:	fd 4f       	sbci	r31, 0xFD	; 253
    10f6:	80 81       	ld	r24, Z
    10f8:	88 23       	and	r24, r24
    10fa:	09 f0       	breq	.+2      	; 0x10fe <Schedular+0x36>
    10fc:	7b c0       	rjmp	.+246    	; 0x11f4 <Schedular+0x12c>
		{
			if(NULL!=Tasks[Task_Counter].pf)
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	c9 01       	movw	r24, r18
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	82 1b       	sub	r24, r18
    1114:	93 0b       	sbc	r25, r19
    1116:	fc 01       	movw	r30, r24
    1118:	e4 52       	subi	r30, 0x24	; 36
    111a:	fd 4f       	sbci	r31, 0xFD	; 253
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	09 f4       	brne	.+2      	; 0x1126 <Schedular+0x5e>
    1124:	67 c0       	rjmp	.+206    	; 0x11f4 <Schedular+0x12c>
			{
				// if(counter_ticks%Tasks[Task_Counter].periodicity==0)
				if(Tasks[Task_Counter].F_Delay==0)
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	c9 01       	movw	r24, r18
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	82 1b       	sub	r24, r18
    113c:	93 0b       	sbc	r25, r19
    113e:	fc 01       	movw	r30, r24
    1140:	ee 51       	subi	r30, 0x1E	; 30
    1142:	fd 4f       	sbci	r31, 0xFD	; 253
    1144:	80 81       	ld	r24, Z
    1146:	88 23       	and	r24, r24
    1148:	b1 f5       	brne	.+108    	; 0x11b6 <Schedular+0xee>
				{
					Tasks[Task_Counter].pf();
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	c9 01       	movw	r24, r18
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	82 1b       	sub	r24, r18
    1160:	93 0b       	sbc	r25, r19
    1162:	fc 01       	movw	r30, r24
    1164:	e4 52       	subi	r30, 0x24	; 36
    1166:	fd 4f       	sbci	r31, 0xFD	; 253
    1168:	01 90       	ld	r0, Z+
    116a:	f0 81       	ld	r31, Z
    116c:	e0 2d       	mov	r30, r0
    116e:	09 95       	icall
					Tasks[Task_Counter].F_Delay=Tasks[Task_Counter].periodicity;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	48 2f       	mov	r20, r24
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	c9 01       	movw	r24, r18
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	82 1b       	sub	r24, r18
    118c:	93 0b       	sbc	r25, r19
    118e:	fc 01       	movw	r30, r24
    1190:	e1 52       	subi	r30, 0x21	; 33
    1192:	fd 4f       	sbci	r31, 0xFD	; 253
    1194:	80 81       	ld	r24, Z
    1196:	91 81       	ldd	r25, Z+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	ca 01       	movw	r24, r20
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	84 1b       	sub	r24, r20
    11aa:	95 0b       	sbc	r25, r21
    11ac:	fc 01       	movw	r30, r24
    11ae:	ee 51       	subi	r30, 0x1E	; 30
    11b0:	fd 4f       	sbci	r31, 0xFD	; 253
    11b2:	20 83       	st	Z, r18
    11b4:	1f c0       	rjmp	.+62     	; 0x11f4 <Schedular+0x12c>
				}
				else
				{
					Tasks[Task_Counter].F_Delay--;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	c9 01       	movw	r24, r18
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	82 1b       	sub	r24, r18
    11cc:	93 0b       	sbc	r25, r19
    11ce:	fc 01       	movw	r30, r24
    11d0:	ee 51       	subi	r30, 0x1E	; 30
    11d2:	fd 4f       	sbci	r31, 0xFD	; 253
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	41 50       	subi	r20, 0x01	; 1
    11da:	c9 01       	movw	r24, r18
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	82 1b       	sub	r24, r18
    11ea:	93 0b       	sbc	r25, r19
    11ec:	fc 01       	movw	r30, r24
    11ee:	ee 51       	subi	r30, 0x1E	; 30
    11f0:	fd 4f       	sbci	r31, 0xFD	; 253
    11f2:	40 83       	st	Z, r20

void Schedular(void)
{
 	u8 Task_Counter=0;

	for(Task_Counter=0;Task_Counter<TASK_MAX_NUMBER;Task_Counter++)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	85 30       	cpi	r24, 0x05	; 5
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <Schedular+0x13a>
    1200:	6b cf       	rjmp	.-298    	; 0x10d8 <Schedular+0x10>
			/*DO NOTHING*/
		}


	}
}
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <MUART_INIT>:
 * @param TX_Callback  The call back function send by the user fired when transmitting is done
 * @param RX_Callback  The call back function send by the user fired when Receiving is done
 * @param EDR_Callback  The call back function send by the user fired when the data register is empty
 */
void MUART_INIT(void(*TX_Callback)(void),void(*RX_Callback)(void),void(*EDR_Callback)(void))
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	29 97       	sbiw	r28, 0x09	; 9
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	9d 83       	std	Y+5, r25	; 0x05
    1220:	8c 83       	std	Y+4, r24	; 0x04
    1222:	7f 83       	std	Y+7, r23	; 0x07
    1224:	6e 83       	std	Y+6, r22	; 0x06
    1226:	59 87       	std	Y+9, r21	; 0x09
    1228:	48 87       	std	Y+8, r20	; 0x08
	u16 L_UBBR =0;
    122a:	1b 82       	std	Y+3, r1	; 0x03
    122c:	1a 82       	std	Y+2, r1	; 0x02
	u8 L_SETTINGS=0;
    122e:	19 82       	std	Y+1, r1	; 0x01

	/**********************BAUD RATE CONFIGURATIONS**********************/
#if UART_BAUD_RATE_CNFG==UART_BAUDRATE_USE_ASYNCH_NORMAL_SPEED
	L_UBBR=(u16)((u32)F_CPU/((u32)16*UART_BAUDRATE_VALUE))-1;
    1230:	83 e3       	ldi	r24, 0x33	; 51
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9b 83       	std	Y+3, r25	; 0x03
    1236:	8a 83       	std	Y+2, r24	; 0x02
	Set_BRG_VAL(L_UBBR);
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	9b 81       	ldd	r25, Y+3	; 0x03
    123c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <Set_BRG_VAL>

	/************check transmitting mode**********/
#if UART_TX_MODE==UART_TX_MODE_ENABLED
	UART_TRANSMITTER_ENABLE();
#elif UART_TX_MODE==UART_TX_MODE_DISABLED
	UART_TRANSMITTER_DISABLE();
    1240:	aa e2       	ldi	r26, 0x2A	; 42
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	ea e2       	ldi	r30, 0x2A	; 42
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	87 7f       	andi	r24, 0xF7	; 247
    124c:	8c 93       	st	X, r24
#else
#error "Wrong UART TRANSMITTER MODE CHECK UART CONFIG"
#endif
	/************check receiving mode**********/
#if UART_RX_MODE==UART_RX_MODE_ENABLED
	UART_RECEIVER_ENABLE();
    124e:	aa e2       	ldi	r26, 0x2A	; 42
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ea e2       	ldi	r30, 0x2A	; 42
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 61       	ori	r24, 0x10	; 16
    125a:	8c 93       	st	X, r24
#elif UART_RX_MODE==UART_RX_MODE_DISABLED
	UART_RECEIVER_DISABLE();
#else
#error "Wrong UART TRANSMITTER MODE CHECK UART CONFIG"
#endif
	UART_ENABLE_WRITE_UCSRC(L_SETTINGS);
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	80 68       	ori	r24, 0x80	; 128
    1260:	89 83       	std	Y+1, r24	; 0x01
	/***************select UART mode***********/
#if UART_MODE==UART_ENABLE_SYNCHRONOUS_MODE
	UART_ENABLE_SYNCH_MODE(L_SETTINGS);
#elif UART_MODE==UART_ENABLE_ASYNCHRONOUS_MODE
	UART_ENABLE_ASYNCH_MODE(L_SETTINGS);
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	8f 7b       	andi	r24, 0xBF	; 191
    1266:	89 83       	std	Y+1, r24	; 0x01
	/****************setting frame format**************/
	/****************stop bits format**************/
#if UART_STOP_BITS_NUMBER == UART_2STOP_BITS
	UART_SET_2b_STOP(L_SETTINGS);
#elif UART_STOP_BITS_NUMBER == UART_1STOP_BIT
	UART_SET_1b_STOP(L_SETTINGS);
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	87 7f       	andi	r24, 0xF7	; 247
    126c:	89 83       	std	Y+1, r24	; 0x01
#else
#error "WRONG STOP BITS CONFIGURATION FOR UART"
#endif
	/**********************setting parity bits mode***************/
#if UART_SELECT_PARITY_MODE == UART_PARAITY_DISABLED
	UART_DISABLE_PARITYMOOD(L_SETTINGS);
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	8f 7e       	andi	r24, 0xEF	; 239
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	8f 7d       	andi	r24, 0xDF	; 223
    1278:	89 83       	std	Y+1, r24	; 0x01
#elif UART_FRAME_FORMAT_SIZE==UART_6BIT_FRAME_FORMAT
	UART_ENABLE_6bit_DATAMODE(L_SETTINGS);
#elif UART_FRAME_FORMAT_SIZE==UART_7BIT_FRAME_FORMAT
	UART_ENABLE_7bit_DATAMODE(L_SETTINGS);
#elif UART_FRAME_FORMAT_SIZE==UART_8BIT_FRAME_FORMAT
	UART_ENABLE_8bit_DATAMODE(L_SETTINGS);
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	82 60       	ori	r24, 0x02	; 2
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	84 60       	ori	r24, 0x04	; 4
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	aa e2       	ldi	r26, 0x2A	; 42
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	ea e2       	ldi	r30, 0x2A	; 42
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8b 7f       	andi	r24, 0xFB	; 251
    1292:	8c 93       	st	X, r24
#elif UART_FRAME_FORMAT_SIZE==UART_9BIT_FRAME_FORMAT
	UART_ENABLE_9bit_DATAMODE(L_SETTINGS);
#else
#error "Wrong Frame Size Selection Check UART CONFIGURATIONS"
#endif
	UCSRC=L_SETTINGS;
    1294:	e0 e4       	ldi	r30, 0x40	; 64
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	80 83       	st	Z, r24
	/************************interrupt configurations**************/

	//disable the global interrupt during initializing
	Disable_Global_Interrupt();
    129c:	af e5       	ldi	r26, 0x5F	; 95
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ef e5       	ldi	r30, 0x5F	; 95
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 77       	andi	r24, 0x7F	; 127
    12a8:	8c 93       	st	X, r24
	Enable_Global_Interrupt();

#elif UART_TX_INTTERUPT==UART_TX_INT_DISABLED

	//clear TX flag
	UART_TX_CLEAR_FLAG();
    12aa:	ab e2       	ldi	r26, 0x2B	; 43
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	eb e2       	ldi	r30, 0x2B	; 43
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 64       	ori	r24, 0x40	; 64
    12b6:	8c 93       	st	X, r24
	//disable RX interrupt
	UART_DISABLE_TX_INTERRUPT();
    12b8:	aa e2       	ldi	r26, 0x2A	; 42
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ea e2       	ldi	r30, 0x2A	; 42
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8f 7b       	andi	r24, 0xBF	; 191
    12c4:	8c 93       	st	X, r24
	UART_RX_CLEAR_FLAG();
	Enable_Global_Interrupt();

#elif UART_RX_INTTERUPT==UART_RX_INT_DISABLED
	//clear RX flag
	UART_RX_CLEAR_FLAG();
    12c6:	ab e2       	ldi	r26, 0x2B	; 43
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	eb e2       	ldi	r30, 0x2B	; 43
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 64       	ori	r24, 0x40	; 64
    12d2:	8c 93       	st	X, r24
	//disable RX interrupt
	UART_DISABLE_RX_INTERRUPT();
    12d4:	aa e2       	ldi	r26, 0x2A	; 42
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ea e2       	ldi	r30, 0x2A	; 42
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	8f 77       	andi	r24, 0x7F	; 127
    12e0:	8c 93       	st	X, r24
	UART_SET_DATA_REG_EMPTYFLAG();
	Enable_Global_Interrupt();

#elif UART_DRE_INTERRUPT==UART_DRE_INT_DISABLED
	//clear DRE flag
	UART_SET_DATA_REG_EMPTYFLAG();
    12e2:	ab e2       	ldi	r26, 0x2B	; 43
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	eb e2       	ldi	r30, 0x2B	; 43
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	80 62       	ori	r24, 0x20	; 32
    12ee:	8c 93       	st	X, r24
	//disable RX interrupt
	UART_DISABLE_DRE_INTERRUPT();
    12f0:	aa e2       	ldi	r26, 0x2A	; 42
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ea e2       	ldi	r30, 0x2A	; 42
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 7d       	andi	r24, 0xDF	; 223
    12fc:	8c 93       	st	X, r24
#else
#error "WRONG CONFIGURATION OF UART RX INTERRUPT"
#endif
}
    12fe:	29 96       	adiw	r28, 0x09	; 9
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <UART_SEND_CHAR_BLOCKING>:
/***
 * @desc-> this function is used to send data with out interrupt
 * @param data
 */
void UART_SEND_CHAR_BLOCKING(u8 data)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	0f 92       	push	r0
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	89 83       	std	Y+1, r24	; 0x01
	while(!(UART_DATA_REG_EMPTYFLAG_READ()));
    131c:	eb e2       	ldi	r30, 0x2B	; 43
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	82 95       	swap	r24
    1324:	86 95       	lsr	r24
    1326:	87 70       	andi	r24, 0x07	; 7
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	81 70       	andi	r24, 0x01	; 1
    132e:	90 70       	andi	r25, 0x00	; 0
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	a1 f3       	breq	.-24     	; 0x131c <UART_SEND_CHAR_BLOCKING+0xc>
	UDR=data;
    1334:	ec e2       	ldi	r30, 0x2C	; 44
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	80 83       	st	Z, r24
}
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <UART_SEND_STRING_BLOCKING>:
/***
 * @brief this function is used to send string with out interrupt
 * @param str
 */
void UART_SEND_STRING_BLOCKING(u8 *str)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <UART_SEND_STRING_BLOCKING+0x6>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	0b c0       	rjmp	.+22     	; 0x136a <UART_SEND_STRING_BLOCKING+0x26>
	while(*str)
	{
		UART_SEND_CHAR_BLOCKING(*str++);
    1354:	e9 81       	ldd	r30, Y+1	; 0x01
    1356:	fa 81       	ldd	r31, Y+2	; 0x02
    1358:	20 81       	ld	r18, Z
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	82 2f       	mov	r24, r18
    1366:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_SEND_CHAR_BLOCKING>
 * @brief this function is used to send string with out interrupt
 * @param str
 */
void UART_SEND_STRING_BLOCKING(u8 *str)
{
	while(*str)
    136a:	e9 81       	ldd	r30, Y+1	; 0x01
    136c:	fa 81       	ldd	r31, Y+2	; 0x02
    136e:	80 81       	ld	r24, Z
    1370:	88 23       	and	r24, r24
    1372:	81 f7       	brne	.-32     	; 0x1354 <UART_SEND_STRING_BLOCKING+0x10>
	{
		UART_SEND_CHAR_BLOCKING(*str++);
	}
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <UART_RECEIVE_CHAR_BLOCKING>:
/***
 * @this function is used to receive data with out interrupt
 * @return
 */
u8 UART_RECEIVE_CHAR_BLOCKING(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	while(!(UART_RX_FLAG_READ()));
    1386:	eb e2       	ldi	r30, 0x2B	; 43
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	88 23       	and	r24, r24
    138e:	dc f7       	brge	.-10     	; 0x1386 <UART_RECEIVE_CHAR_BLOCKING+0x8>
	return UDR;
    1390:	ec e2       	ldi	r30, 0x2C	; 44
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <UART_RECEIVE_CHAR_POOLING>:
/**************************************/
u8 UART_RECEIVE_CHAR_POOLING(void)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	0f 92       	push	r0
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	if(1==UART_RX_FLAG_READ())
    13a6:	eb e2       	ldi	r30, 0x2B	; 43
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	88 1f       	adc	r24, r24
    13ae:	88 27       	eor	r24, r24
    13b0:	88 1f       	adc	r24, r24
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	31 f4       	brne	.+12     	; 0x13c2 <UART_RECEIVE_CHAR_POOLING+0x26>
	{
		return UDR;
    13b6:	ec e2       	ldi	r30, 0x2C	; 44
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

}
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	00 c0       	rjmp	.+0      	; 0x13c2 <UART_RECEIVE_CHAR_POOLING+0x26>
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <Set_BRG_VAL>:
/************helper functions***************/
/**********this function is called by init function used to set the BAUDRATE*********/
static inline void Set_BRG_VAL(const u16 val)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <Set_BRG_VAL+0x6>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	89 83       	std	Y+1, r24	; 0x01
	UBRRH=(u8)(val>>8);
    13d8:	e0 e4       	ldi	r30, 0x40	; 64
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	89 2f       	mov	r24, r25
    13e2:	99 27       	eor	r25, r25
    13e4:	80 83       	st	Z, r24
	UBRRL=(u8)val;
    13e6:	e9 e2       	ldi	r30, 0x29	; 41
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	80 83       	st	Z, r24
}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <__vector_13>:

/***********************************************/
//UART RX COMPLETE
void __vector_13(void)  __attribute__((signal));
void __vector_13(void)
{
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	4f 93       	push	r20
    1408:	5f 93       	push	r21
    140a:	6f 93       	push	r22
    140c:	7f 93       	push	r23
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
	UART_RX_CALLBACK();
    1422:	e0 91 ff 02 	lds	r30, 0x02FF
    1426:	f0 91 00 03 	lds	r31, 0x0300
    142a:	09 95       	icall
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <__vector_14>:
//UART DATA REGISTER EMPTY
void __vector_14(void)  __attribute__((signal));
void __vector_14(void)
{
    1452:	1f 92       	push	r1
    1454:	0f 92       	push	r0
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	0f 92       	push	r0
    145a:	11 24       	eor	r1, r1
    145c:	2f 93       	push	r18
    145e:	3f 93       	push	r19
    1460:	4f 93       	push	r20
    1462:	5f 93       	push	r21
    1464:	6f 93       	push	r22
    1466:	7f 93       	push	r23
    1468:	8f 93       	push	r24
    146a:	9f 93       	push	r25
    146c:	af 93       	push	r26
    146e:	bf 93       	push	r27
    1470:	ef 93       	push	r30
    1472:	ff 93       	push	r31
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
	UART_DRE_CALLBACK();
    147c:	e0 91 01 03 	lds	r30, 0x0301
    1480:	f0 91 02 03 	lds	r31, 0x0302
    1484:	09 95       	icall
}
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	ff 91       	pop	r31
    148c:	ef 91       	pop	r30
    148e:	bf 91       	pop	r27
    1490:	af 91       	pop	r26
    1492:	9f 91       	pop	r25
    1494:	8f 91       	pop	r24
    1496:	7f 91       	pop	r23
    1498:	6f 91       	pop	r22
    149a:	5f 91       	pop	r21
    149c:	4f 91       	pop	r20
    149e:	3f 91       	pop	r19
    14a0:	2f 91       	pop	r18
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	0f 90       	pop	r0
    14a8:	1f 90       	pop	r1
    14aa:	18 95       	reti

000014ac <__vector_15>:
//UART TX COMPLETE

void __vector_15(void)  __attribute__((signal));
void __vector_15(void)
{
    14ac:	1f 92       	push	r1
    14ae:	0f 92       	push	r0
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	0f 92       	push	r0
    14b4:	11 24       	eor	r1, r1
    14b6:	2f 93       	push	r18
    14b8:	3f 93       	push	r19
    14ba:	4f 93       	push	r20
    14bc:	5f 93       	push	r21
    14be:	6f 93       	push	r22
    14c0:	7f 93       	push	r23
    14c2:	8f 93       	push	r24
    14c4:	9f 93       	push	r25
    14c6:	af 93       	push	r26
    14c8:	bf 93       	push	r27
    14ca:	ef 93       	push	r30
    14cc:	ff 93       	push	r31
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
	UART_TX_CALLBACK();
    14d6:	e0 91 03 03 	lds	r30, 0x0303
    14da:	f0 91 04 03 	lds	r31, 0x0304
    14de:	09 95       	icall
}
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <MTIMER1_VoidInit>:
#include"MCAL_TIMER1_REG.h"
#include"MCAL_TIMER1_INT.h"


void MTIMER1_VoidInit(MAIN_MODE_T Timer1_Mode , SUB_MODE_T Timer1_Sub_Mode , PRESCALING_VAL_T prescaler)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <MTIMER1_VoidInit+0x6>
    150c:	0f 92       	push	r0
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02
    1516:	4b 83       	std	Y+3, r20	; 0x03
SET_TIMER1_MAIN_MODE(Timer1_Mode);
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <SET_TIMER1_MAIN_MODE>
SET_TIMER1_SELECT_SUB_MODE(Timer1_Sub_Mode);
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	0e 94 66 0b 	call	0x16cc	; 0x16cc <SET_TIMER1_SELECT_SUB_MODE>
SELECT_PRESCALER(prescaler);
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	0e 94 a3 0c 	call	0x1946	; 0x1946 <SELECT_PRESCALER>
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <MTIMER1_VoidDisable>:


void MTIMER1_VoidDisable(void)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
	/****************disable clock*************/

}
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <SET_TIMER1_MAIN_MODE>:


void SET_TIMER1_MAIN_MODE(MAIN_MODE_T MAIN)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <SET_TIMER1_MAIN_MODE+0x6>
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01
	switch(MAIN)
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3b 83       	std	Y+3, r19	; 0x03
    155a:	2a 83       	std	Y+2, r18	; 0x02
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	9b 81       	ldd	r25, Y+3	; 0x03
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	91 05       	cpc	r25, r1
    1564:	09 f4       	brne	.+2      	; 0x1568 <SET_TIMER1_MAIN_MODE+0x24>
    1566:	56 c0       	rjmp	.+172    	; 0x1614 <SET_TIMER1_MAIN_MODE+0xd0>
    1568:	2a 81       	ldd	r18, Y+2	; 0x02
    156a:	3b 81       	ldd	r19, Y+3	; 0x03
    156c:	23 30       	cpi	r18, 0x03	; 3
    156e:	31 05       	cpc	r19, r1
    1570:	64 f4       	brge	.+24     	; 0x158a <SET_TIMER1_MAIN_MODE+0x46>
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	9b 81       	ldd	r25, Y+3	; 0x03
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	09 f4       	brne	.+2      	; 0x157c <SET_TIMER1_MAIN_MODE+0x38>
    157a:	86 c0       	rjmp	.+268    	; 0x1688 <SET_TIMER1_MAIN_MODE+0x144>
    157c:	2a 81       	ldd	r18, Y+2	; 0x02
    157e:	3b 81       	ldd	r19, Y+3	; 0x03
    1580:	21 30       	cpi	r18, 0x01	; 1
    1582:	31 05       	cpc	r19, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <SET_TIMER1_MAIN_MODE+0x44>
    1586:	63 c0       	rjmp	.+198    	; 0x164e <SET_TIMER1_MAIN_MODE+0x10a>
    1588:	9b c0       	rjmp	.+310    	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	91 05       	cpc	r25, r1
    1592:	31 f0       	breq	.+12     	; 0x15a0 <SET_TIMER1_MAIN_MODE+0x5c>
    1594:	2a 81       	ldd	r18, Y+2	; 0x02
    1596:	3b 81       	ldd	r19, Y+3	; 0x03
    1598:	24 30       	cpi	r18, 0x04	; 4
    159a:	31 05       	cpc	r19, r1
    159c:	f1 f0       	breq	.+60     	; 0x15da <SET_TIMER1_MAIN_MODE+0x96>
    159e:	90 c0       	rjmp	.+288    	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
	{
	case CTC_ICR1_TOP :
						Timer1_Enable_CTC_MODE_ICR1_TOP();
    15a0:	af e4       	ldi	r26, 0x4F	; 79
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ef e4       	ldi	r30, 0x4F	; 79
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8e 7f       	andi	r24, 0xFE	; 254
    15ac:	8c 93       	st	X, r24
    15ae:	af e4       	ldi	r26, 0x4F	; 79
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ef e4       	ldi	r30, 0x4F	; 79
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8d 7f       	andi	r24, 0xFD	; 253
    15ba:	8c 93       	st	X, r24
    15bc:	ae e4       	ldi	r26, 0x4E	; 78
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ee e4       	ldi	r30, 0x4E	; 78
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 60       	ori	r24, 0x08	; 8
    15c8:	8c 93       	st	X, r24
    15ca:	ae e4       	ldi	r26, 0x4E	; 78
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ee e4       	ldi	r30, 0x4E	; 78
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 61       	ori	r24, 0x10	; 16
    15d6:	8c 93       	st	X, r24
    15d8:	73 c0       	rjmp	.+230    	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
						break;
	case CTC_OCR1_TOP:
						Timer1_Enable_CTC_MODE_OCR1A_TOP();
    15da:	af e4       	ldi	r26, 0x4F	; 79
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	ef e4       	ldi	r30, 0x4F	; 79
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	8e 7f       	andi	r24, 0xFE	; 254
    15e6:	8c 93       	st	X, r24
    15e8:	af e4       	ldi	r26, 0x4F	; 79
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ef e4       	ldi	r30, 0x4F	; 79
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8d 7f       	andi	r24, 0xFD	; 253
    15f4:	8c 93       	st	X, r24
    15f6:	ae e4       	ldi	r26, 0x4E	; 78
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	ee e4       	ldi	r30, 0x4E	; 78
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	88 60       	ori	r24, 0x08	; 8
    1602:	8c 93       	st	X, r24
    1604:	ae e4       	ldi	r26, 0x4E	; 78
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	ee e4       	ldi	r30, 0x4E	; 78
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 7e       	andi	r24, 0xEF	; 239
    1610:	8c 93       	st	X, r24
    1612:	56 c0       	rjmp	.+172    	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
						break;

	case FPWM_OCR1A_TOP:
						Timer1_Enable_FASTPWM_MODE_OCR1A_TOP();
    1614:	af e4       	ldi	r26, 0x4F	; 79
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	ef e4       	ldi	r30, 0x4F	; 79
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	81 60       	ori	r24, 0x01	; 1
    1620:	8c 93       	st	X, r24
    1622:	af e4       	ldi	r26, 0x4F	; 79
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ef e4       	ldi	r30, 0x4F	; 79
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	82 60       	ori	r24, 0x02	; 2
    162e:	8c 93       	st	X, r24
    1630:	ae e4       	ldi	r26, 0x4E	; 78
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	ee e4       	ldi	r30, 0x4E	; 78
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	88 60       	ori	r24, 0x08	; 8
    163c:	8c 93       	st	X, r24
    163e:	ae e4       	ldi	r26, 0x4E	; 78
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	ee e4       	ldi	r30, 0x4E	; 78
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 61       	ori	r24, 0x10	; 16
    164a:	8c 93       	st	X, r24
    164c:	39 c0       	rjmp	.+114    	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
					    break;

	case FPWM_ICR1_TOP:
					    Timer1_Enable_FASTPWM_MODE_ICR1_TOP();
    164e:	af e4       	ldi	r26, 0x4F	; 79
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ef e4       	ldi	r30, 0x4F	; 79
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8e 7f       	andi	r24, 0xFE	; 254
    165a:	8c 93       	st	X, r24
    165c:	af e4       	ldi	r26, 0x4F	; 79
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ef e4       	ldi	r30, 0x4F	; 79
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	82 60       	ori	r24, 0x02	; 2
    1668:	8c 93       	st	X, r24
    166a:	ae e4       	ldi	r26, 0x4E	; 78
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ee e4       	ldi	r30, 0x4E	; 78
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	88 60       	ori	r24, 0x08	; 8
    1676:	8c 93       	st	X, r24
    1678:	ae e4       	ldi	r26, 0x4E	; 78
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ee e4       	ldi	r30, 0x4E	; 78
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	80 61       	ori	r24, 0x10	; 16
    1684:	8c 93       	st	X, r24
    1686:	1c c0       	rjmp	.+56     	; 0x16c0 <SET_TIMER1_MAIN_MODE+0x17c>
						break;

	case NORMAL_MODE :
						Timer1_Enable_Normal_Mode();
    1688:	af e4       	ldi	r26, 0x4F	; 79
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ef e4       	ldi	r30, 0x4F	; 79
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8e 7f       	andi	r24, 0xFE	; 254
    1694:	8c 93       	st	X, r24
    1696:	af e4       	ldi	r26, 0x4F	; 79
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	ef e4       	ldi	r30, 0x4F	; 79
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8d 7f       	andi	r24, 0xFD	; 253
    16a2:	8c 93       	st	X, r24
    16a4:	ae e4       	ldi	r26, 0x4E	; 78
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	ee e4       	ldi	r30, 0x4E	; 78
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	87 7f       	andi	r24, 0xF7	; 247
    16b0:	8c 93       	st	X, r24
    16b2:	ae e4       	ldi	r26, 0x4E	; 78
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	ee e4       	ldi	r30, 0x4E	; 78
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8f 7e       	andi	r24, 0xEF	; 239
    16be:	8c 93       	st	X, r24
						break;
	}
}
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <SET_TIMER1_SELECT_SUB_MODE>:



void SET_TIMER1_SELECT_SUB_MODE(SUB_MODE_T mode)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <SET_TIMER1_SELECT_SUB_MODE+0x6>
    16d2:	0f 92       	push	r0
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3b 83       	std	Y+3, r19	; 0x03
    16e2:	2a 83       	std	Y+2, r18	; 0x02
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	9b 81       	ldd	r25, Y+3	; 0x03
    16e8:	86 30       	cpi	r24, 0x06	; 6
    16ea:	91 05       	cpc	r25, r1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <SET_TIMER1_SELECT_SUB_MODE+0x24>
    16ee:	54 c0       	rjmp	.+168    	; 0x1798 <SET_TIMER1_SELECT_SUB_MODE+0xcc>
    16f0:	2a 81       	ldd	r18, Y+2	; 0x02
    16f2:	3b 81       	ldd	r19, Y+3	; 0x03
    16f4:	27 30       	cpi	r18, 0x07	; 7
    16f6:	31 05       	cpc	r19, r1
    16f8:	24 f5       	brge	.+72     	; 0x1742 <SET_TIMER1_SELECT_SUB_MODE+0x76>
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	9b 81       	ldd	r25, Y+3	; 0x03
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	91 05       	cpc	r25, r1
    1702:	09 f4       	brne	.+2      	; 0x1706 <SET_TIMER1_SELECT_SUB_MODE+0x3a>
    1704:	85 c0       	rjmp	.+266    	; 0x1810 <SET_TIMER1_SELECT_SUB_MODE+0x144>
    1706:	2a 81       	ldd	r18, Y+2	; 0x02
    1708:	3b 81       	ldd	r19, Y+3	; 0x03
    170a:	23 30       	cpi	r18, 0x03	; 3
    170c:	31 05       	cpc	r19, r1
    170e:	64 f4       	brge	.+24     	; 0x1728 <SET_TIMER1_SELECT_SUB_MODE+0x5c>
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	09 f4       	brne	.+2      	; 0x171a <SET_TIMER1_SELECT_SUB_MODE+0x4e>
    1718:	5d c0       	rjmp	.+186    	; 0x17d4 <SET_TIMER1_SELECT_SUB_MODE+0x108>
    171a:	2a 81       	ldd	r18, Y+2	; 0x02
    171c:	3b 81       	ldd	r19, Y+3	; 0x03
    171e:	21 30       	cpi	r18, 0x01	; 1
    1720:	31 05       	cpc	r19, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <SET_TIMER1_SELECT_SUB_MODE+0x5a>
    1724:	66 c0       	rjmp	.+204    	; 0x17f2 <SET_TIMER1_SELECT_SUB_MODE+0x126>
    1726:	09 c1       	rjmp	.+530    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	84 30       	cpi	r24, 0x04	; 4
    172e:	91 05       	cpc	r25, r1
    1730:	09 f4       	brne	.+2      	; 0x1734 <SET_TIMER1_SELECT_SUB_MODE+0x68>
    1732:	8c c0       	rjmp	.+280    	; 0x184c <SET_TIMER1_SELECT_SUB_MODE+0x180>
    1734:	2a 81       	ldd	r18, Y+2	; 0x02
    1736:	3b 81       	ldd	r19, Y+3	; 0x03
    1738:	25 30       	cpi	r18, 0x05	; 5
    173a:	31 05       	cpc	r19, r1
    173c:	0c f0       	brlt	.+2      	; 0x1740 <SET_TIMER1_SELECT_SUB_MODE+0x74>
    173e:	95 c0       	rjmp	.+298    	; 0x186a <SET_TIMER1_SELECT_SUB_MODE+0x19e>
    1740:	76 c0       	rjmp	.+236    	; 0x182e <SET_TIMER1_SELECT_SUB_MODE+0x162>
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	9b 81       	ldd	r25, Y+3	; 0x03
    1746:	8a 30       	cpi	r24, 0x0A	; 10
    1748:	91 05       	cpc	r25, r1
    174a:	09 f4       	brne	.+2      	; 0x174e <SET_TIMER1_SELECT_SUB_MODE+0x82>
    174c:	d9 c0       	rjmp	.+434    	; 0x1900 <SET_TIMER1_SELECT_SUB_MODE+0x234>
    174e:	2a 81       	ldd	r18, Y+2	; 0x02
    1750:	3b 81       	ldd	r19, Y+3	; 0x03
    1752:	2b 30       	cpi	r18, 0x0B	; 11
    1754:	31 05       	cpc	r19, r1
    1756:	6c f4       	brge	.+26     	; 0x1772 <SET_TIMER1_SELECT_SUB_MODE+0xa6>
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	9b 81       	ldd	r25, Y+3	; 0x03
    175c:	88 30       	cpi	r24, 0x08	; 8
    175e:	91 05       	cpc	r25, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <SET_TIMER1_SELECT_SUB_MODE+0x98>
    1762:	92 c0       	rjmp	.+292    	; 0x1888 <SET_TIMER1_SELECT_SUB_MODE+0x1bc>
    1764:	2a 81       	ldd	r18, Y+2	; 0x02
    1766:	3b 81       	ldd	r19, Y+3	; 0x03
    1768:	29 30       	cpi	r18, 0x09	; 9
    176a:	31 05       	cpc	r19, r1
    176c:	0c f0       	brlt	.+2      	; 0x1770 <SET_TIMER1_SELECT_SUB_MODE+0xa4>
    176e:	aa c0       	rjmp	.+340    	; 0x18c4 <SET_TIMER1_SELECT_SUB_MODE+0x1f8>
    1770:	22 c0       	rjmp	.+68     	; 0x17b6 <SET_TIMER1_SELECT_SUB_MODE+0xea>
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	9b 81       	ldd	r25, Y+3	; 0x03
    1776:	8c 30       	cpi	r24, 0x0C	; 12
    1778:	91 05       	cpc	r25, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <SET_TIMER1_SELECT_SUB_MODE+0xb2>
    177c:	b2 c0       	rjmp	.+356    	; 0x18e2 <SET_TIMER1_SELECT_SUB_MODE+0x216>
    177e:	2a 81       	ldd	r18, Y+2	; 0x02
    1780:	3b 81       	ldd	r19, Y+3	; 0x03
    1782:	2c 30       	cpi	r18, 0x0C	; 12
    1784:	31 05       	cpc	r19, r1
    1786:	0c f4       	brge	.+2      	; 0x178a <SET_TIMER1_SELECT_SUB_MODE+0xbe>
    1788:	8e c0       	rjmp	.+284    	; 0x18a6 <SET_TIMER1_SELECT_SUB_MODE+0x1da>
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	9b 81       	ldd	r25, Y+3	; 0x03
    178e:	8d 30       	cpi	r24, 0x0D	; 13
    1790:	91 05       	cpc	r25, r1
    1792:	09 f4       	brne	.+2      	; 0x1796 <SET_TIMER1_SELECT_SUB_MODE+0xca>
    1794:	c4 c0       	rjmp	.+392    	; 0x191e <SET_TIMER1_SELECT_SUB_MODE+0x252>
    1796:	d1 c0       	rjmp	.+418    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
	{
	case NORMAL_OP_CH_A:TIMER_1_Normal_Port_Operation_Channel_A();
    1798:	af e4       	ldi	r26, 0x4F	; 79
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	ef e4       	ldi	r30, 0x4F	; 79
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8f 77       	andi	r24, 0x7F	; 127
    17a4:	8c 93       	st	X, r24
    17a6:	af e4       	ldi	r26, 0x4F	; 79
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	ef e4       	ldi	r30, 0x4F	; 79
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8f 7b       	andi	r24, 0xBF	; 191
    17b2:	8c 93       	st	X, r24
    17b4:	c2 c0       	rjmp	.+388    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						break;

	case NORMAL_OP_CH_B:
						TIMER_1_Normal_Port_Operation_Channel_B();
    17b6:	af e4       	ldi	r26, 0x4F	; 79
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	ef e4       	ldi	r30, 0x4F	; 79
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	8f 7d       	andi	r24, 0xDF	; 223
    17c2:	8c 93       	st	X, r24
    17c4:	af e4       	ldi	r26, 0x4F	; 79
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	ef e4       	ldi	r30, 0x4F	; 79
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	8f 7e       	andi	r24, 0xEF	; 239
    17d0:	8c 93       	st	X, r24
    17d2:	b3 c0       	rjmp	.+358    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						break;

	case CTC_TOGGLE_CH_A:
						TIMER_1_TOGGLE_ON_COMPAREMATCH_Channel_B();
    17d4:	af e4       	ldi	r26, 0x4F	; 79
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ef e4       	ldi	r30, 0x4F	; 79
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8f 7d       	andi	r24, 0xDF	; 223
    17e0:	8c 93       	st	X, r24
    17e2:	af e4       	ldi	r26, 0x4F	; 79
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	ef e4       	ldi	r30, 0x4F	; 79
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 61       	ori	r24, 0x10	; 16
    17ee:	8c 93       	st	X, r24
    17f0:	a4 c0       	rjmp	.+328    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						break;

	case CTC_TOGGLE_CH_B:
						 TIMER_1_TOGGLE_ON_COMPAREMATCH_Channel_A();
    17f2:	af e4       	ldi	r26, 0x4F	; 79
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	ef e4       	ldi	r30, 0x4F	; 79
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8f 77       	andi	r24, 0x7F	; 127
    17fe:	8c 93       	st	X, r24
    1800:	af e4       	ldi	r26, 0x4F	; 79
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ef e4       	ldi	r30, 0x4F	; 79
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 64       	ori	r24, 0x40	; 64
    180c:	8c 93       	st	X, r24
    180e:	95 c0       	rjmp	.+298    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
				         break;

	case CTC_SET_CH_A : TIMER_1_SET_ON_COMPAREMATCH_Channel_A();
    1810:	af e4       	ldi	r26, 0x4F	; 79
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ef e4       	ldi	r30, 0x4F	; 79
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	80 68       	ori	r24, 0x80	; 128
    181c:	8c 93       	st	X, r24
    181e:	af e4       	ldi	r26, 0x4F	; 79
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	ef e4       	ldi	r30, 0x4F	; 79
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	80 64       	ori	r24, 0x40	; 64
    182a:	8c 93       	st	X, r24
    182c:	86 c0       	rjmp	.+268    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
				   	      break;
	case CTC_SET_CH_B :
				   	    TIMER_1_SET_ON_COMPAREMATCH_Channel_B();
    182e:	af e4       	ldi	r26, 0x4F	; 79
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	ef e4       	ldi	r30, 0x4F	; 79
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	80 62       	ori	r24, 0x20	; 32
    183a:	8c 93       	st	X, r24
    183c:	af e4       	ldi	r26, 0x4F	; 79
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ef e4       	ldi	r30, 0x4F	; 79
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	80 61       	ori	r24, 0x10	; 16
    1848:	8c 93       	st	X, r24
    184a:	77 c0       	rjmp	.+238    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
				   	      break;


	case CTC_CLEAR_CH_A: TIMER_1_CLEAR_ON_COMPAREMATCH_Channel_A();
    184c:	af e4       	ldi	r26, 0x4F	; 79
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	ef e4       	ldi	r30, 0x4F	; 79
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	80 68       	ori	r24, 0x80	; 128
    1858:	8c 93       	st	X, r24
    185a:	af e4       	ldi	r26, 0x4F	; 79
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	ef e4       	ldi	r30, 0x4F	; 79
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8f 7b       	andi	r24, 0xBF	; 191
    1866:	8c 93       	st	X, r24
    1868:	68 c0       	rjmp	.+208    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						   break;

	case CTC_CLEAR_CH_B:
						TIMER_1_CLEAR_ON_COMPAREMATCH_Channel_B();
    186a:	af e4       	ldi	r26, 0x4F	; 79
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	ef e4       	ldi	r30, 0x4F	; 79
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	80 62       	ori	r24, 0x20	; 32
    1876:	8c 93       	st	X, r24
    1878:	af e4       	ldi	r26, 0x4F	; 79
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	ef e4       	ldi	r30, 0x4F	; 79
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	8f 7e       	andi	r24, 0xEF	; 239
    1884:	8c 93       	st	X, r24
    1886:	59 c0       	rjmp	.+178    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						   break;


	case FPWM_TOGGLE_CH_A :TIMER_1_TOGGLE_ON_COMPAREMATCH_CLEAR_TOP_FPWM_CH_A();
    1888:	af e4       	ldi	r26, 0x4F	; 79
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ef e4       	ldi	r30, 0x4F	; 79
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	80 68       	ori	r24, 0x80	; 128
    1894:	8c 93       	st	X, r24
    1896:	af e4       	ldi	r26, 0x4F	; 79
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	ef e4       	ldi	r30, 0x4F	; 79
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 64       	ori	r24, 0x40	; 64
    18a2:	8c 93       	st	X, r24
    18a4:	4a c0       	rjmp	.+148    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						  break;


	case FPWM_TOGGLE_CH_B :TIMER_1_TOGGLE_ON_COMPAREMATCH_CLEAR_TOP_FPWM_CH_B();
    18a6:	af e4       	ldi	r26, 0x4F	; 79
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	ef e4       	ldi	r30, 0x4F	; 79
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 62       	ori	r24, 0x20	; 32
    18b2:	8c 93       	st	X, r24
    18b4:	af e4       	ldi	r26, 0x4F	; 79
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	ef e4       	ldi	r30, 0x4F	; 79
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	80 61       	ori	r24, 0x10	; 16
    18c0:	8c 93       	st	X, r24
    18c2:	3b c0       	rjmp	.+118    	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
						   break;

	case FPWM_CLEAR_CH_A :
					 	 TIMER_1_CLEAR_ON_COMPAREMATCH_SET_TOP_FPWM_CH_A();
    18c4:	af e4       	ldi	r26, 0x4F	; 79
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ef e4       	ldi	r30, 0x4F	; 79
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	80 68       	ori	r24, 0x80	; 128
    18d0:	8c 93       	st	X, r24
    18d2:	af e4       	ldi	r26, 0x4F	; 79
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ef e4       	ldi	r30, 0x4F	; 79
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	8f 7b       	andi	r24, 0xBF	; 191
    18de:	8c 93       	st	X, r24
    18e0:	2c c0       	rjmp	.+88     	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
					 	   break;

	case FPWM_CLEAR_CH_B : TIMER_1_CLEAR_ON_COMPAREMATCH_SET_TOP_FPWM_CH_B();
    18e2:	af e4       	ldi	r26, 0x4F	; 79
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	ef e4       	ldi	r30, 0x4F	; 79
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 62       	ori	r24, 0x20	; 32
    18ee:	8c 93       	st	X, r24
    18f0:	af e4       	ldi	r26, 0x4F	; 79
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ef e4       	ldi	r30, 0x4F	; 79
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8f 7e       	andi	r24, 0xEF	; 239
    18fc:	8c 93       	st	X, r24
    18fe:	1d c0       	rjmp	.+58     	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
					 	   break;

	case FPWM_SET_CH_A :
				           TIMER_1_SET_ON_COMPAREMATCH_CLEAR_TOP_FPWM_CH_A();
    1900:	af e4       	ldi	r26, 0x4F	; 79
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	ef e4       	ldi	r30, 0x4F	; 79
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	80 68       	ori	r24, 0x80	; 128
    190c:	8c 93       	st	X, r24
    190e:	af e4       	ldi	r26, 0x4F	; 79
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	ef e4       	ldi	r30, 0x4F	; 79
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	80 64       	ori	r24, 0x40	; 64
    191a:	8c 93       	st	X, r24
    191c:	0e c0       	rjmp	.+28     	; 0x193a <SET_TIMER1_SELECT_SUB_MODE+0x26e>
				           break;

	case FPWM_SET_CH_B :   TIMER_1_SET_ON_COMPAREMATCH_CLEAR_TOP_FPWM_CH_B();
    191e:	af e4       	ldi	r26, 0x4F	; 79
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ef e4       	ldi	r30, 0x4F	; 79
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	80 62       	ori	r24, 0x20	; 32
    192a:	8c 93       	st	X, r24
    192c:	af e4       	ldi	r26, 0x4F	; 79
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	ef e4       	ldi	r30, 0x4F	; 79
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 61       	ori	r24, 0x10	; 16
    1938:	8c 93       	st	X, r24
				           break;
	default :break;

	}
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <SELECT_PRESCALER>:
void SELECT_PRESCALER(PRESCALING_VAL_T PRESCALER)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <SELECT_PRESCALER+0x6>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
  switch(PRESCALER)
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3b 83       	std	Y+3, r19	; 0x03
    195c:	2a 83       	std	Y+2, r18	; 0x02
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	9b 81       	ldd	r25, Y+3	; 0x03
    1962:	83 30       	cpi	r24, 0x03	; 3
    1964:	91 05       	cpc	r25, r1
    1966:	09 f4       	brne	.+2      	; 0x196a <SELECT_PRESCALER+0x24>
    1968:	70 c0       	rjmp	.+224    	; 0x1a4a <SELECT_PRESCALER+0x104>
    196a:	2a 81       	ldd	r18, Y+2	; 0x02
    196c:	3b 81       	ldd	r19, Y+3	; 0x03
    196e:	24 30       	cpi	r18, 0x04	; 4
    1970:	31 05       	cpc	r19, r1
    1972:	84 f4       	brge	.+32     	; 0x1994 <SELECT_PRESCALER+0x4e>
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	9b 81       	ldd	r25, Y+3	; 0x03
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	91 05       	cpc	r25, r1
    197c:	d1 f1       	breq	.+116    	; 0x19f2 <SELECT_PRESCALER+0xac>
    197e:	2a 81       	ldd	r18, Y+2	; 0x02
    1980:	3b 81       	ldd	r19, Y+3	; 0x03
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	0c f0       	brlt	.+2      	; 0x198a <SELECT_PRESCALER+0x44>
    1988:	4a c0       	rjmp	.+148    	; 0x1a1e <SELECT_PRESCALER+0xd8>
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	d1 f0       	breq	.+52     	; 0x19c6 <SELECT_PRESCALER+0x80>
    1992:	c8 c0       	rjmp	.+400    	; 0x1b24 <SELECT_PRESCALER+0x1de>
    1994:	2a 81       	ldd	r18, Y+2	; 0x02
    1996:	3b 81       	ldd	r19, Y+3	; 0x03
    1998:	25 30       	cpi	r18, 0x05	; 5
    199a:	31 05       	cpc	r19, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <SELECT_PRESCALER+0x5a>
    199e:	81 c0       	rjmp	.+258    	; 0x1aa2 <SELECT_PRESCALER+0x15c>
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	9b 81       	ldd	r25, Y+3	; 0x03
    19a4:	85 30       	cpi	r24, 0x05	; 5
    19a6:	91 05       	cpc	r25, r1
    19a8:	0c f4       	brge	.+2      	; 0x19ac <SELECT_PRESCALER+0x66>
    19aa:	65 c0       	rjmp	.+202    	; 0x1a76 <SELECT_PRESCALER+0x130>
    19ac:	2a 81       	ldd	r18, Y+2	; 0x02
    19ae:	3b 81       	ldd	r19, Y+3	; 0x03
    19b0:	26 30       	cpi	r18, 0x06	; 6
    19b2:	31 05       	cpc	r19, r1
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <SELECT_PRESCALER+0x72>
    19b6:	8b c0       	rjmp	.+278    	; 0x1ace <SELECT_PRESCALER+0x188>
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	87 30       	cpi	r24, 0x07	; 7
    19be:	91 05       	cpc	r25, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <SELECT_PRESCALER+0x7e>
    19c2:	9b c0       	rjmp	.+310    	; 0x1afa <SELECT_PRESCALER+0x1b4>
    19c4:	af c0       	rjmp	.+350    	; 0x1b24 <SELECT_PRESCALER+0x1de>
  {
  case TIMER1_DISABLE_CLOCK_SOURCE:CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    19c6:	ae e4       	ldi	r26, 0x4E	; 78
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	ee e4       	ldi	r30, 0x4E	; 78
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	   CLEAR_BIT(TCCR1B,TCCR1B_CS11);
    19d4:	ae e4       	ldi	r26, 0x4E	; 78
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	ee e4       	ldi	r30, 0x4E	; 78
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8d 7f       	andi	r24, 0xFD	; 253
    19e0:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	   CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    19e2:	ae e4       	ldi	r26, 0x4E	; 78
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ee e4       	ldi	r30, 0x4E	; 78
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	8b 7f       	andi	r24, 0xFB	; 251
    19ee:	8c 93       	st	X, r24
    19f0:	99 c0       	rjmp	.+306    	; 0x1b24 <SELECT_PRESCALER+0x1de>
	  	  	                       break;
  case TIMER1_NO_PRESCALE_CLOCK_SOURCE:SET_BIT(TCCR1B,TCCR1B_CS10);
    19f2:	ae e4       	ldi	r26, 0x4E	; 78
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	ee e4       	ldi	r30, 0x4E	; 78
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	81 60       	ori	r24, 0x01	; 1
    19fe:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	  CLEAR_BIT(TCCR1B,TCCR1B_CS11);
    1a00:	ae e4       	ldi	r26, 0x4E	; 78
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	ee e4       	ldi	r30, 0x4E	; 78
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	8d 7f       	andi	r24, 0xFD	; 253
    1a0c:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	  CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    1a0e:	ae e4       	ldi	r26, 0x4E	; 78
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	ee e4       	ldi	r30, 0x4E	; 78
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8b 7f       	andi	r24, 0xFB	; 251
    1a1a:	8c 93       	st	X, r24
    1a1c:	83 c0       	rjmp	.+262    	; 0x1b24 <SELECT_PRESCALER+0x1de>
  	  	  	  	  	  	  	  	  	  break;


  case TIMER1_PRESCALE_8_CLOCK_SOURCE :  CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    1a1e:	ae e4       	ldi	r26, 0x4E	; 78
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	ee e4       	ldi	r30, 0x4E	; 78
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8e 7f       	andi	r24, 0xFE	; 254
    1a2a:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	  	  SET_BIT(TCCR1B,TCCR1B_CS11);
    1a2c:	ae e4       	ldi	r26, 0x4E	; 78
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	ee e4       	ldi	r30, 0x4E	; 78
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	82 60       	ori	r24, 0x02	; 2
    1a38:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	  	  CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    1a3a:	ae e4       	ldi	r26, 0x4E	; 78
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	ee e4       	ldi	r30, 0x4E	; 78
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	8b 7f       	andi	r24, 0xFB	; 251
    1a46:	8c 93       	st	X, r24
    1a48:	6d c0       	rjmp	.+218    	; 0x1b24 <SELECT_PRESCALER+0x1de>
  	  	  	  	  	  	  	  	  	  	  break;

  case TIMER1_PRESCALE_64_CLOCK_SOURCE:SET_BIT(TCCR1B,TCCR1B_CS10);
    1a4a:	ae e4       	ldi	r26, 0x4E	; 78
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	ee e4       	ldi	r30, 0x4E	; 78
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	81 60       	ori	r24, 0x01	; 1
    1a56:	8c 93       	st	X, r24
	  	  	  	  	  	  	  	  	   SET_BIT(TCCR1B,TCCR1B_CS11);
    1a58:	ae e4       	ldi	r26, 0x4E	; 78
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	ee e4       	ldi	r30, 0x4E	; 78
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	82 60       	ori	r24, 0x02	; 2
    1a64:	8c 93       	st	X, r24
	  	  	  	  	  	  	  	  	   CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    1a66:	ae e4       	ldi	r26, 0x4E	; 78
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	ee e4       	ldi	r30, 0x4E	; 78
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8b 7f       	andi	r24, 0xFB	; 251
    1a72:	8c 93       	st	X, r24
    1a74:	57 c0       	rjmp	.+174    	; 0x1b24 <SELECT_PRESCALER+0x1de>
	  	  	  	  	  	  	  	  	   	break;
  case TIMER1_PRESCALE_256_CLOCK_SOURCE:CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    1a76:	ae e4       	ldi	r26, 0x4E	; 78
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	ee e4       	ldi	r30, 0x4E	; 78
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	8e 7f       	andi	r24, 0xFE	; 254
    1a82:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	  	CLEAR_BIT(TCCR1B,TCCR1B_CS11);
    1a84:	ae e4       	ldi	r26, 0x4E	; 78
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	ee e4       	ldi	r30, 0x4E	; 78
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8d 7f       	andi	r24, 0xFD	; 253
    1a90:	8c 93       	st	X, r24
  	  	  	  	  	  	  	  	  	    SET_BIT(TCCR1B,TCCR1B_CS12);
    1a92:	ae e4       	ldi	r26, 0x4E	; 78
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ee e4       	ldi	r30, 0x4E	; 78
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	84 60       	ori	r24, 0x04	; 4
    1a9e:	8c 93       	st	X, r24
    1aa0:	41 c0       	rjmp	.+130    	; 0x1b24 <SELECT_PRESCALER+0x1de>
  	  	  	  	  	  	  	  	  	    break;

  case TIMER1_PRESCALE_1024_CLOCK_SOURCE:SET_BIT(TCCR1B,TCCR1B_CS10);
    1aa2:	ae e4       	ldi	r26, 0x4E	; 78
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	ee e4       	ldi	r30, 0x4E	; 78
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	81 60       	ori	r24, 0x01	; 1
    1aae:	8c 93       	st	X, r24
	  	  	  							CLEAR_BIT(TCCR1B,TCCR1B_CS11);
    1ab0:	ae e4       	ldi	r26, 0x4E	; 78
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	ee e4       	ldi	r30, 0x4E	; 78
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	8d 7f       	andi	r24, 0xFD	; 253
    1abc:	8c 93       	st	X, r24
	  	  	  							SET_BIT(TCCR1B,TCCR1B_CS12);
    1abe:	ae e4       	ldi	r26, 0x4E	; 78
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	ee e4       	ldi	r30, 0x4E	; 78
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	84 60       	ori	r24, 0x04	; 4
    1aca:	8c 93       	st	X, r24
    1acc:	2b c0       	rjmp	.+86     	; 0x1b24 <SELECT_PRESCALER+0x1de>
	  	  	  							break;

  case TIMER1_EXTERNAL_CLOCK_SOURCE_FALLING_EDGE_T1:
	  	  	  	  	  	  	  	  	  	    CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    1ace:	ae e4       	ldi	r26, 0x4E	; 78
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	ee e4       	ldi	r30, 0x4E	; 78
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8e 7f       	andi	r24, 0xFE	; 254
    1ada:	8c 93       	st	X, r24
	  	  	  	  							SET_BIT(TCCR1B,TCCR1B_CS11);
    1adc:	ae e4       	ldi	r26, 0x4E	; 78
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	ee e4       	ldi	r30, 0x4E	; 78
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	82 60       	ori	r24, 0x02	; 2
    1ae8:	8c 93       	st	X, r24
	  	  	  	  							SET_BIT(TCCR1B,TCCR1B_CS12);
    1aea:	ae e4       	ldi	r26, 0x4E	; 78
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	ee e4       	ldi	r30, 0x4E	; 78
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	84 60       	ori	r24, 0x04	; 4
    1af6:	8c 93       	st	X, r24
    1af8:	15 c0       	rjmp	.+42     	; 0x1b24 <SELECT_PRESCALER+0x1de>
	  	  	  	  							break;

  case TIMER1_EXTERNAL_CLOCK_SOURCE_RISING_EDGE_T1:
	  	  	  	  	  	  	  	  	  	  	  	SET_BIT(TCCR1B,TCCR1B_CS10);
    1afa:	ae e4       	ldi	r26, 0x4E	; 78
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	ee e4       	ldi	r30, 0x4E	; 78
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	81 60       	ori	r24, 0x01	; 1
    1b06:	8c 93       	st	X, r24
	  	  	  	  	  							SET_BIT(TCCR1B,TCCR1B_CS11);
    1b08:	ae e4       	ldi	r26, 0x4E	; 78
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ee e4       	ldi	r30, 0x4E	; 78
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	82 60       	ori	r24, 0x02	; 2
    1b14:	8c 93       	st	X, r24
	  	  	  	  	  							SET_BIT(TCCR1B,TCCR1B_CS12);
    1b16:	ae e4       	ldi	r26, 0x4E	; 78
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	ee e4       	ldi	r30, 0x4E	; 78
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	84 60       	ori	r24, 0x04	; 4
    1b22:	8c 93       	st	X, r24



  }

}
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <MTIMER1_VoidSetTopValue>:

void MTIMER1_VoidSetTopValue(MAIN_MODE_T MAIN,u16 Top_Val)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <MTIMER1_VoidSetTopValue+0x6>
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <MTIMER1_VoidSetTopValue+0x8>
    1b38:	0f 92       	push	r0
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	7b 83       	std	Y+3, r23	; 0x03
    1b42:	6a 83       	std	Y+2, r22	; 0x02
	 switch(MAIN)
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	3d 83       	std	Y+5, r19	; 0x05
    1b4c:	2c 83       	std	Y+4, r18	; 0x04
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	82 30       	cpi	r24, 0x02	; 2
    1b54:	91 05       	cpc	r25, r1
    1b56:	21 f1       	breq	.+72     	; 0x1ba0 <MTIMER1_VoidSetTopValue+0x70>
    1b58:	2c 81       	ldd	r18, Y+4	; 0x04
    1b5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5c:	23 30       	cpi	r18, 0x03	; 3
    1b5e:	31 05       	cpc	r19, r1
    1b60:	34 f4       	brge	.+12     	; 0x1b6e <MTIMER1_VoidSetTopValue+0x3e>
    1b62:	8c 81       	ldd	r24, Y+4	; 0x04
    1b64:	9d 81       	ldd	r25, Y+5	; 0x05
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	91 05       	cpc	r25, r1
    1b6a:	61 f0       	breq	.+24     	; 0x1b84 <MTIMER1_VoidSetTopValue+0x54>
    1b6c:	26 c0       	rjmp	.+76     	; 0x1bba <MTIMER1_VoidSetTopValue+0x8a>
    1b6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b70:	3d 81       	ldd	r19, Y+5	; 0x05
    1b72:	23 30       	cpi	r18, 0x03	; 3
    1b74:	31 05       	cpc	r19, r1
    1b76:	69 f0       	breq	.+26     	; 0x1b92 <MTIMER1_VoidSetTopValue+0x62>
    1b78:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7c:	84 30       	cpi	r24, 0x04	; 4
    1b7e:	91 05       	cpc	r25, r1
    1b80:	b1 f0       	breq	.+44     	; 0x1bae <MTIMER1_VoidSetTopValue+0x7e>
    1b82:	1b c0       	rjmp	.+54     	; 0x1bba <MTIMER1_VoidSetTopValue+0x8a>
	 {
		 case FPWM_ICR1_TOP : ICR1=Top_Val; break;
    1b84:	e6 e4       	ldi	r30, 0x46	; 70
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	80 83       	st	Z, r24
    1b90:	14 c0       	rjmp	.+40     	; 0x1bba <MTIMER1_VoidSetTopValue+0x8a>
		 case CTC_ICR1_TOP :  ICR1=Top_Val; break;
    1b92:	e6 e4       	ldi	r30, 0x46	; 70
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <MTIMER1_VoidSetTopValue+0x8a>
		 case FPWM_OCR1A_TOP: OCR1A =Top_Val; break;
    1ba0:	ea e4       	ldi	r30, 0x4A	; 74
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	80 83       	st	Z, r24
    1bac:	06 c0       	rjmp	.+12     	; 0x1bba <MTIMER1_VoidSetTopValue+0x8a>
		 case CTC_OCR1_TOP : OCR1A =Top_Val; break;
    1bae:	ea e4       	ldi	r30, 0x4A	; 74
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	80 83       	st	Z, r24
		 case NORMAL_MODE : break;
		 default : break;
	 }
}
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <SET_DUTYCYCLEVAL>:
void SET_DUTYCYCLEVAL(u16 duty_val,MAIN_MODE_T MAIN_ )
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <SET_DUTYCYCLEVAL+0x6>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <SET_DUTYCYCLEVAL+0x8>
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	6b 83       	std	Y+3, r22	; 0x03
	 switch(MAIN_)
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	3d 83       	std	Y+5, r19	; 0x05
    1be6:	2c 83       	std	Y+4, r18	; 0x04
    1be8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bea:	9d 81       	ldd	r25, Y+5	; 0x05
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	91 05       	cpc	r25, r1
    1bf0:	31 f0       	breq	.+12     	; 0x1bfe <SET_DUTYCYCLEVAL+0x34>
    1bf2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf6:	22 30       	cpi	r18, 0x02	; 2
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	41 f0       	breq	.+16     	; 0x1c0c <SET_DUTYCYCLEVAL+0x42>
    1bfc:	0d c0       	rjmp	.+26     	; 0x1c18 <SET_DUTYCYCLEVAL+0x4e>
	 {
	 case FPWM_ICR1_TOP : OCR1A=duty_val; break;
    1bfe:	ea e4       	ldi	r30, 0x4A	; 74
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	80 83       	st	Z, r24
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <SET_DUTYCYCLEVAL+0x4e>
	 case FPWM_OCR1A_TOP : ICR1=duty_val; break;
    1c0c:	e6 e4       	ldi	r30, 0x46	; 70
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24

	 }

}
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <MTIMER1_ICU_EDGE_SELECT>:
void MTIMER1_ICU_EDGE_SELECT(u8 EDGE)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <MTIMER1_ICU_EDGE_SELECT+0x6>
    1c2e:	0f 92       	push	r0
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	89 83       	std	Y+1, r24	; 0x01

	switch(EDGE)
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	3b 83       	std	Y+3, r19	; 0x03
    1c3e:	2a 83       	std	Y+2, r18	; 0x02
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	9b 81       	ldd	r25, Y+3	; 0x03
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	91 05       	cpc	r25, r1
    1c48:	31 f0       	breq	.+12     	; 0x1c56 <MTIMER1_ICU_EDGE_SELECT+0x2e>
    1c4a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c4c:	3b 81       	ldd	r19, Y+3	; 0x03
    1c4e:	22 30       	cpi	r18, 0x02	; 2
    1c50:	31 05       	cpc	r19, r1
    1c52:	49 f0       	breq	.+18     	; 0x1c66 <MTIMER1_ICU_EDGE_SELECT+0x3e>
    1c54:	0f c0       	rjmp	.+30     	; 0x1c74 <MTIMER1_ICU_EDGE_SELECT+0x4c>
	{
	case ICU_RAISING_EDGE : TIMER1_ICU_SET_RAISING_EDGE(); break;
    1c56:	ae e4       	ldi	r26, 0x4E	; 78
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	ee e4       	ldi	r30, 0x4E	; 78
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 64       	ori	r24, 0x40	; 64
    1c62:	8c 93       	st	X, r24
    1c64:	07 c0       	rjmp	.+14     	; 0x1c74 <MTIMER1_ICU_EDGE_SELECT+0x4c>
	case ICU_FALLING_EDGE :TIMER1_ICU_SET_FALLING_EDGE(); break;
    1c66:	ae e4       	ldi	r26, 0x4E	; 78
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ee e4       	ldi	r30, 0x4E	; 78
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	8f 7b       	andi	r24, 0xBF	; 191
    1c72:	8c 93       	st	X, r24
	default : break;

	}

}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <MTIMER1_ENABLE_ICU_INTERRUPT>:
void MTIMER1_ENABLE_ICU_INTERRUPT(void)
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62

	ENABLE_INPUT_CAPTURE_INTERRUPT();
    1c88:	a9 e5       	ldi	r26, 0x59	; 89
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e9 e5       	ldi	r30, 0x59	; 89
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	8c 93       	st	X, r24
}
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <MTIMER1_READ_ICU_VALUE>:
u16 MTIMER1_READ_ICU_VALUE(void)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
return ICR1;
    1ca4:	e6 e4       	ldi	r30, 0x46	; 70
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <MTIMER0_VoidInit>:
/********************************************/
void (*TIMER0_CALLBACK)(void)=NULL;
/********************************************/

void MTIMER0_VoidInit(void)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62

#elif TIMER_0_MODE==Timer0_CTC_Mode
/****************select wave generation mode as CTC Mode***************/

/****************set compare match CTC Mode***************/
Timer0_Enable_CTC_MODE();
    1cba:	a3 e5       	ldi	r26, 0x53	; 83
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e3 e5       	ldi	r30, 0x53	; 83
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	88 60       	ori	r24, 0x08	; 8
    1cc6:	8c 93       	st	X, r24
    1cc8:	a3 e5       	ldi	r26, 0x53	; 83
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e3 e5       	ldi	r30, 0x53	; 83
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8f 7b       	andi	r24, 0xBF	; 191
    1cd4:	8c 93       	st	X, r24

/************Enable TIMER0 ctc INTERRUPT***************/

TIMER0_ENABLE_COMPARE_MODE_MATCH_INTERRUPT();
    1cd6:	a9 e5       	ldi	r26, 0x59	; 89
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e9 e5       	ldi	r30, 0x59	; 89
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	82 60       	ori	r24, 0x02	; 2
    1ce2:	8c 93       	st	X, r24

OCR0=Compared_value;
    1ce4:	ec e5       	ldi	r30, 0x5C	; 92
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	8c e7       	ldi	r24, 0x7C	; 124
    1cea:	80 83       	st	Z, r24

#elif TIMER0_CLOCK_SOURCE_VALUE == TIMER0_PRESCALE_8_CLOCK_SOURCE
TIMER0_SELECT_CLOCK_SOURCE(TIMER0_PRESCALE_8_CLOCK_SOURCE);

#elif TIMER0_CLOCK_SOURCE_VALUE == TIMER0_PRESCALE_64_CLOCK_SOURCE
TIMER0_SELECT_CLOCK_SOURCE(TIMER0_PRESCALE_64_CLOCK_SOURCE);
    1cec:	a3 e5       	ldi	r26, 0x53	; 83
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e3 e5       	ldi	r30, 0x53	; 83
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	88 7f       	andi	r24, 0xF8	; 248
    1cf8:	83 60       	ori	r24, 0x03	; 3
    1cfa:	8c 93       	st	X, r24
#else
#error "INVALID CLOCK SETTINGS CHECK THE TIMER0_CNFG"
#endif
/*************select compare match putput mode**************/

Enable_Global_Interrupt();
    1cfc:	af e5       	ldi	r26, 0x5F	; 95
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	ef e5       	ldi	r30, 0x5F	; 95
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	80 68       	ori	r24, 0x80	; 128
    1d08:	8c 93       	st	X, r24

}
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <MTIMER0_VoidDisable>:


void MTIMER0_VoidDisable(void)
{
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
	/****************disable clock*************/
	TIMER0_SELECT_CLOCK_SOURCE(TIMER0_DISABLE_CLOCK_SOURCE);
    1d18:	a3 e5       	ldi	r26, 0x53	; 83
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e3 e5       	ldi	r30, 0x53	; 83
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	88 7f       	andi	r24, 0xF8	; 248
    1d24:	8c 93       	st	X, r24

}
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <MTIMER0_VoidSetPreLoad>:
void MTIMER0_VoidSetPreLoad(u8 Preload)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	0f 92       	push	r0
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	89 83       	std	Y+1, r24	; 0x01
TCNT0=Preload;
    1d38:	e2 e5       	ldi	r30, 0x52	; 82
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	80 83       	st	Z, r24
}
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <TIMER_0_SET_DUTYCYCLE>:

void TIMER_0_SET_DUTYCYCLE(u8 Duty)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	0f 92       	push	r0
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	89 83       	std	Y+1, r24	; 0x01

 OCR0=Duty;
    1d54:	ec e5       	ldi	r30, 0x5C	; 92
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	80 83       	st	Z, r24
}
    1d5c:	0f 90       	pop	r0
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <TIMER0_SETCALLBACK>:


void TIMER0_SETCALLBACK(void(*ptr)(void))
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <TIMER0_SETCALLBACK+0x6>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_CALLBACK=ptr;
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	90 93 06 03 	sts	0x0306, r25
    1d7a:	80 93 05 03 	sts	0x0305, r24


}
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <__vector_10>:
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1d88:	1f 92       	push	r1
    1d8a:	0f 92       	push	r0
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	0f 92       	push	r0
    1d90:	11 24       	eor	r1, r1
    1d92:	2f 93       	push	r18
    1d94:	3f 93       	push	r19
    1d96:	4f 93       	push	r20
    1d98:	5f 93       	push	r21
    1d9a:	6f 93       	push	r22
    1d9c:	7f 93       	push	r23
    1d9e:	8f 93       	push	r24
    1da0:	9f 93       	push	r25
    1da2:	af 93       	push	r26
    1da4:	bf 93       	push	r27
    1da6:	ef 93       	push	r30
    1da8:	ff 93       	push	r31
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CALLBACK();
    1db2:	e0 91 05 03 	lds	r30, 0x0305
    1db6:	f0 91 06 03 	lds	r31, 0x0306
    1dba:	09 95       	icall

}
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	ff 91       	pop	r31
    1dc2:	ef 91       	pop	r30
    1dc4:	bf 91       	pop	r27
    1dc6:	af 91       	pop	r26
    1dc8:	9f 91       	pop	r25
    1dca:	8f 91       	pop	r24
    1dcc:	7f 91       	pop	r23
    1dce:	6f 91       	pop	r22
    1dd0:	5f 91       	pop	r21
    1dd2:	4f 91       	pop	r20
    1dd4:	3f 91       	pop	r19
    1dd6:	2f 91       	pop	r18
    1dd8:	0f 90       	pop	r0
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	0f 90       	pop	r0
    1dde:	1f 90       	pop	r1
    1de0:	18 95       	reti

00001de2 <MWDT_Start>:
#include"../std_types.h"
#include"../macros.h"
#include"MCAL_WDT_REG.h"
#include"MCAL_WDT_INT.h"
	void MWDT_Start(u8 _VAL)
	{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	0f 92       	push	r0
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	89 83       	std	Y+1, r24	; 0x01

		Watch_Dog_Enable();
    1dee:	a1 e4       	ldi	r26, 0x41	; 65
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e1 e4       	ldi	r30, 0x41	; 65
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	88 60       	ori	r24, 0x08	; 8
    1dfa:	8c 93       	st	X, r24

		WDTCR=((WDTCR&0xF8)|(_VAL));
    1dfc:	a1 e4       	ldi	r26, 0x41	; 65
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e1 e4       	ldi	r30, 0x41	; 65
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	98 2f       	mov	r25, r24
    1e08:	98 7f       	andi	r25, 0xF8	; 248
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	89 2b       	or	r24, r25
    1e0e:	8c 93       	st	X, r24
	}
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <MWDT_DISABLE>:

	   void MWDT_DISABLE(void)
	   {
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62

		   SET_BIT(WDTCR,WDTCR_WDTOE);
    1e20:	a1 e4       	ldi	r26, 0x41	; 65
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e1 e4       	ldi	r30, 0x41	; 65
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 61       	ori	r24, 0x10	; 16
    1e2c:	8c 93       	st	X, r24
		   WDT_DISABLE_STEP_2();
    1e2e:	a1 e4       	ldi	r26, 0x41	; 65
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e1 e4       	ldi	r30, 0x41	; 65
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	88 60       	ori	r24, 0x08	; 8
    1e3a:	8c 93       	st	X, r24
	...
		   asm("nop");
		   asm("nop");
		   asm("nop");
		   asm("nop");
		   WDT_DISABLE_STEP_3();
    1e44:	a1 e4       	ldi	r26, 0x41	; 65
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e1 e4       	ldi	r30, 0x41	; 65
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	87 7f       	andi	r24, 0xF7	; 247
    1e50:	8c 93       	st	X, r24

	   }
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <I2C_INIT>:
  * @param I2C_Callback_Ptr  is a ptr to the call back function
  * if you have interrupt pass the address of ur called function
  * if you have no interrupt SET it by (NULL)
  */
void I2C_INIT(void(*I2C_Callback_Ptr)(void))
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <I2C_INIT+0x6>
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
	/*****SET MASTER |SLAVE ADDRESS */
TWAR=I2C_ADDRESS<<1;
    1e66:	e2 e2       	ldi	r30, 0x22	; 34
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	80 83       	st	Z, r24
/*set I2C SPEED*/
I2C_SETSPEED();
    1e6e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <I2C_SETSPEED>
/*********ENABLE ACK***********/
I2C_ENABLE_GENERATING_ACK();
    1e72:	a6 e5       	ldi	r26, 0x56	; 86
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e6 e5       	ldi	r30, 0x56	; 86
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	80 64       	ori	r24, 0x40	; 64
    1e7e:	8c 93       	st	X, r24
I2C_CALLBACK=I2C_Callback_Ptr;
/*enable the i2c interrupt*/
I2C_INTERRUPT_ENABLE();
#endif
/**********ENABLE I2C**********/
I2C_ENABLE();
    1e80:	a6 e5       	ldi	r26, 0x56	; 86
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e6 e5       	ldi	r30, 0x56	; 86
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	84 60       	ori	r24, 0x04	; 4
    1e8c:	8c 93       	st	X, r24
}
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <I2C_START>:

/***
 * @brief this function is used to send start condition on i2C bus
 */
void I2C_START(void)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
/*SET TWSTA &TWEN &TWINT to start condition*/
I2C_SEND_START();
    1ea0:	e6 e5       	ldi	r30, 0x56	; 86
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	84 ea       	ldi	r24, 0xA4	; 164
    1ea6:	80 83       	st	Z, r24
//busy wait
while(I2C_READ_FLAG()==0);
    1ea8:	e6 e5       	ldi	r30, 0x56	; 86
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	88 23       	and	r24, r24
    1eb0:	dc f7       	brge	.-10     	; 0x1ea8 <I2C_START+0x10>
}
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <I2C_WRITE>:
/***
 * @brief this function is used to write data, address on i2C bus
 * @param Data
 */
void I2C_WRITE(u8 Data)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	0f 92       	push	r0
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	89 83       	std	Y+1, r24	; 0x01
/*SET DATA | Address to TWD*/
TWDR=Data;
    1ec4:	e3 e2       	ldi	r30, 0x23	; 35
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	80 83       	st	Z, r24
/*CLEAR  start condition*/
I2C_CLEAR_START_LOGIC();
    1ecc:	a6 e5       	ldi	r26, 0x56	; 86
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e6 e5       	ldi	r30, 0x56	; 86
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8f 7d       	andi	r24, 0xDF	; 223
    1ed8:	8c 93       	st	X, r24
/*CLEAR FLAG*/
I2C_CLEAR_FLAG();
    1eda:	a6 e5       	ldi	r26, 0x56	; 86
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e6 e5       	ldi	r30, 0x56	; 86
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	80 68       	ori	r24, 0x80	; 128
    1ee6:	8c 93       	st	X, r24
/*****ENABLE I2C********/
I2C_ENABLE();
    1ee8:	a6 e5       	ldi	r26, 0x56	; 86
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e6 e5       	ldi	r30, 0x56	; 86
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	84 60       	ori	r24, 0x04	; 4
    1ef4:	8c 93       	st	X, r24
/*busy wait*/
while(I2C_READ_FLAG()==0);
    1ef6:	e6 e5       	ldi	r30, 0x56	; 86
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	88 23       	and	r24, r24
    1efe:	dc f7       	brge	.-10     	; 0x1ef6 <I2C_WRITE+0x3e>


}
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <I2C_READ_WITH_ACK>:
/***
 * @brief this function is used to read the data from i2C bus
 * @return
 */
u8 I2C_READ_WITH_ACK(void)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
	/*CLEAR  start condition*/
	I2C_CLEAR_START_LOGIC();
    1f10:	a6 e5       	ldi	r26, 0x56	; 86
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e6 e5       	ldi	r30, 0x56	; 86
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	8f 7d       	andi	r24, 0xDF	; 223
    1f1c:	8c 93       	st	X, r24
	/*CLEAR FLAG*/
	I2C_CLEAR_FLAG();
    1f1e:	a6 e5       	ldi	r26, 0x56	; 86
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e6 e5       	ldi	r30, 0x56	; 86
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	80 68       	ori	r24, 0x80	; 128
    1f2a:	8c 93       	st	X, r24
	/*****ENABLE I2C********/
	I2C_ENABLE();
    1f2c:	a6 e5       	ldi	r26, 0x56	; 86
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e6 e5       	ldi	r30, 0x56	; 86
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	84 60       	ori	r24, 0x04	; 4
    1f38:	8c 93       	st	X, r24
	/*busy wait*/
	while(I2C_READ_FLAG()==0);
    1f3a:	e6 e5       	ldi	r30, 0x56	; 86
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	88 23       	and	r24, r24
    1f42:	dc f7       	brge	.-10     	; 0x1f3a <I2C_READ_WITH_ACK+0x32>
return TWDR;
    1f44:	e3 e2       	ldi	r30, 0x23	; 35
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
}
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <I2C_STOP>:

/***
 * @brief this function is used to Send STOP ON i2C bus
 */
void I2C_STOP(void)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
	I2C_SEND_STOP();
    1f58:	e6 e5       	ldi	r30, 0x56	; 86
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	84 e9       	ldi	r24, 0x94	; 148
    1f5e:	80 83       	st	Z, r24

}
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <I2C_GETSTATUS>:
u8 I2C_GETSTATUS(void)
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
return (TWSR&0xF8);
    1f6e:	e1 e2       	ldi	r30, 0x21	; 33
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	88 7f       	andi	r24, 0xF8	; 248
}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <I2C_SETSPEED>:


 static inline void I2C_SETSPEED(void)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
#if I2C_SPEED_MODE==I2C_STANDART_MODE_400kb_s
I2C_PRESCALER_DIV_1();
TWBR=2;
#elif I2C_SPEED_MODE==I2C_STANDART_MODE_100kb_s
I2C_PRESCALER_DIV_4();
    1f84:	a1 e2       	ldi	r26, 0x21	; 33
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e1 e2       	ldi	r30, 0x21	; 33
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	81 60       	ori	r24, 0x01	; 1
    1f90:	8c 93       	st	X, r24
    1f92:	a1 e2       	ldi	r26, 0x21	; 33
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e1 e2       	ldi	r30, 0x21	; 33
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8d 7f       	andi	r24, 0xFD	; 253
    1f9e:	8c 93       	st	X, r24
TWBR=2;
    1fa0:	e0 e2       	ldi	r30, 0x20	; 32
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	80 83       	st	Z, r24
#else
#error "INVALID PRESCALER FOR I2C"


#endif
}
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <__vector_19>:

 void __vector_19(void)  __attribute__((signal));
 void __vector_19(void)
 {
    1fae:	1f 92       	push	r1
    1fb0:	0f 92       	push	r0
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	0f 92       	push	r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	2f 93       	push	r18
    1fba:	3f 93       	push	r19
    1fbc:	4f 93       	push	r20
    1fbe:	5f 93       	push	r21
    1fc0:	6f 93       	push	r22
    1fc2:	7f 93       	push	r23
    1fc4:	8f 93       	push	r24
    1fc6:	9f 93       	push	r25
    1fc8:	af 93       	push	r26
    1fca:	bf 93       	push	r27
    1fcc:	ef 93       	push	r30
    1fce:	ff 93       	push	r31
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
 	I2C_CALLBACK();
    1fd8:	e0 91 07 03 	lds	r30, 0x0307
    1fdc:	f0 91 08 03 	lds	r31, 0x0308
    1fe0:	09 95       	icall
 }
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	ff 91       	pop	r31
    1fe8:	ef 91       	pop	r30
    1fea:	bf 91       	pop	r27
    1fec:	af 91       	pop	r26
    1fee:	9f 91       	pop	r25
    1ff0:	8f 91       	pop	r24
    1ff2:	7f 91       	pop	r23
    1ff4:	6f 91       	pop	r22
    1ff6:	5f 91       	pop	r21
    1ff8:	4f 91       	pop	r20
    1ffa:	3f 91       	pop	r19
    1ffc:	2f 91       	pop	r18
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	0f 90       	pop	r0
    2004:	1f 90       	pop	r1
    2006:	18 95       	reti

00002008 <MEXTI0_voidInit>:




void MEXTI0_voidInit(void)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	Enable_Global_Interrupt();
    2010:	af e5       	ldi	r26, 0x5F	; 95
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	ef e5       	ldi	r30, 0x5F	; 95
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	80 68       	ori	r24, 0x80	; 128
    201c:	8c 93       	st	X, r24

	Enable_INT0_Interrupt();
    201e:	ab e5       	ldi	r26, 0x5B	; 91
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	eb e5       	ldi	r30, 0x5B	; 91
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	80 64       	ori	r24, 0x40	; 64
    202a:	8c 93       	st	X, r24



#elif INT0_SENSE_MODE==EXT_INT_FALLING_EDGE

INT0_Sense_Falling_Edge();
    202c:	a5 e5       	ldi	r26, 0x55	; 85
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e5 e5       	ldi	r30, 0x55	; 85
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	82 60       	ori	r24, 0x02	; 2
    2038:	8c 93       	st	X, r24
    203a:	a5 e5       	ldi	r26, 0x55	; 85
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e5 e5       	ldi	r30, 0x55	; 85
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	8e 7f       	andi	r24, 0xFE	; 254
    2046:	8c 93       	st	X, r24
#error "INT0 Sense Control Invalid Mode"


#endif

}
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <MEXTI1_voidInit>:
void MEXTI1_voidInit(void)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
	Enable_Global_Interrupt();
    2056:	af e5       	ldi	r26, 0x5F	; 95
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	ef e5       	ldi	r30, 0x5F	; 95
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	80 68       	ori	r24, 0x80	; 128
    2062:	8c 93       	st	X, r24

	Enable_INT1_Interrupt();
    2064:	ab e5       	ldi	r26, 0x5B	; 91
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	eb e5       	ldi	r30, 0x5B	; 91
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	80 68       	ori	r24, 0x80	; 128
    2070:	8c 93       	st	X, r24



#elif INT1_SENSE_MODE==EXT_INT_FALLING_EDGE

INT1_Sense_Falling_Edge();
    2072:	a5 e5       	ldi	r26, 0x55	; 85
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e5 e5       	ldi	r30, 0x55	; 85
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	88 60       	ori	r24, 0x08	; 8
    207e:	8c 93       	st	X, r24
    2080:	a5 e5       	ldi	r26, 0x55	; 85
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e5 e5       	ldi	r30, 0x55	; 85
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	8b 7f       	andi	r24, 0xFB	; 251
    208c:	8c 93       	st	X, r24
#error "INT1 Sense Control Invalid Mode"


#endif

}
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <MEXTI2_voidInit>:
void MEXTI2_voidInit(void)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
	Enable_Global_Interrupt();
    209c:	af e5       	ldi	r26, 0x5F	; 95
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	ef e5       	ldi	r30, 0x5F	; 95
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 68       	ori	r24, 0x80	; 128
    20a8:	8c 93       	st	X, r24

	Enable_INT2_Interrupt();
    20aa:	ab e5       	ldi	r26, 0x5B	; 91
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	eb e5       	ldi	r30, 0x5B	; 91
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	80 62       	ori	r24, 0x20	; 32
    20b6:	8c 93       	st	X, r24



#elif INT2_SENSE_MODE==EXT_INT_FALLING_EDGE

INT2_Sense_Falling_Edge();
    20b8:	a4 e5       	ldi	r26, 0x54	; 84
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e4 e5       	ldi	r30, 0x54	; 84
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	8f 7b       	andi	r24, 0xBF	; 191
    20c4:	8c 93       	st	X, r24
#error "INT2 Sense Control Invalid Mode"


#endif

}
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <EXT_CALLBACK>:




void EXT_CALLBACK(u8 INT_NUMBER,void (*ptr)(void))
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <EXT_CALLBACK+0x6>
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <EXT_CALLBACK+0x8>
    20d4:	0f 92       	push	r0
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	7b 83       	std	Y+3, r23	; 0x03
    20de:	6a 83       	std	Y+2, r22	; 0x02
switch(INT_NUMBER)
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	3d 83       	std	Y+5, r19	; 0x05
    20e8:	2c 83       	std	Y+4, r18	; 0x04
    20ea:	8c 81       	ldd	r24, Y+4	; 0x04
    20ec:	9d 81       	ldd	r25, Y+5	; 0x05
    20ee:	82 30       	cpi	r24, 0x02	; 2
    20f0:	91 05       	cpc	r25, r1
    20f2:	89 f0       	breq	.+34     	; 0x2116 <EXT_CALLBACK+0x4a>
    20f4:	2c 81       	ldd	r18, Y+4	; 0x04
    20f6:	3d 81       	ldd	r19, Y+5	; 0x05
    20f8:	23 30       	cpi	r18, 0x03	; 3
    20fa:	31 05       	cpc	r19, r1
    20fc:	99 f0       	breq	.+38     	; 0x2124 <EXT_CALLBACK+0x58>
    20fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2100:	9d 81       	ldd	r25, Y+5	; 0x05
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	91 05       	cpc	r25, r1
    2106:	a1 f4       	brne	.+40     	; 0x2130 <EXT_CALLBACK+0x64>
{
case INT0 : EXT_INT0=ptr; break;
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	9b 81       	ldd	r25, Y+3	; 0x03
    210c:	90 93 0a 03 	sts	0x030A, r25
    2110:	80 93 09 03 	sts	0x0309, r24
    2114:	0d c0       	rjmp	.+26     	; 0x2130 <EXT_CALLBACK+0x64>
case INT1 :EXT_INT1=ptr;break;
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	9b 81       	ldd	r25, Y+3	; 0x03
    211a:	90 93 0c 03 	sts	0x030C, r25
    211e:	80 93 0b 03 	sts	0x030B, r24
    2122:	06 c0       	rjmp	.+12     	; 0x2130 <EXT_CALLBACK+0x64>
case INT2 :EXT_INT2=ptr;break;
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	9b 81       	ldd	r25, Y+3	; 0x03
    2128:	90 93 0e 03 	sts	0x030E, r25
    212c:	80 93 0d 03 	sts	0x030D, r24
default :break;
}


}
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <__vector_1>:

void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
    2140:	1f 92       	push	r1
    2142:	0f 92       	push	r0
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	0f 92       	push	r0
    2148:	11 24       	eor	r1, r1
    214a:	2f 93       	push	r18
    214c:	3f 93       	push	r19
    214e:	4f 93       	push	r20
    2150:	5f 93       	push	r21
    2152:	6f 93       	push	r22
    2154:	7f 93       	push	r23
    2156:	8f 93       	push	r24
    2158:	9f 93       	push	r25
    215a:	af 93       	push	r26
    215c:	bf 93       	push	r27
    215e:	ef 93       	push	r30
    2160:	ff 93       	push	r31
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
EXT_INT0();
    216a:	e0 91 09 03 	lds	r30, 0x0309
    216e:	f0 91 0a 03 	lds	r31, 0x030A
    2172:	09 95       	icall
}
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	ff 91       	pop	r31
    217a:	ef 91       	pop	r30
    217c:	bf 91       	pop	r27
    217e:	af 91       	pop	r26
    2180:	9f 91       	pop	r25
    2182:	8f 91       	pop	r24
    2184:	7f 91       	pop	r23
    2186:	6f 91       	pop	r22
    2188:	5f 91       	pop	r21
    218a:	4f 91       	pop	r20
    218c:	3f 91       	pop	r19
    218e:	2f 91       	pop	r18
    2190:	0f 90       	pop	r0
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	0f 90       	pop	r0
    2196:	1f 90       	pop	r1
    2198:	18 95       	reti

0000219a <__vector_2>:
void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
    219a:	1f 92       	push	r1
    219c:	0f 92       	push	r0
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	0f 92       	push	r0
    21a2:	11 24       	eor	r1, r1
    21a4:	2f 93       	push	r18
    21a6:	3f 93       	push	r19
    21a8:	4f 93       	push	r20
    21aa:	5f 93       	push	r21
    21ac:	6f 93       	push	r22
    21ae:	7f 93       	push	r23
    21b0:	8f 93       	push	r24
    21b2:	9f 93       	push	r25
    21b4:	af 93       	push	r26
    21b6:	bf 93       	push	r27
    21b8:	ef 93       	push	r30
    21ba:	ff 93       	push	r31
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62

EXT_INT1();
    21c4:	e0 91 0b 03 	lds	r30, 0x030B
    21c8:	f0 91 0c 03 	lds	r31, 0x030C
    21cc:	09 95       	icall
}
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	ff 91       	pop	r31
    21d4:	ef 91       	pop	r30
    21d6:	bf 91       	pop	r27
    21d8:	af 91       	pop	r26
    21da:	9f 91       	pop	r25
    21dc:	8f 91       	pop	r24
    21de:	7f 91       	pop	r23
    21e0:	6f 91       	pop	r22
    21e2:	5f 91       	pop	r21
    21e4:	4f 91       	pop	r20
    21e6:	3f 91       	pop	r19
    21e8:	2f 91       	pop	r18
    21ea:	0f 90       	pop	r0
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	0f 90       	pop	r0
    21f0:	1f 90       	pop	r1
    21f2:	18 95       	reti

000021f4 <__vector_3>:
void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
    21f4:	1f 92       	push	r1
    21f6:	0f 92       	push	r0
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	0f 92       	push	r0
    21fc:	11 24       	eor	r1, r1
    21fe:	2f 93       	push	r18
    2200:	3f 93       	push	r19
    2202:	4f 93       	push	r20
    2204:	5f 93       	push	r21
    2206:	6f 93       	push	r22
    2208:	7f 93       	push	r23
    220a:	8f 93       	push	r24
    220c:	9f 93       	push	r25
    220e:	af 93       	push	r26
    2210:	bf 93       	push	r27
    2212:	ef 93       	push	r30
    2214:	ff 93       	push	r31
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
EXT_INT2();
    221e:	e0 91 0d 03 	lds	r30, 0x030D
    2222:	f0 91 0e 03 	lds	r31, 0x030E
    2226:	09 95       	icall
}
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	ff 91       	pop	r31
    222e:	ef 91       	pop	r30
    2230:	bf 91       	pop	r27
    2232:	af 91       	pop	r26
    2234:	9f 91       	pop	r25
    2236:	8f 91       	pop	r24
    2238:	7f 91       	pop	r23
    223a:	6f 91       	pop	r22
    223c:	5f 91       	pop	r21
    223e:	4f 91       	pop	r20
    2240:	3f 91       	pop	r19
    2242:	2f 91       	pop	r18
    2244:	0f 90       	pop	r0
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	0f 90       	pop	r0
    224a:	1f 90       	pop	r1
    224c:	18 95       	reti

0000224e <DIO_PIN_WRITE_LOGIC_M>:

/**********using macros ***********/


void DIO_PIN_WRITE_LOGIC_M(u8 port ,u8 pin,u8 Pin_Logic)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	27 97       	sbiw	r28, 0x07	; 7
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	6a 83       	std	Y+2, r22	; 0x02
    2266:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN_HIGH==Pin_Logic)
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	09 f0       	breq	.+2      	; 0x2270 <DIO_PIN_WRITE_LOGIC_M+0x22>
    226e:	6f c0       	rjmp	.+222    	; 0x234e <DIO_PIN_WRITE_LOGIC_M+0x100>
	{
		switch(port)
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	3f 83       	std	Y+7, r19	; 0x07
    2278:	2e 83       	std	Y+6, r18	; 0x06
    227a:	8e 81       	ldd	r24, Y+6	; 0x06
    227c:	9f 81       	ldd	r25, Y+7	; 0x07
    227e:	81 30       	cpi	r24, 0x01	; 1
    2280:	91 05       	cpc	r25, r1
    2282:	49 f1       	breq	.+82     	; 0x22d6 <DIO_PIN_WRITE_LOGIC_M+0x88>
    2284:	2e 81       	ldd	r18, Y+6	; 0x06
    2286:	3f 81       	ldd	r19, Y+7	; 0x07
    2288:	22 30       	cpi	r18, 0x02	; 2
    228a:	31 05       	cpc	r19, r1
    228c:	2c f4       	brge	.+10     	; 0x2298 <DIO_PIN_WRITE_LOGIC_M+0x4a>
    228e:	8e 81       	ldd	r24, Y+6	; 0x06
    2290:	9f 81       	ldd	r25, Y+7	; 0x07
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	61 f0       	breq	.+24     	; 0x22ae <DIO_PIN_WRITE_LOGIC_M+0x60>
    2296:	d2 c0       	rjmp	.+420    	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
    2298:	2e 81       	ldd	r18, Y+6	; 0x06
    229a:	3f 81       	ldd	r19, Y+7	; 0x07
    229c:	22 30       	cpi	r18, 0x02	; 2
    229e:	31 05       	cpc	r19, r1
    22a0:	71 f1       	breq	.+92     	; 0x22fe <DIO_PIN_WRITE_LOGIC_M+0xb0>
    22a2:	8e 81       	ldd	r24, Y+6	; 0x06
    22a4:	9f 81       	ldd	r25, Y+7	; 0x07
    22a6:	83 30       	cpi	r24, 0x03	; 3
    22a8:	91 05       	cpc	r25, r1
    22aa:	e9 f1       	breq	.+122    	; 0x2326 <DIO_PIN_WRITE_LOGIC_M+0xd8>
    22ac:	c7 c0       	rjmp	.+398    	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		{

		case PORTA_:  SET_BIT(PORTA,pin); break;
    22ae:	ab e3       	ldi	r26, 0x3B	; 59
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	eb e3       	ldi	r30, 0x3B	; 59
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	48 2f       	mov	r20, r24
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	02 2e       	mov	r0, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <DIO_PIN_WRITE_LOGIC_M+0x7e>
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	0a 94       	dec	r0
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <DIO_PIN_WRITE_LOGIC_M+0x7a>
    22d0:	84 2b       	or	r24, r20
    22d2:	8c 93       	st	X, r24
    22d4:	b3 c0       	rjmp	.+358    	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		case PORTB_ : SET_BIT(PORTB,pin); break;
    22d6:	a8 e3       	ldi	r26, 0x38	; 56
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e8 e3       	ldi	r30, 0x38	; 56
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	48 2f       	mov	r20, r24
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	02 2e       	mov	r0, r18
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <DIO_PIN_WRITE_LOGIC_M+0xa6>
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	0a 94       	dec	r0
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <DIO_PIN_WRITE_LOGIC_M+0xa2>
    22f8:	84 2b       	or	r24, r20
    22fa:	8c 93       	st	X, r24
    22fc:	9f c0       	rjmp	.+318    	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		case PORTC_ : SET_BIT(PORTC,pin); break;
    22fe:	a5 e3       	ldi	r26, 0x35	; 53
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e5 e3       	ldi	r30, 0x35	; 53
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	48 2f       	mov	r20, r24
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	02 2e       	mov	r0, r18
    2316:	02 c0       	rjmp	.+4      	; 0x231c <DIO_PIN_WRITE_LOGIC_M+0xce>
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	0a 94       	dec	r0
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <DIO_PIN_WRITE_LOGIC_M+0xca>
    2320:	84 2b       	or	r24, r20
    2322:	8c 93       	st	X, r24
    2324:	8b c0       	rjmp	.+278    	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		case PORTD_ : SET_BIT(PORTD,pin); break;
    2326:	a2 e3       	ldi	r26, 0x32	; 50
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e2 e3       	ldi	r30, 0x32	; 50
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	48 2f       	mov	r20, r24
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	02 2e       	mov	r0, r18
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <DIO_PIN_WRITE_LOGIC_M+0xf6>
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	0a 94       	dec	r0
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <DIO_PIN_WRITE_LOGIC_M+0xf2>
    2348:	84 2b       	or	r24, r20
    234a:	8c 93       	st	X, r24
    234c:	77 c0       	rjmp	.+238    	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
		default  	: break;
		}
	}
	else if(PIN_LOW==Pin_Logic)
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	88 23       	and	r24, r24
    2352:	09 f0       	breq	.+2      	; 0x2356 <DIO_PIN_WRITE_LOGIC_M+0x108>
    2354:	73 c0       	rjmp	.+230    	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
	{
		switch(port)
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	3d 83       	std	Y+5, r19	; 0x05
    235e:	2c 83       	std	Y+4, r18	; 0x04
    2360:	8c 81       	ldd	r24, Y+4	; 0x04
    2362:	9d 81       	ldd	r25, Y+5	; 0x05
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	91 05       	cpc	r25, r1
    2368:	59 f1       	breq	.+86     	; 0x23c0 <DIO_PIN_WRITE_LOGIC_M+0x172>
    236a:	2c 81       	ldd	r18, Y+4	; 0x04
    236c:	3d 81       	ldd	r19, Y+5	; 0x05
    236e:	22 30       	cpi	r18, 0x02	; 2
    2370:	31 05       	cpc	r19, r1
    2372:	2c f4       	brge	.+10     	; 0x237e <DIO_PIN_WRITE_LOGIC_M+0x130>
    2374:	8c 81       	ldd	r24, Y+4	; 0x04
    2376:	9d 81       	ldd	r25, Y+5	; 0x05
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f0       	breq	.+26     	; 0x2396 <DIO_PIN_WRITE_LOGIC_M+0x148>
    237c:	5f c0       	rjmp	.+190    	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
    237e:	2c 81       	ldd	r18, Y+4	; 0x04
    2380:	3d 81       	ldd	r19, Y+5	; 0x05
    2382:	22 30       	cpi	r18, 0x02	; 2
    2384:	31 05       	cpc	r19, r1
    2386:	89 f1       	breq	.+98     	; 0x23ea <DIO_PIN_WRITE_LOGIC_M+0x19c>
    2388:	8c 81       	ldd	r24, Y+4	; 0x04
    238a:	9d 81       	ldd	r25, Y+5	; 0x05
    238c:	83 30       	cpi	r24, 0x03	; 3
    238e:	91 05       	cpc	r25, r1
    2390:	09 f4       	brne	.+2      	; 0x2394 <DIO_PIN_WRITE_LOGIC_M+0x146>
    2392:	40 c0       	rjmp	.+128    	; 0x2414 <DIO_PIN_WRITE_LOGIC_M+0x1c6>
    2394:	53 c0       	rjmp	.+166    	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				{

				case PORTA_:  CLEAR_BIT(PORTA,pin); break;
    2396:	ab e3       	ldi	r26, 0x3B	; 59
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	eb e3       	ldi	r30, 0x3B	; 59
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	48 2f       	mov	r20, r24
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	28 2f       	mov	r18, r24
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	02 2e       	mov	r0, r18
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <DIO_PIN_WRITE_LOGIC_M+0x166>
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	0a 94       	dec	r0
    23b6:	e2 f7       	brpl	.-8      	; 0x23b0 <DIO_PIN_WRITE_LOGIC_M+0x162>
    23b8:	80 95       	com	r24
    23ba:	84 23       	and	r24, r20
    23bc:	8c 93       	st	X, r24
    23be:	3e c0       	rjmp	.+124    	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				case PORTB_ : CLEAR_BIT(PORTB,pin); break;
    23c0:	a8 e3       	ldi	r26, 0x38	; 56
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e8 e3       	ldi	r30, 0x38	; 56
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	48 2f       	mov	r20, r24
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	02 2e       	mov	r0, r18
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <DIO_PIN_WRITE_LOGIC_M+0x190>
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	0a 94       	dec	r0
    23e0:	e2 f7       	brpl	.-8      	; 0x23da <DIO_PIN_WRITE_LOGIC_M+0x18c>
    23e2:	80 95       	com	r24
    23e4:	84 23       	and	r24, r20
    23e6:	8c 93       	st	X, r24
    23e8:	29 c0       	rjmp	.+82     	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				case PORTC_ : CLEAR_BIT(PORTC,pin); break;
    23ea:	a5 e3       	ldi	r26, 0x35	; 53
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e5 e3       	ldi	r30, 0x35	; 53
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	48 2f       	mov	r20, r24
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 2e       	mov	r0, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <DIO_PIN_WRITE_LOGIC_M+0x1ba>
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	0a 94       	dec	r0
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <DIO_PIN_WRITE_LOGIC_M+0x1b6>
    240c:	80 95       	com	r24
    240e:	84 23       	and	r24, r20
    2410:	8c 93       	st	X, r24
    2412:	14 c0       	rjmp	.+40     	; 0x243c <DIO_PIN_WRITE_LOGIC_M+0x1ee>
				case PORTD_ : CLEAR_BIT(PORTD,pin); break;
    2414:	a2 e3       	ldi	r26, 0x32	; 50
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e2 e3       	ldi	r30, 0x32	; 50
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	48 2f       	mov	r20, r24
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	02 2e       	mov	r0, r18
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <DIO_PIN_WRITE_LOGIC_M+0x1e4>
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	0a 94       	dec	r0
    2434:	e2 f7       	brpl	.-8      	; 0x242e <DIO_PIN_WRITE_LOGIC_M+0x1e0>
    2436:	80 95       	com	r24
    2438:	84 23       	and	r24, r20
    243a:	8c 93       	st	X, r24
				default  	: break;
				}
	}
	else{}

}
    243c:	27 96       	adiw	r28, 0x07	; 7
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <DIO_PIN_DIRECTION_INIT_M>:

/***********************/

void DIO_PIN_DIRECTION_INIT_M(u8 port ,u8 pin,u8 Direction)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	27 97       	sbiw	r28, 0x07	; 7
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	f8 94       	cli
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	cd bf       	out	0x3d, r28	; 61
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	6a 83       	std	Y+2, r22	; 0x02
    2466:	4b 83       	std	Y+3, r20	; 0x03
	if(DIRECTION_OUTPUT==Direction)
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	09 f0       	breq	.+2      	; 0x2470 <DIO_PIN_DIRECTION_INIT_M+0x22>
    246e:	6f c0       	rjmp	.+222    	; 0x254e <DIO_PIN_DIRECTION_INIT_M+0x100>
	{
		switch(port)
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	3f 83       	std	Y+7, r19	; 0x07
    2478:	2e 83       	std	Y+6, r18	; 0x06
    247a:	8e 81       	ldd	r24, Y+6	; 0x06
    247c:	9f 81       	ldd	r25, Y+7	; 0x07
    247e:	81 30       	cpi	r24, 0x01	; 1
    2480:	91 05       	cpc	r25, r1
    2482:	49 f1       	breq	.+82     	; 0x24d6 <DIO_PIN_DIRECTION_INIT_M+0x88>
    2484:	2e 81       	ldd	r18, Y+6	; 0x06
    2486:	3f 81       	ldd	r19, Y+7	; 0x07
    2488:	22 30       	cpi	r18, 0x02	; 2
    248a:	31 05       	cpc	r19, r1
    248c:	2c f4       	brge	.+10     	; 0x2498 <DIO_PIN_DIRECTION_INIT_M+0x4a>
    248e:	8e 81       	ldd	r24, Y+6	; 0x06
    2490:	9f 81       	ldd	r25, Y+7	; 0x07
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	61 f0       	breq	.+24     	; 0x24ae <DIO_PIN_DIRECTION_INIT_M+0x60>
    2496:	ce c0       	rjmp	.+412    	; 0x2634 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
    2498:	2e 81       	ldd	r18, Y+6	; 0x06
    249a:	3f 81       	ldd	r19, Y+7	; 0x07
    249c:	22 30       	cpi	r18, 0x02	; 2
    249e:	31 05       	cpc	r19, r1
    24a0:	71 f1       	breq	.+92     	; 0x24fe <DIO_PIN_DIRECTION_INIT_M+0xb0>
    24a2:	8e 81       	ldd	r24, Y+6	; 0x06
    24a4:	9f 81       	ldd	r25, Y+7	; 0x07
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	91 05       	cpc	r25, r1
    24aa:	e9 f1       	breq	.+122    	; 0x2526 <DIO_PIN_DIRECTION_INIT_M+0xd8>
    24ac:	c3 c0       	rjmp	.+390    	; 0x2634 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		{

		case PORTA_:  SET_BIT(DDRA,pin); break;
    24ae:	aa e3       	ldi	r26, 0x3A	; 58
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ea e3       	ldi	r30, 0x3A	; 58
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	48 2f       	mov	r20, r24
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	28 2f       	mov	r18, r24
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	02 2e       	mov	r0, r18
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <DIO_PIN_DIRECTION_INIT_M+0x7e>
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	0a 94       	dec	r0
    24ce:	e2 f7       	brpl	.-8      	; 0x24c8 <DIO_PIN_DIRECTION_INIT_M+0x7a>
    24d0:	84 2b       	or	r24, r20
    24d2:	8c 93       	st	X, r24
    24d4:	af c0       	rjmp	.+350    	; 0x2634 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		case PORTB_ : SET_BIT(DDRB,pin); break;
    24d6:	a7 e3       	ldi	r26, 0x37	; 55
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e7 e3       	ldi	r30, 0x37	; 55
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	48 2f       	mov	r20, r24
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 2e       	mov	r0, r18
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <DIO_PIN_DIRECTION_INIT_M+0xa6>
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	0a 94       	dec	r0
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <DIO_PIN_DIRECTION_INIT_M+0xa2>
    24f8:	84 2b       	or	r24, r20
    24fa:	8c 93       	st	X, r24
    24fc:	9b c0       	rjmp	.+310    	; 0x2634 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		case PORTC_ : SET_BIT(DDRC,pin); break;
    24fe:	a4 e3       	ldi	r26, 0x34	; 52
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e4 e3       	ldi	r30, 0x34	; 52
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	48 2f       	mov	r20, r24
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	02 2e       	mov	r0, r18
    2516:	02 c0       	rjmp	.+4      	; 0x251c <DIO_PIN_DIRECTION_INIT_M+0xce>
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	0a 94       	dec	r0
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <DIO_PIN_DIRECTION_INIT_M+0xca>
    2520:	84 2b       	or	r24, r20
    2522:	8c 93       	st	X, r24
    2524:	87 c0       	rjmp	.+270    	; 0x2634 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		case PORTD_ : SET_BIT(DDRD,pin); break;
    2526:	a1 e3       	ldi	r26, 0x31	; 49
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e1 e3       	ldi	r30, 0x31	; 49
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	48 2f       	mov	r20, r24
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	02 2e       	mov	r0, r18
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <DIO_PIN_DIRECTION_INIT_M+0xf6>
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	0a 94       	dec	r0
    2546:	e2 f7       	brpl	.-8      	; 0x2540 <DIO_PIN_DIRECTION_INIT_M+0xf2>
    2548:	84 2b       	or	r24, r20
    254a:	8c 93       	st	X, r24
    254c:	73 c0       	rjmp	.+230    	; 0x2634 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
		default  	: break;
		}
	}
	else if(PIN_LOW==DIRECTION_INPUT)
	{
		switch(port)
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	3d 83       	std	Y+5, r19	; 0x05
    2556:	2c 83       	std	Y+4, r18	; 0x04
    2558:	8c 81       	ldd	r24, Y+4	; 0x04
    255a:	9d 81       	ldd	r25, Y+5	; 0x05
    255c:	81 30       	cpi	r24, 0x01	; 1
    255e:	91 05       	cpc	r25, r1
    2560:	59 f1       	breq	.+86     	; 0x25b8 <DIO_PIN_DIRECTION_INIT_M+0x16a>
    2562:	2c 81       	ldd	r18, Y+4	; 0x04
    2564:	3d 81       	ldd	r19, Y+5	; 0x05
    2566:	22 30       	cpi	r18, 0x02	; 2
    2568:	31 05       	cpc	r19, r1
    256a:	2c f4       	brge	.+10     	; 0x2576 <DIO_PIN_DIRECTION_INIT_M+0x128>
    256c:	8c 81       	ldd	r24, Y+4	; 0x04
    256e:	9d 81       	ldd	r25, Y+5	; 0x05
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	69 f0       	breq	.+26     	; 0x258e <DIO_PIN_DIRECTION_INIT_M+0x140>
    2574:	5f c0       	rjmp	.+190    	; 0x2634 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
    2576:	2c 81       	ldd	r18, Y+4	; 0x04
    2578:	3d 81       	ldd	r19, Y+5	; 0x05
    257a:	22 30       	cpi	r18, 0x02	; 2
    257c:	31 05       	cpc	r19, r1
    257e:	89 f1       	breq	.+98     	; 0x25e2 <DIO_PIN_DIRECTION_INIT_M+0x194>
    2580:	8c 81       	ldd	r24, Y+4	; 0x04
    2582:	9d 81       	ldd	r25, Y+5	; 0x05
    2584:	83 30       	cpi	r24, 0x03	; 3
    2586:	91 05       	cpc	r25, r1
    2588:	09 f4       	brne	.+2      	; 0x258c <DIO_PIN_DIRECTION_INIT_M+0x13e>
    258a:	40 c0       	rjmp	.+128    	; 0x260c <DIO_PIN_DIRECTION_INIT_M+0x1be>
    258c:	53 c0       	rjmp	.+166    	; 0x2634 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				{

				case PORTA_:  CLEAR_BIT(DDRA,pin); break;
    258e:	aa e3       	ldi	r26, 0x3A	; 58
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	ea e3       	ldi	r30, 0x3A	; 58
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	48 2f       	mov	r20, r24
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	02 2e       	mov	r0, r18
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <DIO_PIN_DIRECTION_INIT_M+0x15e>
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	0a 94       	dec	r0
    25ae:	e2 f7       	brpl	.-8      	; 0x25a8 <DIO_PIN_DIRECTION_INIT_M+0x15a>
    25b0:	80 95       	com	r24
    25b2:	84 23       	and	r24, r20
    25b4:	8c 93       	st	X, r24
    25b6:	3e c0       	rjmp	.+124    	; 0x2634 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				case PORTB_ : CLEAR_BIT(DDRB,pin); break;
    25b8:	a7 e3       	ldi	r26, 0x37	; 55
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e7 e3       	ldi	r30, 0x37	; 55
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	48 2f       	mov	r20, r24
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	02 2e       	mov	r0, r18
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <DIO_PIN_DIRECTION_INIT_M+0x188>
    25d2:	88 0f       	add	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	0a 94       	dec	r0
    25d8:	e2 f7       	brpl	.-8      	; 0x25d2 <DIO_PIN_DIRECTION_INIT_M+0x184>
    25da:	80 95       	com	r24
    25dc:	84 23       	and	r24, r20
    25de:	8c 93       	st	X, r24
    25e0:	29 c0       	rjmp	.+82     	; 0x2634 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				case PORTC_ : CLEAR_BIT(DDRC,pin); break;
    25e2:	a4 e3       	ldi	r26, 0x34	; 52
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e4 e3       	ldi	r30, 0x34	; 52
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	48 2f       	mov	r20, r24
    25ee:	8a 81       	ldd	r24, Y+2	; 0x02
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	02 2e       	mov	r0, r18
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <DIO_PIN_DIRECTION_INIT_M+0x1b2>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	0a 94       	dec	r0
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <DIO_PIN_DIRECTION_INIT_M+0x1ae>
    2604:	80 95       	com	r24
    2606:	84 23       	and	r24, r20
    2608:	8c 93       	st	X, r24
    260a:	14 c0       	rjmp	.+40     	; 0x2634 <DIO_PIN_DIRECTION_INIT_M+0x1e6>
				case PORTD_ : CLEAR_BIT(DDRD,pin); break;
    260c:	a1 e3       	ldi	r26, 0x31	; 49
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e1 e3       	ldi	r30, 0x31	; 49
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	48 2f       	mov	r20, r24
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	02 2e       	mov	r0, r18
    2624:	02 c0       	rjmp	.+4      	; 0x262a <DIO_PIN_DIRECTION_INIT_M+0x1dc>
    2626:	88 0f       	add	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	0a 94       	dec	r0
    262c:	e2 f7       	brpl	.-8      	; 0x2626 <DIO_PIN_DIRECTION_INIT_M+0x1d8>
    262e:	80 95       	com	r24
    2630:	84 23       	and	r24, r20
    2632:	8c 93       	st	X, r24
				default  	: break;
				}
	}
	else{}

}
    2634:	27 96       	adiw	r28, 0x07	; 7
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <DIO_PIN_TOGGLE_LOGIC_M>:

/***********************/

void DIO_PIN_TOGGLE_LOGIC_M(u8 port ,u8 pin)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <DIO_PIN_TOGGLE_LOGIC_M+0x6>
    264c:	00 d0       	rcall	.+0      	; 0x264e <DIO_PIN_TOGGLE_LOGIC_M+0x8>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	3c 83       	std	Y+4, r19	; 0x04
    265e:	2b 83       	std	Y+3, r18	; 0x03
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	91 05       	cpc	r25, r1
    2668:	49 f1       	breq	.+82     	; 0x26bc <DIO_PIN_TOGGLE_LOGIC_M+0x76>
    266a:	2b 81       	ldd	r18, Y+3	; 0x03
    266c:	3c 81       	ldd	r19, Y+4	; 0x04
    266e:	22 30       	cpi	r18, 0x02	; 2
    2670:	31 05       	cpc	r19, r1
    2672:	2c f4       	brge	.+10     	; 0x267e <DIO_PIN_TOGGLE_LOGIC_M+0x38>
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	61 f0       	breq	.+24     	; 0x2694 <DIO_PIN_TOGGLE_LOGIC_M+0x4e>
    267c:	5a c0       	rjmp	.+180    	; 0x2732 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
    267e:	2b 81       	ldd	r18, Y+3	; 0x03
    2680:	3c 81       	ldd	r19, Y+4	; 0x04
    2682:	22 30       	cpi	r18, 0x02	; 2
    2684:	31 05       	cpc	r19, r1
    2686:	71 f1       	breq	.+92     	; 0x26e4 <DIO_PIN_TOGGLE_LOGIC_M+0x9e>
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	83 30       	cpi	r24, 0x03	; 3
    268e:	91 05       	cpc	r25, r1
    2690:	e9 f1       	breq	.+122    	; 0x270c <DIO_PIN_TOGGLE_LOGIC_M+0xc6>
    2692:	4f c0       	rjmp	.+158    	; 0x2732 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	{
	case PORTA_:  TOGGLE_BIT(PORTA,pin); break;
    2694:	ab e3       	ldi	r26, 0x3B	; 59
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	eb e3       	ldi	r30, 0x3B	; 59
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	48 2f       	mov	r20, r24
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	28 2f       	mov	r18, r24
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	02 2e       	mov	r0, r18
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <DIO_PIN_TOGGLE_LOGIC_M+0x6c>
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	0a 94       	dec	r0
    26b4:	e2 f7       	brpl	.-8      	; 0x26ae <DIO_PIN_TOGGLE_LOGIC_M+0x68>
    26b6:	84 27       	eor	r24, r20
    26b8:	8c 93       	st	X, r24
    26ba:	3b c0       	rjmp	.+118    	; 0x2732 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	case PORTB_ : TOGGLE_BIT(PORTB,pin); break;
    26bc:	a8 e3       	ldi	r26, 0x38	; 56
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e8 e3       	ldi	r30, 0x38	; 56
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	48 2f       	mov	r20, r24
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	02 2e       	mov	r0, r18
    26d4:	02 c0       	rjmp	.+4      	; 0x26da <DIO_PIN_TOGGLE_LOGIC_M+0x94>
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	0a 94       	dec	r0
    26dc:	e2 f7       	brpl	.-8      	; 0x26d6 <DIO_PIN_TOGGLE_LOGIC_M+0x90>
    26de:	84 27       	eor	r24, r20
    26e0:	8c 93       	st	X, r24
    26e2:	27 c0       	rjmp	.+78     	; 0x2732 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	case PORTC_ : TOGGLE_BIT(PORTC,pin); break;
    26e4:	a5 e3       	ldi	r26, 0x35	; 53
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e5 e3       	ldi	r30, 0x35	; 53
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	48 2f       	mov	r20, r24
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	02 2e       	mov	r0, r18
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <DIO_PIN_TOGGLE_LOGIC_M+0xbc>
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	0a 94       	dec	r0
    2704:	e2 f7       	brpl	.-8      	; 0x26fe <DIO_PIN_TOGGLE_LOGIC_M+0xb8>
    2706:	84 27       	eor	r24, r20
    2708:	8c 93       	st	X, r24
    270a:	13 c0       	rjmp	.+38     	; 0x2732 <DIO_PIN_TOGGLE_LOGIC_M+0xec>
	case PORTD_ : TOGGLE_BIT(PORTD,pin); break;
    270c:	a2 e3       	ldi	r26, 0x32	; 50
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e2 e3       	ldi	r30, 0x32	; 50
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	48 2f       	mov	r20, r24
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	02 2e       	mov	r0, r18
    2724:	02 c0       	rjmp	.+4      	; 0x272a <DIO_PIN_TOGGLE_LOGIC_M+0xe4>
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	0a 94       	dec	r0
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <DIO_PIN_TOGGLE_LOGIC_M+0xe0>
    272e:	84 27       	eor	r24, r20
    2730:	8c 93       	st	X, r24
	default : break;
	}
}
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <DIO_PIN_READ_LOGIC_LEVEL_M>:

/***********************************/
u8 DIO_PIN_READ_LOGIC_LEVEL_M(u8 port ,u8 pin)
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <DIO_PIN_READ_LOGIC_LEVEL_M+0x6>
    2746:	00 d0       	rcall	.+0      	; 0x2748 <DIO_PIN_READ_LOGIC_LEVEL_M+0x8>
    2748:	0f 92       	push	r0
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	8a 83       	std	Y+2, r24	; 0x02
    2750:	6b 83       	std	Y+3, r22	; 0x03
u8 x;
	switch(port)
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	3d 83       	std	Y+5, r19	; 0x05
    275a:	2c 83       	std	Y+4, r18	; 0x04
    275c:	4c 81       	ldd	r20, Y+4	; 0x04
    275e:	5d 81       	ldd	r21, Y+5	; 0x05
    2760:	41 30       	cpi	r20, 0x01	; 1
    2762:	51 05       	cpc	r21, r1
    2764:	41 f1       	breq	.+80     	; 0x27b6 <DIO_PIN_READ_LOGIC_LEVEL_M+0x76>
    2766:	8c 81       	ldd	r24, Y+4	; 0x04
    2768:	9d 81       	ldd	r25, Y+5	; 0x05
    276a:	82 30       	cpi	r24, 0x02	; 2
    276c:	91 05       	cpc	r25, r1
    276e:	34 f4       	brge	.+12     	; 0x277c <DIO_PIN_READ_LOGIC_LEVEL_M+0x3c>
    2770:	2c 81       	ldd	r18, Y+4	; 0x04
    2772:	3d 81       	ldd	r19, Y+5	; 0x05
    2774:	21 15       	cp	r18, r1
    2776:	31 05       	cpc	r19, r1
    2778:	61 f0       	breq	.+24     	; 0x2792 <DIO_PIN_READ_LOGIC_LEVEL_M+0x52>
    277a:	52 c0       	rjmp	.+164    	; 0x2820 <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
    277c:	4c 81       	ldd	r20, Y+4	; 0x04
    277e:	5d 81       	ldd	r21, Y+5	; 0x05
    2780:	42 30       	cpi	r20, 0x02	; 2
    2782:	51 05       	cpc	r21, r1
    2784:	51 f1       	breq	.+84     	; 0x27da <DIO_PIN_READ_LOGIC_LEVEL_M+0x9a>
    2786:	8c 81       	ldd	r24, Y+4	; 0x04
    2788:	9d 81       	ldd	r25, Y+5	; 0x05
    278a:	83 30       	cpi	r24, 0x03	; 3
    278c:	91 05       	cpc	r25, r1
    278e:	b9 f1       	breq	.+110    	; 0x27fe <DIO_PIN_READ_LOGIC_LEVEL_M+0xbe>
    2790:	47 c0       	rjmp	.+142    	; 0x2820 <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	{
	case PORTA_ : x= (GET_BIT(PINA,pin)); break;
    2792:	e9 e3       	ldi	r30, 0x39	; 57
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	28 2f       	mov	r18, r24
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	88 2f       	mov	r24, r24
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	a9 01       	movw	r20, r18
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <DIO_PIN_READ_LOGIC_LEVEL_M+0x6a>
    27a6:	55 95       	asr	r21
    27a8:	47 95       	ror	r20
    27aa:	8a 95       	dec	r24
    27ac:	e2 f7       	brpl	.-8      	; 0x27a6 <DIO_PIN_READ_LOGIC_LEVEL_M+0x66>
    27ae:	ca 01       	movw	r24, r20
    27b0:	81 70       	andi	r24, 0x01	; 1
    27b2:	89 83       	std	Y+1, r24	; 0x01
    27b4:	35 c0       	rjmp	.+106    	; 0x2820 <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	case PORTB_ : x= (GET_BIT(PINB,pin));break;
    27b6:	e6 e3       	ldi	r30, 0x36	; 54
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	88 2f       	mov	r24, r24
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a9 01       	movw	r20, r18
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <DIO_PIN_READ_LOGIC_LEVEL_M+0x8e>
    27ca:	55 95       	asr	r21
    27cc:	47 95       	ror	r20
    27ce:	8a 95       	dec	r24
    27d0:	e2 f7       	brpl	.-8      	; 0x27ca <DIO_PIN_READ_LOGIC_LEVEL_M+0x8a>
    27d2:	ca 01       	movw	r24, r20
    27d4:	81 70       	andi	r24, 0x01	; 1
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	23 c0       	rjmp	.+70     	; 0x2820 <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	case PORTC_ : x= (GET_BIT(PINC,pin));break;
    27da:	e3 e3       	ldi	r30, 0x33	; 51
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	a9 01       	movw	r20, r18
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <DIO_PIN_READ_LOGIC_LEVEL_M+0xb2>
    27ee:	55 95       	asr	r21
    27f0:	47 95       	ror	r20
    27f2:	8a 95       	dec	r24
    27f4:	e2 f7       	brpl	.-8      	; 0x27ee <DIO_PIN_READ_LOGIC_LEVEL_M+0xae>
    27f6:	ca 01       	movw	r24, r20
    27f8:	81 70       	andi	r24, 0x01	; 1
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	11 c0       	rjmp	.+34     	; 0x2820 <DIO_PIN_READ_LOGIC_LEVEL_M+0xe0>
	case PORTD_ :x= (GET_BIT(PIND,pin));	break;
    27fe:	e0 e3       	ldi	r30, 0x30	; 48
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	28 2f       	mov	r18, r24
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	88 2f       	mov	r24, r24
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	a9 01       	movw	r20, r18
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <DIO_PIN_READ_LOGIC_LEVEL_M+0xd6>
    2812:	55 95       	asr	r21
    2814:	47 95       	ror	r20
    2816:	8a 95       	dec	r24
    2818:	e2 f7       	brpl	.-8      	; 0x2812 <DIO_PIN_READ_LOGIC_LEVEL_M+0xd2>
    281a:	ca 01       	movw	r24, r20
    281c:	81 70       	andi	r24, 0x01	; 1
    281e:	89 83       	std	Y+1, r24	; 0x01
	default : break;
	}
return x;
    2820:	89 81       	ldd	r24, Y+1	; 0x01
}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <DIO_PORT_WRITE_LOGIC_M>:
/***********************************/

/******************************/
void DIO_PORT_WRITE_LOGIC_M(u8 port ,u8 Port_val)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	00 d0       	rcall	.+0      	; 0x2838 <DIO_PORT_WRITE_LOGIC_M+0x6>
    2838:	00 d0       	rcall	.+0      	; 0x283a <DIO_PORT_WRITE_LOGIC_M+0x8>
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	6a 83       	std	Y+2, r22	; 0x02
	  switch(port)
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	28 2f       	mov	r18, r24
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	3c 83       	std	Y+4, r19	; 0x04
    284a:	2b 83       	std	Y+3, r18	; 0x03
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	81 30       	cpi	r24, 0x01	; 1
    2852:	91 05       	cpc	r25, r1
    2854:	d1 f0       	breq	.+52     	; 0x288a <DIO_PORT_WRITE_LOGIC_M+0x58>
    2856:	2b 81       	ldd	r18, Y+3	; 0x03
    2858:	3c 81       	ldd	r19, Y+4	; 0x04
    285a:	22 30       	cpi	r18, 0x02	; 2
    285c:	31 05       	cpc	r19, r1
    285e:	2c f4       	brge	.+10     	; 0x286a <DIO_PORT_WRITE_LOGIC_M+0x38>
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	9c 81       	ldd	r25, Y+4	; 0x04
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	61 f0       	breq	.+24     	; 0x2880 <DIO_PORT_WRITE_LOGIC_M+0x4e>
    2868:	1e c0       	rjmp	.+60     	; 0x28a6 <DIO_PORT_WRITE_LOGIC_M+0x74>
    286a:	2b 81       	ldd	r18, Y+3	; 0x03
    286c:	3c 81       	ldd	r19, Y+4	; 0x04
    286e:	22 30       	cpi	r18, 0x02	; 2
    2870:	31 05       	cpc	r19, r1
    2872:	81 f0       	breq	.+32     	; 0x2894 <DIO_PORT_WRITE_LOGIC_M+0x62>
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	9c 81       	ldd	r25, Y+4	; 0x04
    2878:	83 30       	cpi	r24, 0x03	; 3
    287a:	91 05       	cpc	r25, r1
    287c:	81 f0       	breq	.+32     	; 0x289e <DIO_PORT_WRITE_LOGIC_M+0x6c>
    287e:	13 c0       	rjmp	.+38     	; 0x28a6 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  {
	  case PORTA_: PORTA = Port_val;break;
    2880:	eb e3       	ldi	r30, 0x3B	; 59
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	80 83       	st	Z, r24
    2888:	0e c0       	rjmp	.+28     	; 0x28a6 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  case PORTB_: PORTB = Port_val;break;
    288a:	e8 e3       	ldi	r30, 0x38	; 56
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	80 83       	st	Z, r24
    2892:	09 c0       	rjmp	.+18     	; 0x28a6 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  case PORTC_: PORTC = Port_val;break;
    2894:	e5 e3       	ldi	r30, 0x35	; 53
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	80 83       	st	Z, r24
    289c:	04 c0       	rjmp	.+8      	; 0x28a6 <DIO_PORT_WRITE_LOGIC_M+0x74>
	  case PORTD_: PORTD = Port_val;break;
    289e:	e2 e3       	ldi	r30, 0x32	; 50
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	80 83       	st	Z, r24
	  default : break;
	  }
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <DIO_PORT_SET_DIRECTION_M>:
void DIO_PORT_SET_DIRECTION_M(u8 port ,u8 DIRECTION_VALUE)
{
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <DIO_PORT_SET_DIRECTION_M+0x6>
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <DIO_PORT_SET_DIRECTION_M+0x8>
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	6a 83       	std	Y+2, r22	; 0x02
	  switch(port)
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	3c 83       	std	Y+4, r19	; 0x04
    28cc:	2b 83       	std	Y+3, r18	; 0x03
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	9c 81       	ldd	r25, Y+4	; 0x04
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	91 05       	cpc	r25, r1
    28d6:	d1 f0       	breq	.+52     	; 0x290c <DIO_PORT_SET_DIRECTION_M+0x58>
    28d8:	2b 81       	ldd	r18, Y+3	; 0x03
    28da:	3c 81       	ldd	r19, Y+4	; 0x04
    28dc:	22 30       	cpi	r18, 0x02	; 2
    28de:	31 05       	cpc	r19, r1
    28e0:	2c f4       	brge	.+10     	; 0x28ec <DIO_PORT_SET_DIRECTION_M+0x38>
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	9c 81       	ldd	r25, Y+4	; 0x04
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	61 f0       	breq	.+24     	; 0x2902 <DIO_PORT_SET_DIRECTION_M+0x4e>
    28ea:	1e c0       	rjmp	.+60     	; 0x2928 <DIO_PORT_SET_DIRECTION_M+0x74>
    28ec:	2b 81       	ldd	r18, Y+3	; 0x03
    28ee:	3c 81       	ldd	r19, Y+4	; 0x04
    28f0:	22 30       	cpi	r18, 0x02	; 2
    28f2:	31 05       	cpc	r19, r1
    28f4:	81 f0       	breq	.+32     	; 0x2916 <DIO_PORT_SET_DIRECTION_M+0x62>
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	83 30       	cpi	r24, 0x03	; 3
    28fc:	91 05       	cpc	r25, r1
    28fe:	81 f0       	breq	.+32     	; 0x2920 <DIO_PORT_SET_DIRECTION_M+0x6c>
    2900:	13 c0       	rjmp	.+38     	; 0x2928 <DIO_PORT_SET_DIRECTION_M+0x74>
	  {
		  case PORTA_: DDRA = DIRECTION_VALUE;break;
    2902:	ea e3       	ldi	r30, 0x3A	; 58
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	80 83       	st	Z, r24
    290a:	0e c0       	rjmp	.+28     	; 0x2928 <DIO_PORT_SET_DIRECTION_M+0x74>
		  case PORTB_: DDRB = DIRECTION_VALUE;break;
    290c:	e7 e3       	ldi	r30, 0x37	; 55
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	80 83       	st	Z, r24
    2914:	09 c0       	rjmp	.+18     	; 0x2928 <DIO_PORT_SET_DIRECTION_M+0x74>
		  case PORTC_: DDRC = DIRECTION_VALUE;break;
    2916:	e4 e3       	ldi	r30, 0x34	; 52
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	80 83       	st	Z, r24
    291e:	04 c0       	rjmp	.+8      	; 0x2928 <DIO_PORT_SET_DIRECTION_M+0x74>
		  case PORTD_: DDRD = DIRECTION_VALUE;break;
    2920:	e1 e3       	ldi	r30, 0x31	; 49
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	80 83       	st	Z, r24
		  default : break;
	  }
}
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <PORT_DIRECTION_INIT>:


/***********************/

void PORT_DIRECTION_INIT(void)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    293e:	ea e3       	ldi	r30, 0x3A	; 58
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	8c ef       	ldi	r24, 0xFC	; 252
    2944:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    2946:	e7 e3       	ldi	r30, 0x37	; 55
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	8f ef       	ldi	r24, 0xFF	; 255
    294c:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    294e:	e4 e3       	ldi	r30, 0x34	; 52
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	8d ef       	ldi	r24, 0xFD	; 253
    2954:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    2956:	e1 e3       	ldi	r30, 0x31	; 49
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	8e e0       	ldi	r24, 0x0E	; 14
    295c:	80 83       	st	Z, r24
}
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret

00002964 <PORT_LOGICLEVEL_INIT>:
void PORT_LOGICLEVEL_INIT(void)
{
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
	PORTA=PORTA_LOGIC;
    296c:	eb e3       	ldi	r30, 0x3B	; 59
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 ef       	ldi	r24, 0xF0	; 240
    2972:	80 83       	st	Z, r24
	PORTB=PORTB_LOGIC;
    2974:	e8 e3       	ldi	r30, 0x38	; 56
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	10 82       	st	Z, r1
	PORTC=PORTC_LOGIC;
    297a:	e5 e3       	ldi	r30, 0x35	; 53
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	10 82       	st	Z, r1
	PORTD=PORTD_LOGIC;
    2980:	e2 e3       	ldi	r30, 0x32	; 50
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 ef       	ldi	r24, 0xF0	; 240
    2986:	80 83       	st	Z, r24
}
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	08 95       	ret

0000298e <MADC_voidInit>:
#include"M_ADC_INT.h"

#if ADC_STATE==ADC_STATE_ENABLE

void MADC_voidInit(void)
{
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
/*********SELECT V REG************/
#if ADC_VOLATAGE_REFERENCE==AVCC_with_external_capacitor_at_AREF_pin
	ADC_ENABLE_AVCC_VOLTAGE_REF();
    2996:	a7 e2       	ldi	r26, 0x27	; 39
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e7 e2       	ldi	r30, 0x27	; 39
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	8f 77       	andi	r24, 0x7F	; 127
    29a2:	8c 93       	st	X, r24
    29a4:	a7 e2       	ldi	r26, 0x27	; 39
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e7 e2       	ldi	r30, 0x27	; 39
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	80 64       	ori	r24, 0x40	; 64
    29b0:	8c 93       	st	X, r24
#else
#error "wrong voltage reference for ADC CHECK ADC CNFG"
#endif
	/****************SELECT RIGHT ADJUST********/
#if ADC_DATA_ADJUSTMENT==ADC_RIGHT_ADJUST
	ADC_RIGHT_ADJUSTMENT();
    29b2:	a7 e2       	ldi	r26, 0x27	; 39
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e7 e2       	ldi	r30, 0x27	; 39
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	8f 7d       	andi	r24, 0xDF	; 223
    29be:	8c 93       	st	X, r24
#else

#endif

	/*************** ADC PRESCALER CLOCK SET **********/
	 ADC_SELECT_CLOCK(ADC_PRESCALER_VAL);
    29c0:	a6 e2       	ldi	r26, 0x26	; 38
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e6 e2       	ldi	r30, 0x26	; 38
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	86 60       	ori	r24, 0x06	; 6
    29cc:	8c 93       	st	X, r24
	/*************** Enable_ADC***************/
	 ADC_ENABLE();
    29ce:	a6 e2       	ldi	r26, 0x26	; 38
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e6 e2       	ldi	r30, 0x26	; 38
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	80 68       	ori	r24, 0x80	; 128
    29da:	8c 93       	st	X, r24
}
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <MADC_u16_GetVal_BLOCKING>:
u16 MADC_u16_GetVal_BLOCKING(u8 ADC_channel)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	0f 92       	push	r0
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	89 83       	std	Y+1, r24	; 0x01
		ADC_SELECT_CHANNEL(ADC_channel);
    29ee:	a7 e2       	ldi	r26, 0x27	; 39
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e7 e2       	ldi	r30, 0x27	; 39
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	98 2f       	mov	r25, r24
    29fa:	90 7e       	andi	r25, 0xE0	; 224
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	89 2b       	or	r24, r25
    2a00:	8c 93       	st	X, r24
	/***********start conversion************/
	ADC_START_CONVERSION();
    2a02:	a6 e2       	ldi	r26, 0x26	; 38
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e6 e2       	ldi	r30, 0x26	; 38
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	80 64       	ori	r24, 0x40	; 64
    2a0e:	8c 93       	st	X, r24
	//busy wait till conversion//
	while(GET_BIT(ADCSRA,ADIF)==0);
    2a10:	e6 e2       	ldi	r30, 0x26	; 38
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	82 95       	swap	r24
    2a18:	8f 70       	andi	r24, 0x0F	; 15
    2a1a:	88 2f       	mov	r24, r24
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	81 70       	andi	r24, 0x01	; 1
    2a20:	90 70       	andi	r25, 0x00	; 0
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	a9 f3       	breq	.-22     	; 0x2a10 <MADC_u16_GetVal_BLOCKING+0x2e>
	ADC_FLAG_CLEAR();
    2a26:	a6 e2       	ldi	r26, 0x26	; 38
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e6 e2       	ldi	r30, 0x26	; 38
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	80 61       	ori	r24, 0x10	; 16
    2a32:	8c 93       	st	X, r24
	return ADC_DATA_REG;
    2a34:	e4 e2       	ldi	r30, 0x24	; 36
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	91 81       	ldd	r25, Z+1	; 0x01
}
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <MADC_u16_GetVal_INTERRUPT>:
u16 MADC_u16_GetVal_INTERRUPT(u8 ADC_channel)
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	0f 92       	push	r0
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	89 83       	std	Y+1, r24	; 0x01
		ADC_SELECT_CHANNEL(ADC_channel);
    2a50:	a7 e2       	ldi	r26, 0x27	; 39
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	e7 e2       	ldi	r30, 0x27	; 39
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	98 2f       	mov	r25, r24
    2a5c:	90 7e       	andi	r25, 0xE0	; 224
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	89 2b       	or	r24, r25
    2a62:	8c 93       	st	X, r24
	/***********start conversion************/
	ADC_START_CONVERSION();
    2a64:	a6 e2       	ldi	r26, 0x26	; 38
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e6 e2       	ldi	r30, 0x26	; 38
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	80 64       	ori	r24, 0x40	; 64
    2a70:	8c 93       	st	X, r24
	//busy wait till conversion//
	while(GET_BIT(ADCSRA,ADIF)==0);
    2a72:	e6 e2       	ldi	r30, 0x26	; 38
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	82 95       	swap	r24
    2a7a:	8f 70       	andi	r24, 0x0F	; 15
    2a7c:	88 2f       	mov	r24, r24
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	81 70       	andi	r24, 0x01	; 1
    2a82:	90 70       	andi	r25, 0x00	; 0
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	a9 f3       	breq	.-22     	; 0x2a72 <MADC_u16_GetVal_INTERRUPT+0x2e>
	ADC_FLAG_CLEAR();
    2a88:	a6 e2       	ldi	r26, 0x26	; 38
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e6 e2       	ldi	r30, 0x26	; 38
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	80 61       	ori	r24, 0x10	; 16
    2a94:	8c 93       	st	X, r24
	return ADC_DATA_REG;
    2a96:	e4 e2       	ldi	r30, 0x24	; 36
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	91 81       	ldd	r25, Z+1	; 0x01
}
    2a9e:	0f 90       	pop	r0
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <MADC_u16_GetVal_POOLING>:
/**************************************************** */
u16 MADC_u16_GetVal_POOLING(u8 ADC_channel)
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <MADC_u16_GetVal_POOLING+0x6>
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <MADC_u16_GetVal_POOLING+0x8>
    2aae:	0f 92       	push	r0
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	8d 83       	std	Y+5, r24	; 0x05
	int i ;
		ADC_SELECT_CHANNEL(ADC_channel);
    2ab6:	a7 e2       	ldi	r26, 0x27	; 39
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e7 e2       	ldi	r30, 0x27	; 39
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	98 2f       	mov	r25, r24
    2ac2:	90 7e       	andi	r25, 0xE0	; 224
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	89 2b       	or	r24, r25
    2ac8:	8c 93       	st	X, r24
	/***********start conversion************/
	ADC_START_CONVERSION();
    2aca:	a6 e2       	ldi	r26, 0x26	; 38
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	e6 e2       	ldi	r30, 0x26	; 38
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	80 64       	ori	r24, 0x40	; 64
    2ad6:	8c 93       	st	X, r24
	for(int i=0; i<35;i++)
    2ad8:	1a 82       	std	Y+2, r1	; 0x02
    2ada:	19 82       	std	Y+1, r1	; 0x01
    2adc:	0a c0       	rjmp	.+20     	; 0x2af2 <MADC_u16_GetVal_POOLING+0x4c>
	{
		i++;
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	01 96       	adiw	r24, 0x01	; 1
    2ae4:	9a 83       	std	Y+2, r25	; 0x02
    2ae6:	89 83       	std	Y+1, r24	; 0x01
{
	int i ;
		ADC_SELECT_CHANNEL(ADC_channel);
	/***********start conversion************/
	ADC_START_CONVERSION();
	for(int i=0; i<35;i++)
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	9a 81       	ldd	r25, Y+2	; 0x02
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	9a 83       	std	Y+2, r25	; 0x02
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	9a 81       	ldd	r25, Y+2	; 0x02
    2af6:	83 32       	cpi	r24, 0x23	; 35
    2af8:	91 05       	cpc	r25, r1
    2afa:	8c f3       	brlt	.-30     	; 0x2ade <MADC_u16_GetVal_POOLING+0x38>
	{
		i++;
	}
	ADC_FLAG_CLEAR();
    2afc:	a6 e2       	ldi	r26, 0x26	; 38
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e6 e2       	ldi	r30, 0x26	; 38
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	80 61       	ori	r24, 0x10	; 16
    2b08:	8c 93       	st	X, r24
	return ADC_DATA_REG;
    2b0a:	e4 e2       	ldi	r30, 0x24	; 36
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	91 81       	ldd	r25, Z+1	; 0x01
}
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <Mapping_Values>:
/*****************************************************/
double Mapping_Values(u16 X_max , u16 X_min , u16 Y_max ,u16 Y_min , u16 y )
{
    2b22:	af 92       	push	r10
    2b24:	bf 92       	push	r11
    2b26:	cf 92       	push	r12
    2b28:	df 92       	push	r13
    2b2a:	ef 92       	push	r14
    2b2c:	ff 92       	push	r15
    2b2e:	0f 93       	push	r16
    2b30:	1f 93       	push	r17
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	2e 97       	sbiw	r28, 0x0e	; 14
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	9e 83       	std	Y+6, r25	; 0x06
    2b48:	8d 83       	std	Y+5, r24	; 0x05
    2b4a:	78 87       	std	Y+8, r23	; 0x08
    2b4c:	6f 83       	std	Y+7, r22	; 0x07
    2b4e:	5a 87       	std	Y+10, r21	; 0x0a
    2b50:	49 87       	std	Y+9, r20	; 0x09
    2b52:	3c 87       	std	Y+12, r19	; 0x0c
    2b54:	2b 87       	std	Y+11, r18	; 0x0b
    2b56:	1e 87       	std	Y+14, r17	; 0x0e
    2b58:	0d 87       	std	Y+13, r16	; 0x0d
	double X =0;
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	a0 e0       	ldi	r26, 0x00	; 0
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	9a 83       	std	Y+2, r25	; 0x02
    2b66:	ab 83       	std	Y+3, r26	; 0x03
    2b68:	bc 83       	std	Y+4, r27	; 0x04
 X=((((double)X_max-X_min)*(y-Y_min))/((double)Y_max-Y_min))+X_min;
    2b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6e:	cc 01       	movw	r24, r24
    2b70:	a0 e0       	ldi	r26, 0x00	; 0
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	bc 01       	movw	r22, r24
    2b76:	cd 01       	movw	r24, r26
    2b78:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2b7c:	7b 01       	movw	r14, r22
    2b7e:	8c 01       	movw	r16, r24
    2b80:	8f 81       	ldd	r24, Y+7	; 0x07
    2b82:	98 85       	ldd	r25, Y+8	; 0x08
    2b84:	cc 01       	movw	r24, r24
    2b86:	a0 e0       	ldi	r26, 0x00	; 0
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2b92:	9b 01       	movw	r18, r22
    2b94:	ac 01       	movw	r20, r24
    2b96:	c8 01       	movw	r24, r16
    2b98:	b7 01       	movw	r22, r14
    2b9a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	7c 01       	movw	r14, r24
    2ba4:	8d 01       	movw	r16, r26
    2ba6:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ba8:	3e 85       	ldd	r19, Y+14	; 0x0e
    2baa:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bac:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bae:	a9 01       	movw	r20, r18
    2bb0:	48 1b       	sub	r20, r24
    2bb2:	59 0b       	sbc	r21, r25
    2bb4:	ca 01       	movw	r24, r20
    2bb6:	cc 01       	movw	r24, r24
    2bb8:	a0 e0       	ldi	r26, 0x00	; 0
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2bc4:	9b 01       	movw	r18, r22
    2bc6:	ac 01       	movw	r20, r24
    2bc8:	c8 01       	movw	r24, r16
    2bca:	b7 01       	movw	r22, r14
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	5c 01       	movw	r10, r24
    2bd6:	6d 01       	movw	r12, r26
    2bd8:	89 85       	ldd	r24, Y+9	; 0x09
    2bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bdc:	cc 01       	movw	r24, r24
    2bde:	a0 e0       	ldi	r26, 0x00	; 0
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	bc 01       	movw	r22, r24
    2be4:	cd 01       	movw	r24, r26
    2be6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2bea:	7b 01       	movw	r14, r22
    2bec:	8c 01       	movw	r16, r24
    2bee:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bf0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bf2:	cc 01       	movw	r24, r24
    2bf4:	a0 e0       	ldi	r26, 0x00	; 0
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2c00:	9b 01       	movw	r18, r22
    2c02:	ac 01       	movw	r20, r24
    2c04:	c8 01       	movw	r24, r16
    2c06:	b7 01       	movw	r22, r14
    2c08:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9c 01       	movw	r18, r24
    2c12:	ad 01       	movw	r20, r26
    2c14:	c6 01       	movw	r24, r12
    2c16:	b5 01       	movw	r22, r10
    2c18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	7c 01       	movw	r14, r24
    2c22:	8d 01       	movw	r16, r26
    2c24:	8f 81       	ldd	r24, Y+7	; 0x07
    2c26:	98 85       	ldd	r25, Y+8	; 0x08
    2c28:	cc 01       	movw	r24, r24
    2c2a:	a0 e0       	ldi	r26, 0x00	; 0
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2c36:	9b 01       	movw	r18, r22
    2c38:	ac 01       	movw	r20, r24
    2c3a:	c8 01       	movw	r24, r16
    2c3c:	b7 01       	movw	r22, r14
    2c3e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	ab 83       	std	Y+3, r26	; 0x03
    2c4c:	bc 83       	std	Y+4, r27	; 0x04
 return X;
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	9a 81       	ldd	r25, Y+2	; 0x02
    2c52:	ab 81       	ldd	r26, Y+3	; 0x03
    2c54:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	2e 96       	adiw	r28, 0x0e	; 14
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	cf 90       	pop	r12
    2c76:	bf 90       	pop	r11
    2c78:	af 90       	pop	r10
    2c7a:	08 95       	ret

00002c7c <HAL_LED_ON>:

/**
 * @describe -> this function is used to set led high
 */
void HAL_LED_ON(u8 port_ , u8 pin)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <HAL_LED_ON+0x6>
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	89 83       	std	Y+1, r24	; 0x01
    2c88:	6a 83       	std	Y+2, r22	; 0x02
	DIO_PIN_WRITE_LOGIC_M(port_,pin,PIN_HIGH);
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	6a 81       	ldd	r22, Y+2	; 0x02
    2c8e:	41 e0       	ldi	r20, 0x01	; 1
    2c90:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
}
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <HAL_LED_OFF>:
/**************************************************/
/**
 * @describe -> this function is used to set led low
 */
void HAL_LED_OFF(u8 port_ , u8 pin)
{
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <HAL_LED_OFF+0x6>
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    2caa:	6a 83       	std	Y+2, r22	; 0x02
	DIO_PIN_WRITE_LOGIC_M(port_,pin,PIN_LOW);
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	6a 81       	ldd	r22, Y+2	; 0x02
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
}
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <HAL_LED_TOGGLE>:
/**************************************************/
/**
 * @describe -> this function is used to set led low
 */
void HAL_LED_TOGGLE(u8 port_ , u8 pin)
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <HAL_LED_TOGGLE+0x6>
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_PIN_TOGGLE_LOGIC_M(port_,pin);
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	6a 81       	ldd	r22, Y+2	; 0x02
    2cd2:	0e 94 23 13 	call	0x2646	; 0x2646 <DIO_PIN_TOGGLE_LOGIC_M>
}
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <HLCD_Send_Command_8bit>:




void HLCD_Send_Command_8bit( u8 command)
{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	2f 97       	sbiw	r28, 0x0f	; 15
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_LOW);
    2cf6:	82 e0       	ldi	r24, 0x02	; 2
    2cf8:	67 e0       	ldi	r22, 0x07	; 7
    2cfa:	40 e0       	ldi	r20, 0x00	; 0
    2cfc:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	65 e0       	ldi	r22, 0x05	; 5
    2d04:	40 e0       	ldi	r20, 0x00	; 0
    2d06:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
	DIO_PORT_WRITE_LOGIC_M(LCD_PORT_DATA,command);
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d0e:	0e 94 19 14 	call	0x2832	; 0x2832 <DIO_PORT_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    2d12:	82 e0       	ldi	r24, 0x02	; 2
    2d14:	66 e0       	ldi	r22, 0x06	; 6
    2d16:	41 e0       	ldi	r20, 0x01	; 1
    2d18:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	a0 e0       	ldi	r26, 0x00	; 0
    2d22:	b0 e4       	ldi	r27, 0x40	; 64
    2d24:	8b 87       	std	Y+11, r24	; 0x0b
    2d26:	9c 87       	std	Y+12, r25	; 0x0c
    2d28:	ad 87       	std	Y+13, r26	; 0x0d
    2d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	4a ef       	ldi	r20, 0xFA	; 250
    2d3a:	54 e4       	ldi	r21, 0x44	; 68
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	8f 83       	std	Y+7, r24	; 0x07
    2d46:	98 87       	std	Y+8, r25	; 0x08
    2d48:	a9 87       	std	Y+9, r26	; 0x09
    2d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4e:	78 85       	ldd	r23, Y+8	; 0x08
    2d50:	89 85       	ldd	r24, Y+9	; 0x09
    2d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e8       	ldi	r20, 0x80	; 128
    2d5a:	5f e3       	ldi	r21, 0x3F	; 63
    2d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d60:	88 23       	and	r24, r24
    2d62:	2c f4       	brge	.+10     	; 0x2d6e <HLCD_Send_Command_8bit+0x8e>
		__ticks = 1;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
    2d6c:	3f c0       	rjmp	.+126    	; 0x2dec <HLCD_Send_Command_8bit+0x10c>
	else if (__tmp > 65535)
    2d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d70:	78 85       	ldd	r23, Y+8	; 0x08
    2d72:	89 85       	ldd	r24, Y+9	; 0x09
    2d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	3f ef       	ldi	r19, 0xFF	; 255
    2d7a:	4f e7       	ldi	r20, 0x7F	; 127
    2d7c:	57 e4       	ldi	r21, 0x47	; 71
    2d7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d82:	18 16       	cp	r1, r24
    2d84:	4c f5       	brge	.+82     	; 0x2dd8 <HLCD_Send_Command_8bit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e2       	ldi	r20, 0x20	; 32
    2d94:	51 e4       	ldi	r21, 0x41	; 65
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
    2dae:	0f c0       	rjmp	.+30     	; 0x2dce <HLCD_Send_Command_8bit+0xee>
    2db0:	88 ec       	ldi	r24, 0xC8	; 200
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <HLCD_Send_Command_8bit+0xdc>
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	9e 83       	std	Y+6, r25	; 0x06
    2dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	69 f7       	brne	.-38     	; 0x2db0 <HLCD_Send_Command_8bit+0xd0>
    2dd6:	14 c0       	rjmp	.+40     	; 0x2e00 <HLCD_Send_Command_8bit+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dda:	78 85       	ldd	r23, Y+8	; 0x08
    2ddc:	89 85       	ldd	r24, Y+9	; 0x09
    2dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	9e 81       	ldd	r25, Y+6	; 0x06
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	89 83       	std	Y+1, r24	; 0x01
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <HLCD_Send_Command_8bit+0x118>
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    2e00:	82 e0       	ldi	r24, 0x02	; 2
    2e02:	66 e0       	ldi	r22, 0x06	; 6
    2e04:	40 e0       	ldi	r20, 0x00	; 0
    2e06:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>

}
    2e0a:	2f 96       	adiw	r28, 0x0f	; 15
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <HLCD_INIT_8bit>:
/***********************************/
void HLCD_INIT_8bit(void)
{
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
    2e24:	aa 97       	sbiw	r28, 0x2a	; 42
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	a0 ef       	ldi	r26, 0xF0	; 240
    2e36:	b1 e4       	ldi	r27, 0x41	; 65
    2e38:	8f a3       	std	Y+39, r24	; 0x27
    2e3a:	98 a7       	std	Y+40, r25	; 0x28
    2e3c:	a9 a7       	std	Y+41, r26	; 0x29
    2e3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e40:	6f a1       	ldd	r22, Y+39	; 0x27
    2e42:	78 a5       	ldd	r23, Y+40	; 0x28
    2e44:	89 a5       	ldd	r24, Y+41	; 0x29
    2e46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	4a ef       	ldi	r20, 0xFA	; 250
    2e4e:	54 e4       	ldi	r21, 0x44	; 68
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	8b a3       	std	Y+35, r24	; 0x23
    2e5a:	9c a3       	std	Y+36, r25	; 0x24
    2e5c:	ad a3       	std	Y+37, r26	; 0x25
    2e5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e60:	6b a1       	ldd	r22, Y+35	; 0x23
    2e62:	7c a1       	ldd	r23, Y+36	; 0x24
    2e64:	8d a1       	ldd	r24, Y+37	; 0x25
    2e66:	9e a1       	ldd	r25, Y+38	; 0x26
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e8       	ldi	r20, 0x80	; 128
    2e6e:	5f e3       	ldi	r21, 0x3F	; 63
    2e70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e74:	88 23       	and	r24, r24
    2e76:	2c f4       	brge	.+10     	; 0x2e82 <HLCD_INIT_8bit+0x66>
		__ticks = 1;
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	9a a3       	std	Y+34, r25	; 0x22
    2e7e:	89 a3       	std	Y+33, r24	; 0x21
    2e80:	3f c0       	rjmp	.+126    	; 0x2f00 <HLCD_INIT_8bit+0xe4>
	else if (__tmp > 65535)
    2e82:	6b a1       	ldd	r22, Y+35	; 0x23
    2e84:	7c a1       	ldd	r23, Y+36	; 0x24
    2e86:	8d a1       	ldd	r24, Y+37	; 0x25
    2e88:	9e a1       	ldd	r25, Y+38	; 0x26
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	3f ef       	ldi	r19, 0xFF	; 255
    2e8e:	4f e7       	ldi	r20, 0x7F	; 127
    2e90:	57 e4       	ldi	r21, 0x47	; 71
    2e92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e96:	18 16       	cp	r1, r24
    2e98:	4c f5       	brge	.+82     	; 0x2eec <HLCD_INIT_8bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2ea0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e2       	ldi	r20, 0x20	; 32
    2ea8:	51 e4       	ldi	r21, 0x41	; 65
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	9a a3       	std	Y+34, r25	; 0x22
    2ec0:	89 a3       	std	Y+33, r24	; 0x21
    2ec2:	0f c0       	rjmp	.+30     	; 0x2ee2 <HLCD_INIT_8bit+0xc6>
    2ec4:	88 ec       	ldi	r24, 0xC8	; 200
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	98 a3       	std	Y+32, r25	; 0x20
    2eca:	8f 8f       	std	Y+31, r24	; 0x1f
    2ecc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ece:	98 a1       	ldd	r25, Y+32	; 0x20
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <HLCD_INIT_8bit+0xb4>
    2ed4:	98 a3       	std	Y+32, r25	; 0x20
    2ed6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eda:	9a a1       	ldd	r25, Y+34	; 0x22
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	9a a3       	std	Y+34, r25	; 0x22
    2ee0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	69 f7       	brne	.-38     	; 0x2ec4 <HLCD_INIT_8bit+0xa8>
    2eea:	14 c0       	rjmp	.+40     	; 0x2f14 <HLCD_INIT_8bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eec:	6b a1       	ldd	r22, Y+35	; 0x23
    2eee:	7c a1       	ldd	r23, Y+36	; 0x24
    2ef0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ef2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9a a3       	std	Y+34, r25	; 0x22
    2efe:	89 a3       	std	Y+33, r24	; 0x21
    2f00:	89 a1       	ldd	r24, Y+33	; 0x21
    2f02:	9a a1       	ldd	r25, Y+34	; 0x22
    2f04:	9e 8f       	std	Y+30, r25	; 0x1e
    2f06:	8d 8f       	std	Y+29, r24	; 0x1d
    2f08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <HLCD_INIT_8bit+0xf0>
    2f10:	9e 8f       	std	Y+30, r25	; 0x1e
    2f12:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(30);
	HLCD_Send_Command_8bit(FUNCTION_SET_8bit_Mode_2row_8_line);
    2f14:	88 e3       	ldi	r24, 0x38	; 56
    2f16:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	a0 e8       	ldi	r26, 0x80	; 128
    2f20:	bf e3       	ldi	r27, 0x3F	; 63
    2f22:	89 8f       	std	Y+25, r24	; 0x19
    2f24:	9a 8f       	std	Y+26, r25	; 0x1a
    2f26:	ab 8f       	std	Y+27, r26	; 0x1b
    2f28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	4a ef       	ldi	r20, 0xFA	; 250
    2f38:	54 e4       	ldi	r21, 0x44	; 68
    2f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	8d 8b       	std	Y+21, r24	; 0x15
    2f44:	9e 8b       	std	Y+22, r25	; 0x16
    2f46:	af 8b       	std	Y+23, r26	; 0x17
    2f48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f50:	98 8d       	ldd	r25, Y+24	; 0x18
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e8       	ldi	r20, 0x80	; 128
    2f58:	5f e3       	ldi	r21, 0x3F	; 63
    2f5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f5e:	88 23       	and	r24, r24
    2f60:	2c f4       	brge	.+10     	; 0x2f6c <HLCD_INIT_8bit+0x150>
		__ticks = 1;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	9c 8b       	std	Y+20, r25	; 0x14
    2f68:	8b 8b       	std	Y+19, r24	; 0x13
    2f6a:	3f c0       	rjmp	.+126    	; 0x2fea <HLCD_INIT_8bit+0x1ce>
	else if (__tmp > 65535)
    2f6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f70:	8f 89       	ldd	r24, Y+23	; 0x17
    2f72:	98 8d       	ldd	r25, Y+24	; 0x18
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	3f ef       	ldi	r19, 0xFF	; 255
    2f78:	4f e7       	ldi	r20, 0x7F	; 127
    2f7a:	57 e4       	ldi	r21, 0x47	; 71
    2f7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f80:	18 16       	cp	r1, r24
    2f82:	4c f5       	brge	.+82     	; 0x2fd6 <HLCD_INIT_8bit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f84:	69 8d       	ldd	r22, Y+25	; 0x19
    2f86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e2       	ldi	r20, 0x20	; 32
    2f92:	51 e4       	ldi	r21, 0x41	; 65
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	cd 01       	movw	r24, r26
    2fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	9c 8b       	std	Y+20, r25	; 0x14
    2faa:	8b 8b       	std	Y+19, r24	; 0x13
    2fac:	0f c0       	rjmp	.+30     	; 0x2fcc <HLCD_INIT_8bit+0x1b0>
    2fae:	88 ec       	ldi	r24, 0xC8	; 200
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	9a 8b       	std	Y+18, r25	; 0x12
    2fb4:	89 8b       	std	Y+17, r24	; 0x11
    2fb6:	89 89       	ldd	r24, Y+17	; 0x11
    2fb8:	9a 89       	ldd	r25, Y+18	; 0x12
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	f1 f7       	brne	.-4      	; 0x2fba <HLCD_INIT_8bit+0x19e>
    2fbe:	9a 8b       	std	Y+18, r25	; 0x12
    2fc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	9c 8b       	std	Y+20, r25	; 0x14
    2fca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2fce:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	69 f7       	brne	.-38     	; 0x2fae <HLCD_INIT_8bit+0x192>
    2fd4:	14 c0       	rjmp	.+40     	; 0x2ffe <HLCD_INIT_8bit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2fda:	8f 89       	ldd	r24, Y+23	; 0x17
    2fdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	9c 8b       	std	Y+20, r25	; 0x14
    2fe8:	8b 8b       	std	Y+19, r24	; 0x13
    2fea:	8b 89       	ldd	r24, Y+19	; 0x13
    2fec:	9c 89       	ldd	r25, Y+20	; 0x14
    2fee:	98 8b       	std	Y+16, r25	; 0x10
    2ff0:	8f 87       	std	Y+15, r24	; 0x0f
    2ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff4:	98 89       	ldd	r25, Y+16	; 0x10
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <HLCD_INIT_8bit+0x1da>
    2ffa:	98 8b       	std	Y+16, r25	; 0x10
    2ffc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_Send_Command_8bit(LCD_CMD_DISPLAY_ON_CURSOR_ON_BC_ON);
    2ffe:	8f e0       	ldi	r24, 0x0F	; 15
    3000:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	a0 e8       	ldi	r26, 0x80	; 128
    300a:	bf e3       	ldi	r27, 0x3F	; 63
    300c:	8b 87       	std	Y+11, r24	; 0x0b
    300e:	9c 87       	std	Y+12, r25	; 0x0c
    3010:	ad 87       	std	Y+13, r26	; 0x0d
    3012:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3014:	6b 85       	ldd	r22, Y+11	; 0x0b
    3016:	7c 85       	ldd	r23, Y+12	; 0x0c
    3018:	8d 85       	ldd	r24, Y+13	; 0x0d
    301a:	9e 85       	ldd	r25, Y+14	; 0x0e
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	4a ef       	ldi	r20, 0xFA	; 250
    3022:	54 e4       	ldi	r21, 0x44	; 68
    3024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	8f 83       	std	Y+7, r24	; 0x07
    302e:	98 87       	std	Y+8, r25	; 0x08
    3030:	a9 87       	std	Y+9, r26	; 0x09
    3032:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3034:	6f 81       	ldd	r22, Y+7	; 0x07
    3036:	78 85       	ldd	r23, Y+8	; 0x08
    3038:	89 85       	ldd	r24, Y+9	; 0x09
    303a:	9a 85       	ldd	r25, Y+10	; 0x0a
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	40 e8       	ldi	r20, 0x80	; 128
    3042:	5f e3       	ldi	r21, 0x3F	; 63
    3044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3048:	88 23       	and	r24, r24
    304a:	2c f4       	brge	.+10     	; 0x3056 <HLCD_INIT_8bit+0x23a>
		__ticks = 1;
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	9e 83       	std	Y+6, r25	; 0x06
    3052:	8d 83       	std	Y+5, r24	; 0x05
    3054:	3f c0       	rjmp	.+126    	; 0x30d4 <HLCD_INIT_8bit+0x2b8>
	else if (__tmp > 65535)
    3056:	6f 81       	ldd	r22, Y+7	; 0x07
    3058:	78 85       	ldd	r23, Y+8	; 0x08
    305a:	89 85       	ldd	r24, Y+9	; 0x09
    305c:	9a 85       	ldd	r25, Y+10	; 0x0a
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	3f ef       	ldi	r19, 0xFF	; 255
    3062:	4f e7       	ldi	r20, 0x7F	; 127
    3064:	57 e4       	ldi	r21, 0x47	; 71
    3066:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    306a:	18 16       	cp	r1, r24
    306c:	4c f5       	brge	.+82     	; 0x30c0 <HLCD_INIT_8bit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3070:	7c 85       	ldd	r23, Y+12	; 0x0c
    3072:	8d 85       	ldd	r24, Y+13	; 0x0d
    3074:	9e 85       	ldd	r25, Y+14	; 0x0e
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e2       	ldi	r20, 0x20	; 32
    307c:	51 e4       	ldi	r21, 0x41	; 65
    307e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	bc 01       	movw	r22, r24
    3088:	cd 01       	movw	r24, r26
    308a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	9e 83       	std	Y+6, r25	; 0x06
    3094:	8d 83       	std	Y+5, r24	; 0x05
    3096:	0f c0       	rjmp	.+30     	; 0x30b6 <HLCD_INIT_8bit+0x29a>
    3098:	88 ec       	ldi	r24, 0xC8	; 200
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	9c 83       	std	Y+4, r25	; 0x04
    309e:	8b 83       	std	Y+3, r24	; 0x03
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	9c 81       	ldd	r25, Y+4	; 0x04
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	f1 f7       	brne	.-4      	; 0x30a4 <HLCD_INIT_8bit+0x288>
    30a8:	9c 83       	std	Y+4, r25	; 0x04
    30aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ac:	8d 81       	ldd	r24, Y+5	; 0x05
    30ae:	9e 81       	ldd	r25, Y+6	; 0x06
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	9e 83       	std	Y+6, r25	; 0x06
    30b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b6:	8d 81       	ldd	r24, Y+5	; 0x05
    30b8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	69 f7       	brne	.-38     	; 0x3098 <HLCD_INIT_8bit+0x27c>
    30be:	14 c0       	rjmp	.+40     	; 0x30e8 <HLCD_INIT_8bit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c0:	6f 81       	ldd	r22, Y+7	; 0x07
    30c2:	78 85       	ldd	r23, Y+8	; 0x08
    30c4:	89 85       	ldd	r24, Y+9	; 0x09
    30c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	9e 83       	std	Y+6, r25	; 0x06
    30d2:	8d 83       	std	Y+5, r24	; 0x05
    30d4:	8d 81       	ldd	r24, Y+5	; 0x05
    30d6:	9e 81       	ldd	r25, Y+6	; 0x06
    30d8:	9a 83       	std	Y+2, r25	; 0x02
    30da:	89 83       	std	Y+1, r24	; 0x01
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	9a 81       	ldd	r25, Y+2	; 0x02
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <HLCD_INIT_8bit+0x2c4>
    30e4:	9a 83       	std	Y+2, r25	; 0x02
    30e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>

}
    30ee:	aa 96       	adiw	r28, 0x2a	; 42
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	f8 94       	cli
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	cd bf       	out	0x3d, r28	; 61
    30fa:	cf 91       	pop	r28
    30fc:	df 91       	pop	r29
    30fe:	08 95       	ret

00003100 <HLCD_Send_char_8bit>:
void HLCD_Send_char_8bit( u8 data)
{
    3100:	df 93       	push	r29
    3102:	cf 93       	push	r28
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62
    3108:	2f 97       	sbiw	r28, 0x0f	; 15
    310a:	0f b6       	in	r0, 0x3f	; 63
    310c:	f8 94       	cli
    310e:	de bf       	out	0x3e, r29	; 62
    3110:	0f be       	out	0x3f, r0	; 63
    3112:	cd bf       	out	0x3d, r28	; 61
    3114:	8f 87       	std	Y+15, r24	; 0x0f
	/*clear rs to select command*/
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_HIGH);
    3116:	82 e0       	ldi	r24, 0x02	; 2
    3118:	67 e0       	ldi	r22, 0x07	; 7
    311a:	41 e0       	ldi	r20, 0x01	; 1
    311c:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
    3120:	82 e0       	ldi	r24, 0x02	; 2
    3122:	65 e0       	ldi	r22, 0x05	; 5
    3124:	40 e0       	ldi	r20, 0x00	; 0
    3126:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
	DIO_PORT_WRITE_LOGIC_M(LCD_PORT_DATA,data);
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	6f 85       	ldd	r22, Y+15	; 0x0f
    312e:	0e 94 19 14 	call	0x2832	; 0x2832 <DIO_PORT_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    3132:	82 e0       	ldi	r24, 0x02	; 2
    3134:	66 e0       	ldi	r22, 0x06	; 6
    3136:	41 e0       	ldi	r20, 0x01	; 1
    3138:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	a0 e0       	ldi	r26, 0x00	; 0
    3142:	b0 e4       	ldi	r27, 0x40	; 64
    3144:	8b 87       	std	Y+11, r24	; 0x0b
    3146:	9c 87       	std	Y+12, r25	; 0x0c
    3148:	ad 87       	std	Y+13, r26	; 0x0d
    314a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314c:	6b 85       	ldd	r22, Y+11	; 0x0b
    314e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3150:	8d 85       	ldd	r24, Y+13	; 0x0d
    3152:	9e 85       	ldd	r25, Y+14	; 0x0e
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	4a ef       	ldi	r20, 0xFA	; 250
    315a:	54 e4       	ldi	r21, 0x44	; 68
    315c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	8f 83       	std	Y+7, r24	; 0x07
    3166:	98 87       	std	Y+8, r25	; 0x08
    3168:	a9 87       	std	Y+9, r26	; 0x09
    316a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    316c:	6f 81       	ldd	r22, Y+7	; 0x07
    316e:	78 85       	ldd	r23, Y+8	; 0x08
    3170:	89 85       	ldd	r24, Y+9	; 0x09
    3172:	9a 85       	ldd	r25, Y+10	; 0x0a
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 e8       	ldi	r20, 0x80	; 128
    317a:	5f e3       	ldi	r21, 0x3F	; 63
    317c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3180:	88 23       	and	r24, r24
    3182:	2c f4       	brge	.+10     	; 0x318e <HLCD_Send_char_8bit+0x8e>
		__ticks = 1;
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	9e 83       	std	Y+6, r25	; 0x06
    318a:	8d 83       	std	Y+5, r24	; 0x05
    318c:	3f c0       	rjmp	.+126    	; 0x320c <HLCD_Send_char_8bit+0x10c>
	else if (__tmp > 65535)
    318e:	6f 81       	ldd	r22, Y+7	; 0x07
    3190:	78 85       	ldd	r23, Y+8	; 0x08
    3192:	89 85       	ldd	r24, Y+9	; 0x09
    3194:	9a 85       	ldd	r25, Y+10	; 0x0a
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	3f ef       	ldi	r19, 0xFF	; 255
    319a:	4f e7       	ldi	r20, 0x7F	; 127
    319c:	57 e4       	ldi	r21, 0x47	; 71
    319e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a2:	18 16       	cp	r1, r24
    31a4:	4c f5       	brge	.+82     	; 0x31f8 <HLCD_Send_char_8bit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e2       	ldi	r20, 0x20	; 32
    31b4:	51 e4       	ldi	r21, 0x41	; 65
    31b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	bc 01       	movw	r22, r24
    31c0:	cd 01       	movw	r24, r26
    31c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9e 83       	std	Y+6, r25	; 0x06
    31cc:	8d 83       	std	Y+5, r24	; 0x05
    31ce:	0f c0       	rjmp	.+30     	; 0x31ee <HLCD_Send_char_8bit+0xee>
    31d0:	88 ec       	ldi	r24, 0xC8	; 200
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	9c 83       	std	Y+4, r25	; 0x04
    31d6:	8b 83       	std	Y+3, r24	; 0x03
    31d8:	8b 81       	ldd	r24, Y+3	; 0x03
    31da:	9c 81       	ldd	r25, Y+4	; 0x04
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	f1 f7       	brne	.-4      	; 0x31dc <HLCD_Send_char_8bit+0xdc>
    31e0:	9c 83       	std	Y+4, r25	; 0x04
    31e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e4:	8d 81       	ldd	r24, Y+5	; 0x05
    31e6:	9e 81       	ldd	r25, Y+6	; 0x06
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	9e 83       	std	Y+6, r25	; 0x06
    31ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ee:	8d 81       	ldd	r24, Y+5	; 0x05
    31f0:	9e 81       	ldd	r25, Y+6	; 0x06
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	69 f7       	brne	.-38     	; 0x31d0 <HLCD_Send_char_8bit+0xd0>
    31f6:	14 c0       	rjmp	.+40     	; 0x3220 <HLCD_Send_char_8bit+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	9e 83       	std	Y+6, r25	; 0x06
    320a:	8d 83       	std	Y+5, r24	; 0x05
    320c:	8d 81       	ldd	r24, Y+5	; 0x05
    320e:	9e 81       	ldd	r25, Y+6	; 0x06
    3210:	9a 83       	std	Y+2, r25	; 0x02
    3212:	89 83       	std	Y+1, r24	; 0x01
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	9a 81       	ldd	r25, Y+2	; 0x02
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	f1 f7       	brne	.-4      	; 0x3218 <HLCD_Send_char_8bit+0x118>
    321c:	9a 83       	std	Y+2, r25	; 0x02
    321e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    3220:	82 e0       	ldi	r24, 0x02	; 2
    3222:	66 e0       	ldi	r22, 0x06	; 6
    3224:	40 e0       	ldi	r20, 0x00	; 0
    3226:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>

}
    322a:	2f 96       	adiw	r28, 0x0f	; 15
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	08 95       	ret

0000323c <HLCD_Send_String_Position_8bit>:
/*****************************************/

Std_ReturnType HLCD_Send_String_Position_8bit(u8 *string,u8 row , u8 column)
{
    323c:	df 93       	push	r29
    323e:	cf 93       	push	r28
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	27 97       	sbiw	r28, 0x07	; 7
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	de bf       	out	0x3e, r29	; 62
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	cd bf       	out	0x3d, r28	; 61
    3250:	9b 83       	std	Y+3, r25	; 0x03
    3252:	8a 83       	std	Y+2, r24	; 0x02
    3254:	6c 83       	std	Y+4, r22	; 0x04
    3256:	4d 83       	std	Y+5, r20	; 0x05
	Std_ReturnType status =E_OK;
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	89 83       	std	Y+1, r24	; 0x01
	switch(row)
    325c:	8c 81       	ldd	r24, Y+4	; 0x04
    325e:	28 2f       	mov	r18, r24
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	3f 83       	std	Y+7, r19	; 0x07
    3264:	2e 83       	std	Y+6, r18	; 0x06
    3266:	8e 81       	ldd	r24, Y+6	; 0x06
    3268:	9f 81       	ldd	r25, Y+7	; 0x07
    326a:	84 39       	cpi	r24, 0x94	; 148
    326c:	91 05       	cpc	r25, r1
    326e:	61 f1       	breq	.+88     	; 0x32c8 <HLCD_Send_String_Position_8bit+0x8c>
    3270:	2e 81       	ldd	r18, Y+6	; 0x06
    3272:	3f 81       	ldd	r19, Y+7	; 0x07
    3274:	25 39       	cpi	r18, 0x95	; 149
    3276:	31 05       	cpc	r19, r1
    3278:	34 f4       	brge	.+12     	; 0x3286 <HLCD_Send_String_Position_8bit+0x4a>
    327a:	8e 81       	ldd	r24, Y+6	; 0x06
    327c:	9f 81       	ldd	r25, Y+7	; 0x07
    327e:	80 38       	cpi	r24, 0x80	; 128
    3280:	91 05       	cpc	r25, r1
    3282:	61 f0       	breq	.+24     	; 0x329c <HLCD_Send_String_Position_8bit+0x60>
    3284:	37 c0       	rjmp	.+110    	; 0x32f4 <HLCD_Send_String_Position_8bit+0xb8>
    3286:	2e 81       	ldd	r18, Y+6	; 0x06
    3288:	3f 81       	ldd	r19, Y+7	; 0x07
    328a:	20 3c       	cpi	r18, 0xC0	; 192
    328c:	31 05       	cpc	r19, r1
    328e:	89 f0       	breq	.+34     	; 0x32b2 <HLCD_Send_String_Position_8bit+0x76>
    3290:	8e 81       	ldd	r24, Y+6	; 0x06
    3292:	9f 81       	ldd	r25, Y+7	; 0x07
    3294:	84 3d       	cpi	r24, 0xD4	; 212
    3296:	91 05       	cpc	r25, r1
    3298:	11 f1       	breq	.+68     	; 0x32de <HLCD_Send_String_Position_8bit+0xa2>
    329a:	2c c0       	rjmp	.+88     	; 0x32f4 <HLCD_Send_String_Position_8bit+0xb8>
	{
	case LCD_GO_ROW1 : HLCD_Send_Command_8bit(LCD_GO_ROW1+column);status =E_OK;
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	80 58       	subi	r24, 0x80	; 128
    32a0:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_8bit(string); break;
    32a8:	8a 81       	ldd	r24, Y+2	; 0x02
    32aa:	9b 81       	ldd	r25, Y+3	; 0x03
    32ac:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
    32b0:	22 c0       	rjmp	.+68     	; 0x32f6 <HLCD_Send_String_Position_8bit+0xba>

	case LCD_GO_ROW2 : HLCD_Send_Command_8bit(LCD_GO_ROW2+column);status =E_OK;
    32b2:	8d 81       	ldd	r24, Y+5	; 0x05
    32b4:	80 54       	subi	r24, 0x40	; 64
    32b6:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_8bit(string); break;
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	9b 81       	ldd	r25, Y+3	; 0x03
    32c2:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
    32c6:	17 c0       	rjmp	.+46     	; 0x32f6 <HLCD_Send_String_Position_8bit+0xba>

	case LCD_GO_ROW3 : HLCD_Send_Command_8bit(LCD_GO_ROW3+column);status =E_OK;
    32c8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ca:	8c 56       	subi	r24, 0x6C	; 108
    32cc:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_8bit(string); break;
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	9b 81       	ldd	r25, Y+3	; 0x03
    32d8:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
    32dc:	0c c0       	rjmp	.+24     	; 0x32f6 <HLCD_Send_String_Position_8bit+0xba>

	case LCD_GO_ROW4 : HLCD_Send_Command_8bit(LCD_GO_ROW4+column);status =E_OK;
    32de:	8d 81       	ldd	r24, Y+5	; 0x05
    32e0:	8c 52       	subi	r24, 0x2C	; 44
    32e2:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_8bit(string); break;
    32ea:	8a 81       	ldd	r24, Y+2	; 0x02
    32ec:	9b 81       	ldd	r25, Y+3	; 0x03
    32ee:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
    32f2:	01 c0       	rjmp	.+2      	; 0x32f6 <HLCD_Send_String_Position_8bit+0xba>

	default :status =E_NOT_OK; break;
    32f4:	19 82       	std	Y+1, r1	; 0x01
	}
	return status ;
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    32f8:	27 96       	adiw	r28, 0x07	; 7
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <HLCD_Send_CursorPosition_8bit>:

/********************************/
Std_ReturnType HLCD_Send_CursorPosition_8bit(u8 row , u8 column)
{
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	00 d0       	rcall	.+0      	; 0x3310 <HLCD_Send_CursorPosition_8bit+0x6>
    3310:	00 d0       	rcall	.+0      	; 0x3312 <HLCD_Send_CursorPosition_8bit+0x8>
    3312:	0f 92       	push	r0
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	8a 83       	std	Y+2, r24	; 0x02
    331a:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType status =E_OK;
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	89 83       	std	Y+1, r24	; 0x01
	switch(row)
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	28 2f       	mov	r18, r24
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	3d 83       	std	Y+5, r19	; 0x05
    3328:	2c 83       	std	Y+4, r18	; 0x04
    332a:	8c 81       	ldd	r24, Y+4	; 0x04
    332c:	9d 81       	ldd	r25, Y+5	; 0x05
    332e:	84 39       	cpi	r24, 0x94	; 148
    3330:	91 05       	cpc	r25, r1
    3332:	21 f1       	breq	.+72     	; 0x337c <HLCD_Send_CursorPosition_8bit+0x72>
    3334:	2c 81       	ldd	r18, Y+4	; 0x04
    3336:	3d 81       	ldd	r19, Y+5	; 0x05
    3338:	25 39       	cpi	r18, 0x95	; 149
    333a:	31 05       	cpc	r19, r1
    333c:	34 f4       	brge	.+12     	; 0x334a <HLCD_Send_CursorPosition_8bit+0x40>
    333e:	8c 81       	ldd	r24, Y+4	; 0x04
    3340:	9d 81       	ldd	r25, Y+5	; 0x05
    3342:	80 38       	cpi	r24, 0x80	; 128
    3344:	91 05       	cpc	r25, r1
    3346:	61 f0       	breq	.+24     	; 0x3360 <HLCD_Send_CursorPosition_8bit+0x56>
    3348:	27 c0       	rjmp	.+78     	; 0x3398 <HLCD_Send_CursorPosition_8bit+0x8e>
    334a:	2c 81       	ldd	r18, Y+4	; 0x04
    334c:	3d 81       	ldd	r19, Y+5	; 0x05
    334e:	20 3c       	cpi	r18, 0xC0	; 192
    3350:	31 05       	cpc	r19, r1
    3352:	69 f0       	breq	.+26     	; 0x336e <HLCD_Send_CursorPosition_8bit+0x64>
    3354:	8c 81       	ldd	r24, Y+4	; 0x04
    3356:	9d 81       	ldd	r25, Y+5	; 0x05
    3358:	84 3d       	cpi	r24, 0xD4	; 212
    335a:	91 05       	cpc	r25, r1
    335c:	b1 f0       	breq	.+44     	; 0x338a <HLCD_Send_CursorPosition_8bit+0x80>
    335e:	1c c0       	rjmp	.+56     	; 0x3398 <HLCD_Send_CursorPosition_8bit+0x8e>
	{
	case LCD_GO_ROW1 : HLCD_Send_Command_8bit(LCD_GO_ROW1+column);status =E_OK;
    3360:	8b 81       	ldd	r24, Y+3	; 0x03
    3362:	80 58       	subi	r24, 0x80	; 128
    3364:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	89 83       	std	Y+1, r24	; 0x01
    336c:	16 c0       	rjmp	.+44     	; 0x339a <HLCD_Send_CursorPosition_8bit+0x90>
	break;

	case LCD_GO_ROW2 : HLCD_Send_Command_8bit(LCD_GO_ROW2+column);status =E_OK;
    336e:	8b 81       	ldd	r24, Y+3	; 0x03
    3370:	80 54       	subi	r24, 0x40	; 64
    3372:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	89 83       	std	Y+1, r24	; 0x01
    337a:	0f c0       	rjmp	.+30     	; 0x339a <HLCD_Send_CursorPosition_8bit+0x90>
	break;

	case LCD_GO_ROW3 : HLCD_Send_Command_8bit(LCD_GO_ROW3+column);status =E_OK;
    337c:	8b 81       	ldd	r24, Y+3	; 0x03
    337e:	8c 56       	subi	r24, 0x6C	; 108
    3380:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	89 83       	std	Y+1, r24	; 0x01
    3388:	08 c0       	rjmp	.+16     	; 0x339a <HLCD_Send_CursorPosition_8bit+0x90>
	break;

	case LCD_GO_ROW4 : HLCD_Send_Command_8bit(LCD_GO_ROW4+column);status =E_OK;
    338a:	8b 81       	ldd	r24, Y+3	; 0x03
    338c:	8c 52       	subi	r24, 0x2C	; 44
    338e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	89 83       	std	Y+1, r24	; 0x01
    3396:	01 c0       	rjmp	.+2      	; 0x339a <HLCD_Send_CursorPosition_8bit+0x90>
	break;

	default :status =E_NOT_OK; break;
    3398:	19 82       	std	Y+1, r1	; 0x01
	}
	return status ;
    339a:	89 81       	ldd	r24, Y+1	; 0x01
}
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <HLCD_Send_char_Position_8bit>:
/**************************************/
Std_ReturnType HLCD_Send_char_Position_8bit(u8 data,u8 row , u8 column)
{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <HLCD_Send_char_Position_8bit+0x6>
    33b2:	00 d0       	rcall	.+0      	; 0x33b4 <HLCD_Send_char_Position_8bit+0x8>
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <HLCD_Send_char_Position_8bit+0xa>
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	8a 83       	std	Y+2, r24	; 0x02
    33bc:	6b 83       	std	Y+3, r22	; 0x03
    33be:	4c 83       	std	Y+4, r20	; 0x04
	Std_ReturnType status =E_OK;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	89 83       	std	Y+1, r24	; 0x01
	switch(row)
    33c4:	8b 81       	ldd	r24, Y+3	; 0x03
    33c6:	28 2f       	mov	r18, r24
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	3e 83       	std	Y+6, r19	; 0x06
    33cc:	2d 83       	std	Y+5, r18	; 0x05
    33ce:	8d 81       	ldd	r24, Y+5	; 0x05
    33d0:	9e 81       	ldd	r25, Y+6	; 0x06
    33d2:	84 39       	cpi	r24, 0x94	; 148
    33d4:	91 05       	cpc	r25, r1
    33d6:	51 f1       	breq	.+84     	; 0x342c <HLCD_Send_char_Position_8bit+0x80>
    33d8:	2d 81       	ldd	r18, Y+5	; 0x05
    33da:	3e 81       	ldd	r19, Y+6	; 0x06
    33dc:	25 39       	cpi	r18, 0x95	; 149
    33de:	31 05       	cpc	r19, r1
    33e0:	34 f4       	brge	.+12     	; 0x33ee <HLCD_Send_char_Position_8bit+0x42>
    33e2:	8d 81       	ldd	r24, Y+5	; 0x05
    33e4:	9e 81       	ldd	r25, Y+6	; 0x06
    33e6:	80 38       	cpi	r24, 0x80	; 128
    33e8:	91 05       	cpc	r25, r1
    33ea:	61 f0       	breq	.+24     	; 0x3404 <HLCD_Send_char_Position_8bit+0x58>
    33ec:	33 c0       	rjmp	.+102    	; 0x3454 <HLCD_Send_char_Position_8bit+0xa8>
    33ee:	2d 81       	ldd	r18, Y+5	; 0x05
    33f0:	3e 81       	ldd	r19, Y+6	; 0x06
    33f2:	20 3c       	cpi	r18, 0xC0	; 192
    33f4:	31 05       	cpc	r19, r1
    33f6:	81 f0       	breq	.+32     	; 0x3418 <HLCD_Send_char_Position_8bit+0x6c>
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	9e 81       	ldd	r25, Y+6	; 0x06
    33fc:	84 3d       	cpi	r24, 0xD4	; 212
    33fe:	91 05       	cpc	r25, r1
    3400:	f9 f0       	breq	.+62     	; 0x3440 <HLCD_Send_char_Position_8bit+0x94>
    3402:	28 c0       	rjmp	.+80     	; 0x3454 <HLCD_Send_char_Position_8bit+0xa8>
	{
	case LCD_GO_ROW1 : HLCD_Send_Command_8bit(LCD_GO_ROW1+column);status =E_OK;
    3404:	8c 81       	ldd	r24, Y+4	; 0x04
    3406:	80 58       	subi	r24, 0x80	; 128
    3408:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_8bit(data);break;
    3410:	8a 81       	ldd	r24, Y+2	; 0x02
    3412:	0e 94 80 18 	call	0x3100	; 0x3100 <HLCD_Send_char_8bit>
    3416:	1f c0       	rjmp	.+62     	; 0x3456 <HLCD_Send_char_Position_8bit+0xaa>

	case LCD_GO_ROW2 : HLCD_Send_Command_8bit(LCD_GO_ROW2+column);status =E_OK;
    3418:	8c 81       	ldd	r24, Y+4	; 0x04
    341a:	80 54       	subi	r24, 0x40	; 64
    341c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_8bit(data); break;
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	0e 94 80 18 	call	0x3100	; 0x3100 <HLCD_Send_char_8bit>
    342a:	15 c0       	rjmp	.+42     	; 0x3456 <HLCD_Send_char_Position_8bit+0xaa>

	case LCD_GO_ROW3 : HLCD_Send_Command_8bit(LCD_GO_ROW3+column);status =E_OK;
    342c:	8c 81       	ldd	r24, Y+4	; 0x04
    342e:	8c 56       	subi	r24, 0x6C	; 108
    3430:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_8bit(data); break;
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
    343a:	0e 94 80 18 	call	0x3100	; 0x3100 <HLCD_Send_char_8bit>
    343e:	0b c0       	rjmp	.+22     	; 0x3456 <HLCD_Send_char_Position_8bit+0xaa>

	case LCD_GO_ROW4 : HLCD_Send_Command_8bit(LCD_GO_ROW4+column);status =E_OK;
    3440:	8c 81       	ldd	r24, Y+4	; 0x04
    3442:	8c 52       	subi	r24, 0x2C	; 44
    3444:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_8bit(data); break;
    344c:	8a 81       	ldd	r24, Y+2	; 0x02
    344e:	0e 94 80 18 	call	0x3100	; 0x3100 <HLCD_Send_char_8bit>
    3452:	01 c0       	rjmp	.+2      	; 0x3456 <HLCD_Send_char_Position_8bit+0xaa>

	default :status =E_NOT_OK; break;
    3454:	19 82       	std	Y+1, r1	; 0x01
	}
	return status ;
    3456:	89 81       	ldd	r24, Y+1	; 0x01
}
    3458:	26 96       	adiw	r28, 0x06	; 6
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	cf 91       	pop	r28
    3466:	df 91       	pop	r29
    3468:	08 95       	ret

0000346a <HLCD_Send_String_8bit>:
/*********************************************/
void HLCD_Send_String_8bit( u8 *data)
{
    346a:	df 93       	push	r29
    346c:	cf 93       	push	r28
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
    3472:	60 97       	sbiw	r28, 0x10	; 16
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	98 8b       	std	Y+16, r25	; 0x10
    3480:	8f 87       	std	Y+15, r24	; 0x0f
	/*clear rs to select command*/
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_HIGH);
    3482:	82 e0       	ldi	r24, 0x02	; 2
    3484:	67 e0       	ldi	r22, 0x07	; 7
    3486:	41 e0       	ldi	r20, 0x01	; 1
    3488:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
    348c:	82 e0       	ldi	r24, 0x02	; 2
    348e:	65 e0       	ldi	r22, 0x05	; 5
    3490:	40 e0       	ldi	r20, 0x00	; 0
    3492:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
    3496:	88 c0       	rjmp	.+272    	; 0x35a8 <HLCD_Send_String_8bit+0x13e>
	while(*data)
	{
		DIO_PORT_WRITE_LOGIC_M(LCD_PORT_DATA,*data++);
    3498:	ef 85       	ldd	r30, Y+15	; 0x0f
    349a:	f8 89       	ldd	r31, Y+16	; 0x10
    349c:	20 81       	ld	r18, Z
    349e:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a0:	98 89       	ldd	r25, Y+16	; 0x10
    34a2:	01 96       	adiw	r24, 0x01	; 1
    34a4:	98 8b       	std	Y+16, r25	; 0x10
    34a6:	8f 87       	std	Y+15, r24	; 0x0f
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	62 2f       	mov	r22, r18
    34ac:	0e 94 19 14 	call	0x2832	; 0x2832 <DIO_PORT_WRITE_LOGIC_M>
		DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    34b0:	82 e0       	ldi	r24, 0x02	; 2
    34b2:	66 e0       	ldi	r22, 0x06	; 6
    34b4:	41 e0       	ldi	r20, 0x01	; 1
    34b6:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	a0 e0       	ldi	r26, 0x00	; 0
    34c0:	b0 e4       	ldi	r27, 0x40	; 64
    34c2:	8b 87       	std	Y+11, r24	; 0x0b
    34c4:	9c 87       	std	Y+12, r25	; 0x0c
    34c6:	ad 87       	std	Y+13, r26	; 0x0d
    34c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    34cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	4a ef       	ldi	r20, 0xFA	; 250
    34d8:	54 e4       	ldi	r21, 0x44	; 68
    34da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	8f 83       	std	Y+7, r24	; 0x07
    34e4:	98 87       	std	Y+8, r25	; 0x08
    34e6:	a9 87       	std	Y+9, r26	; 0x09
    34e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34ea:	6f 81       	ldd	r22, Y+7	; 0x07
    34ec:	78 85       	ldd	r23, Y+8	; 0x08
    34ee:	89 85       	ldd	r24, Y+9	; 0x09
    34f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e8       	ldi	r20, 0x80	; 128
    34f8:	5f e3       	ldi	r21, 0x3F	; 63
    34fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34fe:	88 23       	and	r24, r24
    3500:	2c f4       	brge	.+10     	; 0x350c <HLCD_Send_String_8bit+0xa2>
		__ticks = 1;
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	9e 83       	std	Y+6, r25	; 0x06
    3508:	8d 83       	std	Y+5, r24	; 0x05
    350a:	3f c0       	rjmp	.+126    	; 0x358a <HLCD_Send_String_8bit+0x120>
	else if (__tmp > 65535)
    350c:	6f 81       	ldd	r22, Y+7	; 0x07
    350e:	78 85       	ldd	r23, Y+8	; 0x08
    3510:	89 85       	ldd	r24, Y+9	; 0x09
    3512:	9a 85       	ldd	r25, Y+10	; 0x0a
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	3f ef       	ldi	r19, 0xFF	; 255
    3518:	4f e7       	ldi	r20, 0x7F	; 127
    351a:	57 e4       	ldi	r21, 0x47	; 71
    351c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3520:	18 16       	cp	r1, r24
    3522:	4c f5       	brge	.+82     	; 0x3576 <HLCD_Send_String_8bit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3524:	6b 85       	ldd	r22, Y+11	; 0x0b
    3526:	7c 85       	ldd	r23, Y+12	; 0x0c
    3528:	8d 85       	ldd	r24, Y+13	; 0x0d
    352a:	9e 85       	ldd	r25, Y+14	; 0x0e
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e2       	ldi	r20, 0x20	; 32
    3532:	51 e4       	ldi	r21, 0x41	; 65
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	bc 01       	movw	r22, r24
    353e:	cd 01       	movw	r24, r26
    3540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	9e 83       	std	Y+6, r25	; 0x06
    354a:	8d 83       	std	Y+5, r24	; 0x05
    354c:	0f c0       	rjmp	.+30     	; 0x356c <HLCD_Send_String_8bit+0x102>
    354e:	88 ec       	ldi	r24, 0xC8	; 200
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	9c 83       	std	Y+4, r25	; 0x04
    3554:	8b 83       	std	Y+3, r24	; 0x03
    3556:	8b 81       	ldd	r24, Y+3	; 0x03
    3558:	9c 81       	ldd	r25, Y+4	; 0x04
    355a:	01 97       	sbiw	r24, 0x01	; 1
    355c:	f1 f7       	brne	.-4      	; 0x355a <HLCD_Send_String_8bit+0xf0>
    355e:	9c 83       	std	Y+4, r25	; 0x04
    3560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3562:	8d 81       	ldd	r24, Y+5	; 0x05
    3564:	9e 81       	ldd	r25, Y+6	; 0x06
    3566:	01 97       	sbiw	r24, 0x01	; 1
    3568:	9e 83       	std	Y+6, r25	; 0x06
    356a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356c:	8d 81       	ldd	r24, Y+5	; 0x05
    356e:	9e 81       	ldd	r25, Y+6	; 0x06
    3570:	00 97       	sbiw	r24, 0x00	; 0
    3572:	69 f7       	brne	.-38     	; 0x354e <HLCD_Send_String_8bit+0xe4>
    3574:	14 c0       	rjmp	.+40     	; 0x359e <HLCD_Send_String_8bit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3576:	6f 81       	ldd	r22, Y+7	; 0x07
    3578:	78 85       	ldd	r23, Y+8	; 0x08
    357a:	89 85       	ldd	r24, Y+9	; 0x09
    357c:	9a 85       	ldd	r25, Y+10	; 0x0a
    357e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3582:	dc 01       	movw	r26, r24
    3584:	cb 01       	movw	r24, r22
    3586:	9e 83       	std	Y+6, r25	; 0x06
    3588:	8d 83       	std	Y+5, r24	; 0x05
    358a:	8d 81       	ldd	r24, Y+5	; 0x05
    358c:	9e 81       	ldd	r25, Y+6	; 0x06
    358e:	9a 83       	std	Y+2, r25	; 0x02
    3590:	89 83       	std	Y+1, r24	; 0x01
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	9a 81       	ldd	r25, Y+2	; 0x02
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	f1 f7       	brne	.-4      	; 0x3596 <HLCD_Send_String_8bit+0x12c>
    359a:	9a 83       	std	Y+2, r25	; 0x02
    359c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    359e:	82 e0       	ldi	r24, 0x02	; 2
    35a0:	66 e0       	ldi	r22, 0x06	; 6
    35a2:	40 e0       	ldi	r20, 0x00	; 0
    35a4:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
void HLCD_Send_String_8bit( u8 *data)
{
	/*clear rs to select command*/
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_HIGH);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
	while(*data)
    35a8:	ef 85       	ldd	r30, Y+15	; 0x0f
    35aa:	f8 89       	ldd	r31, Y+16	; 0x10
    35ac:	80 81       	ld	r24, Z
    35ae:	88 23       	and	r24, r24
    35b0:	09 f0       	breq	.+2      	; 0x35b4 <HLCD_Send_String_8bit+0x14a>
    35b2:	72 cf       	rjmp	.-284    	; 0x3498 <HLCD_Send_String_8bit+0x2e>
		DIO_PORT_WRITE_LOGIC_M(LCD_PORT_DATA,*data++);
		DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
		_delay_ms(2);
		DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
	}
}
    35b4:	60 96       	adiw	r28, 0x10	; 16
    35b6:	0f b6       	in	r0, 0x3f	; 63
    35b8:	f8 94       	cli
    35ba:	de bf       	out	0x3e, r29	; 62
    35bc:	0f be       	out	0x3f, r0	; 63
    35be:	cd bf       	out	0x3d, r28	; 61
    35c0:	cf 91       	pop	r28
    35c2:	df 91       	pop	r29
    35c4:	08 95       	ret

000035c6 <HLCD_Send_Float1>:
/************************/
void HLCD_Send_Float1(const float data) {
    35c6:	df 93       	push	r29
    35c8:	cf 93       	push	r28
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
    35ce:	2a 97       	sbiw	r28, 0x0a	; 10
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	6f 83       	std	Y+7, r22	; 0x07
    35dc:	78 87       	std	Y+8, r23	; 0x08
    35de:	89 87       	std	Y+9, r24	; 0x09
    35e0:	9a 87       	std	Y+10, r25	; 0x0a
	char *str=NULL;
    35e2:	1e 82       	std	Y+6, r1	; 0x06
    35e4:	1d 82       	std	Y+5, r1	; 0x05
	int integerPart = (int)data;
    35e6:	6f 81       	ldd	r22, Y+7	; 0x07
    35e8:	78 85       	ldd	r23, Y+8	; 0x08
    35ea:	89 85       	ldd	r24, Y+9	; 0x09
    35ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ee:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	9c 83       	std	Y+4, r25	; 0x04
    35f8:	8b 83       	std	Y+3, r24	; 0x03
	int decimalPart = (int)((data - integerPart) * 100); // Get two decimal places
    35fa:	8b 81       	ldd	r24, Y+3	; 0x03
    35fc:	9c 81       	ldd	r25, Y+4	; 0x04
    35fe:	aa 27       	eor	r26, r26
    3600:	97 fd       	sbrc	r25, 7
    3602:	a0 95       	com	r26
    3604:	ba 2f       	mov	r27, r26
    3606:	bc 01       	movw	r22, r24
    3608:	cd 01       	movw	r24, r26
    360a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    360e:	9b 01       	movw	r18, r22
    3610:	ac 01       	movw	r20, r24
    3612:	6f 81       	ldd	r22, Y+7	; 0x07
    3614:	78 85       	ldd	r23, Y+8	; 0x08
    3616:	89 85       	ldd	r24, Y+9	; 0x09
    3618:	9a 85       	ldd	r25, Y+10	; 0x0a
    361a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	bc 01       	movw	r22, r24
    3624:	cd 01       	movw	r24, r26
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	48 ec       	ldi	r20, 0xC8	; 200
    362c:	52 e4       	ldi	r21, 0x42	; 66
    362e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	bc 01       	movw	r22, r24
    3638:	cd 01       	movw	r24, r26
    363a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	9a 83       	std	Y+2, r25	; 0x02
    3644:	89 83       	std	Y+1, r24	; 0x01

	// Print the integer part
	convert_uint32_to_string(integerPart,str);
    3646:	8b 81       	ldd	r24, Y+3	; 0x03
    3648:	9c 81       	ldd	r25, Y+4	; 0x04
    364a:	aa 27       	eor	r26, r26
    364c:	97 fd       	sbrc	r25, 7
    364e:	a0 95       	com	r26
    3650:	ba 2f       	mov	r27, r26
    3652:	2d 81       	ldd	r18, Y+5	; 0x05
    3654:	3e 81       	ldd	r19, Y+6	; 0x06
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	a9 01       	movw	r20, r18
    365c:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <convert_uint32_to_string>
	HLCD_Send_String_8bit(str);
    3660:	8d 81       	ldd	r24, Y+5	; 0x05
    3662:	9e 81       	ldd	r25, Y+6	; 0x06
    3664:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>

	// Print the decimal point
	HLCD_Send_char_8bit('.');
    3668:	8e e2       	ldi	r24, 0x2E	; 46
    366a:	0e 94 80 18 	call	0x3100	; 0x3100 <HLCD_Send_char_8bit>

	// Print the decimal part with leading zeros if necessary
	if (decimalPart < 10) {
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	9a 81       	ldd	r25, Y+2	; 0x02
    3672:	8a 30       	cpi	r24, 0x0A	; 10
    3674:	91 05       	cpc	r25, r1
    3676:	1c f4       	brge	.+6      	; 0x367e <HLCD_Send_Float1+0xb8>
		HLCD_Send_char_8bit('0'); // Leading zero
    3678:	80 e3       	ldi	r24, 0x30	; 48
    367a:	0e 94 80 18 	call	0x3100	; 0x3100 <HLCD_Send_char_8bit>
	}
	convert_uint32_to_string(decimalPart,str);
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	9a 81       	ldd	r25, Y+2	; 0x02
    3682:	aa 27       	eor	r26, r26
    3684:	97 fd       	sbrc	r25, 7
    3686:	a0 95       	com	r26
    3688:	ba 2f       	mov	r27, r26
    368a:	2d 81       	ldd	r18, Y+5	; 0x05
    368c:	3e 81       	ldd	r19, Y+6	; 0x06
    368e:	bc 01       	movw	r22, r24
    3690:	cd 01       	movw	r24, r26
    3692:	a9 01       	movw	r20, r18
    3694:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <convert_uint32_to_string>
	HLCD_Send_String_8bit(str);
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
	//    _delay_ms(1000);
}
    36a0:	2a 96       	adiw	r28, 0x0a	; 10
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	08 95       	ret

000036b2 <HLCD_INIT_4bit>:

/**********************************************************/


void HLCD_INIT_4bit(void)
{
    36b2:	df 93       	push	r29
    36b4:	cf 93       	push	r28
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
    36ba:	e4 97       	sbiw	r28, 0x34	; 52
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	f8 94       	cli
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	cd bf       	out	0x3d, r28	; 61
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	a0 ea       	ldi	r26, 0xA0	; 160
    36cc:	b1 e4       	ldi	r27, 0x41	; 65
    36ce:	89 ab       	std	Y+49, r24	; 0x31
    36d0:	9a ab       	std	Y+50, r25	; 0x32
    36d2:	ab ab       	std	Y+51, r26	; 0x33
    36d4:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d6:	69 a9       	ldd	r22, Y+49	; 0x31
    36d8:	7a a9       	ldd	r23, Y+50	; 0x32
    36da:	8b a9       	ldd	r24, Y+51	; 0x33
    36dc:	9c a9       	ldd	r25, Y+52	; 0x34
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	4a ef       	ldi	r20, 0xFA	; 250
    36e4:	54 e4       	ldi	r21, 0x44	; 68
    36e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	8d a7       	std	Y+45, r24	; 0x2d
    36f0:	9e a7       	std	Y+46, r25	; 0x2e
    36f2:	af a7       	std	Y+47, r26	; 0x2f
    36f4:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    36f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    36f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    36fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    36fc:	98 a9       	ldd	r25, Y+48	; 0x30
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	40 e8       	ldi	r20, 0x80	; 128
    3704:	5f e3       	ldi	r21, 0x3F	; 63
    3706:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    370a:	88 23       	and	r24, r24
    370c:	2c f4       	brge	.+10     	; 0x3718 <HLCD_INIT_4bit+0x66>
		__ticks = 1;
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	9c a7       	std	Y+44, r25	; 0x2c
    3714:	8b a7       	std	Y+43, r24	; 0x2b
    3716:	3f c0       	rjmp	.+126    	; 0x3796 <HLCD_INIT_4bit+0xe4>
	else if (__tmp > 65535)
    3718:	6d a5       	ldd	r22, Y+45	; 0x2d
    371a:	7e a5       	ldd	r23, Y+46	; 0x2e
    371c:	8f a5       	ldd	r24, Y+47	; 0x2f
    371e:	98 a9       	ldd	r25, Y+48	; 0x30
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	3f ef       	ldi	r19, 0xFF	; 255
    3724:	4f e7       	ldi	r20, 0x7F	; 127
    3726:	57 e4       	ldi	r21, 0x47	; 71
    3728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    372c:	18 16       	cp	r1, r24
    372e:	4c f5       	brge	.+82     	; 0x3782 <HLCD_INIT_4bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3730:	69 a9       	ldd	r22, Y+49	; 0x31
    3732:	7a a9       	ldd	r23, Y+50	; 0x32
    3734:	8b a9       	ldd	r24, Y+51	; 0x33
    3736:	9c a9       	ldd	r25, Y+52	; 0x34
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	40 e2       	ldi	r20, 0x20	; 32
    373e:	51 e4       	ldi	r21, 0x41	; 65
    3740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	bc 01       	movw	r22, r24
    374a:	cd 01       	movw	r24, r26
    374c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	9c a7       	std	Y+44, r25	; 0x2c
    3756:	8b a7       	std	Y+43, r24	; 0x2b
    3758:	0f c0       	rjmp	.+30     	; 0x3778 <HLCD_INIT_4bit+0xc6>
    375a:	88 ec       	ldi	r24, 0xC8	; 200
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	9a a7       	std	Y+42, r25	; 0x2a
    3760:	89 a7       	std	Y+41, r24	; 0x29
    3762:	89 a5       	ldd	r24, Y+41	; 0x29
    3764:	9a a5       	ldd	r25, Y+42	; 0x2a
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	f1 f7       	brne	.-4      	; 0x3766 <HLCD_INIT_4bit+0xb4>
    376a:	9a a7       	std	Y+42, r25	; 0x2a
    376c:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3770:	9c a5       	ldd	r25, Y+44	; 0x2c
    3772:	01 97       	sbiw	r24, 0x01	; 1
    3774:	9c a7       	std	Y+44, r25	; 0x2c
    3776:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3778:	8b a5       	ldd	r24, Y+43	; 0x2b
    377a:	9c a5       	ldd	r25, Y+44	; 0x2c
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	69 f7       	brne	.-38     	; 0x375a <HLCD_INIT_4bit+0xa8>
    3780:	14 c0       	rjmp	.+40     	; 0x37aa <HLCD_INIT_4bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3782:	6d a5       	ldd	r22, Y+45	; 0x2d
    3784:	7e a5       	ldd	r23, Y+46	; 0x2e
    3786:	8f a5       	ldd	r24, Y+47	; 0x2f
    3788:	98 a9       	ldd	r25, Y+48	; 0x30
    378a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	9c a7       	std	Y+44, r25	; 0x2c
    3794:	8b a7       	std	Y+43, r24	; 0x2b
    3796:	8b a5       	ldd	r24, Y+43	; 0x2b
    3798:	9c a5       	ldd	r25, Y+44	; 0x2c
    379a:	98 a7       	std	Y+40, r25	; 0x28
    379c:	8f a3       	std	Y+39, r24	; 0x27
    379e:	8f a1       	ldd	r24, Y+39	; 0x27
    37a0:	98 a5       	ldd	r25, Y+40	; 0x28
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <HLCD_INIT_4bit+0xf0>
    37a6:	98 a7       	std	Y+40, r25	; 0x28
    37a8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(20);
	HLCD_Send_Command_4bit(FUNCTION_SET_8bit_Mode_2row_11_line);
    37aa:	8c e3       	ldi	r24, 0x3C	; 60
    37ac:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <HLCD_Send_Command_4bit>
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	a0 ea       	ldi	r26, 0xA0	; 160
    37b6:	b0 e4       	ldi	r27, 0x40	; 64
    37b8:	8b a3       	std	Y+35, r24	; 0x23
    37ba:	9c a3       	std	Y+36, r25	; 0x24
    37bc:	ad a3       	std	Y+37, r26	; 0x25
    37be:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c0:	6b a1       	ldd	r22, Y+35	; 0x23
    37c2:	7c a1       	ldd	r23, Y+36	; 0x24
    37c4:	8d a1       	ldd	r24, Y+37	; 0x25
    37c6:	9e a1       	ldd	r25, Y+38	; 0x26
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	4a ef       	ldi	r20, 0xFA	; 250
    37ce:	54 e4       	ldi	r21, 0x44	; 68
    37d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	8f 8f       	std	Y+31, r24	; 0x1f
    37da:	98 a3       	std	Y+32, r25	; 0x20
    37dc:	a9 a3       	std	Y+33, r26	; 0x21
    37de:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    37e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    37e2:	78 a1       	ldd	r23, Y+32	; 0x20
    37e4:	89 a1       	ldd	r24, Y+33	; 0x21
    37e6:	9a a1       	ldd	r25, Y+34	; 0x22
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	40 e8       	ldi	r20, 0x80	; 128
    37ee:	5f e3       	ldi	r21, 0x3F	; 63
    37f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37f4:	88 23       	and	r24, r24
    37f6:	2c f4       	brge	.+10     	; 0x3802 <HLCD_INIT_4bit+0x150>
		__ticks = 1;
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	9e 8f       	std	Y+30, r25	; 0x1e
    37fe:	8d 8f       	std	Y+29, r24	; 0x1d
    3800:	3f c0       	rjmp	.+126    	; 0x3880 <HLCD_INIT_4bit+0x1ce>
	else if (__tmp > 65535)
    3802:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3804:	78 a1       	ldd	r23, Y+32	; 0x20
    3806:	89 a1       	ldd	r24, Y+33	; 0x21
    3808:	9a a1       	ldd	r25, Y+34	; 0x22
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	3f ef       	ldi	r19, 0xFF	; 255
    380e:	4f e7       	ldi	r20, 0x7F	; 127
    3810:	57 e4       	ldi	r21, 0x47	; 71
    3812:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3816:	18 16       	cp	r1, r24
    3818:	4c f5       	brge	.+82     	; 0x386c <HLCD_INIT_4bit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    381a:	6b a1       	ldd	r22, Y+35	; 0x23
    381c:	7c a1       	ldd	r23, Y+36	; 0x24
    381e:	8d a1       	ldd	r24, Y+37	; 0x25
    3820:	9e a1       	ldd	r25, Y+38	; 0x26
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e2       	ldi	r20, 0x20	; 32
    3828:	51 e4       	ldi	r21, 0x41	; 65
    382a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	bc 01       	movw	r22, r24
    3834:	cd 01       	movw	r24, r26
    3836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	9e 8f       	std	Y+30, r25	; 0x1e
    3840:	8d 8f       	std	Y+29, r24	; 0x1d
    3842:	0f c0       	rjmp	.+30     	; 0x3862 <HLCD_INIT_4bit+0x1b0>
    3844:	88 ec       	ldi	r24, 0xC8	; 200
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	9c 8f       	std	Y+28, r25	; 0x1c
    384a:	8b 8f       	std	Y+27, r24	; 0x1b
    384c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    384e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	f1 f7       	brne	.-4      	; 0x3850 <HLCD_INIT_4bit+0x19e>
    3854:	9c 8f       	std	Y+28, r25	; 0x1c
    3856:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3858:	8d 8d       	ldd	r24, Y+29	; 0x1d
    385a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    385c:	01 97       	sbiw	r24, 0x01	; 1
    385e:	9e 8f       	std	Y+30, r25	; 0x1e
    3860:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3862:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3864:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3866:	00 97       	sbiw	r24, 0x00	; 0
    3868:	69 f7       	brne	.-38     	; 0x3844 <HLCD_INIT_4bit+0x192>
    386a:	14 c0       	rjmp	.+40     	; 0x3894 <HLCD_INIT_4bit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    386e:	78 a1       	ldd	r23, Y+32	; 0x20
    3870:	89 a1       	ldd	r24, Y+33	; 0x21
    3872:	9a a1       	ldd	r25, Y+34	; 0x22
    3874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	9e 8f       	std	Y+30, r25	; 0x1e
    387e:	8d 8f       	std	Y+29, r24	; 0x1d
    3880:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3882:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3884:	9a 8f       	std	Y+26, r25	; 0x1a
    3886:	89 8f       	std	Y+25, r24	; 0x19
    3888:	89 8d       	ldd	r24, Y+25	; 0x19
    388a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    388c:	01 97       	sbiw	r24, 0x01	; 1
    388e:	f1 f7       	brne	.-4      	; 0x388c <HLCD_INIT_4bit+0x1da>
    3890:	9a 8f       	std	Y+26, r25	; 0x1a
    3892:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	HLCD_Send_Command_4bit(FUNCTION_SET_8bit_Mode_2row_11_line);
    3894:	8c e3       	ldi	r24, 0x3C	; 60
    3896:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <HLCD_Send_Command_4bit>
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	a6 e1       	ldi	r26, 0x16	; 22
    38a0:	b3 e4       	ldi	r27, 0x43	; 67
    38a2:	8d 8b       	std	Y+21, r24	; 0x15
    38a4:	9e 8b       	std	Y+22, r25	; 0x16
    38a6:	af 8b       	std	Y+23, r26	; 0x17
    38a8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38aa:	6d 89       	ldd	r22, Y+21	; 0x15
    38ac:	7e 89       	ldd	r23, Y+22	; 0x16
    38ae:	8f 89       	ldd	r24, Y+23	; 0x17
    38b0:	98 8d       	ldd	r25, Y+24	; 0x18
    38b2:	2b ea       	ldi	r18, 0xAB	; 171
    38b4:	3a ea       	ldi	r19, 0xAA	; 170
    38b6:	4a e2       	ldi	r20, 0x2A	; 42
    38b8:	50 e4       	ldi	r21, 0x40	; 64
    38ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	89 8b       	std	Y+17, r24	; 0x11
    38c4:	9a 8b       	std	Y+18, r25	; 0x12
    38c6:	ab 8b       	std	Y+19, r26	; 0x13
    38c8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    38ca:	69 89       	ldd	r22, Y+17	; 0x11
    38cc:	7a 89       	ldd	r23, Y+18	; 0x12
    38ce:	8b 89       	ldd	r24, Y+19	; 0x13
    38d0:	9c 89       	ldd	r25, Y+20	; 0x14
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e8       	ldi	r20, 0x80	; 128
    38d8:	5f e3       	ldi	r21, 0x3F	; 63
    38da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38de:	88 23       	and	r24, r24
    38e0:	1c f4       	brge	.+6      	; 0x38e8 <HLCD_INIT_4bit+0x236>
		__ticks = 1;
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	88 8b       	std	Y+16, r24	; 0x10
    38e6:	91 c0       	rjmp	.+290    	; 0x3a0a <HLCD_INIT_4bit+0x358>
	else if (__tmp > 255)
    38e8:	69 89       	ldd	r22, Y+17	; 0x11
    38ea:	7a 89       	ldd	r23, Y+18	; 0x12
    38ec:	8b 89       	ldd	r24, Y+19	; 0x13
    38ee:	9c 89       	ldd	r25, Y+20	; 0x14
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	4f e7       	ldi	r20, 0x7F	; 127
    38f6:	53 e4       	ldi	r21, 0x43	; 67
    38f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38fc:	18 16       	cp	r1, r24
    38fe:	0c f0       	brlt	.+2      	; 0x3902 <HLCD_INIT_4bit+0x250>
    3900:	7b c0       	rjmp	.+246    	; 0x39f8 <HLCD_INIT_4bit+0x346>
	{
		_delay_ms(__us / 1000.0);
    3902:	6d 89       	ldd	r22, Y+21	; 0x15
    3904:	7e 89       	ldd	r23, Y+22	; 0x16
    3906:	8f 89       	ldd	r24, Y+23	; 0x17
    3908:	98 8d       	ldd	r25, Y+24	; 0x18
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	4a e7       	ldi	r20, 0x7A	; 122
    3910:	54 e4       	ldi	r21, 0x44	; 68
    3912:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	8c 87       	std	Y+12, r24	; 0x0c
    391c:	9d 87       	std	Y+13, r25	; 0x0d
    391e:	ae 87       	std	Y+14, r26	; 0x0e
    3920:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3922:	6c 85       	ldd	r22, Y+12	; 0x0c
    3924:	7d 85       	ldd	r23, Y+13	; 0x0d
    3926:	8e 85       	ldd	r24, Y+14	; 0x0e
    3928:	9f 85       	ldd	r25, Y+15	; 0x0f
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	4a ef       	ldi	r20, 0xFA	; 250
    3930:	54 e4       	ldi	r21, 0x44	; 68
    3932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	88 87       	std	Y+8, r24	; 0x08
    393c:	99 87       	std	Y+9, r25	; 0x09
    393e:	aa 87       	std	Y+10, r26	; 0x0a
    3940:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3942:	68 85       	ldd	r22, Y+8	; 0x08
    3944:	79 85       	ldd	r23, Y+9	; 0x09
    3946:	8a 85       	ldd	r24, Y+10	; 0x0a
    3948:	9b 85       	ldd	r25, Y+11	; 0x0b
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	40 e8       	ldi	r20, 0x80	; 128
    3950:	5f e3       	ldi	r21, 0x3F	; 63
    3952:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3956:	88 23       	and	r24, r24
    3958:	2c f4       	brge	.+10     	; 0x3964 <HLCD_INIT_4bit+0x2b2>
		__ticks = 1;
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	9f 83       	std	Y+7, r25	; 0x07
    3960:	8e 83       	std	Y+6, r24	; 0x06
    3962:	3f c0       	rjmp	.+126    	; 0x39e2 <HLCD_INIT_4bit+0x330>
	else if (__tmp > 65535)
    3964:	68 85       	ldd	r22, Y+8	; 0x08
    3966:	79 85       	ldd	r23, Y+9	; 0x09
    3968:	8a 85       	ldd	r24, Y+10	; 0x0a
    396a:	9b 85       	ldd	r25, Y+11	; 0x0b
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	3f ef       	ldi	r19, 0xFF	; 255
    3970:	4f e7       	ldi	r20, 0x7F	; 127
    3972:	57 e4       	ldi	r21, 0x47	; 71
    3974:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3978:	18 16       	cp	r1, r24
    397a:	4c f5       	brge	.+82     	; 0x39ce <HLCD_INIT_4bit+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    397c:	6c 85       	ldd	r22, Y+12	; 0x0c
    397e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3980:	8e 85       	ldd	r24, Y+14	; 0x0e
    3982:	9f 85       	ldd	r25, Y+15	; 0x0f
    3984:	20 e0       	ldi	r18, 0x00	; 0
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	40 e2       	ldi	r20, 0x20	; 32
    398a:	51 e4       	ldi	r21, 0x41	; 65
    398c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	bc 01       	movw	r22, r24
    3996:	cd 01       	movw	r24, r26
    3998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	9f 83       	std	Y+7, r25	; 0x07
    39a2:	8e 83       	std	Y+6, r24	; 0x06
    39a4:	0f c0       	rjmp	.+30     	; 0x39c4 <HLCD_INIT_4bit+0x312>
    39a6:	88 ec       	ldi	r24, 0xC8	; 200
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	9d 83       	std	Y+5, r25	; 0x05
    39ac:	8c 83       	std	Y+4, r24	; 0x04
    39ae:	8c 81       	ldd	r24, Y+4	; 0x04
    39b0:	9d 81       	ldd	r25, Y+5	; 0x05
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	f1 f7       	brne	.-4      	; 0x39b2 <HLCD_INIT_4bit+0x300>
    39b6:	9d 83       	std	Y+5, r25	; 0x05
    39b8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ba:	8e 81       	ldd	r24, Y+6	; 0x06
    39bc:	9f 81       	ldd	r25, Y+7	; 0x07
    39be:	01 97       	sbiw	r24, 0x01	; 1
    39c0:	9f 83       	std	Y+7, r25	; 0x07
    39c2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39c4:	8e 81       	ldd	r24, Y+6	; 0x06
    39c6:	9f 81       	ldd	r25, Y+7	; 0x07
    39c8:	00 97       	sbiw	r24, 0x00	; 0
    39ca:	69 f7       	brne	.-38     	; 0x39a6 <HLCD_INIT_4bit+0x2f4>
    39cc:	24 c0       	rjmp	.+72     	; 0x3a16 <HLCD_INIT_4bit+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ce:	68 85       	ldd	r22, Y+8	; 0x08
    39d0:	79 85       	ldd	r23, Y+9	; 0x09
    39d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    39d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    39d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	9f 83       	std	Y+7, r25	; 0x07
    39e0:	8e 83       	std	Y+6, r24	; 0x06
    39e2:	8e 81       	ldd	r24, Y+6	; 0x06
    39e4:	9f 81       	ldd	r25, Y+7	; 0x07
    39e6:	9b 83       	std	Y+3, r25	; 0x03
    39e8:	8a 83       	std	Y+2, r24	; 0x02
    39ea:	8a 81       	ldd	r24, Y+2	; 0x02
    39ec:	9b 81       	ldd	r25, Y+3	; 0x03
    39ee:	01 97       	sbiw	r24, 0x01	; 1
    39f0:	f1 f7       	brne	.-4      	; 0x39ee <HLCD_INIT_4bit+0x33c>
    39f2:	9b 83       	std	Y+3, r25	; 0x03
    39f4:	8a 83       	std	Y+2, r24	; 0x02
    39f6:	0f c0       	rjmp	.+30     	; 0x3a16 <HLCD_INIT_4bit+0x364>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39f8:	69 89       	ldd	r22, Y+17	; 0x11
    39fa:	7a 89       	ldd	r23, Y+18	; 0x12
    39fc:	8b 89       	ldd	r24, Y+19	; 0x13
    39fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	88 8b       	std	Y+16, r24	; 0x10
    3a0a:	88 89       	ldd	r24, Y+16	; 0x10
    3a0c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	8a 95       	dec	r24
    3a12:	f1 f7       	brne	.-4      	; 0x3a10 <HLCD_INIT_4bit+0x35e>
    3a14:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(150);
	HLCD_Send_Command_4bit(FUNCTION_SET_8bit_Mode_2row_11_line);
    3a16:	8c e3       	ldi	r24, 0x3C	; 60
    3a18:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <HLCD_Send_Command_4bit>

	HLCD_Send_Command_4bit(LCD_CMD_CLEAR_DISPLAY);
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <HLCD_Send_Command_4bit>
	HLCD_Send_Command_4bit(LCD_CMD_CURSOR_HOME);
    3a22:	82 e0       	ldi	r24, 0x02	; 2
    3a24:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <HLCD_Send_Command_4bit>
	HLCD_Send_Command_4bit(_LCD_ENTRY_MODE_INC_SHIFT_OFF);
    3a28:	86 e0       	ldi	r24, 0x06	; 6
    3a2a:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <HLCD_Send_Command_4bit>
	HLCD_Send_Command_4bit(LCD_CMD_DISPLAY_ON_CURSOR_OFF_BC_OFF);
    3a2e:	8c e0       	ldi	r24, 0x0C	; 12
    3a30:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <HLCD_Send_Command_4bit>
	HLCD_Send_Command_4bit(FUNCTION_SET_4bit_Mode_2row_11_line);
    3a34:	8c e2       	ldi	r24, 0x2C	; 44
    3a36:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <HLCD_Send_Command_4bit>
	HLCD_Send_Command_4bit( 0x80);
    3a3a:	80 e8       	ldi	r24, 0x80	; 128
    3a3c:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <HLCD_Send_Command_4bit>

}
    3a40:	e4 96       	adiw	r28, 0x34	; 52
    3a42:	0f b6       	in	r0, 0x3f	; 63
    3a44:	f8 94       	cli
    3a46:	de bf       	out	0x3e, r29	; 62
    3a48:	0f be       	out	0x3f, r0	; 63
    3a4a:	cd bf       	out	0x3d, r28	; 61
    3a4c:	cf 91       	pop	r28
    3a4e:	df 91       	pop	r29
    3a50:	08 95       	ret

00003a52 <HLCD_Send_Command_4bit>:
/****************************************/
void HLCD_Send_Command_4bit(const u8 command)
{
    3a52:	df 93       	push	r29
    3a54:	cf 93       	push	r28
    3a56:	cd b7       	in	r28, 0x3d	; 61
    3a58:	de b7       	in	r29, 0x3e	; 62
    3a5a:	6d 97       	sbiw	r28, 0x1d	; 29
    3a5c:	0f b6       	in	r0, 0x3f	; 63
    3a5e:	f8 94       	cli
    3a60:	de bf       	out	0x3e, r29	; 62
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	cd bf       	out	0x3d, r28	; 61
    3a66:	8d 8f       	std	Y+29, r24	; 0x1d

	/*clear rs to select command*/
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,Rs,PIN_LOW);
    3a68:	82 e0       	ldi	r24, 0x02	; 2
    3a6a:	67 e0       	ldi	r22, 0x07	; 7
    3a6c:	40 e0       	ldi	r20, 0x00	; 0
    3a6e:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,R_W,PIN_LOW);
    3a72:	82 e0       	ldi	r24, 0x02	; 2
    3a74:	65 e0       	ldi	r22, 0x05	; 5
    3a76:	40 e0       	ldi	r20, 0x00	; 0
    3a78:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>

	DIO_PORT_WRITE_LOGIC_M(LCD_PORT_DATA, (command >> 4) & 0x0F);
    3a7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a7e:	98 2f       	mov	r25, r24
    3a80:	92 95       	swap	r25
    3a82:	9f 70       	andi	r25, 0x0F	; 15
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	69 2f       	mov	r22, r25
    3a88:	0e 94 19 14 	call	0x2832	; 0x2832 <DIO_PORT_WRITE_LOGIC_M>
	//DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN0,(command>>4)&0x01); //lowest bit on highst nipple 4 ->4
	//DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN1,(command>>5)&0x01);
	//DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN2,(command>>6)&0x01);
	//DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN3,(command>>7)&0x01);

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    3a8c:	82 e0       	ldi	r24, 0x02	; 2
    3a8e:	66 e0       	ldi	r22, 0x06	; 6
    3a90:	41 e0       	ldi	r20, 0x01	; 1
    3a92:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
    3a96:	80 e0       	ldi	r24, 0x00	; 0
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	a0 e0       	ldi	r26, 0x00	; 0
    3a9c:	b0 e4       	ldi	r27, 0x40	; 64
    3a9e:	89 8f       	std	Y+25, r24	; 0x19
    3aa0:	9a 8f       	std	Y+26, r25	; 0x1a
    3aa2:	ab 8f       	std	Y+27, r26	; 0x1b
    3aa4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa6:	69 8d       	ldd	r22, Y+25	; 0x19
    3aa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3aac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	4a ef       	ldi	r20, 0xFA	; 250
    3ab4:	54 e4       	ldi	r21, 0x44	; 68
    3ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	8d 8b       	std	Y+21, r24	; 0x15
    3ac0:	9e 8b       	std	Y+22, r25	; 0x16
    3ac2:	af 8b       	std	Y+23, r26	; 0x17
    3ac4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    3aca:	8f 89       	ldd	r24, Y+23	; 0x17
    3acc:	98 8d       	ldd	r25, Y+24	; 0x18
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	40 e8       	ldi	r20, 0x80	; 128
    3ad4:	5f e3       	ldi	r21, 0x3F	; 63
    3ad6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ada:	88 23       	and	r24, r24
    3adc:	2c f4       	brge	.+10     	; 0x3ae8 <HLCD_Send_Command_4bit+0x96>
		__ticks = 1;
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	9c 8b       	std	Y+20, r25	; 0x14
    3ae4:	8b 8b       	std	Y+19, r24	; 0x13
    3ae6:	3f c0       	rjmp	.+126    	; 0x3b66 <HLCD_Send_Command_4bit+0x114>
	else if (__tmp > 65535)
    3ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    3aea:	7e 89       	ldd	r23, Y+22	; 0x16
    3aec:	8f 89       	ldd	r24, Y+23	; 0x17
    3aee:	98 8d       	ldd	r25, Y+24	; 0x18
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	3f ef       	ldi	r19, 0xFF	; 255
    3af4:	4f e7       	ldi	r20, 0x7F	; 127
    3af6:	57 e4       	ldi	r21, 0x47	; 71
    3af8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3afc:	18 16       	cp	r1, r24
    3afe:	4c f5       	brge	.+82     	; 0x3b52 <HLCD_Send_Command_4bit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b00:	69 8d       	ldd	r22, Y+25	; 0x19
    3b02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e2       	ldi	r20, 0x20	; 32
    3b0e:	51 e4       	ldi	r21, 0x41	; 65
    3b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	bc 01       	movw	r22, r24
    3b1a:	cd 01       	movw	r24, r26
    3b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	9c 8b       	std	Y+20, r25	; 0x14
    3b26:	8b 8b       	std	Y+19, r24	; 0x13
    3b28:	0f c0       	rjmp	.+30     	; 0x3b48 <HLCD_Send_Command_4bit+0xf6>
    3b2a:	88 ec       	ldi	r24, 0xC8	; 200
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	9a 8b       	std	Y+18, r25	; 0x12
    3b30:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b32:	89 89       	ldd	r24, Y+17	; 0x11
    3b34:	9a 89       	ldd	r25, Y+18	; 0x12
    3b36:	01 97       	sbiw	r24, 0x01	; 1
    3b38:	f1 f7       	brne	.-4      	; 0x3b36 <HLCD_Send_Command_4bit+0xe4>
    3b3a:	9a 8b       	std	Y+18, r25	; 0x12
    3b3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b40:	9c 89       	ldd	r25, Y+20	; 0x14
    3b42:	01 97       	sbiw	r24, 0x01	; 1
    3b44:	9c 8b       	std	Y+20, r25	; 0x14
    3b46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b48:	8b 89       	ldd	r24, Y+19	; 0x13
    3b4a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b4c:	00 97       	sbiw	r24, 0x00	; 0
    3b4e:	69 f7       	brne	.-38     	; 0x3b2a <HLCD_Send_Command_4bit+0xd8>
    3b50:	14 c0       	rjmp	.+40     	; 0x3b7a <HLCD_Send_Command_4bit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b52:	6d 89       	ldd	r22, Y+21	; 0x15
    3b54:	7e 89       	ldd	r23, Y+22	; 0x16
    3b56:	8f 89       	ldd	r24, Y+23	; 0x17
    3b58:	98 8d       	ldd	r25, Y+24	; 0x18
    3b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	9c 8b       	std	Y+20, r25	; 0x14
    3b64:	8b 8b       	std	Y+19, r24	; 0x13
    3b66:	8b 89       	ldd	r24, Y+19	; 0x13
    3b68:	9c 89       	ldd	r25, Y+20	; 0x14
    3b6a:	98 8b       	std	Y+16, r25	; 0x10
    3b6c:	8f 87       	std	Y+15, r24	; 0x0f
    3b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b70:	98 89       	ldd	r25, Y+16	; 0x10
    3b72:	01 97       	sbiw	r24, 0x01	; 1
    3b74:	f1 f7       	brne	.-4      	; 0x3b72 <HLCD_Send_Command_4bit+0x120>
    3b76:	98 8b       	std	Y+16, r25	; 0x10
    3b78:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    3b7a:	82 e0       	ldi	r24, 0x02	; 2
    3b7c:	66 e0       	ldi	r22, 0x06	; 6
    3b7e:	40 e0       	ldi	r20, 0x00	; 0
    3b80:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>

	DIO_PORT_WRITE_LOGIC_M(LCD_PORT_DATA, command & 0x0F);
    3b84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b86:	98 2f       	mov	r25, r24
    3b88:	9f 70       	andi	r25, 0x0F	; 15
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	69 2f       	mov	r22, r25
    3b8e:	0e 94 19 14 	call	0x2832	; 0x2832 <DIO_PORT_WRITE_LOGIC_M>
	//DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN0,(command>>0)&0x01);
	//DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN1,(command>>1)&0x01);
	//DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN2,(command>>2)&0x01);
	//DIO_PIN_WRITE_LOGIC_M(LCD_PORT_DATA,LCD_4bit_DATA_PIN3,(command>>3)&0x01);

	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_HIGH);
    3b92:	82 e0       	ldi	r24, 0x02	; 2
    3b94:	66 e0       	ldi	r22, 0x06	; 6
    3b96:	41 e0       	ldi	r20, 0x01	; 1
    3b98:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	a0 e0       	ldi	r26, 0x00	; 0
    3ba2:	b0 e4       	ldi	r27, 0x40	; 64
    3ba4:	8b 87       	std	Y+11, r24	; 0x0b
    3ba6:	9c 87       	std	Y+12, r25	; 0x0c
    3ba8:	ad 87       	std	Y+13, r26	; 0x0d
    3baa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	4a ef       	ldi	r20, 0xFA	; 250
    3bba:	54 e4       	ldi	r21, 0x44	; 68
    3bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	8f 83       	std	Y+7, r24	; 0x07
    3bc6:	98 87       	std	Y+8, r25	; 0x08
    3bc8:	a9 87       	std	Y+9, r26	; 0x09
    3bca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bce:	78 85       	ldd	r23, Y+8	; 0x08
    3bd0:	89 85       	ldd	r24, Y+9	; 0x09
    3bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	40 e8       	ldi	r20, 0x80	; 128
    3bda:	5f e3       	ldi	r21, 0x3F	; 63
    3bdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3be0:	88 23       	and	r24, r24
    3be2:	2c f4       	brge	.+10     	; 0x3bee <HLCD_Send_Command_4bit+0x19c>
		__ticks = 1;
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	9e 83       	std	Y+6, r25	; 0x06
    3bea:	8d 83       	std	Y+5, r24	; 0x05
    3bec:	3f c0       	rjmp	.+126    	; 0x3c6c <HLCD_Send_Command_4bit+0x21a>
	else if (__tmp > 65535)
    3bee:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf0:	78 85       	ldd	r23, Y+8	; 0x08
    3bf2:	89 85       	ldd	r24, Y+9	; 0x09
    3bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	3f ef       	ldi	r19, 0xFF	; 255
    3bfa:	4f e7       	ldi	r20, 0x7F	; 127
    3bfc:	57 e4       	ldi	r21, 0x47	; 71
    3bfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c02:	18 16       	cp	r1, r24
    3c04:	4c f5       	brge	.+82     	; 0x3c58 <HLCD_Send_Command_4bit+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e2       	ldi	r20, 0x20	; 32
    3c14:	51 e4       	ldi	r21, 0x41	; 65
    3c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	cb 01       	movw	r24, r22
    3c1e:	bc 01       	movw	r22, r24
    3c20:	cd 01       	movw	r24, r26
    3c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	9e 83       	std	Y+6, r25	; 0x06
    3c2c:	8d 83       	std	Y+5, r24	; 0x05
    3c2e:	0f c0       	rjmp	.+30     	; 0x3c4e <HLCD_Send_Command_4bit+0x1fc>
    3c30:	88 ec       	ldi	r24, 0xC8	; 200
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	9c 83       	std	Y+4, r25	; 0x04
    3c36:	8b 83       	std	Y+3, r24	; 0x03
    3c38:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3c:	01 97       	sbiw	r24, 0x01	; 1
    3c3e:	f1 f7       	brne	.-4      	; 0x3c3c <HLCD_Send_Command_4bit+0x1ea>
    3c40:	9c 83       	std	Y+4, r25	; 0x04
    3c42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c44:	8d 81       	ldd	r24, Y+5	; 0x05
    3c46:	9e 81       	ldd	r25, Y+6	; 0x06
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	9e 83       	std	Y+6, r25	; 0x06
    3c4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c50:	9e 81       	ldd	r25, Y+6	; 0x06
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	69 f7       	brne	.-38     	; 0x3c30 <HLCD_Send_Command_4bit+0x1de>
    3c56:	14 c0       	rjmp	.+40     	; 0x3c80 <HLCD_Send_Command_4bit+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c58:	6f 81       	ldd	r22, Y+7	; 0x07
    3c5a:	78 85       	ldd	r23, Y+8	; 0x08
    3c5c:	89 85       	ldd	r24, Y+9	; 0x09
    3c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	9e 83       	std	Y+6, r25	; 0x06
    3c6a:	8d 83       	std	Y+5, r24	; 0x05
    3c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c70:	9a 83       	std	Y+2, r25	; 0x02
    3c72:	89 83       	std	Y+1, r24	; 0x01
    3c74:	89 81       	ldd	r24, Y+1	; 0x01
    3c76:	9a 81       	ldd	r25, Y+2	; 0x02
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	f1 f7       	brne	.-4      	; 0x3c78 <HLCD_Send_Command_4bit+0x226>
    3c7c:	9a 83       	std	Y+2, r25	; 0x02
    3c7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_PIN_WRITE_LOGIC_M(LCD_PORT_CTRL,En,PIN_LOW);
    3c80:	82 e0       	ldi	r24, 0x02	; 2
    3c82:	66 e0       	ldi	r22, 0x06	; 6
    3c84:	40 e0       	ldi	r20, 0x00	; 0
    3c86:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
}
    3c8a:	6d 96       	adiw	r28, 0x1d	; 29
    3c8c:	0f b6       	in	r0, 0x3f	; 63
    3c8e:	f8 94       	cli
    3c90:	de bf       	out	0x3e, r29	; 62
    3c92:	0f be       	out	0x3f, r0	; 63
    3c94:	cd bf       	out	0x3d, r28	; 61
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	08 95       	ret

00003c9c <convert_uint32_to_string>:
}
#endif
/********************** helper functions ***********************/

/***********************/
Std_ReturnType convert_uint32_to_string(u32 value, u8 *str){
    3c9c:	df 93       	push	r29
    3c9e:	cf 93       	push	r28
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
    3ca4:	27 97       	sbiw	r28, 0x07	; 7
    3ca6:	0f b6       	in	r0, 0x3f	; 63
    3ca8:	f8 94       	cli
    3caa:	de bf       	out	0x3e, r29	; 62
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	cd bf       	out	0x3d, r28	; 61
    3cb0:	6a 83       	std	Y+2, r22	; 0x02
    3cb2:	7b 83       	std	Y+3, r23	; 0x03
    3cb4:	8c 83       	std	Y+4, r24	; 0x04
    3cb6:	9d 83       	std	Y+5, r25	; 0x05
    3cb8:	5f 83       	std	Y+7, r21	; 0x07
    3cba:	4e 83       	std	Y+6, r20	; 0x06
	Std_ReturnType ret = E_OK;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == str){
    3cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    3cc2:	9f 81       	ldd	r25, Y+7	; 0x07
    3cc4:	00 97       	sbiw	r24, 0x00	; 0
    3cc6:	11 f4       	brne	.+4      	; 0x3ccc <convert_uint32_to_string+0x30>
		ret = E_NOT_OK;
    3cc8:	19 82       	std	Y+1, r1	; 0x01
    3cca:	2d c0       	rjmp	.+90     	; 0x3d26 <convert_uint32_to_string+0x8a>
	}
	else{
		memset((u8 *)str, '\0', 11);
    3ccc:	8e 81       	ldd	r24, Y+6	; 0x06
    3cce:	9f 81       	ldd	r25, Y+7	; 0x07
    3cd0:	60 e0       	ldi	r22, 0x00	; 0
    3cd2:	70 e0       	ldi	r23, 0x00	; 0
    3cd4:	4b e0       	ldi	r20, 0x0B	; 11
    3cd6:	50 e0       	ldi	r21, 0x00	; 0
    3cd8:	0e 94 3b 31 	call	0x6276	; 0x6276 <memset>
		sprintf(str, "%i", value);
    3cdc:	8d b7       	in	r24, 0x3d	; 61
    3cde:	9e b7       	in	r25, 0x3e	; 62
    3ce0:	08 97       	sbiw	r24, 0x08	; 8
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	f8 94       	cli
    3ce6:	9e bf       	out	0x3e, r25	; 62
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	8d bf       	out	0x3d, r24	; 61
    3cec:	ed b7       	in	r30, 0x3d	; 61
    3cee:	fe b7       	in	r31, 0x3e	; 62
    3cf0:	31 96       	adiw	r30, 0x01	; 1
    3cf2:	8e 81       	ldd	r24, Y+6	; 0x06
    3cf4:	9f 81       	ldd	r25, Y+7	; 0x07
    3cf6:	91 83       	std	Z+1, r25	; 0x01
    3cf8:	80 83       	st	Z, r24
    3cfa:	80 e6       	ldi	r24, 0x60	; 96
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	93 83       	std	Z+3, r25	; 0x03
    3d00:	82 83       	std	Z+2, r24	; 0x02
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	9b 81       	ldd	r25, Y+3	; 0x03
    3d06:	ac 81       	ldd	r26, Y+4	; 0x04
    3d08:	bd 81       	ldd	r27, Y+5	; 0x05
    3d0a:	84 83       	std	Z+4, r24	; 0x04
    3d0c:	95 83       	std	Z+5, r25	; 0x05
    3d0e:	a6 83       	std	Z+6, r26	; 0x06
    3d10:	b7 83       	std	Z+7, r27	; 0x07
    3d12:	0e 94 42 31 	call	0x6284	; 0x6284 <sprintf>
    3d16:	8d b7       	in	r24, 0x3d	; 61
    3d18:	9e b7       	in	r25, 0x3e	; 62
    3d1a:	08 96       	adiw	r24, 0x08	; 8
    3d1c:	0f b6       	in	r0, 0x3f	; 63
    3d1e:	f8 94       	cli
    3d20:	9e bf       	out	0x3e, r25	; 62
    3d22:	0f be       	out	0x3f, r0	; 63
    3d24:	8d bf       	out	0x3d, r24	; 61
	}
	return ret;
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d28:	27 96       	adiw	r28, 0x07	; 7
    3d2a:	0f b6       	in	r0, 0x3f	; 63
    3d2c:	f8 94       	cli
    3d2e:	de bf       	out	0x3e, r29	; 62
    3d30:	0f be       	out	0x3f, r0	; 63
    3d32:	cd bf       	out	0x3d, r28	; 61
    3d34:	cf 91       	pop	r28
    3d36:	df 91       	pop	r29
    3d38:	08 95       	ret

00003d3a <convert_uint8_to_string>:
/**************************************************************/
Std_ReturnType convert_uint8_to_string(u8 value, u8 *str){
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	00 d0       	rcall	.+0      	; 0x3d40 <convert_uint8_to_string+0x6>
    3d40:	00 d0       	rcall	.+0      	; 0x3d42 <convert_uint8_to_string+0x8>
    3d42:	cd b7       	in	r28, 0x3d	; 61
    3d44:	de b7       	in	r29, 0x3e	; 62
    3d46:	8a 83       	std	Y+2, r24	; 0x02
    3d48:	7c 83       	std	Y+4, r23	; 0x04
    3d4a:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_NOT_OK;
    3d4c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == str){
    3d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d50:	9c 81       	ldd	r25, Y+4	; 0x04
    3d52:	00 97       	sbiw	r24, 0x00	; 0
    3d54:	11 f4       	brne	.+4      	; 0x3d5a <convert_uint8_to_string+0x20>
		ret = E_NOT_OK;
    3d56:	19 82       	std	Y+1, r1	; 0x01
    3d58:	27 c0       	rjmp	.+78     	; 0x3da8 <convert_uint8_to_string+0x6e>
	}
	else{
		memset((char *)str, '\0', 4);
    3d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d5e:	60 e0       	ldi	r22, 0x00	; 0
    3d60:	70 e0       	ldi	r23, 0x00	; 0
    3d62:	44 e0       	ldi	r20, 0x04	; 4
    3d64:	50 e0       	ldi	r21, 0x00	; 0
    3d66:	0e 94 3b 31 	call	0x6276	; 0x6276 <memset>
		sprintf(str, "%i", value);
    3d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6c:	28 2f       	mov	r18, r24
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	00 d0       	rcall	.+0      	; 0x3d72 <convert_uint8_to_string+0x38>
    3d72:	00 d0       	rcall	.+0      	; 0x3d74 <convert_uint8_to_string+0x3a>
    3d74:	00 d0       	rcall	.+0      	; 0x3d76 <convert_uint8_to_string+0x3c>
    3d76:	ed b7       	in	r30, 0x3d	; 61
    3d78:	fe b7       	in	r31, 0x3e	; 62
    3d7a:	31 96       	adiw	r30, 0x01	; 1
    3d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d80:	91 83       	std	Z+1, r25	; 0x01
    3d82:	80 83       	st	Z, r24
    3d84:	80 e6       	ldi	r24, 0x60	; 96
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	93 83       	std	Z+3, r25	; 0x03
    3d8a:	82 83       	std	Z+2, r24	; 0x02
    3d8c:	35 83       	std	Z+5, r19	; 0x05
    3d8e:	24 83       	std	Z+4, r18	; 0x04
    3d90:	0e 94 42 31 	call	0x6284	; 0x6284 <sprintf>
    3d94:	8d b7       	in	r24, 0x3d	; 61
    3d96:	9e b7       	in	r25, 0x3e	; 62
    3d98:	06 96       	adiw	r24, 0x06	; 6
    3d9a:	0f b6       	in	r0, 0x3f	; 63
    3d9c:	f8 94       	cli
    3d9e:	9e bf       	out	0x3e, r25	; 62
    3da0:	0f be       	out	0x3f, r0	; 63
    3da2:	8d bf       	out	0x3d, r24	; 61
		ret=E_OK;
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
}
    3daa:	0f 90       	pop	r0
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	cf 91       	pop	r28
    3db4:	df 91       	pop	r29
    3db6:	08 95       	ret

00003db8 <convert_uint16_to_string>:
/***************************************/
Std_ReturnType convert_uint16_to_string(u16 value, u8 *str){
    3db8:	df 93       	push	r29
    3dba:	cf 93       	push	r28
    3dbc:	00 d0       	rcall	.+0      	; 0x3dbe <convert_uint16_to_string+0x6>
    3dbe:	00 d0       	rcall	.+0      	; 0x3dc0 <convert_uint16_to_string+0x8>
    3dc0:	0f 92       	push	r0
    3dc2:	cd b7       	in	r28, 0x3d	; 61
    3dc4:	de b7       	in	r29, 0x3e	; 62
    3dc6:	9b 83       	std	Y+3, r25	; 0x03
    3dc8:	8a 83       	std	Y+2, r24	; 0x02
    3dca:	7d 83       	std	Y+5, r23	; 0x05
    3dcc:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_NOT_OK;
    3dce:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == str){
    3dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    3dd4:	00 97       	sbiw	r24, 0x00	; 0
    3dd6:	11 f4       	brne	.+4      	; 0x3ddc <convert_uint16_to_string+0x24>
		ret = E_NOT_OK;
    3dd8:	19 82       	std	Y+1, r1	; 0x01
    3dda:	26 c0       	rjmp	.+76     	; 0x3e28 <convert_uint16_to_string+0x70>
	}
	else{
		memset((char *)str, '\0', 8);
    3ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    3dde:	9d 81       	ldd	r25, Y+5	; 0x05
    3de0:	60 e0       	ldi	r22, 0x00	; 0
    3de2:	70 e0       	ldi	r23, 0x00	; 0
    3de4:	48 e0       	ldi	r20, 0x08	; 8
    3de6:	50 e0       	ldi	r21, 0x00	; 0
    3de8:	0e 94 3b 31 	call	0x6276	; 0x6276 <memset>
		sprintf(str, "%i", value);
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <convert_uint16_to_string+0x36>
    3dee:	00 d0       	rcall	.+0      	; 0x3df0 <convert_uint16_to_string+0x38>
    3df0:	00 d0       	rcall	.+0      	; 0x3df2 <convert_uint16_to_string+0x3a>
    3df2:	ed b7       	in	r30, 0x3d	; 61
    3df4:	fe b7       	in	r31, 0x3e	; 62
    3df6:	31 96       	adiw	r30, 0x01	; 1
    3df8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dfa:	9d 81       	ldd	r25, Y+5	; 0x05
    3dfc:	91 83       	std	Z+1, r25	; 0x01
    3dfe:	80 83       	st	Z, r24
    3e00:	80 e6       	ldi	r24, 0x60	; 96
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	93 83       	std	Z+3, r25	; 0x03
    3e06:	82 83       	std	Z+2, r24	; 0x02
    3e08:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e0c:	95 83       	std	Z+5, r25	; 0x05
    3e0e:	84 83       	std	Z+4, r24	; 0x04
    3e10:	0e 94 42 31 	call	0x6284	; 0x6284 <sprintf>
    3e14:	8d b7       	in	r24, 0x3d	; 61
    3e16:	9e b7       	in	r25, 0x3e	; 62
    3e18:	06 96       	adiw	r24, 0x06	; 6
    3e1a:	0f b6       	in	r0, 0x3f	; 63
    3e1c:	f8 94       	cli
    3e1e:	9e bf       	out	0x3e, r25	; 62
    3e20:	0f be       	out	0x3f, r0	; 63
    3e22:	8d bf       	out	0x3d, r24	; 61
		ret=E_OK;
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	cf 91       	pop	r28
    3e36:	df 91       	pop	r29
    3e38:	08 95       	ret

00003e3a <SEND_U16_8BIT>:
/*************************************/
void SEND_U16_8BIT(u16 value,u8 row ,u8 column)
{
    3e3a:	df 93       	push	r29
    3e3c:	cf 93       	push	r28
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	2c 97       	sbiw	r28, 0x0c	; 12
    3e44:	0f b6       	in	r0, 0x3f	; 63
    3e46:	f8 94       	cli
    3e48:	de bf       	out	0x3e, r29	; 62
    3e4a:	0f be       	out	0x3f, r0	; 63
    3e4c:	cd bf       	out	0x3d, r28	; 61
    3e4e:	9a 87       	std	Y+10, r25	; 0x0a
    3e50:	89 87       	std	Y+9, r24	; 0x09
    3e52:	6b 87       	std	Y+11, r22	; 0x0b
    3e54:	4c 87       	std	Y+12, r20	; 0x0c
	u8 arr[8];
	convert_uint16_to_string(value,arr);
    3e56:	89 85       	ldd	r24, Y+9	; 0x09
    3e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e5a:	9e 01       	movw	r18, r28
    3e5c:	2f 5f       	subi	r18, 0xFF	; 255
    3e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e60:	b9 01       	movw	r22, r18
    3e62:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <convert_uint16_to_string>
	HLCD_Send_String_Position_8bit(arr,row ,column);
    3e66:	ce 01       	movw	r24, r28
    3e68:	01 96       	adiw	r24, 0x01	; 1
    3e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e6c:	4c 85       	ldd	r20, Y+12	; 0x0c
    3e6e:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
}
    3e72:	2c 96       	adiw	r28, 0x0c	; 12
    3e74:	0f b6       	in	r0, 0x3f	; 63
    3e76:	f8 94       	cli
    3e78:	de bf       	out	0x3e, r29	; 62
    3e7a:	0f be       	out	0x3f, r0	; 63
    3e7c:	cd bf       	out	0x3d, r28	; 61
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	08 95       	ret

00003e84 <keypad_read>:
//        {'#', '0', '=', '+'}   \
//    }

/*this function is used to scan and read the pressed buttons of keypad*/
void keypad_read(char *button_pos_ )
{
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	cd b7       	in	r28, 0x3d	; 61
    3e8a:	de b7       	in	r29, 0x3e	; 62
    3e8c:	ac 97       	sbiw	r28, 0x2c	; 44
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
    3e98:	9c a7       	std	Y+44, r25	; 0x2c
    3e9a:	8b a7       	std	Y+43, r24	; 0x2b
	u8 l_row_counter=0;
    3e9c:	1a a6       	std	Y+42, r1	; 0x2a
	u8 l_column_counter=0;
    3e9e:	19 a6       	std	Y+41, r1	; 0x29
	u8 counter=0;
    3ea0:	18 a6       	std	Y+40, r1	; 0x28
	u8 buttonn =0;
    3ea2:	1f a2       	std	Y+39, r1	; 0x27

	*button_pos_=0;
    3ea4:	eb a5       	ldd	r30, Y+43	; 0x2b
    3ea6:	fc a5       	ldd	r31, Y+44	; 0x2c
    3ea8:	10 82       	st	Z, r1

	for(l_row_counter=0 ;l_row_counter<keypad_columns;l_row_counter++)
    3eaa:	1a a6       	std	Y+42, r1	; 0x2a
    3eac:	79 c1       	rjmp	.+754    	; 0x41a0 <keypad_read+0x31c>
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_rows_PORT,row_port_pins[l_row_counter],PIN_HIGH);
    3eae:	8a a5       	ldd	r24, Y+42	; 0x2a
    3eb0:	88 2f       	mov	r24, r24
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	ea 53       	subi	r30, 0x3A	; 58
    3eb8:	fd 4f       	sbci	r31, 0xFD	; 253
    3eba:	90 81       	ld	r25, Z
    3ebc:	83 e0       	ldi	r24, 0x03	; 3
    3ebe:	69 2f       	mov	r22, r25
    3ec0:	41 e0       	ldi	r20, 0x01	; 1
    3ec2:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
    3ec6:	80 e0       	ldi	r24, 0x00	; 0
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	a8 e4       	ldi	r26, 0x48	; 72
    3ecc:	b2 e4       	ldi	r27, 0x42	; 66
    3ece:	8b a3       	std	Y+35, r24	; 0x23
    3ed0:	9c a3       	std	Y+36, r25	; 0x24
    3ed2:	ad a3       	std	Y+37, r26	; 0x25
    3ed4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3ed6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ed8:	7c a1       	ldd	r23, Y+36	; 0x24
    3eda:	8d a1       	ldd	r24, Y+37	; 0x25
    3edc:	9e a1       	ldd	r25, Y+38	; 0x26
    3ede:	2b ea       	ldi	r18, 0xAB	; 171
    3ee0:	3a ea       	ldi	r19, 0xAA	; 170
    3ee2:	4a e2       	ldi	r20, 0x2A	; 42
    3ee4:	50 e4       	ldi	r21, 0x40	; 64
    3ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eea:	dc 01       	movw	r26, r24
    3eec:	cb 01       	movw	r24, r22
    3eee:	8f 8f       	std	Y+31, r24	; 0x1f
    3ef0:	98 a3       	std	Y+32, r25	; 0x20
    3ef2:	a9 a3       	std	Y+33, r26	; 0x21
    3ef4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3ef6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3ef8:	78 a1       	ldd	r23, Y+32	; 0x20
    3efa:	89 a1       	ldd	r24, Y+33	; 0x21
    3efc:	9a a1       	ldd	r25, Y+34	; 0x22
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	40 e8       	ldi	r20, 0x80	; 128
    3f04:	5f e3       	ldi	r21, 0x3F	; 63
    3f06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f0a:	88 23       	and	r24, r24
    3f0c:	1c f4       	brge	.+6      	; 0x3f14 <keypad_read+0x90>
		__ticks = 1;
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	8e 8f       	std	Y+30, r24	; 0x1e
    3f12:	91 c0       	rjmp	.+290    	; 0x4036 <keypad_read+0x1b2>
	else if (__tmp > 255)
    3f14:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3f16:	78 a1       	ldd	r23, Y+32	; 0x20
    3f18:	89 a1       	ldd	r24, Y+33	; 0x21
    3f1a:	9a a1       	ldd	r25, Y+34	; 0x22
    3f1c:	20 e0       	ldi	r18, 0x00	; 0
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	4f e7       	ldi	r20, 0x7F	; 127
    3f22:	53 e4       	ldi	r21, 0x43	; 67
    3f24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f28:	18 16       	cp	r1, r24
    3f2a:	0c f0       	brlt	.+2      	; 0x3f2e <keypad_read+0xaa>
    3f2c:	7b c0       	rjmp	.+246    	; 0x4024 <keypad_read+0x1a0>
	{
		_delay_ms(__us / 1000.0);
    3f2e:	6b a1       	ldd	r22, Y+35	; 0x23
    3f30:	7c a1       	ldd	r23, Y+36	; 0x24
    3f32:	8d a1       	ldd	r24, Y+37	; 0x25
    3f34:	9e a1       	ldd	r25, Y+38	; 0x26
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	4a e7       	ldi	r20, 0x7A	; 122
    3f3c:	54 e4       	ldi	r21, 0x44	; 68
    3f3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	8a 8f       	std	Y+26, r24	; 0x1a
    3f48:	9b 8f       	std	Y+27, r25	; 0x1b
    3f4a:	ac 8f       	std	Y+28, r26	; 0x1c
    3f4c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f4e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3f50:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3f52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	4a ef       	ldi	r20, 0xFA	; 250
    3f5c:	54 e4       	ldi	r21, 0x44	; 68
    3f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	8e 8b       	std	Y+22, r24	; 0x16
    3f68:	9f 8b       	std	Y+23, r25	; 0x17
    3f6a:	a8 8f       	std	Y+24, r26	; 0x18
    3f6c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3f6e:	6e 89       	ldd	r22, Y+22	; 0x16
    3f70:	7f 89       	ldd	r23, Y+23	; 0x17
    3f72:	88 8d       	ldd	r24, Y+24	; 0x18
    3f74:	99 8d       	ldd	r25, Y+25	; 0x19
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e8       	ldi	r20, 0x80	; 128
    3f7c:	5f e3       	ldi	r21, 0x3F	; 63
    3f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f82:	88 23       	and	r24, r24
    3f84:	2c f4       	brge	.+10     	; 0x3f90 <keypad_read+0x10c>
		__ticks = 1;
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	9d 8b       	std	Y+21, r25	; 0x15
    3f8c:	8c 8b       	std	Y+20, r24	; 0x14
    3f8e:	3f c0       	rjmp	.+126    	; 0x400e <keypad_read+0x18a>
	else if (__tmp > 65535)
    3f90:	6e 89       	ldd	r22, Y+22	; 0x16
    3f92:	7f 89       	ldd	r23, Y+23	; 0x17
    3f94:	88 8d       	ldd	r24, Y+24	; 0x18
    3f96:	99 8d       	ldd	r25, Y+25	; 0x19
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	3f ef       	ldi	r19, 0xFF	; 255
    3f9c:	4f e7       	ldi	r20, 0x7F	; 127
    3f9e:	57 e4       	ldi	r21, 0x47	; 71
    3fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fa4:	18 16       	cp	r1, r24
    3fa6:	4c f5       	brge	.+82     	; 0x3ffa <keypad_read+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3faa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3fac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3fae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e2       	ldi	r20, 0x20	; 32
    3fb6:	51 e4       	ldi	r21, 0x41	; 65
    3fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	bc 01       	movw	r22, r24
    3fc2:	cd 01       	movw	r24, r26
    3fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	9d 8b       	std	Y+21, r25	; 0x15
    3fce:	8c 8b       	std	Y+20, r24	; 0x14
    3fd0:	0f c0       	rjmp	.+30     	; 0x3ff0 <keypad_read+0x16c>
    3fd2:	88 ec       	ldi	r24, 0xC8	; 200
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	9b 8b       	std	Y+19, r25	; 0x13
    3fd8:	8a 8b       	std	Y+18, r24	; 0x12
    3fda:	8a 89       	ldd	r24, Y+18	; 0x12
    3fdc:	9b 89       	ldd	r25, Y+19	; 0x13
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	f1 f7       	brne	.-4      	; 0x3fde <keypad_read+0x15a>
    3fe2:	9b 8b       	std	Y+19, r25	; 0x13
    3fe4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe6:	8c 89       	ldd	r24, Y+20	; 0x14
    3fe8:	9d 89       	ldd	r25, Y+21	; 0x15
    3fea:	01 97       	sbiw	r24, 0x01	; 1
    3fec:	9d 8b       	std	Y+21, r25	; 0x15
    3fee:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff0:	8c 89       	ldd	r24, Y+20	; 0x14
    3ff2:	9d 89       	ldd	r25, Y+21	; 0x15
    3ff4:	00 97       	sbiw	r24, 0x00	; 0
    3ff6:	69 f7       	brne	.-38     	; 0x3fd2 <keypad_read+0x14e>
    3ff8:	24 c0       	rjmp	.+72     	; 0x4042 <keypad_read+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ffa:	6e 89       	ldd	r22, Y+22	; 0x16
    3ffc:	7f 89       	ldd	r23, Y+23	; 0x17
    3ffe:	88 8d       	ldd	r24, Y+24	; 0x18
    4000:	99 8d       	ldd	r25, Y+25	; 0x19
    4002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	9d 8b       	std	Y+21, r25	; 0x15
    400c:	8c 8b       	std	Y+20, r24	; 0x14
    400e:	8c 89       	ldd	r24, Y+20	; 0x14
    4010:	9d 89       	ldd	r25, Y+21	; 0x15
    4012:	99 8b       	std	Y+17, r25	; 0x11
    4014:	88 8b       	std	Y+16, r24	; 0x10
    4016:	88 89       	ldd	r24, Y+16	; 0x10
    4018:	99 89       	ldd	r25, Y+17	; 0x11
    401a:	01 97       	sbiw	r24, 0x01	; 1
    401c:	f1 f7       	brne	.-4      	; 0x401a <keypad_read+0x196>
    401e:	99 8b       	std	Y+17, r25	; 0x11
    4020:	88 8b       	std	Y+16, r24	; 0x10
    4022:	0f c0       	rjmp	.+30     	; 0x4042 <keypad_read+0x1be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4024:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4026:	78 a1       	ldd	r23, Y+32	; 0x20
    4028:	89 a1       	ldd	r24, Y+33	; 0x21
    402a:	9a a1       	ldd	r25, Y+34	; 0x22
    402c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4030:	dc 01       	movw	r26, r24
    4032:	cb 01       	movw	r24, r22
    4034:	8e 8f       	std	Y+30, r24	; 0x1e
    4036:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4038:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    403a:	8f 85       	ldd	r24, Y+15	; 0x0f
    403c:	8a 95       	dec	r24
    403e:	f1 f7       	brne	.-4      	; 0x403c <keypad_read+0x1b8>
    4040:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(50);
		for(l_column_counter=0 ; l_column_counter<keypad_columns;l_column_counter++)
    4042:	19 a6       	std	Y+41, r1	; 0x29
    4044:	a6 c0       	rjmp	.+332    	; 0x4192 <keypad_read+0x30e>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_columns_PORT,column_port_pins[l_column_counter]);
    4046:	89 a5       	ldd	r24, Y+41	; 0x29
    4048:	88 2f       	mov	r24, r24
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	fc 01       	movw	r30, r24
    404e:	ee 53       	subi	r30, 0x3E	; 62
    4050:	fd 4f       	sbci	r31, 0xFD	; 253
    4052:	90 81       	ld	r25, Z
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	69 2f       	mov	r22, r25
    4058:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_PIN_READ_LOGIC_LEVEL_M>
    405c:	8f a3       	std	Y+39, r24	; 0x27
			if(PIN_HIGH==buttonn)
    405e:	8f a1       	ldd	r24, Y+39	; 0x27
    4060:	81 30       	cpi	r24, 0x01	; 1
    4062:	09 f0       	breq	.+2      	; 0x4066 <keypad_read+0x1e2>
    4064:	93 c0       	rjmp	.+294    	; 0x418c <keypad_read+0x308>
    4066:	80 e0       	ldi	r24, 0x00	; 0
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	a8 e4       	ldi	r26, 0x48	; 72
    406c:	b2 e4       	ldi	r27, 0x42	; 66
    406e:	8b 87       	std	Y+11, r24	; 0x0b
    4070:	9c 87       	std	Y+12, r25	; 0x0c
    4072:	ad 87       	std	Y+13, r26	; 0x0d
    4074:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4076:	6b 85       	ldd	r22, Y+11	; 0x0b
    4078:	7c 85       	ldd	r23, Y+12	; 0x0c
    407a:	8d 85       	ldd	r24, Y+13	; 0x0d
    407c:	9e 85       	ldd	r25, Y+14	; 0x0e
    407e:	20 e0       	ldi	r18, 0x00	; 0
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	4a ef       	ldi	r20, 0xFA	; 250
    4084:	54 e4       	ldi	r21, 0x44	; 68
    4086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408a:	dc 01       	movw	r26, r24
    408c:	cb 01       	movw	r24, r22
    408e:	8f 83       	std	Y+7, r24	; 0x07
    4090:	98 87       	std	Y+8, r25	; 0x08
    4092:	a9 87       	std	Y+9, r26	; 0x09
    4094:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4096:	6f 81       	ldd	r22, Y+7	; 0x07
    4098:	78 85       	ldd	r23, Y+8	; 0x08
    409a:	89 85       	ldd	r24, Y+9	; 0x09
    409c:	9a 85       	ldd	r25, Y+10	; 0x0a
    409e:	20 e0       	ldi	r18, 0x00	; 0
    40a0:	30 e0       	ldi	r19, 0x00	; 0
    40a2:	40 e8       	ldi	r20, 0x80	; 128
    40a4:	5f e3       	ldi	r21, 0x3F	; 63
    40a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40aa:	88 23       	and	r24, r24
    40ac:	2c f4       	brge	.+10     	; 0x40b8 <keypad_read+0x234>
		__ticks = 1;
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	9e 83       	std	Y+6, r25	; 0x06
    40b4:	8d 83       	std	Y+5, r24	; 0x05
    40b6:	3f c0       	rjmp	.+126    	; 0x4136 <keypad_read+0x2b2>
	else if (__tmp > 65535)
    40b8:	6f 81       	ldd	r22, Y+7	; 0x07
    40ba:	78 85       	ldd	r23, Y+8	; 0x08
    40bc:	89 85       	ldd	r24, Y+9	; 0x09
    40be:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	3f ef       	ldi	r19, 0xFF	; 255
    40c4:	4f e7       	ldi	r20, 0x7F	; 127
    40c6:	57 e4       	ldi	r21, 0x47	; 71
    40c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40cc:	18 16       	cp	r1, r24
    40ce:	4c f5       	brge	.+82     	; 0x4122 <keypad_read+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    40d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    40d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    40d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	40 e2       	ldi	r20, 0x20	; 32
    40de:	51 e4       	ldi	r21, 0x41	; 65
    40e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e4:	dc 01       	movw	r26, r24
    40e6:	cb 01       	movw	r24, r22
    40e8:	bc 01       	movw	r22, r24
    40ea:	cd 01       	movw	r24, r26
    40ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	9e 83       	std	Y+6, r25	; 0x06
    40f6:	8d 83       	std	Y+5, r24	; 0x05
    40f8:	0f c0       	rjmp	.+30     	; 0x4118 <keypad_read+0x294>
    40fa:	88 ec       	ldi	r24, 0xC8	; 200
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	9c 83       	std	Y+4, r25	; 0x04
    4100:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4102:	8b 81       	ldd	r24, Y+3	; 0x03
    4104:	9c 81       	ldd	r25, Y+4	; 0x04
    4106:	01 97       	sbiw	r24, 0x01	; 1
    4108:	f1 f7       	brne	.-4      	; 0x4106 <keypad_read+0x282>
    410a:	9c 83       	std	Y+4, r25	; 0x04
    410c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    410e:	8d 81       	ldd	r24, Y+5	; 0x05
    4110:	9e 81       	ldd	r25, Y+6	; 0x06
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	9e 83       	std	Y+6, r25	; 0x06
    4116:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4118:	8d 81       	ldd	r24, Y+5	; 0x05
    411a:	9e 81       	ldd	r25, Y+6	; 0x06
    411c:	00 97       	sbiw	r24, 0x00	; 0
    411e:	69 f7       	brne	.-38     	; 0x40fa <keypad_read+0x276>
    4120:	14 c0       	rjmp	.+40     	; 0x414a <keypad_read+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4122:	6f 81       	ldd	r22, Y+7	; 0x07
    4124:	78 85       	ldd	r23, Y+8	; 0x08
    4126:	89 85       	ldd	r24, Y+9	; 0x09
    4128:	9a 85       	ldd	r25, Y+10	; 0x0a
    412a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    412e:	dc 01       	movw	r26, r24
    4130:	cb 01       	movw	r24, r22
    4132:	9e 83       	std	Y+6, r25	; 0x06
    4134:	8d 83       	std	Y+5, r24	; 0x05
    4136:	8d 81       	ldd	r24, Y+5	; 0x05
    4138:	9e 81       	ldd	r25, Y+6	; 0x06
    413a:	9a 83       	std	Y+2, r25	; 0x02
    413c:	89 83       	std	Y+1, r24	; 0x01
    413e:	89 81       	ldd	r24, Y+1	; 0x01
    4140:	9a 81       	ldd	r25, Y+2	; 0x02
    4142:	01 97       	sbiw	r24, 0x01	; 1
    4144:	f1 f7       	brne	.-4      	; 0x4142 <keypad_read+0x2be>
    4146:	9a 83       	std	Y+2, r25	; 0x02
    4148:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				*button_pos_=button_pos[l_row_counter][l_row_counter];
    414a:	8a a5       	ldd	r24, Y+42	; 0x2a
    414c:	48 2f       	mov	r20, r24
    414e:	50 e0       	ldi	r21, 0x00	; 0
    4150:	8a a5       	ldd	r24, Y+42	; 0x2a
    4152:	28 2f       	mov	r18, r24
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	ca 01       	movw	r24, r20
    4158:	88 0f       	add	r24, r24
    415a:	99 1f       	adc	r25, r25
    415c:	88 0f       	add	r24, r24
    415e:	99 1f       	adc	r25, r25
    4160:	82 0f       	add	r24, r18
    4162:	93 1f       	adc	r25, r19
    4164:	fc 01       	movw	r30, r24
    4166:	e6 53       	subi	r30, 0x36	; 54
    4168:	fd 4f       	sbci	r31, 0xFD	; 253
    416a:	80 81       	ld	r24, Z
    416c:	eb a5       	ldd	r30, Y+43	; 0x2b
    416e:	fc a5       	ldd	r31, Y+44	; 0x2c
    4170:	80 83       	st	Z, r24
				DIO_PIN_WRITE_LOGIC_M(keypad_rows_PORT,row_port_pins[counter],PIN_LOW);
    4172:	88 a5       	ldd	r24, Y+40	; 0x28
    4174:	88 2f       	mov	r24, r24
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	fc 01       	movw	r30, r24
    417a:	ea 53       	subi	r30, 0x3A	; 58
    417c:	fd 4f       	sbci	r31, 0xFD	; 253
    417e:	90 81       	ld	r25, Z
    4180:	83 e0       	ldi	r24, 0x03	; 3
    4182:	69 2f       	mov	r22, r25
    4184:	40 e0       	ldi	r20, 0x00	; 0
    4186:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
    418a:	07 c0       	rjmp	.+14     	; 0x419a <keypad_read+0x316>

	for(l_row_counter=0 ;l_row_counter<keypad_columns;l_row_counter++)
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_rows_PORT,row_port_pins[l_row_counter],PIN_HIGH);
		_delay_us(50);
		for(l_column_counter=0 ; l_column_counter<keypad_columns;l_column_counter++)
    418c:	89 a5       	ldd	r24, Y+41	; 0x29
    418e:	8f 5f       	subi	r24, 0xFF	; 255
    4190:	89 a7       	std	Y+41, r24	; 0x29
    4192:	89 a5       	ldd	r24, Y+41	; 0x29
    4194:	84 30       	cpi	r24, 0x04	; 4
    4196:	08 f4       	brcc	.+2      	; 0x419a <keypad_read+0x316>
    4198:	56 cf       	rjmp	.-340    	; 0x4046 <keypad_read+0x1c2>
	u8 counter=0;
	u8 buttonn =0;

	*button_pos_=0;

	for(l_row_counter=0 ;l_row_counter<keypad_columns;l_row_counter++)
    419a:	8a a5       	ldd	r24, Y+42	; 0x2a
    419c:	8f 5f       	subi	r24, 0xFF	; 255
    419e:	8a a7       	std	Y+42, r24	; 0x2a
    41a0:	8a a5       	ldd	r24, Y+42	; 0x2a
    41a2:	84 30       	cpi	r24, 0x04	; 4
    41a4:	08 f4       	brcc	.+2      	; 0x41a8 <keypad_read+0x324>
    41a6:	83 ce       	rjmp	.-762    	; 0x3eae <keypad_read+0x2a>
				break;
			}
		}
	}

}
    41a8:	ac 96       	adiw	r28, 0x2c	; 44
    41aa:	0f b6       	in	r0, 0x3f	; 63
    41ac:	f8 94       	cli
    41ae:	de bf       	out	0x3e, r29	; 62
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	cd bf       	out	0x3d, r28	; 61
    41b4:	cf 91       	pop	r28
    41b6:	df 91       	pop	r29
    41b8:	08 95       	ret

000041ba <keypad_read_1>:
/******************/
void keypad_read_1(char *button_pos_ )
{
    41ba:	df 93       	push	r29
    41bc:	cf 93       	push	r28
    41be:	cd b7       	in	r28, 0x3d	; 61
    41c0:	de b7       	in	r29, 0x3e	; 62
    41c2:	63 97       	sbiw	r28, 0x13	; 19
    41c4:	0f b6       	in	r0, 0x3f	; 63
    41c6:	f8 94       	cli
    41c8:	de bf       	out	0x3e, r29	; 62
    41ca:	0f be       	out	0x3f, r0	; 63
    41cc:	cd bf       	out	0x3d, r28	; 61
    41ce:	9b 8b       	std	Y+19, r25	; 0x13
    41d0:	8a 8b       	std	Y+18, r24	; 0x12
	u8 l_row_counter=0;
    41d2:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_column_counter=0;
    41d4:	18 8a       	std	Y+16, r1	; 0x10

	u8 buttonn =0;
    41d6:	1f 86       	std	Y+15, r1	; 0x0f
	*button_pos_=0;
    41d8:	ea 89       	ldd	r30, Y+18	; 0x12
    41da:	fb 89       	ldd	r31, Y+19	; 0x13
    41dc:	10 82       	st	Z, r1

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    41de:	18 8a       	std	Y+16, r1	; 0x10
    41e0:	bb c0       	rjmp	.+374    	; 0x4358 <keypad_read_1+0x19e>
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    41e2:	88 89       	ldd	r24, Y+16	; 0x10
    41e4:	88 2f       	mov	r24, r24
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	fc 01       	movw	r30, r24
    41ea:	ee 53       	subi	r30, 0x3E	; 62
    41ec:	fd 4f       	sbci	r31, 0xFD	; 253
    41ee:	90 81       	ld	r25, Z
    41f0:	80 e0       	ldi	r24, 0x00	; 0
    41f2:	69 2f       	mov	r22, r25
    41f4:	40 e0       	ldi	r20, 0x00	; 0
    41f6:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    41fa:	19 8a       	std	Y+17, r1	; 0x11
    41fc:	a6 c0       	rjmp	.+332    	; 0x434a <keypad_read_1+0x190>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    41fe:	89 89       	ldd	r24, Y+17	; 0x11
    4200:	88 2f       	mov	r24, r24
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	fc 01       	movw	r30, r24
    4206:	ea 53       	subi	r30, 0x3A	; 58
    4208:	fd 4f       	sbci	r31, 0xFD	; 253
    420a:	90 81       	ld	r25, Z
    420c:	83 e0       	ldi	r24, 0x03	; 3
    420e:	69 2f       	mov	r22, r25
    4210:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_PIN_READ_LOGIC_LEVEL_M>
    4214:	8f 87       	std	Y+15, r24	; 0x0f
			if(PIN_LOW==buttonn)
    4216:	8f 85       	ldd	r24, Y+15	; 0x0f
    4218:	88 23       	and	r24, r24
    421a:	09 f0       	breq	.+2      	; 0x421e <keypad_read_1+0x64>
    421c:	93 c0       	rjmp	.+294    	; 0x4344 <keypad_read_1+0x18a>
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	a8 e4       	ldi	r26, 0x48	; 72
    4224:	b2 e4       	ldi	r27, 0x42	; 66
    4226:	8b 87       	std	Y+11, r24	; 0x0b
    4228:	9c 87       	std	Y+12, r25	; 0x0c
    422a:	ad 87       	std	Y+13, r26	; 0x0d
    422c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    422e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4230:	7c 85       	ldd	r23, Y+12	; 0x0c
    4232:	8d 85       	ldd	r24, Y+13	; 0x0d
    4234:	9e 85       	ldd	r25, Y+14	; 0x0e
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	4a ef       	ldi	r20, 0xFA	; 250
    423c:	54 e4       	ldi	r21, 0x44	; 68
    423e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4242:	dc 01       	movw	r26, r24
    4244:	cb 01       	movw	r24, r22
    4246:	8f 83       	std	Y+7, r24	; 0x07
    4248:	98 87       	std	Y+8, r25	; 0x08
    424a:	a9 87       	std	Y+9, r26	; 0x09
    424c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    424e:	6f 81       	ldd	r22, Y+7	; 0x07
    4250:	78 85       	ldd	r23, Y+8	; 0x08
    4252:	89 85       	ldd	r24, Y+9	; 0x09
    4254:	9a 85       	ldd	r25, Y+10	; 0x0a
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	40 e8       	ldi	r20, 0x80	; 128
    425c:	5f e3       	ldi	r21, 0x3F	; 63
    425e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4262:	88 23       	and	r24, r24
    4264:	2c f4       	brge	.+10     	; 0x4270 <keypad_read_1+0xb6>
		__ticks = 1;
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	9e 83       	std	Y+6, r25	; 0x06
    426c:	8d 83       	std	Y+5, r24	; 0x05
    426e:	3f c0       	rjmp	.+126    	; 0x42ee <keypad_read_1+0x134>
	else if (__tmp > 65535)
    4270:	6f 81       	ldd	r22, Y+7	; 0x07
    4272:	78 85       	ldd	r23, Y+8	; 0x08
    4274:	89 85       	ldd	r24, Y+9	; 0x09
    4276:	9a 85       	ldd	r25, Y+10	; 0x0a
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	3f ef       	ldi	r19, 0xFF	; 255
    427c:	4f e7       	ldi	r20, 0x7F	; 127
    427e:	57 e4       	ldi	r21, 0x47	; 71
    4280:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4284:	18 16       	cp	r1, r24
    4286:	4c f5       	brge	.+82     	; 0x42da <keypad_read_1+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4288:	6b 85       	ldd	r22, Y+11	; 0x0b
    428a:	7c 85       	ldd	r23, Y+12	; 0x0c
    428c:	8d 85       	ldd	r24, Y+13	; 0x0d
    428e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	40 e2       	ldi	r20, 0x20	; 32
    4296:	51 e4       	ldi	r21, 0x41	; 65
    4298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429c:	dc 01       	movw	r26, r24
    429e:	cb 01       	movw	r24, r22
    42a0:	bc 01       	movw	r22, r24
    42a2:	cd 01       	movw	r24, r26
    42a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a8:	dc 01       	movw	r26, r24
    42aa:	cb 01       	movw	r24, r22
    42ac:	9e 83       	std	Y+6, r25	; 0x06
    42ae:	8d 83       	std	Y+5, r24	; 0x05
    42b0:	0f c0       	rjmp	.+30     	; 0x42d0 <keypad_read_1+0x116>
    42b2:	88 ec       	ldi	r24, 0xC8	; 200
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	9c 83       	std	Y+4, r25	; 0x04
    42b8:	8b 83       	std	Y+3, r24	; 0x03
    42ba:	8b 81       	ldd	r24, Y+3	; 0x03
    42bc:	9c 81       	ldd	r25, Y+4	; 0x04
    42be:	01 97       	sbiw	r24, 0x01	; 1
    42c0:	f1 f7       	brne	.-4      	; 0x42be <keypad_read_1+0x104>
    42c2:	9c 83       	std	Y+4, r25	; 0x04
    42c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42c6:	8d 81       	ldd	r24, Y+5	; 0x05
    42c8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ca:	01 97       	sbiw	r24, 0x01	; 1
    42cc:	9e 83       	std	Y+6, r25	; 0x06
    42ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42d0:	8d 81       	ldd	r24, Y+5	; 0x05
    42d2:	9e 81       	ldd	r25, Y+6	; 0x06
    42d4:	00 97       	sbiw	r24, 0x00	; 0
    42d6:	69 f7       	brne	.-38     	; 0x42b2 <keypad_read_1+0xf8>
    42d8:	14 c0       	rjmp	.+40     	; 0x4302 <keypad_read_1+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42da:	6f 81       	ldd	r22, Y+7	; 0x07
    42dc:	78 85       	ldd	r23, Y+8	; 0x08
    42de:	89 85       	ldd	r24, Y+9	; 0x09
    42e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	9e 83       	std	Y+6, r25	; 0x06
    42ec:	8d 83       	std	Y+5, r24	; 0x05
    42ee:	8d 81       	ldd	r24, Y+5	; 0x05
    42f0:	9e 81       	ldd	r25, Y+6	; 0x06
    42f2:	9a 83       	std	Y+2, r25	; 0x02
    42f4:	89 83       	std	Y+1, r24	; 0x01
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
    42f8:	9a 81       	ldd	r25, Y+2	; 0x02
    42fa:	01 97       	sbiw	r24, 0x01	; 1
    42fc:	f1 f7       	brne	.-4      	; 0x42fa <keypad_read_1+0x140>
    42fe:	9a 83       	std	Y+2, r25	; 0x02
    4300:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    4302:	89 89       	ldd	r24, Y+17	; 0x11
    4304:	48 2f       	mov	r20, r24
    4306:	50 e0       	ldi	r21, 0x00	; 0
    4308:	88 89       	ldd	r24, Y+16	; 0x10
    430a:	28 2f       	mov	r18, r24
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	ca 01       	movw	r24, r20
    4310:	88 0f       	add	r24, r24
    4312:	99 1f       	adc	r25, r25
    4314:	88 0f       	add	r24, r24
    4316:	99 1f       	adc	r25, r25
    4318:	82 0f       	add	r24, r18
    431a:	93 1f       	adc	r25, r19
    431c:	fc 01       	movw	r30, r24
    431e:	e6 53       	subi	r30, 0x36	; 54
    4320:	fd 4f       	sbci	r31, 0xFD	; 253
    4322:	80 81       	ld	r24, Z
    4324:	ea 89       	ldd	r30, Y+18	; 0x12
    4326:	fb 89       	ldd	r31, Y+19	; 0x13
    4328:	80 83       	st	Z, r24
				DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    432a:	88 89       	ldd	r24, Y+16	; 0x10
    432c:	88 2f       	mov	r24, r24
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	fc 01       	movw	r30, r24
    4332:	ee 53       	subi	r30, 0x3E	; 62
    4334:	fd 4f       	sbci	r31, 0xFD	; 253
    4336:	90 81       	ld	r25, Z
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	69 2f       	mov	r22, r25
    433c:	41 e0       	ldi	r20, 0x01	; 1
    433e:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
    4342:	07 c0       	rjmp	.+14     	; 0x4352 <keypad_read_1+0x198>
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    4344:	89 89       	ldd	r24, Y+17	; 0x11
    4346:	8f 5f       	subi	r24, 0xFF	; 255
    4348:	89 8b       	std	Y+17, r24	; 0x11
    434a:	89 89       	ldd	r24, Y+17	; 0x11
    434c:	84 30       	cpi	r24, 0x04	; 4
    434e:	08 f4       	brcc	.+2      	; 0x4352 <keypad_read_1+0x198>
    4350:	56 cf       	rjmp	.-340    	; 0x41fe <keypad_read_1+0x44>
	u8 l_column_counter=0;

	u8 buttonn =0;
	*button_pos_=0;

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4352:	88 89       	ldd	r24, Y+16	; 0x10
    4354:	8f 5f       	subi	r24, 0xFF	; 255
    4356:	88 8b       	std	Y+16, r24	; 0x10
    4358:	88 89       	ldd	r24, Y+16	; 0x10
    435a:	84 30       	cpi	r24, 0x04	; 4
    435c:	08 f4       	brcc	.+2      	; 0x4360 <keypad_read_1+0x1a6>
    435e:	41 cf       	rjmp	.-382    	; 0x41e2 <keypad_read_1+0x28>
			}
			else
			{}
		}
	}
}
    4360:	63 96       	adiw	r28, 0x13	; 19
    4362:	0f b6       	in	r0, 0x3f	; 63
    4364:	f8 94       	cli
    4366:	de bf       	out	0x3e, r29	; 62
    4368:	0f be       	out	0x3f, r0	; 63
    436a:	cd bf       	out	0x3d, r28	; 61
    436c:	cf 91       	pop	r28
    436e:	df 91       	pop	r29
    4370:	08 95       	ret

00004372 <keypad_read_2>:

/******************/
void keypad_read_2(char *button_pos_ )
{
    4372:	df 93       	push	r29
    4374:	cf 93       	push	r28
    4376:	00 d0       	rcall	.+0      	; 0x4378 <keypad_read_2+0x6>
    4378:	00 d0       	rcall	.+0      	; 0x437a <keypad_read_2+0x8>
    437a:	00 d0       	rcall	.+0      	; 0x437c <keypad_read_2+0xa>
    437c:	cd b7       	in	r28, 0x3d	; 61
    437e:	de b7       	in	r29, 0x3e	; 62
    4380:	9e 83       	std	Y+6, r25	; 0x06
    4382:	8d 83       	std	Y+5, r24	; 0x05
	u8 l_row_counter=0;
    4384:	1c 82       	std	Y+4, r1	; 0x04
	u8 l_column_counter=0;
    4386:	1b 82       	std	Y+3, r1	; 0x03
	u8 buttonn =0;
    4388:	1a 82       	std	Y+2, r1	; 0x02
	*button_pos_=0;
    438a:	ed 81       	ldd	r30, Y+5	; 0x05
    438c:	fe 81       	ldd	r31, Y+6	; 0x06
    438e:	10 82       	st	Z, r1
	u8 flag=0;
    4390:	19 82       	std	Y+1, r1	; 0x01

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4392:	1b 82       	std	Y+3, r1	; 0x03
    4394:	4c c0       	rjmp	.+152    	; 0x442e <keypad_read_2+0xbc>
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    4396:	8b 81       	ldd	r24, Y+3	; 0x03
    4398:	88 2f       	mov	r24, r24
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	fc 01       	movw	r30, r24
    439e:	ee 53       	subi	r30, 0x3E	; 62
    43a0:	fd 4f       	sbci	r31, 0xFD	; 253
    43a2:	90 81       	ld	r25, Z
    43a4:	80 e0       	ldi	r24, 0x00	; 0
    43a6:	69 2f       	mov	r22, r25
    43a8:	40 e0       	ldi	r20, 0x00	; 0
    43aa:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    43ae:	1c 82       	std	Y+4, r1	; 0x04
    43b0:	29 c0       	rjmp	.+82     	; 0x4404 <keypad_read_2+0x92>
		{
			buttonn= DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    43b2:	8c 81       	ldd	r24, Y+4	; 0x04
    43b4:	88 2f       	mov	r24, r24
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	fc 01       	movw	r30, r24
    43ba:	ea 53       	subi	r30, 0x3A	; 58
    43bc:	fd 4f       	sbci	r31, 0xFD	; 253
    43be:	90 81       	ld	r25, Z
    43c0:	83 e0       	ldi	r24, 0x03	; 3
    43c2:	69 2f       	mov	r22, r25
    43c4:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_PIN_READ_LOGIC_LEVEL_M>
    43c8:	8a 83       	std	Y+2, r24	; 0x02
			if(PIN_LOW==buttonn)
    43ca:	8a 81       	ldd	r24, Y+2	; 0x02
    43cc:	88 23       	and	r24, r24
    43ce:	b9 f4       	brne	.+46     	; 0x43fe <keypad_read_2+0x8c>
			{
				flag=1;
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	89 83       	std	Y+1, r24	; 0x01
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    43d4:	8c 81       	ldd	r24, Y+4	; 0x04
    43d6:	48 2f       	mov	r20, r24
    43d8:	50 e0       	ldi	r21, 0x00	; 0
    43da:	8b 81       	ldd	r24, Y+3	; 0x03
    43dc:	28 2f       	mov	r18, r24
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	ca 01       	movw	r24, r20
    43e2:	88 0f       	add	r24, r24
    43e4:	99 1f       	adc	r25, r25
    43e6:	88 0f       	add	r24, r24
    43e8:	99 1f       	adc	r25, r25
    43ea:	82 0f       	add	r24, r18
    43ec:	93 1f       	adc	r25, r19
    43ee:	fc 01       	movw	r30, r24
    43f0:	e6 53       	subi	r30, 0x36	; 54
    43f2:	fd 4f       	sbci	r31, 0xFD	; 253
    43f4:	80 81       	ld	r24, Z
    43f6:	ed 81       	ldd	r30, Y+5	; 0x05
    43f8:	fe 81       	ldd	r31, Y+6	; 0x06
    43fa:	80 83       	st	Z, r24
    43fc:	06 c0       	rjmp	.+12     	; 0x440a <keypad_read_2+0x98>
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{

		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    43fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4400:	8f 5f       	subi	r24, 0xFF	; 255
    4402:	8c 83       	std	Y+4, r24	; 0x04
    4404:	8c 81       	ldd	r24, Y+4	; 0x04
    4406:	84 30       	cpi	r24, 0x04	; 4
    4408:	a0 f2       	brcs	.-88     	; 0x43b2 <keypad_read_2+0x40>
				break;
			}
			else
			{}
		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    440a:	8b 81       	ldd	r24, Y+3	; 0x03
    440c:	88 2f       	mov	r24, r24
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	fc 01       	movw	r30, r24
    4412:	ee 53       	subi	r30, 0x3E	; 62
    4414:	fd 4f       	sbci	r31, 0xFD	; 253
    4416:	90 81       	ld	r25, Z
    4418:	80 e0       	ldi	r24, 0x00	; 0
    441a:	69 2f       	mov	r22, r25
    441c:	41 e0       	ldi	r20, 0x01	; 1
    441e:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>

		if(1==flag)
    4422:	89 81       	ldd	r24, Y+1	; 0x01
    4424:	81 30       	cpi	r24, 0x01	; 1
    4426:	39 f0       	breq	.+14     	; 0x4436 <keypad_read_2+0xc4>
	u8 l_column_counter=0;
	u8 buttonn =0;
	*button_pos_=0;
	u8 flag=0;

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4428:	8b 81       	ldd	r24, Y+3	; 0x03
    442a:	8f 5f       	subi	r24, 0xFF	; 255
    442c:	8b 83       	std	Y+3, r24	; 0x03
    442e:	8b 81       	ldd	r24, Y+3	; 0x03
    4430:	84 30       	cpi	r24, 0x04	; 4
    4432:	08 f4       	brcc	.+2      	; 0x4436 <keypad_read_2+0xc4>
    4434:	b0 cf       	rjmp	.-160    	; 0x4396 <keypad_read_2+0x24>
		{
			break;
		}

	}
}
    4436:	26 96       	adiw	r28, 0x06	; 6
    4438:	0f b6       	in	r0, 0x3f	; 63
    443a:	f8 94       	cli
    443c:	de bf       	out	0x3e, r29	; 62
    443e:	0f be       	out	0x3f, r0	; 63
    4440:	cd bf       	out	0x3d, r28	; 61
    4442:	cf 91       	pop	r28
    4444:	df 91       	pop	r29
    4446:	08 95       	ret

00004448 <keypad_read_4>:

/******************/
void keypad_read_4(char *button_pos_ )
{
    4448:	df 93       	push	r29
    444a:	cf 93       	push	r28
    444c:	00 d0       	rcall	.+0      	; 0x444e <keypad_read_4+0x6>
    444e:	00 d0       	rcall	.+0      	; 0x4450 <keypad_read_4+0x8>
    4450:	0f 92       	push	r0
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62
    4456:	9d 83       	std	Y+5, r25	; 0x05
    4458:	8c 83       	std	Y+4, r24	; 0x04
	u8 l_row_counter=0;
    445a:	1b 82       	std	Y+3, r1	; 0x03
	u8 l_column_counter=0;
    445c:	1a 82       	std	Y+2, r1	; 0x02

	u8 buttonn =0;
    445e:	19 82       	std	Y+1, r1	; 0x01
	*button_pos_=0;
    4460:	ec 81       	ldd	r30, Y+4	; 0x04
    4462:	fd 81       	ldd	r31, Y+5	; 0x05
    4464:	10 82       	st	Z, r1

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4466:	1a 82       	std	Y+2, r1	; 0x02
    4468:	57 c0       	rjmp	.+174    	; 0x4518 <keypad_read_4+0xd0>
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    446a:	8a 81       	ldd	r24, Y+2	; 0x02
    446c:	88 2f       	mov	r24, r24
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	fc 01       	movw	r30, r24
    4472:	ee 53       	subi	r30, 0x3E	; 62
    4474:	fd 4f       	sbci	r31, 0xFD	; 253
    4476:	90 81       	ld	r25, Z
    4478:	80 e0       	ldi	r24, 0x00	; 0
    447a:	69 2f       	mov	r22, r25
    447c:	40 e0       	ldi	r20, 0x00	; 0
    447e:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    4482:	1b 82       	std	Y+3, r1	; 0x03
    4484:	37 c0       	rjmp	.+110    	; 0x44f4 <keypad_read_4+0xac>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    4486:	8b 81       	ldd	r24, Y+3	; 0x03
    4488:	88 2f       	mov	r24, r24
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	fc 01       	movw	r30, r24
    448e:	ea 53       	subi	r30, 0x3A	; 58
    4490:	fd 4f       	sbci	r31, 0xFD	; 253
    4492:	90 81       	ld	r25, Z
    4494:	83 e0       	ldi	r24, 0x03	; 3
    4496:	69 2f       	mov	r22, r25
    4498:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_PIN_READ_LOGIC_LEVEL_M>
    449c:	89 83       	std	Y+1, r24	; 0x01
			if(PIN_LOW==buttonn)
    449e:	89 81       	ldd	r24, Y+1	; 0x01
    44a0:	88 23       	and	r24, r24
    44a2:	29 f5       	brne	.+74     	; 0x44ee <keypad_read_4+0xa6>
    44a4:	0c c0       	rjmp	.+24     	; 0x44be <keypad_read_4+0x76>
			{
				while(PIN_LOW!=buttonn)
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    44a6:	8b 81       	ldd	r24, Y+3	; 0x03
    44a8:	88 2f       	mov	r24, r24
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	fc 01       	movw	r30, r24
    44ae:	ea 53       	subi	r30, 0x3A	; 58
    44b0:	fd 4f       	sbci	r31, 0xFD	; 253
    44b2:	90 81       	ld	r25, Z
    44b4:	83 e0       	ldi	r24, 0x03	; 3
    44b6:	69 2f       	mov	r22, r25
    44b8:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_PIN_READ_LOGIC_LEVEL_M>
    44bc:	89 83       	std	Y+1, r24	; 0x01
		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
			if(PIN_LOW==buttonn)
			{
				while(PIN_LOW!=buttonn)
    44be:	89 81       	ldd	r24, Y+1	; 0x01
    44c0:	88 23       	and	r24, r24
    44c2:	89 f7       	brne	.-30     	; 0x44a6 <keypad_read_4+0x5e>
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
				}
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    44c4:	8b 81       	ldd	r24, Y+3	; 0x03
    44c6:	48 2f       	mov	r20, r24
    44c8:	50 e0       	ldi	r21, 0x00	; 0
    44ca:	8a 81       	ldd	r24, Y+2	; 0x02
    44cc:	28 2f       	mov	r18, r24
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	ca 01       	movw	r24, r20
    44d2:	88 0f       	add	r24, r24
    44d4:	99 1f       	adc	r25, r25
    44d6:	88 0f       	add	r24, r24
    44d8:	99 1f       	adc	r25, r25
    44da:	82 0f       	add	r24, r18
    44dc:	93 1f       	adc	r25, r19
    44de:	fc 01       	movw	r30, r24
    44e0:	e6 53       	subi	r30, 0x36	; 54
    44e2:	fd 4f       	sbci	r31, 0xFD	; 253
    44e4:	80 81       	ld	r24, Z
    44e6:	ec 81       	ldd	r30, Y+4	; 0x04
    44e8:	fd 81       	ldd	r31, Y+5	; 0x05
    44ea:	80 83       	st	Z, r24
    44ec:	06 c0       	rjmp	.+12     	; 0x44fa <keypad_read_4+0xb2>

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);

		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    44ee:	8b 81       	ldd	r24, Y+3	; 0x03
    44f0:	8f 5f       	subi	r24, 0xFF	; 255
    44f2:	8b 83       	std	Y+3, r24	; 0x03
    44f4:	8b 81       	ldd	r24, Y+3	; 0x03
    44f6:	84 30       	cpi	r24, 0x04	; 4
    44f8:	30 f2       	brcs	.-116    	; 0x4486 <keypad_read_4+0x3e>
				break;
			}
			else
			{}
		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    44fa:	8a 81       	ldd	r24, Y+2	; 0x02
    44fc:	88 2f       	mov	r24, r24
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	fc 01       	movw	r30, r24
    4502:	ee 53       	subi	r30, 0x3E	; 62
    4504:	fd 4f       	sbci	r31, 0xFD	; 253
    4506:	90 81       	ld	r25, Z
    4508:	80 e0       	ldi	r24, 0x00	; 0
    450a:	69 2f       	mov	r22, r25
    450c:	41 e0       	ldi	r20, 0x01	; 1
    450e:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
	u8 l_column_counter=0;

	u8 buttonn =0;
	*button_pos_=0;

	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4512:	8a 81       	ldd	r24, Y+2	; 0x02
    4514:	8f 5f       	subi	r24, 0xFF	; 255
    4516:	8a 83       	std	Y+2, r24	; 0x02
    4518:	8a 81       	ldd	r24, Y+2	; 0x02
    451a:	84 30       	cpi	r24, 0x04	; 4
    451c:	08 f4       	brcc	.+2      	; 0x4520 <keypad_read_4+0xd8>
    451e:	a5 cf       	rjmp	.-182    	; 0x446a <keypad_read_4+0x22>
		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);

	}

}
    4520:	0f 90       	pop	r0
    4522:	0f 90       	pop	r0
    4524:	0f 90       	pop	r0
    4526:	0f 90       	pop	r0
    4528:	0f 90       	pop	r0
    452a:	cf 91       	pop	r28
    452c:	df 91       	pop	r29
    452e:	08 95       	ret

00004530 <keypad_readd>:

/************************/

/******************/
button_state_t keypad_readd(char *button_pos_ )
{
    4530:	df 93       	push	r29
    4532:	cf 93       	push	r28
    4534:	cd b7       	in	r28, 0x3d	; 61
    4536:	de b7       	in	r29, 0x3e	; 62
    4538:	27 97       	sbiw	r28, 0x07	; 7
    453a:	0f b6       	in	r0, 0x3f	; 63
    453c:	f8 94       	cli
    453e:	de bf       	out	0x3e, r29	; 62
    4540:	0f be       	out	0x3f, r0	; 63
    4542:	cd bf       	out	0x3d, r28	; 61
    4544:	9f 83       	std	Y+7, r25	; 0x07
    4546:	8e 83       	std	Y+6, r24	; 0x06
	button_state_t button_state=BUTTON_RELEASED;
    4548:	1d 82       	std	Y+5, r1	; 0x05
	u8 l_row_counter=0;
    454a:	1c 82       	std	Y+4, r1	; 0x04
	u8 l_column_counter=0;
    454c:	1b 82       	std	Y+3, r1	; 0x03

	u8 buttonn =0;
    454e:	1a 82       	std	Y+2, r1	; 0x02
	*button_pos_=0;
    4550:	ee 81       	ldd	r30, Y+6	; 0x06
    4552:	ff 81       	ldd	r31, Y+7	; 0x07
    4554:	10 82       	st	Z, r1
	u8 flag=0;
    4556:	19 82       	std	Y+1, r1	; 0x01
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4558:	1b 82       	std	Y+3, r1	; 0x03
    455a:	5f c0       	rjmp	.+190    	; 0x461a <keypad_readd+0xea>
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
    455c:	8b 81       	ldd	r24, Y+3	; 0x03
    455e:	88 2f       	mov	r24, r24
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	fc 01       	movw	r30, r24
    4564:	ee 53       	subi	r30, 0x3E	; 62
    4566:	fd 4f       	sbci	r31, 0xFD	; 253
    4568:	90 81       	ld	r25, Z
    456a:	80 e0       	ldi	r24, 0x00	; 0
    456c:	69 2f       	mov	r22, r25
    456e:	40 e0       	ldi	r20, 0x00	; 0
    4570:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    4574:	1c 82       	std	Y+4, r1	; 0x04
    4576:	3c c0       	rjmp	.+120    	; 0x45f0 <keypad_readd+0xc0>
		{
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    4578:	8c 81       	ldd	r24, Y+4	; 0x04
    457a:	88 2f       	mov	r24, r24
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	fc 01       	movw	r30, r24
    4580:	ea 53       	subi	r30, 0x3A	; 58
    4582:	fd 4f       	sbci	r31, 0xFD	; 253
    4584:	90 81       	ld	r25, Z
    4586:	83 e0       	ldi	r24, 0x03	; 3
    4588:	69 2f       	mov	r22, r25
    458a:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_PIN_READ_LOGIC_LEVEL_M>
    458e:	8a 83       	std	Y+2, r24	; 0x02
			if(0==buttonn)
    4590:	8a 81       	ldd	r24, Y+2	; 0x02
    4592:	88 23       	and	r24, r24
    4594:	49 f5       	brne	.+82     	; 0x45e8 <keypad_readd+0xb8>
			{
				button_state=BUTTON_PRESSED;
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	8d 83       	std	Y+5, r24	; 0x05
				flag=1;
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	89 83       	std	Y+1, r24	; 0x01
    459e:	0c c0       	rjmp	.+24     	; 0x45b8 <keypad_readd+0x88>
				while(0==buttonn)
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
    45a0:	8c 81       	ldd	r24, Y+4	; 0x04
    45a2:	88 2f       	mov	r24, r24
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	fc 01       	movw	r30, r24
    45a8:	ea 53       	subi	r30, 0x3A	; 58
    45aa:	fd 4f       	sbci	r31, 0xFD	; 253
    45ac:	90 81       	ld	r25, Z
    45ae:	83 e0       	ldi	r24, 0x03	; 3
    45b0:	69 2f       	mov	r22, r25
    45b2:	0e 94 a0 13 	call	0x2740	; 0x2740 <DIO_PIN_READ_LOGIC_LEVEL_M>
    45b6:	8a 83       	std	Y+2, r24	; 0x02
			buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
			if(0==buttonn)
			{
				button_state=BUTTON_PRESSED;
				flag=1;
				while(0==buttonn)
    45b8:	8a 81       	ldd	r24, Y+2	; 0x02
    45ba:	88 23       	and	r24, r24
    45bc:	89 f3       	breq	.-30     	; 0x45a0 <keypad_readd+0x70>
				{
					buttonn=DIO_PIN_READ_LOGIC_LEVEL_M(keypad_rows_PORT,row_port_pins[l_row_counter]);
				}
				*button_pos_=button_pos[l_row_counter][l_column_counter];
    45be:	8c 81       	ldd	r24, Y+4	; 0x04
    45c0:	48 2f       	mov	r20, r24
    45c2:	50 e0       	ldi	r21, 0x00	; 0
    45c4:	8b 81       	ldd	r24, Y+3	; 0x03
    45c6:	28 2f       	mov	r18, r24
    45c8:	30 e0       	ldi	r19, 0x00	; 0
    45ca:	ca 01       	movw	r24, r20
    45cc:	88 0f       	add	r24, r24
    45ce:	99 1f       	adc	r25, r25
    45d0:	88 0f       	add	r24, r24
    45d2:	99 1f       	adc	r25, r25
    45d4:	82 0f       	add	r24, r18
    45d6:	93 1f       	adc	r25, r19
    45d8:	fc 01       	movw	r30, r24
    45da:	e6 53       	subi	r30, 0x36	; 54
    45dc:	fd 4f       	sbci	r31, 0xFD	; 253
    45de:	80 81       	ld	r24, Z
    45e0:	ee 81       	ldd	r30, Y+6	; 0x06
    45e2:	ff 81       	ldd	r31, Y+7	; 0x07
    45e4:	80 83       	st	Z, r24
    45e6:	07 c0       	rjmp	.+14     	; 0x45f6 <keypad_readd+0xc6>
				break;
			}
			else
			{ button_state=BUTTON_RELEASED;}
    45e8:	1d 82       	std	Y+5, r1	; 0x05
	*button_pos_=0;
	u8 flag=0;
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
	{
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_LOW);
		for(l_row_counter=0 ; l_row_counter<keypad_rows;l_row_counter++)
    45ea:	8c 81       	ldd	r24, Y+4	; 0x04
    45ec:	8f 5f       	subi	r24, 0xFF	; 255
    45ee:	8c 83       	std	Y+4, r24	; 0x04
    45f0:	8c 81       	ldd	r24, Y+4	; 0x04
    45f2:	84 30       	cpi	r24, 0x04	; 4
    45f4:	08 f2       	brcs	.-126    	; 0x4578 <keypad_readd+0x48>
			}
			else
			{ button_state=BUTTON_RELEASED;}

		}
		DIO_PIN_WRITE_LOGIC_M(keypad_columns_PORT,column_port_pins[l_column_counter],PIN_HIGH);
    45f6:	8b 81       	ldd	r24, Y+3	; 0x03
    45f8:	88 2f       	mov	r24, r24
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	fc 01       	movw	r30, r24
    45fe:	ee 53       	subi	r30, 0x3E	; 62
    4600:	fd 4f       	sbci	r31, 0xFD	; 253
    4602:	90 81       	ld	r25, Z
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	69 2f       	mov	r22, r25
    4608:	41 e0       	ldi	r20, 0x01	; 1
    460a:	0e 94 27 11 	call	0x224e	; 0x224e <DIO_PIN_WRITE_LOGIC_M>
		if(1==flag)
    460e:	89 81       	ldd	r24, Y+1	; 0x01
    4610:	81 30       	cpi	r24, 0x01	; 1
    4612:	39 f0       	breq	.+14     	; 0x4622 <keypad_readd+0xf2>
	u8 l_column_counter=0;

	u8 buttonn =0;
	*button_pos_=0;
	u8 flag=0;
	for(l_column_counter=0 ;l_column_counter<keypad_columns;l_column_counter++)
    4614:	8b 81       	ldd	r24, Y+3	; 0x03
    4616:	8f 5f       	subi	r24, 0xFF	; 255
    4618:	8b 83       	std	Y+3, r24	; 0x03
    461a:	8b 81       	ldd	r24, Y+3	; 0x03
    461c:	84 30       	cpi	r24, 0x04	; 4
    461e:	08 f4       	brcc	.+2      	; 0x4622 <keypad_readd+0xf2>
    4620:	9d cf       	rjmp	.-198    	; 0x455c <keypad_readd+0x2c>

			break;
		}
	}

	return button_state;
    4622:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4624:	27 96       	adiw	r28, 0x07	; 7
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	f8 94       	cli
    462a:	de bf       	out	0x3e, r29	; 62
    462c:	0f be       	out	0x3f, r0	; 63
    462e:	cd bf       	out	0x3d, r28	; 61
    4630:	cf 91       	pop	r28
    4632:	df 91       	pop	r29
    4634:	08 95       	ret

00004636 <HEEPROM_WRITE>:
#include"HAL_EEPROM_INT.h"



void HEEPROM_WRITE(u8 data,u8 address)
{
    4636:	df 93       	push	r29
    4638:	cf 93       	push	r28
    463a:	00 d0       	rcall	.+0      	; 0x463c <HEEPROM_WRITE+0x6>
    463c:	cd b7       	in	r28, 0x3d	; 61
    463e:	de b7       	in	r29, 0x3e	; 62
    4640:	89 83       	std	Y+1, r24	; 0x01
    4642:	6a 83       	std	Y+2, r22	; 0x02
 I2C_START();
    4644:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <I2C_START>
 /*slave address with write*/

 I2C_WRITE(0xA0);
    4648:	80 ea       	ldi	r24, 0xA0	; 160
    464a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <I2C_WRITE>
 /*send memory LOCATION*/

 I2C_WRITE(address);
    464e:	8a 81       	ldd	r24, Y+2	; 0x02
    4650:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <I2C_WRITE>

 I2C_WRITE(data);
    4654:	89 81       	ldd	r24, Y+1	; 0x01
    4656:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <I2C_WRITE>

 I2C_STOP();
    465a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <I2C_STOP>
}
    465e:	0f 90       	pop	r0
    4660:	0f 90       	pop	r0
    4662:	cf 91       	pop	r28
    4664:	df 91       	pop	r29
    4666:	08 95       	ret

00004668 <HEEPROM_WRITE_STRING>:
/**************************************/
void HEEPROM_WRITE_STRING(u8 *user,u8 user_length,u8 s_address)
{
    4668:	df 93       	push	r29
    466a:	cf 93       	push	r28
    466c:	cd b7       	in	r28, 0x3d	; 61
    466e:	de b7       	in	r29, 0x3e	; 62
    4670:	64 97       	sbiw	r28, 0x14	; 20
    4672:	0f b6       	in	r0, 0x3f	; 63
    4674:	f8 94       	cli
    4676:	de bf       	out	0x3e, r29	; 62
    4678:	0f be       	out	0x3f, r0	; 63
    467a:	cd bf       	out	0x3d, r28	; 61
    467c:	9a 8b       	std	Y+18, r25	; 0x12
    467e:	89 8b       	std	Y+17, r24	; 0x11
    4680:	6b 8b       	std	Y+19, r22	; 0x13
    4682:	4c 8b       	std	Y+20, r20	; 0x14
 int i=0;
    4684:	18 8a       	std	Y+16, r1	; 0x10
    4686:	1f 86       	std	Y+15, r1	; 0x0f
  for(i=0;i<user_length;i++)
    4688:	18 8a       	std	Y+16, r1	; 0x10
    468a:	1f 86       	std	Y+15, r1	; 0x0f
    468c:	89 c0       	rjmp	.+274    	; 0x47a0 <HEEPROM_WRITE_STRING+0x138>
  {
	  HEEPROM_WRITE(user[i]-'0',s_address++);
    468e:	2f 85       	ldd	r18, Y+15	; 0x0f
    4690:	38 89       	ldd	r19, Y+16	; 0x10
    4692:	89 89       	ldd	r24, Y+17	; 0x11
    4694:	9a 89       	ldd	r25, Y+18	; 0x12
    4696:	fc 01       	movw	r30, r24
    4698:	e2 0f       	add	r30, r18
    469a:	f3 1f       	adc	r31, r19
    469c:	80 81       	ld	r24, Z
    469e:	98 2f       	mov	r25, r24
    46a0:	90 53       	subi	r25, 0x30	; 48
    46a2:	2c 89       	ldd	r18, Y+20	; 0x14
    46a4:	8c 89       	ldd	r24, Y+20	; 0x14
    46a6:	8f 5f       	subi	r24, 0xFF	; 255
    46a8:	8c 8b       	std	Y+20, r24	; 0x14
    46aa:	89 2f       	mov	r24, r25
    46ac:	62 2f       	mov	r22, r18
    46ae:	0e 94 1b 23 	call	0x4636	; 0x4636 <HEEPROM_WRITE>
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	a8 ec       	ldi	r26, 0xC8	; 200
    46b8:	b2 e4       	ldi	r27, 0x42	; 66
    46ba:	8b 87       	std	Y+11, r24	; 0x0b
    46bc:	9c 87       	std	Y+12, r25	; 0x0c
    46be:	ad 87       	std	Y+13, r26	; 0x0d
    46c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    46c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    46c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    46c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	4a ef       	ldi	r20, 0xFA	; 250
    46d0:	54 e4       	ldi	r21, 0x44	; 68
    46d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	8f 83       	std	Y+7, r24	; 0x07
    46dc:	98 87       	std	Y+8, r25	; 0x08
    46de:	a9 87       	std	Y+9, r26	; 0x09
    46e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46e2:	6f 81       	ldd	r22, Y+7	; 0x07
    46e4:	78 85       	ldd	r23, Y+8	; 0x08
    46e6:	89 85       	ldd	r24, Y+9	; 0x09
    46e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ea:	20 e0       	ldi	r18, 0x00	; 0
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	40 e8       	ldi	r20, 0x80	; 128
    46f0:	5f e3       	ldi	r21, 0x3F	; 63
    46f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46f6:	88 23       	and	r24, r24
    46f8:	2c f4       	brge	.+10     	; 0x4704 <HEEPROM_WRITE_STRING+0x9c>
		__ticks = 1;
    46fa:	81 e0       	ldi	r24, 0x01	; 1
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	9e 83       	std	Y+6, r25	; 0x06
    4700:	8d 83       	std	Y+5, r24	; 0x05
    4702:	3f c0       	rjmp	.+126    	; 0x4782 <HEEPROM_WRITE_STRING+0x11a>
	else if (__tmp > 65535)
    4704:	6f 81       	ldd	r22, Y+7	; 0x07
    4706:	78 85       	ldd	r23, Y+8	; 0x08
    4708:	89 85       	ldd	r24, Y+9	; 0x09
    470a:	9a 85       	ldd	r25, Y+10	; 0x0a
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	3f ef       	ldi	r19, 0xFF	; 255
    4710:	4f e7       	ldi	r20, 0x7F	; 127
    4712:	57 e4       	ldi	r21, 0x47	; 71
    4714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4718:	18 16       	cp	r1, r24
    471a:	4c f5       	brge	.+82     	; 0x476e <HEEPROM_WRITE_STRING+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    471c:	6b 85       	ldd	r22, Y+11	; 0x0b
    471e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4720:	8d 85       	ldd	r24, Y+13	; 0x0d
    4722:	9e 85       	ldd	r25, Y+14	; 0x0e
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	40 e2       	ldi	r20, 0x20	; 32
    472a:	51 e4       	ldi	r21, 0x41	; 65
    472c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4730:	dc 01       	movw	r26, r24
    4732:	cb 01       	movw	r24, r22
    4734:	bc 01       	movw	r22, r24
    4736:	cd 01       	movw	r24, r26
    4738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    473c:	dc 01       	movw	r26, r24
    473e:	cb 01       	movw	r24, r22
    4740:	9e 83       	std	Y+6, r25	; 0x06
    4742:	8d 83       	std	Y+5, r24	; 0x05
    4744:	0f c0       	rjmp	.+30     	; 0x4764 <HEEPROM_WRITE_STRING+0xfc>
    4746:	88 ec       	ldi	r24, 0xC8	; 200
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	9c 83       	std	Y+4, r25	; 0x04
    474c:	8b 83       	std	Y+3, r24	; 0x03
    474e:	8b 81       	ldd	r24, Y+3	; 0x03
    4750:	9c 81       	ldd	r25, Y+4	; 0x04
    4752:	01 97       	sbiw	r24, 0x01	; 1
    4754:	f1 f7       	brne	.-4      	; 0x4752 <HEEPROM_WRITE_STRING+0xea>
    4756:	9c 83       	std	Y+4, r25	; 0x04
    4758:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    475a:	8d 81       	ldd	r24, Y+5	; 0x05
    475c:	9e 81       	ldd	r25, Y+6	; 0x06
    475e:	01 97       	sbiw	r24, 0x01	; 1
    4760:	9e 83       	std	Y+6, r25	; 0x06
    4762:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4764:	8d 81       	ldd	r24, Y+5	; 0x05
    4766:	9e 81       	ldd	r25, Y+6	; 0x06
    4768:	00 97       	sbiw	r24, 0x00	; 0
    476a:	69 f7       	brne	.-38     	; 0x4746 <HEEPROM_WRITE_STRING+0xde>
    476c:	14 c0       	rjmp	.+40     	; 0x4796 <HEEPROM_WRITE_STRING+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    476e:	6f 81       	ldd	r22, Y+7	; 0x07
    4770:	78 85       	ldd	r23, Y+8	; 0x08
    4772:	89 85       	ldd	r24, Y+9	; 0x09
    4774:	9a 85       	ldd	r25, Y+10	; 0x0a
    4776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    477a:	dc 01       	movw	r26, r24
    477c:	cb 01       	movw	r24, r22
    477e:	9e 83       	std	Y+6, r25	; 0x06
    4780:	8d 83       	std	Y+5, r24	; 0x05
    4782:	8d 81       	ldd	r24, Y+5	; 0x05
    4784:	9e 81       	ldd	r25, Y+6	; 0x06
    4786:	9a 83       	std	Y+2, r25	; 0x02
    4788:	89 83       	std	Y+1, r24	; 0x01
    478a:	89 81       	ldd	r24, Y+1	; 0x01
    478c:	9a 81       	ldd	r25, Y+2	; 0x02
    478e:	01 97       	sbiw	r24, 0x01	; 1
    4790:	f1 f7       	brne	.-4      	; 0x478e <HEEPROM_WRITE_STRING+0x126>
    4792:	9a 83       	std	Y+2, r25	; 0x02
    4794:	89 83       	std	Y+1, r24	; 0x01
}
/**************************************/
void HEEPROM_WRITE_STRING(u8 *user,u8 user_length,u8 s_address)
{
 int i=0;
  for(i=0;i<user_length;i++)
    4796:	8f 85       	ldd	r24, Y+15	; 0x0f
    4798:	98 89       	ldd	r25, Y+16	; 0x10
    479a:	01 96       	adiw	r24, 0x01	; 1
    479c:	98 8b       	std	Y+16, r25	; 0x10
    479e:	8f 87       	std	Y+15, r24	; 0x0f
    47a0:	8b 89       	ldd	r24, Y+19	; 0x13
    47a2:	28 2f       	mov	r18, r24
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    47a8:	98 89       	ldd	r25, Y+16	; 0x10
    47aa:	82 17       	cp	r24, r18
    47ac:	93 07       	cpc	r25, r19
    47ae:	0c f4       	brge	.+2      	; 0x47b2 <HEEPROM_WRITE_STRING+0x14a>
    47b0:	6e cf       	rjmp	.-292    	; 0x468e <HEEPROM_WRITE_STRING+0x26>
  {
	  HEEPROM_WRITE(user[i]-'0',s_address++);
	  _delay_ms(100);
  }

}
    47b2:	64 96       	adiw	r28, 0x14	; 20
    47b4:	0f b6       	in	r0, 0x3f	; 63
    47b6:	f8 94       	cli
    47b8:	de bf       	out	0x3e, r29	; 62
    47ba:	0f be       	out	0x3f, r0	; 63
    47bc:	cd bf       	out	0x3d, r28	; 61
    47be:	cf 91       	pop	r28
    47c0:	df 91       	pop	r29
    47c2:	08 95       	ret

000047c4 <HEEPROM_READ_STRING>:
/**************************************/
void HEEPROM_READ_STRING(u8 *user,u8 user_length,u8 s_address)
{
    47c4:	df 93       	push	r29
    47c6:	cf 93       	push	r28
    47c8:	00 d0       	rcall	.+0      	; 0x47ca <HEEPROM_READ_STRING+0x6>
    47ca:	00 d0       	rcall	.+0      	; 0x47cc <HEEPROM_READ_STRING+0x8>
    47cc:	00 d0       	rcall	.+0      	; 0x47ce <HEEPROM_READ_STRING+0xa>
    47ce:	cd b7       	in	r28, 0x3d	; 61
    47d0:	de b7       	in	r29, 0x3e	; 62
    47d2:	9c 83       	std	Y+4, r25	; 0x04
    47d4:	8b 83       	std	Y+3, r24	; 0x03
    47d6:	6d 83       	std	Y+5, r22	; 0x05
    47d8:	4e 83       	std	Y+6, r20	; 0x06
 int i=0;
    47da:	1a 82       	std	Y+2, r1	; 0x02
    47dc:	19 82       	std	Y+1, r1	; 0x01
  for(i=0;i<user_length;i++)
    47de:	1a 82       	std	Y+2, r1	; 0x02
    47e0:	19 82       	std	Y+1, r1	; 0x01
    47e2:	13 c0       	rjmp	.+38     	; 0x480a <HEEPROM_READ_STRING+0x46>
  {
	  HEEPROM_READ(s_address+i,&user[i]);
    47e4:	99 81       	ldd	r25, Y+1	; 0x01
    47e6:	8e 81       	ldd	r24, Y+6	; 0x06
    47e8:	49 2f       	mov	r20, r25
    47ea:	48 0f       	add	r20, r24
    47ec:	29 81       	ldd	r18, Y+1	; 0x01
    47ee:	3a 81       	ldd	r19, Y+2	; 0x02
    47f0:	8b 81       	ldd	r24, Y+3	; 0x03
    47f2:	9c 81       	ldd	r25, Y+4	; 0x04
    47f4:	28 0f       	add	r18, r24
    47f6:	39 1f       	adc	r19, r25
    47f8:	84 2f       	mov	r24, r20
    47fa:	b9 01       	movw	r22, r18
    47fc:	0e 94 16 24 	call	0x482c	; 0x482c <HEEPROM_READ>
}
/**************************************/
void HEEPROM_READ_STRING(u8 *user,u8 user_length,u8 s_address)
{
 int i=0;
  for(i=0;i<user_length;i++)
    4800:	89 81       	ldd	r24, Y+1	; 0x01
    4802:	9a 81       	ldd	r25, Y+2	; 0x02
    4804:	01 96       	adiw	r24, 0x01	; 1
    4806:	9a 83       	std	Y+2, r25	; 0x02
    4808:	89 83       	std	Y+1, r24	; 0x01
    480a:	8d 81       	ldd	r24, Y+5	; 0x05
    480c:	28 2f       	mov	r18, r24
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	89 81       	ldd	r24, Y+1	; 0x01
    4812:	9a 81       	ldd	r25, Y+2	; 0x02
    4814:	82 17       	cp	r24, r18
    4816:	93 07       	cpc	r25, r19
    4818:	2c f3       	brlt	.-54     	; 0x47e4 <HEEPROM_READ_STRING+0x20>
  {
	  HEEPROM_READ(s_address+i,&user[i]);
  }

}
    481a:	26 96       	adiw	r28, 0x06	; 6
    481c:	0f b6       	in	r0, 0x3f	; 63
    481e:	f8 94       	cli
    4820:	de bf       	out	0x3e, r29	; 62
    4822:	0f be       	out	0x3f, r0	; 63
    4824:	cd bf       	out	0x3d, r28	; 61
    4826:	cf 91       	pop	r28
    4828:	df 91       	pop	r29
    482a:	08 95       	ret

0000482c <HEEPROM_READ>:
/*************************************/
void HEEPROM_READ(u8 Address,u8 *data)
{
    482c:	df 93       	push	r29
    482e:	cf 93       	push	r28
    4830:	00 d0       	rcall	.+0      	; 0x4832 <HEEPROM_READ+0x6>
    4832:	0f 92       	push	r0
    4834:	cd b7       	in	r28, 0x3d	; 61
    4836:	de b7       	in	r29, 0x3e	; 62
    4838:	89 83       	std	Y+1, r24	; 0x01
    483a:	7b 83       	std	Y+3, r23	; 0x03
    483c:	6a 83       	std	Y+2, r22	; 0x02
	 I2C_START();
    483e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <I2C_START>
	 /*slave address with write*/
	 I2C_WRITE(0xA0);
    4842:	80 ea       	ldi	r24, 0xA0	; 160
    4844:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <I2C_WRITE>
	 /*send memory LOCATION*/
	 I2C_WRITE(Address);
    4848:	89 81       	ldd	r24, Y+1	; 0x01
    484a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <I2C_WRITE>
	 I2C_START();
    484e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <I2C_START>
	 /*slave address with Read*/
	 I2C_WRITE(0xA1);
    4852:	81 ea       	ldi	r24, 0xA1	; 161
    4854:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <I2C_WRITE>
	 /*master read*/
	 *data=I2C_READ_WITH_ACK();
    4858:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <I2C_READ_WITH_ACK>
    485c:	ea 81       	ldd	r30, Y+2	; 0x02
    485e:	fb 81       	ldd	r31, Y+3	; 0x03
    4860:	80 83       	st	Z, r24
	 I2C_STOP();
    4862:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <I2C_STOP>

}
    4866:	0f 90       	pop	r0
    4868:	0f 90       	pop	r0
    486a:	0f 90       	pop	r0
    486c:	cf 91       	pop	r28
    486e:	df 91       	pop	r29
    4870:	08 95       	ret

00004872 <main>:
void READ_LDR(void);
u8 GET_NEW_USER(void);
u8 GET_NEW_PASS(void);
/**********FUNCTION DECLERATION*********/
int main()
{
    4872:	df 93       	push	r29
    4874:	cf 93       	push	r28
    4876:	cd b7       	in	r28, 0x3d	; 61
    4878:	de b7       	in	r29, 0x3e	; 62
	PORT_DIRECTION_INIT();
    487a:	0e 94 9b 14 	call	0x2936	; 0x2936 <PORT_DIRECTION_INIT>
	PORT_LOGICLEVEL_INIT();
    487e:	0e 94 b2 14 	call	0x2964	; 0x2964 <PORT_LOGICLEVEL_INIT>
	RTOS_INIT();
    4882:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <RTOS_INIT>
	HLCD_INIT_8bit();
    4886:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <HLCD_INIT_8bit>
	I2C_INIT(NULL);
    488a:	80 e0       	ldi	r24, 0x00	; 0
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <I2C_INIT>
	MUART_INIT(NULL,NULL,NULL);
    4892:	80 e0       	ldi	r24, 0x00	; 0
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	60 e0       	ldi	r22, 0x00	; 0
    4898:	70 e0       	ldi	r23, 0x00	; 0
    489a:	40 e0       	ldi	r20, 0x00	; 0
    489c:	50 e0       	ldi	r21, 0x00	; 0
    489e:	0e 94 05 09 	call	0x120a	; 0x120a <MUART_INIT>
	MADC_voidInit();
    48a2:	0e 94 c7 14 	call	0x298e	; 0x298e <MADC_voidInit>
	SET_DEFAULT_USER_PASS();
    48a6:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <SET_DEFAULT_USER_PASS>
	HEEPROM_READ(0xFF,&number_Of_user);
    48aa:	20 e2       	ldi	r18, 0x20	; 32
    48ac:	33 e0       	ldi	r19, 0x03	; 3
    48ae:	8f ef       	ldi	r24, 0xFF	; 255
    48b0:	b9 01       	movw	r22, r18
    48b2:	0e 94 16 24 	call	0x482c	; 0x482c <HEEPROM_READ>
	IDLE_FRAME();
    48b6:	0e 94 6e 27 	call	0x4edc	; 0x4edc <IDLE_FRAME>

	while(1)
	{
		kp_state=keypad_readd(&kp_val);
    48ba:	8f e0       	ldi	r24, 0x0F	; 15
    48bc:	93 e0       	ldi	r25, 0x03	; 3
    48be:	0e 94 98 22 	call	0x4530	; 0x4530 <keypad_readd>
    48c2:	80 93 30 03 	sts	0x0330, r24
		if(BUTTON_PRESSED==kp_state)
    48c6:	80 91 30 03 	lds	r24, 0x0330
    48ca:	81 30       	cpi	r24, 0x01	; 1
    48cc:	09 f0       	breq	.+2      	; 0x48d0 <main+0x5e>
    48ce:	96 c0       	rjmp	.+300    	; 0x49fc <main+0x18a>
		{
			if(entry==0)
    48d0:	80 91 21 03 	lds	r24, 0x0321
    48d4:	90 91 22 03 	lds	r25, 0x0322
    48d8:	00 97       	sbiw	r24, 0x00	; 0
    48da:	49 f4       	brne	.+18     	; 0x48ee <main+0x7c>
			{
				IDLE_STATE();
    48dc:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <IDLE_STATE>
				entry=1;
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	90 93 22 03 	sts	0x0322, r25
    48e8:	80 93 21 03 	sts	0x0321, r24
    48ec:	e6 cf       	rjmp	.-52     	; 0x48ba <main+0x48>
			}
			else if(entry==1)/*else if we are not in entry mode*/
    48ee:	80 91 21 03 	lds	r24, 0x0321
    48f2:	90 91 22 03 	lds	r25, 0x0322
    48f6:	81 30       	cpi	r24, 0x01	; 1
    48f8:	91 05       	cpc	r25, r1
    48fa:	f9 f6       	brne	.-66     	; 0x48ba <main+0x48>
			{
				if(OPEN_CHANGE_FLAG==1) // Open System
    48fc:	80 91 23 03 	lds	r24, 0x0323
    4900:	90 91 24 03 	lds	r25, 0x0324
    4904:	81 30       	cpi	r24, 0x01	; 1
    4906:	91 05       	cpc	r25, r1
    4908:	d9 f4       	brne	.+54     	; 0x4940 <main+0xce>
				{
					if(SIGN_STATE==ENTER_USER)
    490a:	80 91 da 02 	lds	r24, 0x02DA
    490e:	84 30       	cpi	r24, 0x04	; 4
    4910:	31 f4       	brne	.+12     	; 0x491e <main+0xac>
					{
						SIGN_STATE=GET_ACCOUNT(USER);
    4912:	81 e0       	ldi	r24, 0x01	; 1
    4914:	0e 94 c8 28 	call	0x5190	; 0x5190 <GET_ACCOUNT>
    4918:	80 93 da 02 	sts	0x02DA, r24
    491c:	ce cf       	rjmp	.-100    	; 0x48ba <main+0x48>
					}
					else if(SIGN_STATE==ENTER_PASSWORD)
    491e:	80 91 da 02 	lds	r24, 0x02DA
    4922:	86 30       	cpi	r24, 0x06	; 6
    4924:	51 f6       	brne	.-108    	; 0x48ba <main+0x48>
					{
						SIGN_STATE=GET_ACCOUNT(PASS);
    4926:	82 e0       	ldi	r24, 0x02	; 2
    4928:	0e 94 c8 28 	call	0x5190	; 0x5190 <GET_ACCOUNT>
    492c:	80 93 da 02 	sts	0x02DA, r24
						if(SIGN_STATE==SYS_OPENED)
    4930:	80 91 da 02 	lds	r24, 0x02DA
    4934:	87 30       	cpi	r24, 0x07	; 7
    4936:	09 f6       	brne	.-126    	; 0x48ba <main+0x48>
						{
							SIGN_STATE=SYSTEM_STARTED;
    4938:	8a e0       	ldi	r24, 0x0A	; 10
    493a:	80 93 da 02 	sts	0x02DA, r24
    493e:	bd cf       	rjmp	.-134    	; 0x48ba <main+0x48>
						}
					}
				}
				else if(OPEN_CHANGE_FLAG==2) // change password
    4940:	80 91 23 03 	lds	r24, 0x0323
    4944:	90 91 24 03 	lds	r25, 0x0324
    4948:	82 30       	cpi	r24, 0x02	; 2
    494a:	91 05       	cpc	r25, r1
    494c:	e1 f5       	brne	.+120    	; 0x49c6 <main+0x154>
				{
					if(SIGN_STATE==ENTER_USER)
    494e:	80 91 da 02 	lds	r24, 0x02DA
    4952:	84 30       	cpi	r24, 0x04	; 4
    4954:	31 f4       	brne	.+12     	; 0x4962 <main+0xf0>
					{
						SIGN_STATE=GET_ACCOUNT(USER);
    4956:	81 e0       	ldi	r24, 0x01	; 1
    4958:	0e 94 c8 28 	call	0x5190	; 0x5190 <GET_ACCOUNT>
    495c:	80 93 da 02 	sts	0x02DA, r24
    4960:	ac cf       	rjmp	.-168    	; 0x48ba <main+0x48>
					}
					else if(SIGN_STATE==ENTER_PASSWORD)
    4962:	80 91 da 02 	lds	r24, 0x02DA
    4966:	86 30       	cpi	r24, 0x06	; 6
    4968:	69 f4       	brne	.+26     	; 0x4984 <main+0x112>
					{
						SIGN_STATE=GET_ACCOUNT(PASS);
    496a:	82 e0       	ldi	r24, 0x02	; 2
    496c:	0e 94 c8 28 	call	0x5190	; 0x5190 <GET_ACCOUNT>
    4970:	80 93 da 02 	sts	0x02DA, r24
						if(SIGN_STATE==SYS_OPENED)
    4974:	80 91 da 02 	lds	r24, 0x02DA
    4978:	87 30       	cpi	r24, 0x07	; 7
    497a:	09 f0       	breq	.+2      	; 0x497e <main+0x10c>
    497c:	9e cf       	rjmp	.-196    	; 0x48ba <main+0x48>
						{
							ENTER_NEW_PASS_FRAME();
    497e:	0e 94 96 28 	call	0x512c	; 0x512c <ENTER_NEW_PASS_FRAME>
    4982:	9b cf       	rjmp	.-202    	; 0x48ba <main+0x48>
						}
					}
					else if(SIGN_STATE==SYS_OPENED)
    4984:	80 91 da 02 	lds	r24, 0x02DA
    4988:	87 30       	cpi	r24, 0x07	; 7
    498a:	09 f0       	breq	.+2      	; 0x498e <main+0x11c>
    498c:	96 cf       	rjmp	.-212    	; 0x48ba <main+0x48>
					{
						SIGN_STATE=CHANGE_PASSWORD();
    498e:	0e 94 35 29 	call	0x526a	; 0x526a <CHANGE_PASSWORD>
    4992:	80 93 da 02 	sts	0x02DA, r24
						if(SIGN_STATE==PASSWORD_CHANGED)
    4996:	80 91 da 02 	lds	r24, 0x02DA
    499a:	89 30       	cpi	r24, 0x09	; 9
    499c:	09 f0       	breq	.+2      	; 0x49a0 <main+0x12e>
    499e:	8d cf       	rjmp	.-230    	; 0x48ba <main+0x48>
						{
							OPEN_CHANGE_FLAG=0;
    49a0:	10 92 24 03 	sts	0x0324, r1
    49a4:	10 92 23 03 	sts	0x0323, r1
							entry=0;
    49a8:	10 92 22 03 	sts	0x0322, r1
    49ac:	10 92 21 03 	sts	0x0321, r1
							kp_val=0;
    49b0:	10 92 0f 03 	sts	0x030F, r1
							SIGN_STATE=ENTER_USER;
    49b4:	84 e0       	ldi	r24, 0x04	; 4
    49b6:	80 93 da 02 	sts	0x02DA, r24
							HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
							IDLE_FRAME();
    49c0:	0e 94 6e 27 	call	0x4edc	; 0x4edc <IDLE_FRAME>
    49c4:	7a cf       	rjmp	.-268    	; 0x48ba <main+0x48>
						}
					}
					else{}
				}
				else if(OPEN_CHANGE_FLAG==3)//add user
    49c6:	80 91 23 03 	lds	r24, 0x0323
    49ca:	90 91 24 03 	lds	r25, 0x0324
    49ce:	83 30       	cpi	r24, 0x03	; 3
    49d0:	91 05       	cpc	r25, r1
    49d2:	09 f0       	breq	.+2      	; 0x49d6 <main+0x164>
    49d4:	72 cf       	rjmp	.-284    	; 0x48ba <main+0x48>
				{
					if(SIGN_STATE==ENTER_USER)
    49d6:	80 91 da 02 	lds	r24, 0x02DA
    49da:	84 30       	cpi	r24, 0x04	; 4
    49dc:	29 f4       	brne	.+10     	; 0x49e8 <main+0x176>
					{
						SIGN_STATE=GET_NEW_USER();
    49de:	0e 94 ba 30 	call	0x6174	; 0x6174 <GET_NEW_USER>
    49e2:	80 93 da 02 	sts	0x02DA, r24
    49e6:	69 cf       	rjmp	.-302    	; 0x48ba <main+0x48>
					}
					else if(USER_SETTED==SIGN_STATE)
    49e8:	80 91 da 02 	lds	r24, 0x02DA
    49ec:	8c 30       	cpi	r24, 0x0C	; 12
    49ee:	09 f0       	breq	.+2      	; 0x49f2 <main+0x180>
    49f0:	64 cf       	rjmp	.-312    	; 0x48ba <main+0x48>
					{
						SIGN_STATE=GET_NEW_PASS();
    49f2:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <GET_NEW_PASS>
    49f6:	80 93 da 02 	sts	0x02DA, r24
    49fa:	5f cf       	rjmp	.-322    	; 0x48ba <main+0x48>
				}
			}
			else{
			}
		}
		else if((BUTTON_RELEASED==kp_state)&&(SYSTEM_STARTED==SIGN_STATE))
    49fc:	80 91 30 03 	lds	r24, 0x0330
    4a00:	88 23       	and	r24, r24
    4a02:	09 f0       	breq	.+2      	; 0x4a06 <main+0x194>
    4a04:	5a cf       	rjmp	.-332    	; 0x48ba <main+0x48>
    4a06:	80 91 da 02 	lds	r24, 0x02DA
    4a0a:	8a 30       	cpi	r24, 0x0A	; 10
    4a0c:	09 f0       	breq	.+2      	; 0x4a10 <main+0x19e>
    4a0e:	55 cf       	rjmp	.-342    	; 0x48ba <main+0x48>
		{


			RTOS_START();
    4a10:	0e 94 00 08 	call	0x1000	; 0x1000 <RTOS_START>
    4a14:	52 cf       	rjmp	.-348    	; 0x48ba <main+0x48>

00004a16 <COMPARE_USER>:
	}
}
/**********************************************************/

u8 COMPARE_USER(void)
{
    4a16:	df 93       	push	r29
    4a18:	cf 93       	push	r28
    4a1a:	cd b7       	in	r28, 0x3d	; 61
    4a1c:	de b7       	in	r29, 0x3e	; 62
    4a1e:	65 97       	sbiw	r28, 0x15	; 21
    4a20:	0f b6       	in	r0, 0x3f	; 63
    4a22:	f8 94       	cli
    4a24:	de bf       	out	0x3e, r29	; 62
    4a26:	0f be       	out	0x3f, r0	; 63
    4a28:	cd bf       	out	0x3d, r28	; 61
	static int user_pos=0;
	u8 required_user_flag=0;
    4a2a:	1d 8a       	std	Y+21, r1	; 0x15
	int user=PROCESS_USER;
    4a2c:	85 e0       	ldi	r24, 0x05	; 5
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	9c 8b       	std	Y+20, r25	; 0x14
    4a32:	8b 8b       	std	Y+19, r24	; 0x13
	for(int y=0;y<number_Of_user;y++)
    4a34:	1a 8a       	std	Y+18, r1	; 0x12
    4a36:	19 8a       	std	Y+17, r1	; 0x11
    4a38:	58 c0       	rjmp	.+176    	; 0x4aea <COMPARE_USER+0xd4>
	{
		user=PROCESS_USER;
    4a3a:	85 e0       	ldi	r24, 0x05	; 5
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	9c 8b       	std	Y+20, r25	; 0x14
    4a40:	8b 8b       	std	Y+19, r24	; 0x13
		for(int i =0 ; i <=3 ; ++i)
    4a42:	18 8a       	std	Y+16, r1	; 0x10
    4a44:	1f 86       	std	Y+15, r1	; 0x0f
    4a46:	2d c0       	rjmp	.+90     	; 0x4aa2 <COMPARE_USER+0x8c>
		{
			HEEPROM_READ((y*FIRST_USER)+i,&DEF_EEPROM[i]);
    4a48:	89 89       	ldd	r24, Y+17	; 0x11
    4a4a:	9a 89       	ldd	r25, Y+18	; 0x12
    4a4c:	88 0f       	add	r24, r24
    4a4e:	99 1f       	adc	r25, r25
    4a50:	88 0f       	add	r24, r24
    4a52:	99 1f       	adc	r25, r25
    4a54:	88 0f       	add	r24, r24
    4a56:	99 1f       	adc	r25, r25
    4a58:	98 2f       	mov	r25, r24
    4a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a5c:	49 2f       	mov	r20, r25
    4a5e:	48 0f       	add	r20, r24
    4a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a62:	98 89       	ldd	r25, Y+16	; 0x10
    4a64:	9c 01       	movw	r18, r24
    4a66:	28 5e       	subi	r18, 0xE8	; 232
    4a68:	3c 4f       	sbci	r19, 0xFC	; 252
    4a6a:	84 2f       	mov	r24, r20
    4a6c:	b9 01       	movw	r22, r18
    4a6e:	0e 94 16 24 	call	0x482c	; 0x482c <HEEPROM_READ>
			if(DEF_USER[i]==DEF_EEPROM[i])
    4a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a74:	98 89       	ldd	r25, Y+16	; 0x10
    4a76:	fc 01       	movw	r30, r24
    4a78:	ec 5e       	subi	r30, 0xEC	; 236
    4a7a:	fc 4f       	sbci	r31, 0xFC	; 252
    4a7c:	20 81       	ld	r18, Z
    4a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a80:	98 89       	ldd	r25, Y+16	; 0x10
    4a82:	fc 01       	movw	r30, r24
    4a84:	e8 5e       	subi	r30, 0xE8	; 232
    4a86:	fc 4f       	sbci	r31, 0xFC	; 252
    4a88:	80 81       	ld	r24, Z
    4a8a:	28 17       	cp	r18, r24
    4a8c:	29 f0       	breq	.+10     	; 0x4a98 <COMPARE_USER+0x82>
			{

			}
			else
			{
				user=ENTER_USER;
    4a8e:	84 e0       	ldi	r24, 0x04	; 4
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	9c 8b       	std	Y+20, r25	; 0x14
    4a94:	8b 8b       	std	Y+19, r24	; 0x13
    4a96:	0a c0       	rjmp	.+20     	; 0x4aac <COMPARE_USER+0x96>
	u8 required_user_flag=0;
	int user=PROCESS_USER;
	for(int y=0;y<number_Of_user;y++)
	{
		user=PROCESS_USER;
		for(int i =0 ; i <=3 ; ++i)
    4a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a9a:	98 89       	ldd	r25, Y+16	; 0x10
    4a9c:	01 96       	adiw	r24, 0x01	; 1
    4a9e:	98 8b       	std	Y+16, r25	; 0x10
    4aa0:	8f 87       	std	Y+15, r24	; 0x0f
    4aa2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4aa4:	98 89       	ldd	r25, Y+16	; 0x10
    4aa6:	84 30       	cpi	r24, 0x04	; 4
    4aa8:	91 05       	cpc	r25, r1
    4aaa:	74 f2       	brlt	.-100    	; 0x4a48 <COMPARE_USER+0x32>
			{
				user=ENTER_USER;
				break;
			}
		}
		if(user==PROCESS_USER)
    4aac:	8b 89       	ldd	r24, Y+19	; 0x13
    4aae:	9c 89       	ldd	r25, Y+20	; 0x14
    4ab0:	85 30       	cpi	r24, 0x05	; 5
    4ab2:	91 05       	cpc	r25, r1
    4ab4:	a9 f4       	brne	.+42     	; 0x4ae0 <COMPARE_USER+0xca>
		{
			user=ENTER_PASSWORD;
    4ab6:	86 e0       	ldi	r24, 0x06	; 6
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	9c 8b       	std	Y+20, r25	; 0x14
    4abc:	8b 8b       	std	Y+19, r24	; 0x13
			ENTER_PASS_FRAME();
    4abe:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <ENTER_PASS_FRAME>
			user_pos=0;
    4ac2:	10 92 2a 03 	sts	0x032A, r1
    4ac6:	10 92 29 03 	sts	0x0329, r1
			compared_password_pos=(y*FIRST_USER);
    4aca:	89 89       	ldd	r24, Y+17	; 0x11
    4acc:	9a 89       	ldd	r25, Y+18	; 0x12
    4ace:	88 0f       	add	r24, r24
    4ad0:	99 1f       	adc	r25, r25
    4ad2:	88 0f       	add	r24, r24
    4ad4:	99 1f       	adc	r25, r25
    4ad6:	88 0f       	add	r24, r24
    4ad8:	99 1f       	adc	r25, r25
    4ada:	80 93 2f 03 	sts	0x032F, r24
    4ade:	0f c0       	rjmp	.+30     	; 0x4afe <COMPARE_USER+0xe8>
u8 COMPARE_USER(void)
{
	static int user_pos=0;
	u8 required_user_flag=0;
	int user=PROCESS_USER;
	for(int y=0;y<number_Of_user;y++)
    4ae0:	89 89       	ldd	r24, Y+17	; 0x11
    4ae2:	9a 89       	ldd	r25, Y+18	; 0x12
    4ae4:	01 96       	adiw	r24, 0x01	; 1
    4ae6:	9a 8b       	std	Y+18, r25	; 0x12
    4ae8:	89 8b       	std	Y+17, r24	; 0x11
    4aea:	80 91 20 03 	lds	r24, 0x0320
    4aee:	28 2f       	mov	r18, r24
    4af0:	30 e0       	ldi	r19, 0x00	; 0
    4af2:	89 89       	ldd	r24, Y+17	; 0x11
    4af4:	9a 89       	ldd	r25, Y+18	; 0x12
    4af6:	82 17       	cp	r24, r18
    4af8:	93 07       	cpc	r25, r19
    4afa:	0c f4       	brge	.+2      	; 0x4afe <COMPARE_USER+0xe8>
    4afc:	9e cf       	rjmp	.-196    	; 0x4a3a <COMPARE_USER+0x24>
			user_pos=0;
			compared_password_pos=(y*FIRST_USER);
			break;
		}
	}
	if(user==ENTER_USER)
    4afe:	8b 89       	ldd	r24, Y+19	; 0x13
    4b00:	9c 89       	ldd	r25, Y+20	; 0x14
    4b02:	84 30       	cpi	r24, 0x04	; 4
    4b04:	91 05       	cpc	r25, r1
    4b06:	09 f0       	breq	.+2      	; 0x4b0a <COMPARE_USER+0xf4>
    4b08:	85 c0       	rjmp	.+266    	; 0x4c14 <COMPARE_USER+0x1fe>
	{
		user_pos++;
    4b0a:	80 91 29 03 	lds	r24, 0x0329
    4b0e:	90 91 2a 03 	lds	r25, 0x032A
    4b12:	01 96       	adiw	r24, 0x01	; 1
    4b14:	90 93 2a 03 	sts	0x032A, r25
    4b18:	80 93 29 03 	sts	0x0329, r24
		user=ENTER_USER;
    4b1c:	84 e0       	ldi	r24, 0x04	; 4
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	9c 8b       	std	Y+20, r25	; 0x14
    4b22:	8b 8b       	std	Y+19, r24	; 0x13
		WRONG_USER_FRAME(user_pos);
    4b24:	80 91 29 03 	lds	r24, 0x0329
    4b28:	90 91 2a 03 	lds	r25, 0x032A
    4b2c:	0e 94 a8 28 	call	0x5150	; 0x5150 <WRONG_USER_FRAME>
    4b30:	80 e0       	ldi	r24, 0x00	; 0
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	aa e7       	ldi	r26, 0x7A	; 122
    4b36:	b4 e4       	ldi	r27, 0x44	; 68
    4b38:	8b 87       	std	Y+11, r24	; 0x0b
    4b3a:	9c 87       	std	Y+12, r25	; 0x0c
    4b3c:	ad 87       	std	Y+13, r26	; 0x0d
    4b3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	4a ef       	ldi	r20, 0xFA	; 250
    4b4e:	54 e4       	ldi	r21, 0x44	; 68
    4b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b54:	dc 01       	movw	r26, r24
    4b56:	cb 01       	movw	r24, r22
    4b58:	8f 83       	std	Y+7, r24	; 0x07
    4b5a:	98 87       	std	Y+8, r25	; 0x08
    4b5c:	a9 87       	std	Y+9, r26	; 0x09
    4b5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b60:	6f 81       	ldd	r22, Y+7	; 0x07
    4b62:	78 85       	ldd	r23, Y+8	; 0x08
    4b64:	89 85       	ldd	r24, Y+9	; 0x09
    4b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b68:	20 e0       	ldi	r18, 0x00	; 0
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	40 e8       	ldi	r20, 0x80	; 128
    4b6e:	5f e3       	ldi	r21, 0x3F	; 63
    4b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b74:	88 23       	and	r24, r24
    4b76:	2c f4       	brge	.+10     	; 0x4b82 <COMPARE_USER+0x16c>
		__ticks = 1;
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	9e 83       	std	Y+6, r25	; 0x06
    4b7e:	8d 83       	std	Y+5, r24	; 0x05
    4b80:	3f c0       	rjmp	.+126    	; 0x4c00 <COMPARE_USER+0x1ea>
	else if (__tmp > 65535)
    4b82:	6f 81       	ldd	r22, Y+7	; 0x07
    4b84:	78 85       	ldd	r23, Y+8	; 0x08
    4b86:	89 85       	ldd	r24, Y+9	; 0x09
    4b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b8a:	20 e0       	ldi	r18, 0x00	; 0
    4b8c:	3f ef       	ldi	r19, 0xFF	; 255
    4b8e:	4f e7       	ldi	r20, 0x7F	; 127
    4b90:	57 e4       	ldi	r21, 0x47	; 71
    4b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b96:	18 16       	cp	r1, r24
    4b98:	4c f5       	brge	.+82     	; 0x4bec <COMPARE_USER+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ba2:	20 e0       	ldi	r18, 0x00	; 0
    4ba4:	30 e0       	ldi	r19, 0x00	; 0
    4ba6:	40 e2       	ldi	r20, 0x20	; 32
    4ba8:	51 e4       	ldi	r21, 0x41	; 65
    4baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bae:	dc 01       	movw	r26, r24
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	bc 01       	movw	r22, r24
    4bb4:	cd 01       	movw	r24, r26
    4bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bba:	dc 01       	movw	r26, r24
    4bbc:	cb 01       	movw	r24, r22
    4bbe:	9e 83       	std	Y+6, r25	; 0x06
    4bc0:	8d 83       	std	Y+5, r24	; 0x05
    4bc2:	0f c0       	rjmp	.+30     	; 0x4be2 <COMPARE_USER+0x1cc>
    4bc4:	88 ec       	ldi	r24, 0xC8	; 200
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	9c 83       	std	Y+4, r25	; 0x04
    4bca:	8b 83       	std	Y+3, r24	; 0x03
    4bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bce:	9c 81       	ldd	r25, Y+4	; 0x04
    4bd0:	01 97       	sbiw	r24, 0x01	; 1
    4bd2:	f1 f7       	brne	.-4      	; 0x4bd0 <COMPARE_USER+0x1ba>
    4bd4:	9c 83       	std	Y+4, r25	; 0x04
    4bd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    4bda:	9e 81       	ldd	r25, Y+6	; 0x06
    4bdc:	01 97       	sbiw	r24, 0x01	; 1
    4bde:	9e 83       	std	Y+6, r25	; 0x06
    4be0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4be2:	8d 81       	ldd	r24, Y+5	; 0x05
    4be4:	9e 81       	ldd	r25, Y+6	; 0x06
    4be6:	00 97       	sbiw	r24, 0x00	; 0
    4be8:	69 f7       	brne	.-38     	; 0x4bc4 <COMPARE_USER+0x1ae>
    4bea:	14 c0       	rjmp	.+40     	; 0x4c14 <COMPARE_USER+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bec:	6f 81       	ldd	r22, Y+7	; 0x07
    4bee:	78 85       	ldd	r23, Y+8	; 0x08
    4bf0:	89 85       	ldd	r24, Y+9	; 0x09
    4bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf8:	dc 01       	movw	r26, r24
    4bfa:	cb 01       	movw	r24, r22
    4bfc:	9e 83       	std	Y+6, r25	; 0x06
    4bfe:	8d 83       	std	Y+5, r24	; 0x05
    4c00:	8d 81       	ldd	r24, Y+5	; 0x05
    4c02:	9e 81       	ldd	r25, Y+6	; 0x06
    4c04:	9a 83       	std	Y+2, r25	; 0x02
    4c06:	89 83       	std	Y+1, r24	; 0x01
    4c08:	89 81       	ldd	r24, Y+1	; 0x01
    4c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c0c:	01 97       	sbiw	r24, 0x01	; 1
    4c0e:	f1 f7       	brne	.-4      	; 0x4c0c <COMPARE_USER+0x1f6>
    4c10:	9a 83       	std	Y+2, r25	; 0x02
    4c12:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}


	if(user_pos==3)
    4c14:	80 91 29 03 	lds	r24, 0x0329
    4c18:	90 91 2a 03 	lds	r25, 0x032A
    4c1c:	83 30       	cpi	r24, 0x03	; 3
    4c1e:	91 05       	cpc	r25, r1
    4c20:	f1 f4       	brne	.+60     	; 0x4c5e <COMPARE_USER+0x248>
	{
		entry=0;
    4c22:	10 92 22 03 	sts	0x0322, r1
    4c26:	10 92 21 03 	sts	0x0321, r1
		memset(DEF_USER,0,4);
    4c2a:	84 e1       	ldi	r24, 0x14	; 20
    4c2c:	93 e0       	ldi	r25, 0x03	; 3
    4c2e:	60 e0       	ldi	r22, 0x00	; 0
    4c30:	70 e0       	ldi	r23, 0x00	; 0
    4c32:	44 e0       	ldi	r20, 0x04	; 4
    4c34:	50 e0       	ldi	r21, 0x00	; 0
    4c36:	0e 94 3b 31 	call	0x6276	; 0x6276 <memset>
		memset(DEF_PASSWORD,0,4);
    4c3a:	8c e1       	ldi	r24, 0x1C	; 28
    4c3c:	93 e0       	ldi	r25, 0x03	; 3
    4c3e:	60 e0       	ldi	r22, 0x00	; 0
    4c40:	70 e0       	ldi	r23, 0x00	; 0
    4c42:	44 e0       	ldi	r20, 0x04	; 4
    4c44:	50 e0       	ldi	r21, 0x00	; 0
    4c46:	0e 94 3b 31 	call	0x6276	; 0x6276 <memset>
		SIGN_STATE=ENTER_USER;
    4c4a:	84 e0       	ldi	r24, 0x04	; 4
    4c4c:	80 93 da 02 	sts	0x02DA, r24
		IDLE_FRAME();
    4c50:	0e 94 6e 27 	call	0x4edc	; 0x4edc <IDLE_FRAME>
		user_pos=0;
    4c54:	10 92 2a 03 	sts	0x032A, r1
    4c58:	10 92 29 03 	sts	0x0329, r1
    4c5c:	19 c0       	rjmp	.+50     	; 0x4c90 <COMPARE_USER+0x27a>
	}
	else if((user_pos!=0)&&(user_pos!=3))
    4c5e:	80 91 29 03 	lds	r24, 0x0329
    4c62:	90 91 2a 03 	lds	r25, 0x032A
    4c66:	00 97       	sbiw	r24, 0x00	; 0
    4c68:	99 f0       	breq	.+38     	; 0x4c90 <COMPARE_USER+0x27a>
    4c6a:	80 91 29 03 	lds	r24, 0x0329
    4c6e:	90 91 2a 03 	lds	r25, 0x032A
    4c72:	83 30       	cpi	r24, 0x03	; 3
    4c74:	91 05       	cpc	r25, r1
    4c76:	61 f0       	breq	.+24     	; 0x4c90 <COMPARE_USER+0x27a>
	{
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    4c78:	81 e0       	ldi	r24, 0x01	; 1
    4c7a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		ENTER_USER_FRAME();
    4c7e:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <ENTER_USER_FRAME>
		SIGN_STATE=ENTER_USER;
    4c82:	84 e0       	ldi	r24, 0x04	; 4
    4c84:	80 93 da 02 	sts	0x02DA, r24
		user=ENTER_USER;
    4c88:	84 e0       	ldi	r24, 0x04	; 4
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	9c 8b       	std	Y+20, r25	; 0x14
    4c8e:	8b 8b       	std	Y+19, r24	; 0x13
	}
	else
	{

	}
	return user;
    4c90:	8b 89       	ldd	r24, Y+19	; 0x13
}
    4c92:	65 96       	adiw	r28, 0x15	; 21
    4c94:	0f b6       	in	r0, 0x3f	; 63
    4c96:	f8 94       	cli
    4c98:	de bf       	out	0x3e, r29	; 62
    4c9a:	0f be       	out	0x3f, r0	; 63
    4c9c:	cd bf       	out	0x3d, r28	; 61
    4c9e:	cf 91       	pop	r28
    4ca0:	df 91       	pop	r29
    4ca2:	08 95       	ret

00004ca4 <COMPARE_PASSWORD>:
u8 COMPARE_PASSWORD(void)
{
    4ca4:	df 93       	push	r29
    4ca6:	cf 93       	push	r28
    4ca8:	cd b7       	in	r28, 0x3d	; 61
    4caa:	de b7       	in	r29, 0x3e	; 62
    4cac:	62 97       	sbiw	r28, 0x12	; 18
    4cae:	0f b6       	in	r0, 0x3f	; 63
    4cb0:	f8 94       	cli
    4cb2:	de bf       	out	0x3e, r29	; 62
    4cb4:	0f be       	out	0x3f, r0	; 63
    4cb6:	cd bf       	out	0x3d, r28	; 61
	int user=PROCESS_PASSWORD;
    4cb8:	88 e0       	ldi	r24, 0x08	; 8
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	9a 8b       	std	Y+18, r25	; 0x12
    4cbe:	89 8b       	std	Y+17, r24	; 0x11
	static int pass_pos=0;
	for(int i =0 ; i <=3; ++i)
    4cc0:	18 8a       	std	Y+16, r1	; 0x10
    4cc2:	1f 86       	std	Y+15, r1	; 0x0f
    4cc4:	a9 c0       	rjmp	.+338    	; 0x4e18 <COMPARE_PASSWORD+0x174>
	{
		HEEPROM_READ((compared_password_pos+4+i),&DEF_EEPROM[i]);
    4cc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cc8:	80 91 2f 03 	lds	r24, 0x032F
    4ccc:	89 0f       	add	r24, r25
    4cce:	48 2f       	mov	r20, r24
    4cd0:	4c 5f       	subi	r20, 0xFC	; 252
    4cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cd4:	98 89       	ldd	r25, Y+16	; 0x10
    4cd6:	9c 01       	movw	r18, r24
    4cd8:	28 5e       	subi	r18, 0xE8	; 232
    4cda:	3c 4f       	sbci	r19, 0xFC	; 252
    4cdc:	84 2f       	mov	r24, r20
    4cde:	b9 01       	movw	r22, r18
    4ce0:	0e 94 16 24 	call	0x482c	; 0x482c <HEEPROM_READ>


		if(DEF_PASSWORD[i]==DEF_EEPROM[i])
    4ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ce6:	98 89       	ldd	r25, Y+16	; 0x10
    4ce8:	fc 01       	movw	r30, r24
    4cea:	e4 5e       	subi	r30, 0xE4	; 228
    4cec:	fc 4f       	sbci	r31, 0xFC	; 252
    4cee:	20 81       	ld	r18, Z
    4cf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cf2:	98 89       	ldd	r25, Y+16	; 0x10
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	e8 5e       	subi	r30, 0xE8	; 232
    4cf8:	fc 4f       	sbci	r31, 0xFC	; 252
    4cfa:	80 81       	ld	r24, Z
    4cfc:	28 17       	cp	r18, r24
    4cfe:	09 f4       	brne	.+2      	; 0x4d02 <COMPARE_PASSWORD+0x5e>
    4d00:	86 c0       	rjmp	.+268    	; 0x4e0e <COMPARE_PASSWORD+0x16a>
		{

		}
		else
		{
			pass_pos++;
    4d02:	80 91 2b 03 	lds	r24, 0x032B
    4d06:	90 91 2c 03 	lds	r25, 0x032C
    4d0a:	01 96       	adiw	r24, 0x01	; 1
    4d0c:	90 93 2c 03 	sts	0x032C, r25
    4d10:	80 93 2b 03 	sts	0x032B, r24
			user=ENTER_PASSWORD;
    4d14:	86 e0       	ldi	r24, 0x06	; 6
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	9a 8b       	std	Y+18, r25	; 0x12
    4d1a:	89 8b       	std	Y+17, r24	; 0x11
			WRONG_PASS_FRAME(pass_pos);
    4d1c:	80 91 2b 03 	lds	r24, 0x032B
    4d20:	90 91 2c 03 	lds	r25, 0x032C
    4d24:	0e 94 76 28 	call	0x50ec	; 0x50ec <WRONG_PASS_FRAME>
    4d28:	80 e0       	ldi	r24, 0x00	; 0
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	aa e7       	ldi	r26, 0x7A	; 122
    4d2e:	b4 e4       	ldi	r27, 0x44	; 68
    4d30:	8b 87       	std	Y+11, r24	; 0x0b
    4d32:	9c 87       	std	Y+12, r25	; 0x0c
    4d34:	ad 87       	std	Y+13, r26	; 0x0d
    4d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d40:	20 e0       	ldi	r18, 0x00	; 0
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	4a ef       	ldi	r20, 0xFA	; 250
    4d46:	54 e4       	ldi	r21, 0x44	; 68
    4d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d4c:	dc 01       	movw	r26, r24
    4d4e:	cb 01       	movw	r24, r22
    4d50:	8f 83       	std	Y+7, r24	; 0x07
    4d52:	98 87       	std	Y+8, r25	; 0x08
    4d54:	a9 87       	std	Y+9, r26	; 0x09
    4d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d58:	6f 81       	ldd	r22, Y+7	; 0x07
    4d5a:	78 85       	ldd	r23, Y+8	; 0x08
    4d5c:	89 85       	ldd	r24, Y+9	; 0x09
    4d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d60:	20 e0       	ldi	r18, 0x00	; 0
    4d62:	30 e0       	ldi	r19, 0x00	; 0
    4d64:	40 e8       	ldi	r20, 0x80	; 128
    4d66:	5f e3       	ldi	r21, 0x3F	; 63
    4d68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d6c:	88 23       	and	r24, r24
    4d6e:	2c f4       	brge	.+10     	; 0x4d7a <COMPARE_PASSWORD+0xd6>
		__ticks = 1;
    4d70:	81 e0       	ldi	r24, 0x01	; 1
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	9e 83       	std	Y+6, r25	; 0x06
    4d76:	8d 83       	std	Y+5, r24	; 0x05
    4d78:	3f c0       	rjmp	.+126    	; 0x4df8 <COMPARE_PASSWORD+0x154>
	else if (__tmp > 65535)
    4d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    4d7c:	78 85       	ldd	r23, Y+8	; 0x08
    4d7e:	89 85       	ldd	r24, Y+9	; 0x09
    4d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d82:	20 e0       	ldi	r18, 0x00	; 0
    4d84:	3f ef       	ldi	r19, 0xFF	; 255
    4d86:	4f e7       	ldi	r20, 0x7F	; 127
    4d88:	57 e4       	ldi	r21, 0x47	; 71
    4d8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d8e:	18 16       	cp	r1, r24
    4d90:	4c f5       	brge	.+82     	; 0x4de4 <COMPARE_PASSWORD+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d9a:	20 e0       	ldi	r18, 0x00	; 0
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	40 e2       	ldi	r20, 0x20	; 32
    4da0:	51 e4       	ldi	r21, 0x41	; 65
    4da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4da6:	dc 01       	movw	r26, r24
    4da8:	cb 01       	movw	r24, r22
    4daa:	bc 01       	movw	r22, r24
    4dac:	cd 01       	movw	r24, r26
    4dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4db2:	dc 01       	movw	r26, r24
    4db4:	cb 01       	movw	r24, r22
    4db6:	9e 83       	std	Y+6, r25	; 0x06
    4db8:	8d 83       	std	Y+5, r24	; 0x05
    4dba:	0f c0       	rjmp	.+30     	; 0x4dda <COMPARE_PASSWORD+0x136>
    4dbc:	88 ec       	ldi	r24, 0xC8	; 200
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	9c 83       	std	Y+4, r25	; 0x04
    4dc2:	8b 83       	std	Y+3, r24	; 0x03
    4dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    4dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    4dc8:	01 97       	sbiw	r24, 0x01	; 1
    4dca:	f1 f7       	brne	.-4      	; 0x4dc8 <COMPARE_PASSWORD+0x124>
    4dcc:	9c 83       	std	Y+4, r25	; 0x04
    4dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd4:	01 97       	sbiw	r24, 0x01	; 1
    4dd6:	9e 83       	std	Y+6, r25	; 0x06
    4dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dda:	8d 81       	ldd	r24, Y+5	; 0x05
    4ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    4dde:	00 97       	sbiw	r24, 0x00	; 0
    4de0:	69 f7       	brne	.-38     	; 0x4dbc <COMPARE_PASSWORD+0x118>
    4de2:	20 c0       	rjmp	.+64     	; 0x4e24 <COMPARE_PASSWORD+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4de4:	6f 81       	ldd	r22, Y+7	; 0x07
    4de6:	78 85       	ldd	r23, Y+8	; 0x08
    4de8:	89 85       	ldd	r24, Y+9	; 0x09
    4dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	9e 83       	std	Y+6, r25	; 0x06
    4df6:	8d 83       	std	Y+5, r24	; 0x05
    4df8:	8d 81       	ldd	r24, Y+5	; 0x05
    4dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    4dfc:	9a 83       	std	Y+2, r25	; 0x02
    4dfe:	89 83       	std	Y+1, r24	; 0x01
    4e00:	89 81       	ldd	r24, Y+1	; 0x01
    4e02:	9a 81       	ldd	r25, Y+2	; 0x02
    4e04:	01 97       	sbiw	r24, 0x01	; 1
    4e06:	f1 f7       	brne	.-4      	; 0x4e04 <COMPARE_PASSWORD+0x160>
    4e08:	9a 83       	std	Y+2, r25	; 0x02
    4e0a:	89 83       	std	Y+1, r24	; 0x01
    4e0c:	0b c0       	rjmp	.+22     	; 0x4e24 <COMPARE_PASSWORD+0x180>
}
u8 COMPARE_PASSWORD(void)
{
	int user=PROCESS_PASSWORD;
	static int pass_pos=0;
	for(int i =0 ; i <=3; ++i)
    4e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e10:	98 89       	ldd	r25, Y+16	; 0x10
    4e12:	01 96       	adiw	r24, 0x01	; 1
    4e14:	98 8b       	std	Y+16, r25	; 0x10
    4e16:	8f 87       	std	Y+15, r24	; 0x0f
    4e18:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e1a:	98 89       	ldd	r25, Y+16	; 0x10
    4e1c:	84 30       	cpi	r24, 0x04	; 4
    4e1e:	91 05       	cpc	r25, r1
    4e20:	0c f4       	brge	.+2      	; 0x4e24 <COMPARE_PASSWORD+0x180>
    4e22:	51 cf       	rjmp	.-350    	; 0x4cc6 <COMPARE_PASSWORD+0x22>
			WRONG_PASS_FRAME(pass_pos);
			_delay_ms(1000);
			break;
		}
	}
	if(user==PROCESS_PASSWORD)
    4e24:	89 89       	ldd	r24, Y+17	; 0x11
    4e26:	9a 89       	ldd	r25, Y+18	; 0x12
    4e28:	88 30       	cpi	r24, 0x08	; 8
    4e2a:	91 05       	cpc	r25, r1
    4e2c:	69 f4       	brne	.+26     	; 0x4e48 <COMPARE_PASSWORD+0x1a4>
	{
		HLCD_Send_String_8bit((u8 *)"SYS OPEND");
    4e2e:	83 e6       	ldi	r24, 0x63	; 99
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
		pass_pos=0;
    4e36:	10 92 2c 03 	sts	0x032C, r1
    4e3a:	10 92 2b 03 	sts	0x032B, r1
		user=SYS_OPENED;
    4e3e:	87 e0       	ldi	r24, 0x07	; 7
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	9a 8b       	std	Y+18, r25	; 0x12
    4e44:	89 8b       	std	Y+17, r24	; 0x11
    4e46:	40 c0       	rjmp	.+128    	; 0x4ec8 <COMPARE_PASSWORD+0x224>
	}
	else
	{
		if(pass_pos==3)
    4e48:	80 91 2b 03 	lds	r24, 0x032B
    4e4c:	90 91 2c 03 	lds	r25, 0x032C
    4e50:	83 30       	cpi	r24, 0x03	; 3
    4e52:	91 05       	cpc	r25, r1
    4e54:	19 f5       	brne	.+70     	; 0x4e9c <COMPARE_PASSWORD+0x1f8>
		{
			entry=0;
    4e56:	10 92 22 03 	sts	0x0322, r1
    4e5a:	10 92 21 03 	sts	0x0321, r1
			memset(DEF_USER,0,4);
    4e5e:	84 e1       	ldi	r24, 0x14	; 20
    4e60:	93 e0       	ldi	r25, 0x03	; 3
    4e62:	60 e0       	ldi	r22, 0x00	; 0
    4e64:	70 e0       	ldi	r23, 0x00	; 0
    4e66:	44 e0       	ldi	r20, 0x04	; 4
    4e68:	50 e0       	ldi	r21, 0x00	; 0
    4e6a:	0e 94 3b 31 	call	0x6276	; 0x6276 <memset>
			memset(DEF_PASSWORD,0,4);
    4e6e:	8c e1       	ldi	r24, 0x1C	; 28
    4e70:	93 e0       	ldi	r25, 0x03	; 3
    4e72:	60 e0       	ldi	r22, 0x00	; 0
    4e74:	70 e0       	ldi	r23, 0x00	; 0
    4e76:	44 e0       	ldi	r20, 0x04	; 4
    4e78:	50 e0       	ldi	r21, 0x00	; 0
    4e7a:	0e 94 3b 31 	call	0x6276	; 0x6276 <memset>
			USER_POS_=0;
    4e7e:	10 92 10 03 	sts	0x0310, r1
			PASS_POS_=0;
    4e82:	10 92 12 03 	sts	0x0312, r1
			user=ENTER_USER;
    4e86:	84 e0       	ldi	r24, 0x04	; 4
    4e88:	90 e0       	ldi	r25, 0x00	; 0
    4e8a:	9a 8b       	std	Y+18, r25	; 0x12
    4e8c:	89 8b       	std	Y+17, r24	; 0x11
			pass_pos=0;
    4e8e:	10 92 2c 03 	sts	0x032C, r1
    4e92:	10 92 2b 03 	sts	0x032B, r1
			IDLE_FRAME();
    4e96:	0e 94 6e 27 	call	0x4edc	; 0x4edc <IDLE_FRAME>
    4e9a:	16 c0       	rjmp	.+44     	; 0x4ec8 <COMPARE_PASSWORD+0x224>
		}
		else if((pass_pos!=0)&&(pass_pos!=3))
    4e9c:	80 91 2b 03 	lds	r24, 0x032B
    4ea0:	90 91 2c 03 	lds	r25, 0x032C
    4ea4:	00 97       	sbiw	r24, 0x00	; 0
    4ea6:	81 f0       	breq	.+32     	; 0x4ec8 <COMPARE_PASSWORD+0x224>
    4ea8:	80 91 2b 03 	lds	r24, 0x032B
    4eac:	90 91 2c 03 	lds	r25, 0x032C
    4eb0:	83 30       	cpi	r24, 0x03	; 3
    4eb2:	91 05       	cpc	r25, r1
    4eb4:	49 f0       	breq	.+18     	; 0x4ec8 <COMPARE_PASSWORD+0x224>
		{
			HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    4eb6:	81 e0       	ldi	r24, 0x01	; 1
    4eb8:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
			ENTER_PASS_FRAME();
    4ebc:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <ENTER_PASS_FRAME>
			user=ENTER_PASSWORD;
    4ec0:	86 e0       	ldi	r24, 0x06	; 6
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	9a 8b       	std	Y+18, r25	; 0x12
    4ec6:	89 8b       	std	Y+17, r24	; 0x11
		}
		else
		{}
	}
	return user;
    4ec8:	89 89       	ldd	r24, Y+17	; 0x11
}
    4eca:	62 96       	adiw	r28, 0x12	; 18
    4ecc:	0f b6       	in	r0, 0x3f	; 63
    4ece:	f8 94       	cli
    4ed0:	de bf       	out	0x3e, r29	; 62
    4ed2:	0f be       	out	0x3f, r0	; 63
    4ed4:	cd bf       	out	0x3d, r28	; 61
    4ed6:	cf 91       	pop	r28
    4ed8:	df 91       	pop	r29
    4eda:	08 95       	ret

00004edc <IDLE_FRAME>:
/*****************LCD_FRAMES****************/

void IDLE_FRAME(void)
{
    4edc:	df 93       	push	r29
    4ede:	cf 93       	push	r28
    4ee0:	cd b7       	in	r28, 0x3d	; 61
    4ee2:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  1- Open SmartSystem
   2- Change Password
   3- Add User
	 */
	HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    4ee4:	81 e0       	ldi	r24, 0x01	; 1
    4ee6:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
	HLCD_Send_String_Position_8bit((u8 *)"2->Open Sys",LCD_GO_ROW2,0x00);
    4eea:	8d e6       	ldi	r24, 0x6D	; 109
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	60 ec       	ldi	r22, 0xC0	; 192
    4ef0:	40 e0       	ldi	r20, 0x00	; 0
    4ef2:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
	HLCD_Send_String_Position_8bit((u8 *)"3->..",LCD_GO_ROW2,0x0C);
    4ef6:	89 e7       	ldi	r24, 0x79	; 121
    4ef8:	90 e0       	ldi	r25, 0x00	; 0
    4efa:	60 ec       	ldi	r22, 0xC0	; 192
    4efc:	4c e0       	ldi	r20, 0x0C	; 12
    4efe:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
	HLCD_Send_String_Position_8bit((u8 *)"1->Change Pass",LCD_GO_ROW1,0x00);
    4f02:	8f e7       	ldi	r24, 0x7F	; 127
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	60 e8       	ldi	r22, 0x80	; 128
    4f08:	40 e0       	ldi	r20, 0x00	; 0
    4f0a:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
}
    4f0e:	cf 91       	pop	r28
    4f10:	df 91       	pop	r29
    4f12:	08 95       	ret

00004f14 <SET_DEFAULT_USER_PASS>:


/*****************LCD_FRAMES****************/

void SET_DEFAULT_USER_PASS(void)
{
    4f14:	df 93       	push	r29
    4f16:	cf 93       	push	r28
    4f18:	cd b7       	in	r28, 0x3d	; 61
    4f1a:	de b7       	in	r29, 0x3e	; 62
	HEEPROM_WRITE_STRING((u8 *)"1234",4,0x00);
    4f1c:	8e e8       	ldi	r24, 0x8E	; 142
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	64 e0       	ldi	r22, 0x04	; 4
    4f22:	40 e0       	ldi	r20, 0x00	; 0
    4f24:	0e 94 34 23 	call	0x4668	; 0x4668 <HEEPROM_WRITE_STRING>
	HEEPROM_WRITE_STRING((u8 *)"1234",4,0x04);
    4f28:	8e e8       	ldi	r24, 0x8E	; 142
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	64 e0       	ldi	r22, 0x04	; 4
    4f2e:	44 e0       	ldi	r20, 0x04	; 4
    4f30:	0e 94 34 23 	call	0x4668	; 0x4668 <HEEPROM_WRITE_STRING>
}
    4f34:	cf 91       	pop	r28
    4f36:	df 91       	pop	r29
    4f38:	08 95       	ret

00004f3a <ENTER_USER_FRAME>:
/*********************************************/

void ENTER_USER_FRAME(void)
{
    4f3a:	df 93       	push	r29
    4f3c:	cf 93       	push	r28
    4f3e:	cd b7       	in	r28, 0x3d	; 61
    4f40:	de b7       	in	r29, 0x3e	; 62
	HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    4f42:	81 e0       	ldi	r24, 0x01	; 1
    4f44:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
	HLCD_Send_String_8bit((u8*)"Enter User");
    4f48:	83 e9       	ldi	r24, 0x93	; 147
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
	HLCD_Send_CursorPosition_8bit(LCD_GO_ROW2,0x00);
    4f50:	80 ec       	ldi	r24, 0xC0	; 192
    4f52:	60 e0       	ldi	r22, 0x00	; 0
    4f54:	0e 94 85 19 	call	0x330a	; 0x330a <HLCD_Send_CursorPosition_8bit>
}
    4f58:	cf 91       	pop	r28
    4f5a:	df 91       	pop	r29
    4f5c:	08 95       	ret

00004f5e <ENTER_PASS_FRAME>:
/*********************************************/
void ENTER_PASS_FRAME(void)
{
    4f5e:	df 93       	push	r29
    4f60:	cf 93       	push	r28
    4f62:	cd b7       	in	r28, 0x3d	; 61
    4f64:	de b7       	in	r29, 0x3e	; 62
	HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    4f66:	81 e0       	ldi	r24, 0x01	; 1
    4f68:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
	HLCD_Send_String_8bit((u8*)"Enter PASSWORD");
    4f6c:	8e e9       	ldi	r24, 0x9E	; 158
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
	HLCD_Send_CursorPosition_8bit(LCD_GO_ROW2,0x00);
    4f74:	80 ec       	ldi	r24, 0xC0	; 192
    4f76:	60 e0       	ldi	r22, 0x00	; 0
    4f78:	0e 94 85 19 	call	0x330a	; 0x330a <HLCD_Send_CursorPosition_8bit>
}
    4f7c:	cf 91       	pop	r28
    4f7e:	df 91       	pop	r29
    4f80:	08 95       	ret

00004f82 <CHANGE_PASSWORD_FRAME>:
/*********************************************/
void CHANGE_PASSWORD_FRAME(void)
{
    4f82:	df 93       	push	r29
    4f84:	cf 93       	push	r28
    4f86:	cd b7       	in	r28, 0x3d	; 61
    4f88:	de b7       	in	r29, 0x3e	; 62
    4f8a:	2e 97       	sbiw	r28, 0x0e	; 14
    4f8c:	0f b6       	in	r0, 0x3f	; 63
    4f8e:	f8 94       	cli
    4f90:	de bf       	out	0x3e, r29	; 62
    4f92:	0f be       	out	0x3f, r0	; 63
    4f94:	cd bf       	out	0x3d, r28	; 61
	HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
	HLCD_Send_String_Position_8bit((u8 *)"ENTER USER YOU",LCD_GO_ROW1,0x01);
    4f9c:	8d ea       	ldi	r24, 0xAD	; 173
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	60 e8       	ldi	r22, 0x80	; 128
    4fa2:	41 e0       	ldi	r20, 0x01	; 1
    4fa4:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
	HLCD_Send_String_Position_8bit((u8 *)"WANT TO CHANGE",LCD_GO_ROW2,0x01);
    4fa8:	8c eb       	ldi	r24, 0xBC	; 188
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	60 ec       	ldi	r22, 0xC0	; 192
    4fae:	41 e0       	ldi	r20, 0x01	; 1
    4fb0:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
    4fb4:	80 e0       	ldi	r24, 0x00	; 0
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	aa e7       	ldi	r26, 0x7A	; 122
    4fba:	b4 e4       	ldi	r27, 0x44	; 68
    4fbc:	8b 87       	std	Y+11, r24	; 0x0b
    4fbe:	9c 87       	std	Y+12, r25	; 0x0c
    4fc0:	ad 87       	std	Y+13, r26	; 0x0d
    4fc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fca:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fcc:	20 e0       	ldi	r18, 0x00	; 0
    4fce:	30 e0       	ldi	r19, 0x00	; 0
    4fd0:	4a ef       	ldi	r20, 0xFA	; 250
    4fd2:	54 e4       	ldi	r21, 0x44	; 68
    4fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd8:	dc 01       	movw	r26, r24
    4fda:	cb 01       	movw	r24, r22
    4fdc:	8f 83       	std	Y+7, r24	; 0x07
    4fde:	98 87       	std	Y+8, r25	; 0x08
    4fe0:	a9 87       	std	Y+9, r26	; 0x09
    4fe2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4fe4:	6f 81       	ldd	r22, Y+7	; 0x07
    4fe6:	78 85       	ldd	r23, Y+8	; 0x08
    4fe8:	89 85       	ldd	r24, Y+9	; 0x09
    4fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fec:	20 e0       	ldi	r18, 0x00	; 0
    4fee:	30 e0       	ldi	r19, 0x00	; 0
    4ff0:	40 e8       	ldi	r20, 0x80	; 128
    4ff2:	5f e3       	ldi	r21, 0x3F	; 63
    4ff4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ff8:	88 23       	and	r24, r24
    4ffa:	2c f4       	brge	.+10     	; 0x5006 <CHANGE_PASSWORD_FRAME+0x84>
		__ticks = 1;
    4ffc:	81 e0       	ldi	r24, 0x01	; 1
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	9e 83       	std	Y+6, r25	; 0x06
    5002:	8d 83       	std	Y+5, r24	; 0x05
    5004:	3f c0       	rjmp	.+126    	; 0x5084 <CHANGE_PASSWORD_FRAME+0x102>
	else if (__tmp > 65535)
    5006:	6f 81       	ldd	r22, Y+7	; 0x07
    5008:	78 85       	ldd	r23, Y+8	; 0x08
    500a:	89 85       	ldd	r24, Y+9	; 0x09
    500c:	9a 85       	ldd	r25, Y+10	; 0x0a
    500e:	20 e0       	ldi	r18, 0x00	; 0
    5010:	3f ef       	ldi	r19, 0xFF	; 255
    5012:	4f e7       	ldi	r20, 0x7F	; 127
    5014:	57 e4       	ldi	r21, 0x47	; 71
    5016:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    501a:	18 16       	cp	r1, r24
    501c:	4c f5       	brge	.+82     	; 0x5070 <CHANGE_PASSWORD_FRAME+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    501e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5020:	7c 85       	ldd	r23, Y+12	; 0x0c
    5022:	8d 85       	ldd	r24, Y+13	; 0x0d
    5024:	9e 85       	ldd	r25, Y+14	; 0x0e
    5026:	20 e0       	ldi	r18, 0x00	; 0
    5028:	30 e0       	ldi	r19, 0x00	; 0
    502a:	40 e2       	ldi	r20, 0x20	; 32
    502c:	51 e4       	ldi	r21, 0x41	; 65
    502e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5032:	dc 01       	movw	r26, r24
    5034:	cb 01       	movw	r24, r22
    5036:	bc 01       	movw	r22, r24
    5038:	cd 01       	movw	r24, r26
    503a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    503e:	dc 01       	movw	r26, r24
    5040:	cb 01       	movw	r24, r22
    5042:	9e 83       	std	Y+6, r25	; 0x06
    5044:	8d 83       	std	Y+5, r24	; 0x05
    5046:	0f c0       	rjmp	.+30     	; 0x5066 <CHANGE_PASSWORD_FRAME+0xe4>
    5048:	88 ec       	ldi	r24, 0xC8	; 200
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	9c 83       	std	Y+4, r25	; 0x04
    504e:	8b 83       	std	Y+3, r24	; 0x03
    5050:	8b 81       	ldd	r24, Y+3	; 0x03
    5052:	9c 81       	ldd	r25, Y+4	; 0x04
    5054:	01 97       	sbiw	r24, 0x01	; 1
    5056:	f1 f7       	brne	.-4      	; 0x5054 <CHANGE_PASSWORD_FRAME+0xd2>
    5058:	9c 83       	std	Y+4, r25	; 0x04
    505a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    505c:	8d 81       	ldd	r24, Y+5	; 0x05
    505e:	9e 81       	ldd	r25, Y+6	; 0x06
    5060:	01 97       	sbiw	r24, 0x01	; 1
    5062:	9e 83       	std	Y+6, r25	; 0x06
    5064:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5066:	8d 81       	ldd	r24, Y+5	; 0x05
    5068:	9e 81       	ldd	r25, Y+6	; 0x06
    506a:	00 97       	sbiw	r24, 0x00	; 0
    506c:	69 f7       	brne	.-38     	; 0x5048 <CHANGE_PASSWORD_FRAME+0xc6>
    506e:	14 c0       	rjmp	.+40     	; 0x5098 <CHANGE_PASSWORD_FRAME+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5070:	6f 81       	ldd	r22, Y+7	; 0x07
    5072:	78 85       	ldd	r23, Y+8	; 0x08
    5074:	89 85       	ldd	r24, Y+9	; 0x09
    5076:	9a 85       	ldd	r25, Y+10	; 0x0a
    5078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    507c:	dc 01       	movw	r26, r24
    507e:	cb 01       	movw	r24, r22
    5080:	9e 83       	std	Y+6, r25	; 0x06
    5082:	8d 83       	std	Y+5, r24	; 0x05
    5084:	8d 81       	ldd	r24, Y+5	; 0x05
    5086:	9e 81       	ldd	r25, Y+6	; 0x06
    5088:	9a 83       	std	Y+2, r25	; 0x02
    508a:	89 83       	std	Y+1, r24	; 0x01
    508c:	89 81       	ldd	r24, Y+1	; 0x01
    508e:	9a 81       	ldd	r25, Y+2	; 0x02
    5090:	01 97       	sbiw	r24, 0x01	; 1
    5092:	f1 f7       	brne	.-4      	; 0x5090 <CHANGE_PASSWORD_FRAME+0x10e>
    5094:	9a 83       	std	Y+2, r25	; 0x02
    5096:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5098:	81 e0       	ldi	r24, 0x01	; 1
    509a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
	HLCD_Send_String_Position_8bit((u8 *)"ENTER USER ",LCD_GO_ROW1,0x00);
    509e:	8b ec       	ldi	r24, 0xCB	; 203
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	60 e8       	ldi	r22, 0x80	; 128
    50a4:	40 e0       	ldi	r20, 0x00	; 0
    50a6:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
	HLCD_Send_CursorPosition_8bit(LCD_GO_ROW2,0x00);
    50aa:	80 ec       	ldi	r24, 0xC0	; 192
    50ac:	60 e0       	ldi	r22, 0x00	; 0
    50ae:	0e 94 85 19 	call	0x330a	; 0x330a <HLCD_Send_CursorPosition_8bit>


}
    50b2:	2e 96       	adiw	r28, 0x0e	; 14
    50b4:	0f b6       	in	r0, 0x3f	; 63
    50b6:	f8 94       	cli
    50b8:	de bf       	out	0x3e, r29	; 62
    50ba:	0f be       	out	0x3f, r0	; 63
    50bc:	cd bf       	out	0x3d, r28	; 61
    50be:	cf 91       	pop	r28
    50c0:	df 91       	pop	r29
    50c2:	08 95       	ret

000050c4 <ADD_USER_FRAME>:
/************SECURITY SYS API's**************/
void ADD_USER_FRAME(void)
{
    50c4:	df 93       	push	r29
    50c6:	cf 93       	push	r28
    50c8:	cd b7       	in	r28, 0x3d	; 61
    50ca:	de b7       	in	r29, 0x3e	; 62
	HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    50cc:	81 e0       	ldi	r24, 0x01	; 1
    50ce:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
	HLCD_Send_String_Position_8bit((u8 *)"ENTER USER ",LCD_GO_ROW1,0x03);
    50d2:	8b ec       	ldi	r24, 0xCB	; 203
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	60 e8       	ldi	r22, 0x80	; 128
    50d8:	43 e0       	ldi	r20, 0x03	; 3
    50da:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
	HLCD_Send_CursorPosition_8bit(LCD_GO_ROW2,0x00);
    50de:	80 ec       	ldi	r24, 0xC0	; 192
    50e0:	60 e0       	ldi	r22, 0x00	; 0
    50e2:	0e 94 85 19 	call	0x330a	; 0x330a <HLCD_Send_CursorPosition_8bit>
}
    50e6:	cf 91       	pop	r28
    50e8:	df 91       	pop	r29
    50ea:	08 95       	ret

000050ec <WRONG_PASS_FRAME>:


void WRONG_PASS_FRAME(u8 pass)
{
    50ec:	df 93       	push	r29
    50ee:	cf 93       	push	r28
    50f0:	0f 92       	push	r0
    50f2:	cd b7       	in	r28, 0x3d	; 61
    50f4:	de b7       	in	r29, 0x3e	; 62
    50f6:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_8bit((u8 *)"WRONG PASS");
    50f8:	87 ed       	ldi	r24, 0xD7	; 215
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
	HLCD_Send_String_Position_8bit((u8 *)"For ->",LCD_GO_ROW2,0x00);
    5100:	82 ee       	ldi	r24, 0xE2	; 226
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	60 ec       	ldi	r22, 0xC0	; 192
    5106:	40 e0       	ldi	r20, 0x00	; 0
    5108:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
	HLCD_Send_char_Position_8bit(pass+'0',LCD_GO_ROW2,0x8);
    510c:	89 81       	ldd	r24, Y+1	; 0x01
    510e:	80 5d       	subi	r24, 0xD0	; 208
    5110:	60 ec       	ldi	r22, 0xC0	; 192
    5112:	48 e0       	ldi	r20, 0x08	; 8
    5114:	0e 94 d6 19 	call	0x33ac	; 0x33ac <HLCD_Send_char_Position_8bit>
	HLCD_Send_String_Position_8bit((u8 *)"/3 Times",LCD_GO_ROW2,0x0A);
    5118:	89 ee       	ldi	r24, 0xE9	; 233
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	60 ec       	ldi	r22, 0xC0	; 192
    511e:	4a e0       	ldi	r20, 0x0A	; 10
    5120:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
}
    5124:	0f 90       	pop	r0
    5126:	cf 91       	pop	r28
    5128:	df 91       	pop	r29
    512a:	08 95       	ret

0000512c <ENTER_NEW_PASS_FRAME>:
/*********************************************************************/
void ENTER_NEW_PASS_FRAME(void)
{
    512c:	df 93       	push	r29
    512e:	cf 93       	push	r28
    5130:	cd b7       	in	r28, 0x3d	; 61
    5132:	de b7       	in	r29, 0x3e	; 62
	HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5134:	81 e0       	ldi	r24, 0x01	; 1
    5136:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
	HLCD_Send_String_8bit((u8*)"ENTER NEW PASS");
    513a:	82 ef       	ldi	r24, 0xF2	; 242
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
	HLCD_Send_CursorPosition_8bit(LCD_GO_ROW2,0x00);
    5142:	80 ec       	ldi	r24, 0xC0	; 192
    5144:	60 e0       	ldi	r22, 0x00	; 0
    5146:	0e 94 85 19 	call	0x330a	; 0x330a <HLCD_Send_CursorPosition_8bit>
}
    514a:	cf 91       	pop	r28
    514c:	df 91       	pop	r29
    514e:	08 95       	ret

00005150 <WRONG_USER_FRAME>:
/*********************************************************************/
void WRONG_USER_FRAME(u8 pass)
{
    5150:	df 93       	push	r29
    5152:	cf 93       	push	r28
    5154:	0f 92       	push	r0
    5156:	cd b7       	in	r28, 0x3d	; 61
    5158:	de b7       	in	r29, 0x3e	; 62
    515a:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_String_8bit((u8 *)"WRONG USER");
    515c:	81 e0       	ldi	r24, 0x01	; 1
    515e:	91 e0       	ldi	r25, 0x01	; 1
    5160:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
	HLCD_Send_String_Position_8bit((u8 *)"For ->",LCD_GO_ROW2,0x00);
    5164:	82 ee       	ldi	r24, 0xE2	; 226
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	60 ec       	ldi	r22, 0xC0	; 192
    516a:	40 e0       	ldi	r20, 0x00	; 0
    516c:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
	HLCD_Send_char_Position_8bit(pass+'0',LCD_GO_ROW2,0x8);
    5170:	89 81       	ldd	r24, Y+1	; 0x01
    5172:	80 5d       	subi	r24, 0xD0	; 208
    5174:	60 ec       	ldi	r22, 0xC0	; 192
    5176:	48 e0       	ldi	r20, 0x08	; 8
    5178:	0e 94 d6 19 	call	0x33ac	; 0x33ac <HLCD_Send_char_Position_8bit>
	HLCD_Send_String_Position_8bit((u8 *)"/3 Times",LCD_GO_ROW2,0x0A);
    517c:	89 ee       	ldi	r24, 0xE9	; 233
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	60 ec       	ldi	r22, 0xC0	; 192
    5182:	4a e0       	ldi	r20, 0x0A	; 10
    5184:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
}
    5188:	0f 90       	pop	r0
    518a:	cf 91       	pop	r28
    518c:	df 91       	pop	r29
    518e:	08 95       	ret

00005190 <GET_ACCOUNT>:
/************SECURITY SYS API's**************/
u8 GET_ACCOUNT(u8 USER_OR_PASS)
{
    5190:	df 93       	push	r29
    5192:	cf 93       	push	r28
    5194:	00 d0       	rcall	.+0      	; 0x5196 <GET_ACCOUNT+0x6>
    5196:	00 d0       	rcall	.+0      	; 0x5198 <GET_ACCOUNT+0x8>
    5198:	cd b7       	in	r28, 0x3d	; 61
    519a:	de b7       	in	r29, 0x3e	; 62
    519c:	8a 83       	std	Y+2, r24	; 0x02
	SIGN_STATE_T pass_flag=ENTER_USER;
    519e:	84 e0       	ldi	r24, 0x04	; 4
    51a0:	89 83       	std	Y+1, r24	; 0x01
	switch(USER_OR_PASS)
    51a2:	8a 81       	ldd	r24, Y+2	; 0x02
    51a4:	28 2f       	mov	r18, r24
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	3c 83       	std	Y+4, r19	; 0x04
    51aa:	2b 83       	std	Y+3, r18	; 0x03
    51ac:	8b 81       	ldd	r24, Y+3	; 0x03
    51ae:	9c 81       	ldd	r25, Y+4	; 0x04
    51b0:	81 30       	cpi	r24, 0x01	; 1
    51b2:	91 05       	cpc	r25, r1
    51b4:	31 f0       	breq	.+12     	; 0x51c2 <GET_ACCOUNT+0x32>
    51b6:	2b 81       	ldd	r18, Y+3	; 0x03
    51b8:	3c 81       	ldd	r19, Y+4	; 0x04
    51ba:	22 30       	cpi	r18, 0x02	; 2
    51bc:	31 05       	cpc	r19, r1
    51be:	11 f1       	breq	.+68     	; 0x5204 <GET_ACCOUNT+0x74>
    51c0:	45 c0       	rjmp	.+138    	; 0x524c <GET_ACCOUNT+0xbc>
	{
	case USER :
		DEF_USER[USER_POS_]=kp_val-'0';
    51c2:	80 91 10 03 	lds	r24, 0x0310
    51c6:	28 2f       	mov	r18, r24
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	80 91 0f 03 	lds	r24, 0x030F
    51ce:	80 53       	subi	r24, 0x30	; 48
    51d0:	f9 01       	movw	r30, r18
    51d2:	ec 5e       	subi	r30, 0xEC	; 236
    51d4:	fc 4f       	sbci	r31, 0xFC	; 252
    51d6:	80 83       	st	Z, r24
		HLCD_Send_char_8bit(kp_val);
    51d8:	80 91 0f 03 	lds	r24, 0x030F
    51dc:	0e 94 80 18 	call	0x3100	; 0x3100 <HLCD_Send_char_8bit>
		USER_POS_++;
    51e0:	80 91 10 03 	lds	r24, 0x0310
    51e4:	8f 5f       	subi	r24, 0xFF	; 255
    51e6:	80 93 10 03 	sts	0x0310, r24
		if(USER_POS_==4)
    51ea:	80 91 10 03 	lds	r24, 0x0310
    51ee:	84 30       	cpi	r24, 0x04	; 4
    51f0:	69 f5       	brne	.+90     	; 0x524c <GET_ACCOUNT+0xbc>
		{
			USER_POS_=0;
    51f2:	10 92 10 03 	sts	0x0310, r1
			HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    51f6:	81 e0       	ldi	r24, 0x01	; 1
    51f8:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
			pass_flag=COMPARE_USER();
    51fc:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <COMPARE_USER>
    5200:	89 83       	std	Y+1, r24	; 0x01
    5202:	24 c0       	rjmp	.+72     	; 0x524c <GET_ACCOUNT+0xbc>
		}
		break;
	case PASS:
		DEF_PASSWORD[PASS_POS_]=kp_val-'0';
    5204:	80 91 12 03 	lds	r24, 0x0312
    5208:	28 2f       	mov	r18, r24
    520a:	30 e0       	ldi	r19, 0x00	; 0
    520c:	80 91 0f 03 	lds	r24, 0x030F
    5210:	80 53       	subi	r24, 0x30	; 48
    5212:	f9 01       	movw	r30, r18
    5214:	e4 5e       	subi	r30, 0xE4	; 228
    5216:	fc 4f       	sbci	r31, 0xFC	; 252
    5218:	80 83       	st	Z, r24
		HLCD_Send_char_8bit(kp_val);
    521a:	80 91 0f 03 	lds	r24, 0x030F
    521e:	0e 94 80 18 	call	0x3100	; 0x3100 <HLCD_Send_char_8bit>
		PASS_POS_++;
    5222:	80 91 12 03 	lds	r24, 0x0312
    5226:	8f 5f       	subi	r24, 0xFF	; 255
    5228:	80 93 12 03 	sts	0x0312, r24
		pass_flag=ENTER_PASSWORD;
    522c:	86 e0       	ldi	r24, 0x06	; 6
    522e:	89 83       	std	Y+1, r24	; 0x01
		if(PASS_POS_==4)
    5230:	80 91 12 03 	lds	r24, 0x0312
    5234:	84 30       	cpi	r24, 0x04	; 4
    5236:	51 f4       	brne	.+20     	; 0x524c <GET_ACCOUNT+0xbc>
		{
			pass_flag=SYS_OPENED;
    5238:	87 e0       	ldi	r24, 0x07	; 7
    523a:	89 83       	std	Y+1, r24	; 0x01
			PASS_POS_=0;
    523c:	10 92 12 03 	sts	0x0312, r1
			HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5240:	81 e0       	ldi	r24, 0x01	; 1
    5242:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
			pass_flag=COMPARE_PASSWORD();
    5246:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <COMPARE_PASSWORD>
    524a:	89 83       	std	Y+1, r24	; 0x01
		}
		break;

	default : break;
	}
	return pass_flag;
    524c:	89 81       	ldd	r24, Y+1	; 0x01
}
    524e:	0f 90       	pop	r0
    5250:	0f 90       	pop	r0
    5252:	0f 90       	pop	r0
    5254:	0f 90       	pop	r0
    5256:	cf 91       	pop	r28
    5258:	df 91       	pop	r29
    525a:	08 95       	ret

0000525c <ACCOUNT_CHECK>:

/******************************************************/
void ACCOUNT_CHECK(void)
{
    525c:	df 93       	push	r29
    525e:	cf 93       	push	r28
    5260:	cd b7       	in	r28, 0x3d	; 61
    5262:	de b7       	in	r29, 0x3e	; 62




}
    5264:	cf 91       	pop	r28
    5266:	df 91       	pop	r29
    5268:	08 95       	ret

0000526a <CHANGE_PASSWORD>:
/******************************************************/
/***
 * @brief this FUNCTION is used to change password of a user
 */
u8 CHANGE_PASSWORD(void)
{
    526a:	df 93       	push	r29
    526c:	cf 93       	push	r28
    526e:	cd b7       	in	r28, 0x3d	; 61
    5270:	de b7       	in	r29, 0x3e	; 62
    5272:	2f 97       	sbiw	r28, 0x0f	; 15
    5274:	0f b6       	in	r0, 0x3f	; 63
    5276:	f8 94       	cli
    5278:	de bf       	out	0x3e, r29	; 62
    527a:	0f be       	out	0x3f, r0	; 63
    527c:	cd bf       	out	0x3d, r28	; 61
	u8 STATUS=SYS_OPENED;
    527e:	87 e0       	ldi	r24, 0x07	; 7
    5280:	8f 87       	std	Y+15, r24	; 0x0f
	HLCD_Send_char_8bit(kp_val);
    5282:	80 91 0f 03 	lds	r24, 0x030F
    5286:	0e 94 80 18 	call	0x3100	; 0x3100 <HLCD_Send_char_8bit>
	DEF_PASSWORD[PASS_POS]=kp_val;
    528a:	80 91 11 03 	lds	r24, 0x0311
    528e:	88 2f       	mov	r24, r24
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	20 91 0f 03 	lds	r18, 0x030F
    5296:	fc 01       	movw	r30, r24
    5298:	e4 5e       	subi	r30, 0xE4	; 228
    529a:	fc 4f       	sbci	r31, 0xFC	; 252
    529c:	20 83       	st	Z, r18
	PASS_POS++;
    529e:	80 91 11 03 	lds	r24, 0x0311
    52a2:	8f 5f       	subi	r24, 0xFF	; 255
    52a4:	80 93 11 03 	sts	0x0311, r24
	if(PASS_POS==4)
    52a8:	80 91 11 03 	lds	r24, 0x0311
    52ac:	84 30       	cpi	r24, 0x04	; 4
    52ae:	09 f0       	breq	.+2      	; 0x52b2 <CHANGE_PASSWORD+0x48>
    52b0:	87 c0       	rjmp	.+270    	; 0x53c0 <CHANGE_PASSWORD+0x156>
	{
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    52b2:	81 e0       	ldi	r24, 0x01	; 1
    52b4:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		HEEPROM_WRITE_STRING(&DEF_PASSWORD,4,compared_password_pos+0x04);
    52b8:	80 91 2f 03 	lds	r24, 0x032F
    52bc:	28 2f       	mov	r18, r24
    52be:	2c 5f       	subi	r18, 0xFC	; 252
    52c0:	8c e1       	ldi	r24, 0x1C	; 28
    52c2:	93 e0       	ldi	r25, 0x03	; 3
    52c4:	64 e0       	ldi	r22, 0x04	; 4
    52c6:	42 2f       	mov	r20, r18
    52c8:	0e 94 34 23 	call	0x4668	; 0x4668 <HEEPROM_WRITE_STRING>
		HLCD_Send_String_8bit((u8 *)"New Pass Has Set");
    52cc:	8c e0       	ldi	r24, 0x0C	; 12
    52ce:	91 e0       	ldi	r25, 0x01	; 1
    52d0:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
    52d4:	80 e0       	ldi	r24, 0x00	; 0
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	aa e7       	ldi	r26, 0x7A	; 122
    52da:	b4 e4       	ldi	r27, 0x44	; 68
    52dc:	8b 87       	std	Y+11, r24	; 0x0b
    52de:	9c 87       	std	Y+12, r25	; 0x0c
    52e0:	ad 87       	std	Y+13, r26	; 0x0d
    52e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    52e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    52e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    52ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    52ec:	20 e0       	ldi	r18, 0x00	; 0
    52ee:	30 e0       	ldi	r19, 0x00	; 0
    52f0:	4a ef       	ldi	r20, 0xFA	; 250
    52f2:	54 e4       	ldi	r21, 0x44	; 68
    52f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52f8:	dc 01       	movw	r26, r24
    52fa:	cb 01       	movw	r24, r22
    52fc:	8f 83       	std	Y+7, r24	; 0x07
    52fe:	98 87       	std	Y+8, r25	; 0x08
    5300:	a9 87       	std	Y+9, r26	; 0x09
    5302:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5304:	6f 81       	ldd	r22, Y+7	; 0x07
    5306:	78 85       	ldd	r23, Y+8	; 0x08
    5308:	89 85       	ldd	r24, Y+9	; 0x09
    530a:	9a 85       	ldd	r25, Y+10	; 0x0a
    530c:	20 e0       	ldi	r18, 0x00	; 0
    530e:	30 e0       	ldi	r19, 0x00	; 0
    5310:	40 e8       	ldi	r20, 0x80	; 128
    5312:	5f e3       	ldi	r21, 0x3F	; 63
    5314:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5318:	88 23       	and	r24, r24
    531a:	2c f4       	brge	.+10     	; 0x5326 <CHANGE_PASSWORD+0xbc>
		__ticks = 1;
    531c:	81 e0       	ldi	r24, 0x01	; 1
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	9e 83       	std	Y+6, r25	; 0x06
    5322:	8d 83       	std	Y+5, r24	; 0x05
    5324:	3f c0       	rjmp	.+126    	; 0x53a4 <CHANGE_PASSWORD+0x13a>
	else if (__tmp > 65535)
    5326:	6f 81       	ldd	r22, Y+7	; 0x07
    5328:	78 85       	ldd	r23, Y+8	; 0x08
    532a:	89 85       	ldd	r24, Y+9	; 0x09
    532c:	9a 85       	ldd	r25, Y+10	; 0x0a
    532e:	20 e0       	ldi	r18, 0x00	; 0
    5330:	3f ef       	ldi	r19, 0xFF	; 255
    5332:	4f e7       	ldi	r20, 0x7F	; 127
    5334:	57 e4       	ldi	r21, 0x47	; 71
    5336:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    533a:	18 16       	cp	r1, r24
    533c:	4c f5       	brge	.+82     	; 0x5390 <CHANGE_PASSWORD+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    533e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5340:	7c 85       	ldd	r23, Y+12	; 0x0c
    5342:	8d 85       	ldd	r24, Y+13	; 0x0d
    5344:	9e 85       	ldd	r25, Y+14	; 0x0e
    5346:	20 e0       	ldi	r18, 0x00	; 0
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	40 e2       	ldi	r20, 0x20	; 32
    534c:	51 e4       	ldi	r21, 0x41	; 65
    534e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5352:	dc 01       	movw	r26, r24
    5354:	cb 01       	movw	r24, r22
    5356:	bc 01       	movw	r22, r24
    5358:	cd 01       	movw	r24, r26
    535a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    535e:	dc 01       	movw	r26, r24
    5360:	cb 01       	movw	r24, r22
    5362:	9e 83       	std	Y+6, r25	; 0x06
    5364:	8d 83       	std	Y+5, r24	; 0x05
    5366:	0f c0       	rjmp	.+30     	; 0x5386 <CHANGE_PASSWORD+0x11c>
    5368:	88 ec       	ldi	r24, 0xC8	; 200
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	9c 83       	std	Y+4, r25	; 0x04
    536e:	8b 83       	std	Y+3, r24	; 0x03
    5370:	8b 81       	ldd	r24, Y+3	; 0x03
    5372:	9c 81       	ldd	r25, Y+4	; 0x04
    5374:	01 97       	sbiw	r24, 0x01	; 1
    5376:	f1 f7       	brne	.-4      	; 0x5374 <CHANGE_PASSWORD+0x10a>
    5378:	9c 83       	std	Y+4, r25	; 0x04
    537a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    537c:	8d 81       	ldd	r24, Y+5	; 0x05
    537e:	9e 81       	ldd	r25, Y+6	; 0x06
    5380:	01 97       	sbiw	r24, 0x01	; 1
    5382:	9e 83       	std	Y+6, r25	; 0x06
    5384:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5386:	8d 81       	ldd	r24, Y+5	; 0x05
    5388:	9e 81       	ldd	r25, Y+6	; 0x06
    538a:	00 97       	sbiw	r24, 0x00	; 0
    538c:	69 f7       	brne	.-38     	; 0x5368 <CHANGE_PASSWORD+0xfe>
    538e:	14 c0       	rjmp	.+40     	; 0x53b8 <CHANGE_PASSWORD+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5390:	6f 81       	ldd	r22, Y+7	; 0x07
    5392:	78 85       	ldd	r23, Y+8	; 0x08
    5394:	89 85       	ldd	r24, Y+9	; 0x09
    5396:	9a 85       	ldd	r25, Y+10	; 0x0a
    5398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    539c:	dc 01       	movw	r26, r24
    539e:	cb 01       	movw	r24, r22
    53a0:	9e 83       	std	Y+6, r25	; 0x06
    53a2:	8d 83       	std	Y+5, r24	; 0x05
    53a4:	8d 81       	ldd	r24, Y+5	; 0x05
    53a6:	9e 81       	ldd	r25, Y+6	; 0x06
    53a8:	9a 83       	std	Y+2, r25	; 0x02
    53aa:	89 83       	std	Y+1, r24	; 0x01
    53ac:	89 81       	ldd	r24, Y+1	; 0x01
    53ae:	9a 81       	ldd	r25, Y+2	; 0x02
    53b0:	01 97       	sbiw	r24, 0x01	; 1
    53b2:	f1 f7       	brne	.-4      	; 0x53b0 <CHANGE_PASSWORD+0x146>
    53b4:	9a 83       	std	Y+2, r25	; 0x02
    53b6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		PASS_POS=0;
    53b8:	10 92 11 03 	sts	0x0311, r1
		STATUS=PASSWORD_CHANGED;
    53bc:	89 e0       	ldi	r24, 0x09	; 9
    53be:	8f 87       	std	Y+15, r24	; 0x0f

	}
	return STATUS;
    53c0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    53c2:	2f 96       	adiw	r28, 0x0f	; 15
    53c4:	0f b6       	in	r0, 0x3f	; 63
    53c6:	f8 94       	cli
    53c8:	de bf       	out	0x3e, r29	; 62
    53ca:	0f be       	out	0x3f, r0	; 63
    53cc:	cd bf       	out	0x3d, r28	; 61
    53ce:	cf 91       	pop	r28
    53d0:	df 91       	pop	r29
    53d2:	08 95       	ret

000053d4 <IDLE_STATE>:

void IDLE_STATE(void)
{
    53d4:	df 93       	push	r29
    53d6:	cf 93       	push	r28
    53d8:	cd b7       	in	r28, 0x3d	; 61
    53da:	de b7       	in	r29, 0x3e	; 62

	if('2'==kp_val) // Open System
    53dc:	80 91 0f 03 	lds	r24, 0x030F
    53e0:	82 33       	cpi	r24, 0x32	; 50
    53e2:	49 f4       	brne	.+18     	; 0x53f6 <IDLE_STATE+0x22>
	{
		ENTER_USER_FRAME();
    53e4:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <ENTER_USER_FRAME>
		OPEN_CHANGE_FLAG=1;
    53e8:	81 e0       	ldi	r24, 0x01	; 1
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	90 93 24 03 	sts	0x0324, r25
    53f0:	80 93 23 03 	sts	0x0323, r24
    53f4:	19 c0       	rjmp	.+50     	; 0x5428 <IDLE_STATE+0x54>
	}
	else if('1'==kp_val) // change password
    53f6:	80 91 0f 03 	lds	r24, 0x030F
    53fa:	81 33       	cpi	r24, 0x31	; 49
    53fc:	49 f4       	brne	.+18     	; 0x5410 <IDLE_STATE+0x3c>
	{
		CHANGE_PASSWORD_FRAME();
    53fe:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <CHANGE_PASSWORD_FRAME>
		OPEN_CHANGE_FLAG=2;
    5402:	82 e0       	ldi	r24, 0x02	; 2
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	90 93 24 03 	sts	0x0324, r25
    540a:	80 93 23 03 	sts	0x0323, r24
    540e:	0c c0       	rjmp	.+24     	; 0x5428 <IDLE_STATE+0x54>
	}
	else if ('3'==kp_val)//add user
    5410:	80 91 0f 03 	lds	r24, 0x030F
    5414:	83 33       	cpi	r24, 0x33	; 51
    5416:	41 f4       	brne	.+16     	; 0x5428 <IDLE_STATE+0x54>
	{
		ADD_USER_FRAME();
    5418:	0e 94 62 28 	call	0x50c4	; 0x50c4 <ADD_USER_FRAME>
		OPEN_CHANGE_FLAG=3;
    541c:	83 e0       	ldi	r24, 0x03	; 3
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	90 93 24 03 	sts	0x0324, r25
    5424:	80 93 23 03 	sts	0x0323, r24
	}
	else{/*else of entry kp_val is not 1 or 2*/}
	//	entry=1;
}
    5428:	cf 91       	pop	r28
    542a:	df 91       	pop	r29
    542c:	08 95       	ret

0000542e <BLUETOOTH_SYSTEM_OPENED>:
void BLUETOOTH_SYSTEM_OPENED(void)
{
    542e:	0f 93       	push	r16
    5430:	1f 93       	push	r17
    5432:	df 93       	push	r29
    5434:	cf 93       	push	r28
    5436:	cd b7       	in	r28, 0x3d	; 61
    5438:	de b7       	in	r29, 0x3e	; 62
    543a:	c1 57       	subi	r28, 0x71	; 113
    543c:	d0 40       	sbci	r29, 0x00	; 0
    543e:	0f b6       	in	r0, 0x3f	; 63
    5440:	f8 94       	cli
    5442:	de bf       	out	0x3e, r29	; 62
    5444:	0f be       	out	0x3f, r0	; 63
    5446:	cd bf       	out	0x3d, r28	; 61
	char data;
	data=UART_RECEIVE_CHAR_POOLING();
    5448:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_RECEIVE_CHAR_POOLING>
    544c:	fe 01       	movw	r30, r28
    544e:	ef 58       	subi	r30, 0x8F	; 143
    5450:	ff 4f       	sbci	r31, 0xFF	; 255
    5452:	80 83       	st	Z, r24
	if('1'==data)
    5454:	fe 01       	movw	r30, r28
    5456:	ef 58       	subi	r30, 0x8F	; 143
    5458:	ff 4f       	sbci	r31, 0xFF	; 255
    545a:	80 81       	ld	r24, Z
    545c:	81 33       	cpi	r24, 0x31	; 49
    545e:	09 f0       	breq	.+2      	; 0x5462 <BLUETOOTH_SYSTEM_OPENED+0x34>
    5460:	c0 c0       	rjmp	.+384    	; 0x55e2 <BLUETOOTH_SYSTEM_OPENED+0x1b4>
	{
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5462:	81 e0       	ldi	r24, 0x01	; 1
    5464:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		HLCD_Send_String_Position_8bit("DOOR OPEN",LCD_GO_ROW2,0x00);
    5468:	8d e1       	ldi	r24, 0x1D	; 29
    546a:	91 e0       	ldi	r25, 0x01	; 1
    546c:	60 ec       	ldi	r22, 0xC0	; 192
    546e:	40 e0       	ldi	r20, 0x00	; 0
    5470:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
    5474:	fe 01       	movw	r30, r28
    5476:	e3 59       	subi	r30, 0x93	; 147
    5478:	ff 4f       	sbci	r31, 0xFF	; 255
    547a:	80 e0       	ldi	r24, 0x00	; 0
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	aa e7       	ldi	r26, 0x7A	; 122
    5480:	b4 e4       	ldi	r27, 0x44	; 68
    5482:	80 83       	st	Z, r24
    5484:	91 83       	std	Z+1, r25	; 0x01
    5486:	a2 83       	std	Z+2, r26	; 0x02
    5488:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    548a:	8e 01       	movw	r16, r28
    548c:	07 59       	subi	r16, 0x97	; 151
    548e:	1f 4f       	sbci	r17, 0xFF	; 255
    5490:	fe 01       	movw	r30, r28
    5492:	e3 59       	subi	r30, 0x93	; 147
    5494:	ff 4f       	sbci	r31, 0xFF	; 255
    5496:	60 81       	ld	r22, Z
    5498:	71 81       	ldd	r23, Z+1	; 0x01
    549a:	82 81       	ldd	r24, Z+2	; 0x02
    549c:	93 81       	ldd	r25, Z+3	; 0x03
    549e:	20 e0       	ldi	r18, 0x00	; 0
    54a0:	30 e0       	ldi	r19, 0x00	; 0
    54a2:	4a ef       	ldi	r20, 0xFA	; 250
    54a4:	54 e4       	ldi	r21, 0x44	; 68
    54a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54aa:	dc 01       	movw	r26, r24
    54ac:	cb 01       	movw	r24, r22
    54ae:	f8 01       	movw	r30, r16
    54b0:	80 83       	st	Z, r24
    54b2:	91 83       	std	Z+1, r25	; 0x01
    54b4:	a2 83       	std	Z+2, r26	; 0x02
    54b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    54b8:	fe 01       	movw	r30, r28
    54ba:	e7 59       	subi	r30, 0x97	; 151
    54bc:	ff 4f       	sbci	r31, 0xFF	; 255
    54be:	60 81       	ld	r22, Z
    54c0:	71 81       	ldd	r23, Z+1	; 0x01
    54c2:	82 81       	ldd	r24, Z+2	; 0x02
    54c4:	93 81       	ldd	r25, Z+3	; 0x03
    54c6:	20 e0       	ldi	r18, 0x00	; 0
    54c8:	30 e0       	ldi	r19, 0x00	; 0
    54ca:	40 e8       	ldi	r20, 0x80	; 128
    54cc:	5f e3       	ldi	r21, 0x3F	; 63
    54ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54d2:	88 23       	and	r24, r24
    54d4:	44 f4       	brge	.+16     	; 0x54e6 <BLUETOOTH_SYSTEM_OPENED+0xb8>
		__ticks = 1;
    54d6:	fe 01       	movw	r30, r28
    54d8:	e9 59       	subi	r30, 0x99	; 153
    54da:	ff 4f       	sbci	r31, 0xFF	; 255
    54dc:	81 e0       	ldi	r24, 0x01	; 1
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	91 83       	std	Z+1, r25	; 0x01
    54e2:	80 83       	st	Z, r24
    54e4:	64 c0       	rjmp	.+200    	; 0x55ae <BLUETOOTH_SYSTEM_OPENED+0x180>
	else if (__tmp > 65535)
    54e6:	fe 01       	movw	r30, r28
    54e8:	e7 59       	subi	r30, 0x97	; 151
    54ea:	ff 4f       	sbci	r31, 0xFF	; 255
    54ec:	60 81       	ld	r22, Z
    54ee:	71 81       	ldd	r23, Z+1	; 0x01
    54f0:	82 81       	ldd	r24, Z+2	; 0x02
    54f2:	93 81       	ldd	r25, Z+3	; 0x03
    54f4:	20 e0       	ldi	r18, 0x00	; 0
    54f6:	3f ef       	ldi	r19, 0xFF	; 255
    54f8:	4f e7       	ldi	r20, 0x7F	; 127
    54fa:	57 e4       	ldi	r21, 0x47	; 71
    54fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5500:	18 16       	cp	r1, r24
    5502:	0c f0       	brlt	.+2      	; 0x5506 <BLUETOOTH_SYSTEM_OPENED+0xd8>
    5504:	43 c0       	rjmp	.+134    	; 0x558c <BLUETOOTH_SYSTEM_OPENED+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5506:	fe 01       	movw	r30, r28
    5508:	e3 59       	subi	r30, 0x93	; 147
    550a:	ff 4f       	sbci	r31, 0xFF	; 255
    550c:	60 81       	ld	r22, Z
    550e:	71 81       	ldd	r23, Z+1	; 0x01
    5510:	82 81       	ldd	r24, Z+2	; 0x02
    5512:	93 81       	ldd	r25, Z+3	; 0x03
    5514:	20 e0       	ldi	r18, 0x00	; 0
    5516:	30 e0       	ldi	r19, 0x00	; 0
    5518:	40 e2       	ldi	r20, 0x20	; 32
    551a:	51 e4       	ldi	r21, 0x41	; 65
    551c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5520:	dc 01       	movw	r26, r24
    5522:	cb 01       	movw	r24, r22
    5524:	8e 01       	movw	r16, r28
    5526:	09 59       	subi	r16, 0x99	; 153
    5528:	1f 4f       	sbci	r17, 0xFF	; 255
    552a:	bc 01       	movw	r22, r24
    552c:	cd 01       	movw	r24, r26
    552e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5532:	dc 01       	movw	r26, r24
    5534:	cb 01       	movw	r24, r22
    5536:	f8 01       	movw	r30, r16
    5538:	91 83       	std	Z+1, r25	; 0x01
    553a:	80 83       	st	Z, r24
    553c:	1f c0       	rjmp	.+62     	; 0x557c <BLUETOOTH_SYSTEM_OPENED+0x14e>
    553e:	fe 01       	movw	r30, r28
    5540:	eb 59       	subi	r30, 0x9B	; 155
    5542:	ff 4f       	sbci	r31, 0xFF	; 255
    5544:	88 ec       	ldi	r24, 0xC8	; 200
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	91 83       	std	Z+1, r25	; 0x01
    554a:	80 83       	st	Z, r24
    554c:	fe 01       	movw	r30, r28
    554e:	eb 59       	subi	r30, 0x9B	; 155
    5550:	ff 4f       	sbci	r31, 0xFF	; 255
    5552:	80 81       	ld	r24, Z
    5554:	91 81       	ldd	r25, Z+1	; 0x01
    5556:	01 97       	sbiw	r24, 0x01	; 1
    5558:	f1 f7       	brne	.-4      	; 0x5556 <BLUETOOTH_SYSTEM_OPENED+0x128>
    555a:	fe 01       	movw	r30, r28
    555c:	eb 59       	subi	r30, 0x9B	; 155
    555e:	ff 4f       	sbci	r31, 0xFF	; 255
    5560:	91 83       	std	Z+1, r25	; 0x01
    5562:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5564:	de 01       	movw	r26, r28
    5566:	a9 59       	subi	r26, 0x99	; 153
    5568:	bf 4f       	sbci	r27, 0xFF	; 255
    556a:	fe 01       	movw	r30, r28
    556c:	e9 59       	subi	r30, 0x99	; 153
    556e:	ff 4f       	sbci	r31, 0xFF	; 255
    5570:	80 81       	ld	r24, Z
    5572:	91 81       	ldd	r25, Z+1	; 0x01
    5574:	01 97       	sbiw	r24, 0x01	; 1
    5576:	11 96       	adiw	r26, 0x01	; 1
    5578:	9c 93       	st	X, r25
    557a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    557c:	fe 01       	movw	r30, r28
    557e:	e9 59       	subi	r30, 0x99	; 153
    5580:	ff 4f       	sbci	r31, 0xFF	; 255
    5582:	80 81       	ld	r24, Z
    5584:	91 81       	ldd	r25, Z+1	; 0x01
    5586:	00 97       	sbiw	r24, 0x00	; 0
    5588:	d1 f6       	brne	.-76     	; 0x553e <BLUETOOTH_SYSTEM_OPENED+0x110>
    558a:	27 c0       	rjmp	.+78     	; 0x55da <BLUETOOTH_SYSTEM_OPENED+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    558c:	8e 01       	movw	r16, r28
    558e:	09 59       	subi	r16, 0x99	; 153
    5590:	1f 4f       	sbci	r17, 0xFF	; 255
    5592:	fe 01       	movw	r30, r28
    5594:	e7 59       	subi	r30, 0x97	; 151
    5596:	ff 4f       	sbci	r31, 0xFF	; 255
    5598:	60 81       	ld	r22, Z
    559a:	71 81       	ldd	r23, Z+1	; 0x01
    559c:	82 81       	ldd	r24, Z+2	; 0x02
    559e:	93 81       	ldd	r25, Z+3	; 0x03
    55a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22
    55a8:	f8 01       	movw	r30, r16
    55aa:	91 83       	std	Z+1, r25	; 0x01
    55ac:	80 83       	st	Z, r24
    55ae:	de 01       	movw	r26, r28
    55b0:	ad 59       	subi	r26, 0x9D	; 157
    55b2:	bf 4f       	sbci	r27, 0xFF	; 255
    55b4:	fe 01       	movw	r30, r28
    55b6:	e9 59       	subi	r30, 0x99	; 153
    55b8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ba:	80 81       	ld	r24, Z
    55bc:	91 81       	ldd	r25, Z+1	; 0x01
    55be:	8d 93       	st	X+, r24
    55c0:	9c 93       	st	X, r25
    55c2:	fe 01       	movw	r30, r28
    55c4:	ed 59       	subi	r30, 0x9D	; 157
    55c6:	ff 4f       	sbci	r31, 0xFF	; 255
    55c8:	80 81       	ld	r24, Z
    55ca:	91 81       	ldd	r25, Z+1	; 0x01
    55cc:	01 97       	sbiw	r24, 0x01	; 1
    55ce:	f1 f7       	brne	.-4      	; 0x55cc <BLUETOOTH_SYSTEM_OPENED+0x19e>
    55d0:	fe 01       	movw	r30, r28
    55d2:	ed 59       	subi	r30, 0x9D	; 157
    55d4:	ff 4f       	sbci	r31, 0xFF	; 255
    55d6:	91 83       	std	Z+1, r25	; 0x01
    55d8:	80 83       	st	Z, r24
		_delay_ms(1000);
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    55da:	81 e0       	ldi	r24, 0x01	; 1
    55dc:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    55e0:	3e c4       	rjmp	.+2172   	; 0x5e5e <BLUETOOTH_SYSTEM_OPENED+0xa30>

	}
	else if('2'==data)
    55e2:	fe 01       	movw	r30, r28
    55e4:	ef 58       	subi	r30, 0x8F	; 143
    55e6:	ff 4f       	sbci	r31, 0xFF	; 255
    55e8:	80 81       	ld	r24, Z
    55ea:	82 33       	cpi	r24, 0x32	; 50
    55ec:	09 f0       	breq	.+2      	; 0x55f0 <BLUETOOTH_SYSTEM_OPENED+0x1c2>
    55ee:	c0 c0       	rjmp	.+384    	; 0x5770 <BLUETOOTH_SYSTEM_OPENED+0x342>
	{
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    55f0:	81 e0       	ldi	r24, 0x01	; 1
    55f2:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		HLCD_Send_String_Position_8bit("DOOR CLOSED",LCD_GO_ROW2,0x00);
    55f6:	87 e2       	ldi	r24, 0x27	; 39
    55f8:	91 e0       	ldi	r25, 0x01	; 1
    55fa:	60 ec       	ldi	r22, 0xC0	; 192
    55fc:	40 e0       	ldi	r20, 0x00	; 0
    55fe:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
    5602:	fe 01       	movw	r30, r28
    5604:	e1 5a       	subi	r30, 0xA1	; 161
    5606:	ff 4f       	sbci	r31, 0xFF	; 255
    5608:	80 e0       	ldi	r24, 0x00	; 0
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	aa e7       	ldi	r26, 0x7A	; 122
    560e:	b4 e4       	ldi	r27, 0x44	; 68
    5610:	80 83       	st	Z, r24
    5612:	91 83       	std	Z+1, r25	; 0x01
    5614:	a2 83       	std	Z+2, r26	; 0x02
    5616:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5618:	8e 01       	movw	r16, r28
    561a:	05 5a       	subi	r16, 0xA5	; 165
    561c:	1f 4f       	sbci	r17, 0xFF	; 255
    561e:	fe 01       	movw	r30, r28
    5620:	e1 5a       	subi	r30, 0xA1	; 161
    5622:	ff 4f       	sbci	r31, 0xFF	; 255
    5624:	60 81       	ld	r22, Z
    5626:	71 81       	ldd	r23, Z+1	; 0x01
    5628:	82 81       	ldd	r24, Z+2	; 0x02
    562a:	93 81       	ldd	r25, Z+3	; 0x03
    562c:	20 e0       	ldi	r18, 0x00	; 0
    562e:	30 e0       	ldi	r19, 0x00	; 0
    5630:	4a ef       	ldi	r20, 0xFA	; 250
    5632:	54 e4       	ldi	r21, 0x44	; 68
    5634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5638:	dc 01       	movw	r26, r24
    563a:	cb 01       	movw	r24, r22
    563c:	f8 01       	movw	r30, r16
    563e:	80 83       	st	Z, r24
    5640:	91 83       	std	Z+1, r25	; 0x01
    5642:	a2 83       	std	Z+2, r26	; 0x02
    5644:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5646:	fe 01       	movw	r30, r28
    5648:	e5 5a       	subi	r30, 0xA5	; 165
    564a:	ff 4f       	sbci	r31, 0xFF	; 255
    564c:	60 81       	ld	r22, Z
    564e:	71 81       	ldd	r23, Z+1	; 0x01
    5650:	82 81       	ldd	r24, Z+2	; 0x02
    5652:	93 81       	ldd	r25, Z+3	; 0x03
    5654:	20 e0       	ldi	r18, 0x00	; 0
    5656:	30 e0       	ldi	r19, 0x00	; 0
    5658:	40 e8       	ldi	r20, 0x80	; 128
    565a:	5f e3       	ldi	r21, 0x3F	; 63
    565c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5660:	88 23       	and	r24, r24
    5662:	44 f4       	brge	.+16     	; 0x5674 <BLUETOOTH_SYSTEM_OPENED+0x246>
		__ticks = 1;
    5664:	fe 01       	movw	r30, r28
    5666:	e7 5a       	subi	r30, 0xA7	; 167
    5668:	ff 4f       	sbci	r31, 0xFF	; 255
    566a:	81 e0       	ldi	r24, 0x01	; 1
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	91 83       	std	Z+1, r25	; 0x01
    5670:	80 83       	st	Z, r24
    5672:	64 c0       	rjmp	.+200    	; 0x573c <BLUETOOTH_SYSTEM_OPENED+0x30e>
	else if (__tmp > 65535)
    5674:	fe 01       	movw	r30, r28
    5676:	e5 5a       	subi	r30, 0xA5	; 165
    5678:	ff 4f       	sbci	r31, 0xFF	; 255
    567a:	60 81       	ld	r22, Z
    567c:	71 81       	ldd	r23, Z+1	; 0x01
    567e:	82 81       	ldd	r24, Z+2	; 0x02
    5680:	93 81       	ldd	r25, Z+3	; 0x03
    5682:	20 e0       	ldi	r18, 0x00	; 0
    5684:	3f ef       	ldi	r19, 0xFF	; 255
    5686:	4f e7       	ldi	r20, 0x7F	; 127
    5688:	57 e4       	ldi	r21, 0x47	; 71
    568a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    568e:	18 16       	cp	r1, r24
    5690:	0c f0       	brlt	.+2      	; 0x5694 <BLUETOOTH_SYSTEM_OPENED+0x266>
    5692:	43 c0       	rjmp	.+134    	; 0x571a <BLUETOOTH_SYSTEM_OPENED+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5694:	fe 01       	movw	r30, r28
    5696:	e1 5a       	subi	r30, 0xA1	; 161
    5698:	ff 4f       	sbci	r31, 0xFF	; 255
    569a:	60 81       	ld	r22, Z
    569c:	71 81       	ldd	r23, Z+1	; 0x01
    569e:	82 81       	ldd	r24, Z+2	; 0x02
    56a0:	93 81       	ldd	r25, Z+3	; 0x03
    56a2:	20 e0       	ldi	r18, 0x00	; 0
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	40 e2       	ldi	r20, 0x20	; 32
    56a8:	51 e4       	ldi	r21, 0x41	; 65
    56aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ae:	dc 01       	movw	r26, r24
    56b0:	cb 01       	movw	r24, r22
    56b2:	8e 01       	movw	r16, r28
    56b4:	07 5a       	subi	r16, 0xA7	; 167
    56b6:	1f 4f       	sbci	r17, 0xFF	; 255
    56b8:	bc 01       	movw	r22, r24
    56ba:	cd 01       	movw	r24, r26
    56bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56c0:	dc 01       	movw	r26, r24
    56c2:	cb 01       	movw	r24, r22
    56c4:	f8 01       	movw	r30, r16
    56c6:	91 83       	std	Z+1, r25	; 0x01
    56c8:	80 83       	st	Z, r24
    56ca:	1f c0       	rjmp	.+62     	; 0x570a <BLUETOOTH_SYSTEM_OPENED+0x2dc>
    56cc:	fe 01       	movw	r30, r28
    56ce:	e9 5a       	subi	r30, 0xA9	; 169
    56d0:	ff 4f       	sbci	r31, 0xFF	; 255
    56d2:	88 ec       	ldi	r24, 0xC8	; 200
    56d4:	90 e0       	ldi	r25, 0x00	; 0
    56d6:	91 83       	std	Z+1, r25	; 0x01
    56d8:	80 83       	st	Z, r24
    56da:	fe 01       	movw	r30, r28
    56dc:	e9 5a       	subi	r30, 0xA9	; 169
    56de:	ff 4f       	sbci	r31, 0xFF	; 255
    56e0:	80 81       	ld	r24, Z
    56e2:	91 81       	ldd	r25, Z+1	; 0x01
    56e4:	01 97       	sbiw	r24, 0x01	; 1
    56e6:	f1 f7       	brne	.-4      	; 0x56e4 <BLUETOOTH_SYSTEM_OPENED+0x2b6>
    56e8:	fe 01       	movw	r30, r28
    56ea:	e9 5a       	subi	r30, 0xA9	; 169
    56ec:	ff 4f       	sbci	r31, 0xFF	; 255
    56ee:	91 83       	std	Z+1, r25	; 0x01
    56f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56f2:	de 01       	movw	r26, r28
    56f4:	a7 5a       	subi	r26, 0xA7	; 167
    56f6:	bf 4f       	sbci	r27, 0xFF	; 255
    56f8:	fe 01       	movw	r30, r28
    56fa:	e7 5a       	subi	r30, 0xA7	; 167
    56fc:	ff 4f       	sbci	r31, 0xFF	; 255
    56fe:	80 81       	ld	r24, Z
    5700:	91 81       	ldd	r25, Z+1	; 0x01
    5702:	01 97       	sbiw	r24, 0x01	; 1
    5704:	11 96       	adiw	r26, 0x01	; 1
    5706:	9c 93       	st	X, r25
    5708:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    570a:	fe 01       	movw	r30, r28
    570c:	e7 5a       	subi	r30, 0xA7	; 167
    570e:	ff 4f       	sbci	r31, 0xFF	; 255
    5710:	80 81       	ld	r24, Z
    5712:	91 81       	ldd	r25, Z+1	; 0x01
    5714:	00 97       	sbiw	r24, 0x00	; 0
    5716:	d1 f6       	brne	.-76     	; 0x56cc <BLUETOOTH_SYSTEM_OPENED+0x29e>
    5718:	27 c0       	rjmp	.+78     	; 0x5768 <BLUETOOTH_SYSTEM_OPENED+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    571a:	8e 01       	movw	r16, r28
    571c:	07 5a       	subi	r16, 0xA7	; 167
    571e:	1f 4f       	sbci	r17, 0xFF	; 255
    5720:	fe 01       	movw	r30, r28
    5722:	e5 5a       	subi	r30, 0xA5	; 165
    5724:	ff 4f       	sbci	r31, 0xFF	; 255
    5726:	60 81       	ld	r22, Z
    5728:	71 81       	ldd	r23, Z+1	; 0x01
    572a:	82 81       	ldd	r24, Z+2	; 0x02
    572c:	93 81       	ldd	r25, Z+3	; 0x03
    572e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5732:	dc 01       	movw	r26, r24
    5734:	cb 01       	movw	r24, r22
    5736:	f8 01       	movw	r30, r16
    5738:	91 83       	std	Z+1, r25	; 0x01
    573a:	80 83       	st	Z, r24
    573c:	de 01       	movw	r26, r28
    573e:	ab 5a       	subi	r26, 0xAB	; 171
    5740:	bf 4f       	sbci	r27, 0xFF	; 255
    5742:	fe 01       	movw	r30, r28
    5744:	e7 5a       	subi	r30, 0xA7	; 167
    5746:	ff 4f       	sbci	r31, 0xFF	; 255
    5748:	80 81       	ld	r24, Z
    574a:	91 81       	ldd	r25, Z+1	; 0x01
    574c:	8d 93       	st	X+, r24
    574e:	9c 93       	st	X, r25
    5750:	fe 01       	movw	r30, r28
    5752:	eb 5a       	subi	r30, 0xAB	; 171
    5754:	ff 4f       	sbci	r31, 0xFF	; 255
    5756:	80 81       	ld	r24, Z
    5758:	91 81       	ldd	r25, Z+1	; 0x01
    575a:	01 97       	sbiw	r24, 0x01	; 1
    575c:	f1 f7       	brne	.-4      	; 0x575a <BLUETOOTH_SYSTEM_OPENED+0x32c>
    575e:	fe 01       	movw	r30, r28
    5760:	eb 5a       	subi	r30, 0xAB	; 171
    5762:	ff 4f       	sbci	r31, 0xFF	; 255
    5764:	91 83       	std	Z+1, r25	; 0x01
    5766:	80 83       	st	Z, r24
		_delay_ms(1000);
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5768:	81 e0       	ldi	r24, 0x01	; 1
    576a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    576e:	77 c3       	rjmp	.+1774   	; 0x5e5e <BLUETOOTH_SYSTEM_OPENED+0xa30>

	}
	else if('3'==data)
    5770:	fe 01       	movw	r30, r28
    5772:	ef 58       	subi	r30, 0x8F	; 143
    5774:	ff 4f       	sbci	r31, 0xFF	; 255
    5776:	80 81       	ld	r24, Z
    5778:	83 33       	cpi	r24, 0x33	; 51
    577a:	09 f0       	breq	.+2      	; 0x577e <BLUETOOTH_SYSTEM_OPENED+0x350>
    577c:	c0 c0       	rjmp	.+384    	; 0x58fe <BLUETOOTH_SYSTEM_OPENED+0x4d0>
	{
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    577e:	81 e0       	ldi	r24, 0x01	; 1
    5780:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		HLCD_Send_String_Position_8bit("FAN STARTED",LCD_GO_ROW2,0x00);
    5784:	83 e3       	ldi	r24, 0x33	; 51
    5786:	91 e0       	ldi	r25, 0x01	; 1
    5788:	60 ec       	ldi	r22, 0xC0	; 192
    578a:	40 e0       	ldi	r20, 0x00	; 0
    578c:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
    5790:	fe 01       	movw	r30, r28
    5792:	ef 5a       	subi	r30, 0xAF	; 175
    5794:	ff 4f       	sbci	r31, 0xFF	; 255
    5796:	80 e0       	ldi	r24, 0x00	; 0
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	aa e7       	ldi	r26, 0x7A	; 122
    579c:	b4 e4       	ldi	r27, 0x44	; 68
    579e:	80 83       	st	Z, r24
    57a0:	91 83       	std	Z+1, r25	; 0x01
    57a2:	a2 83       	std	Z+2, r26	; 0x02
    57a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57a6:	8e 01       	movw	r16, r28
    57a8:	03 5b       	subi	r16, 0xB3	; 179
    57aa:	1f 4f       	sbci	r17, 0xFF	; 255
    57ac:	fe 01       	movw	r30, r28
    57ae:	ef 5a       	subi	r30, 0xAF	; 175
    57b0:	ff 4f       	sbci	r31, 0xFF	; 255
    57b2:	60 81       	ld	r22, Z
    57b4:	71 81       	ldd	r23, Z+1	; 0x01
    57b6:	82 81       	ldd	r24, Z+2	; 0x02
    57b8:	93 81       	ldd	r25, Z+3	; 0x03
    57ba:	20 e0       	ldi	r18, 0x00	; 0
    57bc:	30 e0       	ldi	r19, 0x00	; 0
    57be:	4a ef       	ldi	r20, 0xFA	; 250
    57c0:	54 e4       	ldi	r21, 0x44	; 68
    57c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57c6:	dc 01       	movw	r26, r24
    57c8:	cb 01       	movw	r24, r22
    57ca:	f8 01       	movw	r30, r16
    57cc:	80 83       	st	Z, r24
    57ce:	91 83       	std	Z+1, r25	; 0x01
    57d0:	a2 83       	std	Z+2, r26	; 0x02
    57d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    57d4:	fe 01       	movw	r30, r28
    57d6:	e3 5b       	subi	r30, 0xB3	; 179
    57d8:	ff 4f       	sbci	r31, 0xFF	; 255
    57da:	60 81       	ld	r22, Z
    57dc:	71 81       	ldd	r23, Z+1	; 0x01
    57de:	82 81       	ldd	r24, Z+2	; 0x02
    57e0:	93 81       	ldd	r25, Z+3	; 0x03
    57e2:	20 e0       	ldi	r18, 0x00	; 0
    57e4:	30 e0       	ldi	r19, 0x00	; 0
    57e6:	40 e8       	ldi	r20, 0x80	; 128
    57e8:	5f e3       	ldi	r21, 0x3F	; 63
    57ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57ee:	88 23       	and	r24, r24
    57f0:	44 f4       	brge	.+16     	; 0x5802 <BLUETOOTH_SYSTEM_OPENED+0x3d4>
		__ticks = 1;
    57f2:	fe 01       	movw	r30, r28
    57f4:	e5 5b       	subi	r30, 0xB5	; 181
    57f6:	ff 4f       	sbci	r31, 0xFF	; 255
    57f8:	81 e0       	ldi	r24, 0x01	; 1
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	91 83       	std	Z+1, r25	; 0x01
    57fe:	80 83       	st	Z, r24
    5800:	64 c0       	rjmp	.+200    	; 0x58ca <BLUETOOTH_SYSTEM_OPENED+0x49c>
	else if (__tmp > 65535)
    5802:	fe 01       	movw	r30, r28
    5804:	e3 5b       	subi	r30, 0xB3	; 179
    5806:	ff 4f       	sbci	r31, 0xFF	; 255
    5808:	60 81       	ld	r22, Z
    580a:	71 81       	ldd	r23, Z+1	; 0x01
    580c:	82 81       	ldd	r24, Z+2	; 0x02
    580e:	93 81       	ldd	r25, Z+3	; 0x03
    5810:	20 e0       	ldi	r18, 0x00	; 0
    5812:	3f ef       	ldi	r19, 0xFF	; 255
    5814:	4f e7       	ldi	r20, 0x7F	; 127
    5816:	57 e4       	ldi	r21, 0x47	; 71
    5818:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    581c:	18 16       	cp	r1, r24
    581e:	0c f0       	brlt	.+2      	; 0x5822 <BLUETOOTH_SYSTEM_OPENED+0x3f4>
    5820:	43 c0       	rjmp	.+134    	; 0x58a8 <BLUETOOTH_SYSTEM_OPENED+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5822:	fe 01       	movw	r30, r28
    5824:	ef 5a       	subi	r30, 0xAF	; 175
    5826:	ff 4f       	sbci	r31, 0xFF	; 255
    5828:	60 81       	ld	r22, Z
    582a:	71 81       	ldd	r23, Z+1	; 0x01
    582c:	82 81       	ldd	r24, Z+2	; 0x02
    582e:	93 81       	ldd	r25, Z+3	; 0x03
    5830:	20 e0       	ldi	r18, 0x00	; 0
    5832:	30 e0       	ldi	r19, 0x00	; 0
    5834:	40 e2       	ldi	r20, 0x20	; 32
    5836:	51 e4       	ldi	r21, 0x41	; 65
    5838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    583c:	dc 01       	movw	r26, r24
    583e:	cb 01       	movw	r24, r22
    5840:	8e 01       	movw	r16, r28
    5842:	05 5b       	subi	r16, 0xB5	; 181
    5844:	1f 4f       	sbci	r17, 0xFF	; 255
    5846:	bc 01       	movw	r22, r24
    5848:	cd 01       	movw	r24, r26
    584a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    584e:	dc 01       	movw	r26, r24
    5850:	cb 01       	movw	r24, r22
    5852:	f8 01       	movw	r30, r16
    5854:	91 83       	std	Z+1, r25	; 0x01
    5856:	80 83       	st	Z, r24
    5858:	1f c0       	rjmp	.+62     	; 0x5898 <BLUETOOTH_SYSTEM_OPENED+0x46a>
    585a:	fe 01       	movw	r30, r28
    585c:	e7 5b       	subi	r30, 0xB7	; 183
    585e:	ff 4f       	sbci	r31, 0xFF	; 255
    5860:	88 ec       	ldi	r24, 0xC8	; 200
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	91 83       	std	Z+1, r25	; 0x01
    5866:	80 83       	st	Z, r24
    5868:	fe 01       	movw	r30, r28
    586a:	e7 5b       	subi	r30, 0xB7	; 183
    586c:	ff 4f       	sbci	r31, 0xFF	; 255
    586e:	80 81       	ld	r24, Z
    5870:	91 81       	ldd	r25, Z+1	; 0x01
    5872:	01 97       	sbiw	r24, 0x01	; 1
    5874:	f1 f7       	brne	.-4      	; 0x5872 <BLUETOOTH_SYSTEM_OPENED+0x444>
    5876:	fe 01       	movw	r30, r28
    5878:	e7 5b       	subi	r30, 0xB7	; 183
    587a:	ff 4f       	sbci	r31, 0xFF	; 255
    587c:	91 83       	std	Z+1, r25	; 0x01
    587e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5880:	de 01       	movw	r26, r28
    5882:	a5 5b       	subi	r26, 0xB5	; 181
    5884:	bf 4f       	sbci	r27, 0xFF	; 255
    5886:	fe 01       	movw	r30, r28
    5888:	e5 5b       	subi	r30, 0xB5	; 181
    588a:	ff 4f       	sbci	r31, 0xFF	; 255
    588c:	80 81       	ld	r24, Z
    588e:	91 81       	ldd	r25, Z+1	; 0x01
    5890:	01 97       	sbiw	r24, 0x01	; 1
    5892:	11 96       	adiw	r26, 0x01	; 1
    5894:	9c 93       	st	X, r25
    5896:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5898:	fe 01       	movw	r30, r28
    589a:	e5 5b       	subi	r30, 0xB5	; 181
    589c:	ff 4f       	sbci	r31, 0xFF	; 255
    589e:	80 81       	ld	r24, Z
    58a0:	91 81       	ldd	r25, Z+1	; 0x01
    58a2:	00 97       	sbiw	r24, 0x00	; 0
    58a4:	d1 f6       	brne	.-76     	; 0x585a <BLUETOOTH_SYSTEM_OPENED+0x42c>
    58a6:	27 c0       	rjmp	.+78     	; 0x58f6 <BLUETOOTH_SYSTEM_OPENED+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58a8:	8e 01       	movw	r16, r28
    58aa:	05 5b       	subi	r16, 0xB5	; 181
    58ac:	1f 4f       	sbci	r17, 0xFF	; 255
    58ae:	fe 01       	movw	r30, r28
    58b0:	e3 5b       	subi	r30, 0xB3	; 179
    58b2:	ff 4f       	sbci	r31, 0xFF	; 255
    58b4:	60 81       	ld	r22, Z
    58b6:	71 81       	ldd	r23, Z+1	; 0x01
    58b8:	82 81       	ldd	r24, Z+2	; 0x02
    58ba:	93 81       	ldd	r25, Z+3	; 0x03
    58bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58c0:	dc 01       	movw	r26, r24
    58c2:	cb 01       	movw	r24, r22
    58c4:	f8 01       	movw	r30, r16
    58c6:	91 83       	std	Z+1, r25	; 0x01
    58c8:	80 83       	st	Z, r24
    58ca:	de 01       	movw	r26, r28
    58cc:	a9 5b       	subi	r26, 0xB9	; 185
    58ce:	bf 4f       	sbci	r27, 0xFF	; 255
    58d0:	fe 01       	movw	r30, r28
    58d2:	e5 5b       	subi	r30, 0xB5	; 181
    58d4:	ff 4f       	sbci	r31, 0xFF	; 255
    58d6:	80 81       	ld	r24, Z
    58d8:	91 81       	ldd	r25, Z+1	; 0x01
    58da:	8d 93       	st	X+, r24
    58dc:	9c 93       	st	X, r25
    58de:	fe 01       	movw	r30, r28
    58e0:	e9 5b       	subi	r30, 0xB9	; 185
    58e2:	ff 4f       	sbci	r31, 0xFF	; 255
    58e4:	80 81       	ld	r24, Z
    58e6:	91 81       	ldd	r25, Z+1	; 0x01
    58e8:	01 97       	sbiw	r24, 0x01	; 1
    58ea:	f1 f7       	brne	.-4      	; 0x58e8 <BLUETOOTH_SYSTEM_OPENED+0x4ba>
    58ec:	fe 01       	movw	r30, r28
    58ee:	e9 5b       	subi	r30, 0xB9	; 185
    58f0:	ff 4f       	sbci	r31, 0xFF	; 255
    58f2:	91 83       	std	Z+1, r25	; 0x01
    58f4:	80 83       	st	Z, r24
		_delay_ms(1000);
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    58f6:	81 e0       	ldi	r24, 0x01	; 1
    58f8:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    58fc:	b0 c2       	rjmp	.+1376   	; 0x5e5e <BLUETOOTH_SYSTEM_OPENED+0xa30>

	}
	else if('4'==data)
    58fe:	fe 01       	movw	r30, r28
    5900:	ef 58       	subi	r30, 0x8F	; 143
    5902:	ff 4f       	sbci	r31, 0xFF	; 255
    5904:	80 81       	ld	r24, Z
    5906:	84 33       	cpi	r24, 0x34	; 52
    5908:	09 f0       	breq	.+2      	; 0x590c <BLUETOOTH_SYSTEM_OPENED+0x4de>
    590a:	92 c0       	rjmp	.+292    	; 0x5a30 <BLUETOOTH_SYSTEM_OPENED+0x602>
	{
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    590c:	81 e0       	ldi	r24, 0x01	; 1
    590e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		HLCD_Send_String_Position_8bit("FAN STOPED",LCD_GO_ROW2,0x00);
    5912:	8f e3       	ldi	r24, 0x3F	; 63
    5914:	91 e0       	ldi	r25, 0x01	; 1
    5916:	60 ec       	ldi	r22, 0xC0	; 192
    5918:	40 e0       	ldi	r20, 0x00	; 0
    591a:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
    591e:	fe 01       	movw	r30, r28
    5920:	ed 5b       	subi	r30, 0xBD	; 189
    5922:	ff 4f       	sbci	r31, 0xFF	; 255
    5924:	80 e0       	ldi	r24, 0x00	; 0
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	aa e7       	ldi	r26, 0x7A	; 122
    592a:	b4 e4       	ldi	r27, 0x44	; 68
    592c:	80 83       	st	Z, r24
    592e:	91 83       	std	Z+1, r25	; 0x01
    5930:	a2 83       	std	Z+2, r26	; 0x02
    5932:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5934:	8e 01       	movw	r16, r28
    5936:	01 5c       	subi	r16, 0xC1	; 193
    5938:	1f 4f       	sbci	r17, 0xFF	; 255
    593a:	fe 01       	movw	r30, r28
    593c:	ed 5b       	subi	r30, 0xBD	; 189
    593e:	ff 4f       	sbci	r31, 0xFF	; 255
    5940:	60 81       	ld	r22, Z
    5942:	71 81       	ldd	r23, Z+1	; 0x01
    5944:	82 81       	ldd	r24, Z+2	; 0x02
    5946:	93 81       	ldd	r25, Z+3	; 0x03
    5948:	20 e0       	ldi	r18, 0x00	; 0
    594a:	30 e0       	ldi	r19, 0x00	; 0
    594c:	4a ef       	ldi	r20, 0xFA	; 250
    594e:	54 e4       	ldi	r21, 0x44	; 68
    5950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5954:	dc 01       	movw	r26, r24
    5956:	cb 01       	movw	r24, r22
    5958:	f8 01       	movw	r30, r16
    595a:	80 83       	st	Z, r24
    595c:	91 83       	std	Z+1, r25	; 0x01
    595e:	a2 83       	std	Z+2, r26	; 0x02
    5960:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5962:	fe 01       	movw	r30, r28
    5964:	ff 96       	adiw	r30, 0x3f	; 63
    5966:	60 81       	ld	r22, Z
    5968:	71 81       	ldd	r23, Z+1	; 0x01
    596a:	82 81       	ldd	r24, Z+2	; 0x02
    596c:	93 81       	ldd	r25, Z+3	; 0x03
    596e:	20 e0       	ldi	r18, 0x00	; 0
    5970:	30 e0       	ldi	r19, 0x00	; 0
    5972:	40 e8       	ldi	r20, 0x80	; 128
    5974:	5f e3       	ldi	r21, 0x3F	; 63
    5976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    597a:	88 23       	and	r24, r24
    597c:	2c f4       	brge	.+10     	; 0x5988 <BLUETOOTH_SYSTEM_OPENED+0x55a>
		__ticks = 1;
    597e:	81 e0       	ldi	r24, 0x01	; 1
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	9e af       	std	Y+62, r25	; 0x3e
    5984:	8d af       	std	Y+61, r24	; 0x3d
    5986:	46 c0       	rjmp	.+140    	; 0x5a14 <BLUETOOTH_SYSTEM_OPENED+0x5e6>
	else if (__tmp > 65535)
    5988:	fe 01       	movw	r30, r28
    598a:	ff 96       	adiw	r30, 0x3f	; 63
    598c:	60 81       	ld	r22, Z
    598e:	71 81       	ldd	r23, Z+1	; 0x01
    5990:	82 81       	ldd	r24, Z+2	; 0x02
    5992:	93 81       	ldd	r25, Z+3	; 0x03
    5994:	20 e0       	ldi	r18, 0x00	; 0
    5996:	3f ef       	ldi	r19, 0xFF	; 255
    5998:	4f e7       	ldi	r20, 0x7F	; 127
    599a:	57 e4       	ldi	r21, 0x47	; 71
    599c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59a0:	18 16       	cp	r1, r24
    59a2:	64 f5       	brge	.+88     	; 0x59fc <BLUETOOTH_SYSTEM_OPENED+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59a4:	fe 01       	movw	r30, r28
    59a6:	ed 5b       	subi	r30, 0xBD	; 189
    59a8:	ff 4f       	sbci	r31, 0xFF	; 255
    59aa:	60 81       	ld	r22, Z
    59ac:	71 81       	ldd	r23, Z+1	; 0x01
    59ae:	82 81       	ldd	r24, Z+2	; 0x02
    59b0:	93 81       	ldd	r25, Z+3	; 0x03
    59b2:	20 e0       	ldi	r18, 0x00	; 0
    59b4:	30 e0       	ldi	r19, 0x00	; 0
    59b6:	40 e2       	ldi	r20, 0x20	; 32
    59b8:	51 e4       	ldi	r21, 0x41	; 65
    59ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59be:	dc 01       	movw	r26, r24
    59c0:	cb 01       	movw	r24, r22
    59c2:	bc 01       	movw	r22, r24
    59c4:	cd 01       	movw	r24, r26
    59c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59ca:	dc 01       	movw	r26, r24
    59cc:	cb 01       	movw	r24, r22
    59ce:	9e af       	std	Y+62, r25	; 0x3e
    59d0:	8d af       	std	Y+61, r24	; 0x3d
    59d2:	0f c0       	rjmp	.+30     	; 0x59f2 <BLUETOOTH_SYSTEM_OPENED+0x5c4>
    59d4:	88 ec       	ldi	r24, 0xC8	; 200
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	9c af       	std	Y+60, r25	; 0x3c
    59da:	8b af       	std	Y+59, r24	; 0x3b
    59dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    59de:	9c ad       	ldd	r25, Y+60	; 0x3c
    59e0:	01 97       	sbiw	r24, 0x01	; 1
    59e2:	f1 f7       	brne	.-4      	; 0x59e0 <BLUETOOTH_SYSTEM_OPENED+0x5b2>
    59e4:	9c af       	std	Y+60, r25	; 0x3c
    59e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    59ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    59ec:	01 97       	sbiw	r24, 0x01	; 1
    59ee:	9e af       	std	Y+62, r25	; 0x3e
    59f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    59f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    59f6:	00 97       	sbiw	r24, 0x00	; 0
    59f8:	69 f7       	brne	.-38     	; 0x59d4 <BLUETOOTH_SYSTEM_OPENED+0x5a6>
    59fa:	16 c0       	rjmp	.+44     	; 0x5a28 <BLUETOOTH_SYSTEM_OPENED+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59fc:	fe 01       	movw	r30, r28
    59fe:	ff 96       	adiw	r30, 0x3f	; 63
    5a00:	60 81       	ld	r22, Z
    5a02:	71 81       	ldd	r23, Z+1	; 0x01
    5a04:	82 81       	ldd	r24, Z+2	; 0x02
    5a06:	93 81       	ldd	r25, Z+3	; 0x03
    5a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a0c:	dc 01       	movw	r26, r24
    5a0e:	cb 01       	movw	r24, r22
    5a10:	9e af       	std	Y+62, r25	; 0x3e
    5a12:	8d af       	std	Y+61, r24	; 0x3d
    5a14:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a16:	9e ad       	ldd	r25, Y+62	; 0x3e
    5a18:	9a af       	std	Y+58, r25	; 0x3a
    5a1a:	89 af       	std	Y+57, r24	; 0x39
    5a1c:	89 ad       	ldd	r24, Y+57	; 0x39
    5a1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5a20:	01 97       	sbiw	r24, 0x01	; 1
    5a22:	f1 f7       	brne	.-4      	; 0x5a20 <BLUETOOTH_SYSTEM_OPENED+0x5f2>
    5a24:	9a af       	std	Y+58, r25	; 0x3a
    5a26:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5a28:	81 e0       	ldi	r24, 0x01	; 1
    5a2a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    5a2e:	17 c2       	rjmp	.+1070   	; 0x5e5e <BLUETOOTH_SYSTEM_OPENED+0xa30>

	}
	else if('5'==data)
    5a30:	fe 01       	movw	r30, r28
    5a32:	ef 58       	subi	r30, 0x8F	; 143
    5a34:	ff 4f       	sbci	r31, 0xFF	; 255
    5a36:	80 81       	ld	r24, Z
    5a38:	85 33       	cpi	r24, 0x35	; 53
    5a3a:	09 f0       	breq	.+2      	; 0x5a3e <BLUETOOTH_SYSTEM_OPENED+0x610>
    5a3c:	7f c0       	rjmp	.+254    	; 0x5b3c <BLUETOOTH_SYSTEM_OPENED+0x70e>
	{
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5a3e:	81 e0       	ldi	r24, 0x01	; 1
    5a40:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		HLCD_Send_String_Position_8bit("GARAGE OPEN",LCD_GO_ROW2,0x00);
    5a44:	8a e4       	ldi	r24, 0x4A	; 74
    5a46:	91 e0       	ldi	r25, 0x01	; 1
    5a48:	60 ec       	ldi	r22, 0xC0	; 192
    5a4a:	40 e0       	ldi	r20, 0x00	; 0
    5a4c:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
    5a50:	80 e0       	ldi	r24, 0x00	; 0
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	aa e7       	ldi	r26, 0x7A	; 122
    5a56:	b4 e4       	ldi	r27, 0x44	; 68
    5a58:	8d ab       	std	Y+53, r24	; 0x35
    5a5a:	9e ab       	std	Y+54, r25	; 0x36
    5a5c:	af ab       	std	Y+55, r26	; 0x37
    5a5e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a60:	6d a9       	ldd	r22, Y+53	; 0x35
    5a62:	7e a9       	ldd	r23, Y+54	; 0x36
    5a64:	8f a9       	ldd	r24, Y+55	; 0x37
    5a66:	98 ad       	ldd	r25, Y+56	; 0x38
    5a68:	20 e0       	ldi	r18, 0x00	; 0
    5a6a:	30 e0       	ldi	r19, 0x00	; 0
    5a6c:	4a ef       	ldi	r20, 0xFA	; 250
    5a6e:	54 e4       	ldi	r21, 0x44	; 68
    5a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a74:	dc 01       	movw	r26, r24
    5a76:	cb 01       	movw	r24, r22
    5a78:	89 ab       	std	Y+49, r24	; 0x31
    5a7a:	9a ab       	std	Y+50, r25	; 0x32
    5a7c:	ab ab       	std	Y+51, r26	; 0x33
    5a7e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5a80:	69 a9       	ldd	r22, Y+49	; 0x31
    5a82:	7a a9       	ldd	r23, Y+50	; 0x32
    5a84:	8b a9       	ldd	r24, Y+51	; 0x33
    5a86:	9c a9       	ldd	r25, Y+52	; 0x34
    5a88:	20 e0       	ldi	r18, 0x00	; 0
    5a8a:	30 e0       	ldi	r19, 0x00	; 0
    5a8c:	40 e8       	ldi	r20, 0x80	; 128
    5a8e:	5f e3       	ldi	r21, 0x3F	; 63
    5a90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5a94:	88 23       	and	r24, r24
    5a96:	2c f4       	brge	.+10     	; 0x5aa2 <BLUETOOTH_SYSTEM_OPENED+0x674>
		__ticks = 1;
    5a98:	81 e0       	ldi	r24, 0x01	; 1
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	98 ab       	std	Y+48, r25	; 0x30
    5a9e:	8f a7       	std	Y+47, r24	; 0x2f
    5aa0:	3f c0       	rjmp	.+126    	; 0x5b20 <BLUETOOTH_SYSTEM_OPENED+0x6f2>
	else if (__tmp > 65535)
    5aa2:	69 a9       	ldd	r22, Y+49	; 0x31
    5aa4:	7a a9       	ldd	r23, Y+50	; 0x32
    5aa6:	8b a9       	ldd	r24, Y+51	; 0x33
    5aa8:	9c a9       	ldd	r25, Y+52	; 0x34
    5aaa:	20 e0       	ldi	r18, 0x00	; 0
    5aac:	3f ef       	ldi	r19, 0xFF	; 255
    5aae:	4f e7       	ldi	r20, 0x7F	; 127
    5ab0:	57 e4       	ldi	r21, 0x47	; 71
    5ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ab6:	18 16       	cp	r1, r24
    5ab8:	4c f5       	brge	.+82     	; 0x5b0c <BLUETOOTH_SYSTEM_OPENED+0x6de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aba:	6d a9       	ldd	r22, Y+53	; 0x35
    5abc:	7e a9       	ldd	r23, Y+54	; 0x36
    5abe:	8f a9       	ldd	r24, Y+55	; 0x37
    5ac0:	98 ad       	ldd	r25, Y+56	; 0x38
    5ac2:	20 e0       	ldi	r18, 0x00	; 0
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	40 e2       	ldi	r20, 0x20	; 32
    5ac8:	51 e4       	ldi	r21, 0x41	; 65
    5aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ace:	dc 01       	movw	r26, r24
    5ad0:	cb 01       	movw	r24, r22
    5ad2:	bc 01       	movw	r22, r24
    5ad4:	cd 01       	movw	r24, r26
    5ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ada:	dc 01       	movw	r26, r24
    5adc:	cb 01       	movw	r24, r22
    5ade:	98 ab       	std	Y+48, r25	; 0x30
    5ae0:	8f a7       	std	Y+47, r24	; 0x2f
    5ae2:	0f c0       	rjmp	.+30     	; 0x5b02 <BLUETOOTH_SYSTEM_OPENED+0x6d4>
    5ae4:	88 ec       	ldi	r24, 0xC8	; 200
    5ae6:	90 e0       	ldi	r25, 0x00	; 0
    5ae8:	9e a7       	std	Y+46, r25	; 0x2e
    5aea:	8d a7       	std	Y+45, r24	; 0x2d
    5aec:	8d a5       	ldd	r24, Y+45	; 0x2d
    5aee:	9e a5       	ldd	r25, Y+46	; 0x2e
    5af0:	01 97       	sbiw	r24, 0x01	; 1
    5af2:	f1 f7       	brne	.-4      	; 0x5af0 <BLUETOOTH_SYSTEM_OPENED+0x6c2>
    5af4:	9e a7       	std	Y+46, r25	; 0x2e
    5af6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5af8:	8f a5       	ldd	r24, Y+47	; 0x2f
    5afa:	98 a9       	ldd	r25, Y+48	; 0x30
    5afc:	01 97       	sbiw	r24, 0x01	; 1
    5afe:	98 ab       	std	Y+48, r25	; 0x30
    5b00:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b02:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b04:	98 a9       	ldd	r25, Y+48	; 0x30
    5b06:	00 97       	sbiw	r24, 0x00	; 0
    5b08:	69 f7       	brne	.-38     	; 0x5ae4 <BLUETOOTH_SYSTEM_OPENED+0x6b6>
    5b0a:	14 c0       	rjmp	.+40     	; 0x5b34 <BLUETOOTH_SYSTEM_OPENED+0x706>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b0c:	69 a9       	ldd	r22, Y+49	; 0x31
    5b0e:	7a a9       	ldd	r23, Y+50	; 0x32
    5b10:	8b a9       	ldd	r24, Y+51	; 0x33
    5b12:	9c a9       	ldd	r25, Y+52	; 0x34
    5b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b18:	dc 01       	movw	r26, r24
    5b1a:	cb 01       	movw	r24, r22
    5b1c:	98 ab       	std	Y+48, r25	; 0x30
    5b1e:	8f a7       	std	Y+47, r24	; 0x2f
    5b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b22:	98 a9       	ldd	r25, Y+48	; 0x30
    5b24:	9c a7       	std	Y+44, r25	; 0x2c
    5b26:	8b a7       	std	Y+43, r24	; 0x2b
    5b28:	8b a5       	ldd	r24, Y+43	; 0x2b
    5b2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    5b2c:	01 97       	sbiw	r24, 0x01	; 1
    5b2e:	f1 f7       	brne	.-4      	; 0x5b2c <BLUETOOTH_SYSTEM_OPENED+0x6fe>
    5b30:	9c a7       	std	Y+44, r25	; 0x2c
    5b32:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5b34:	81 e0       	ldi	r24, 0x01	; 1
    5b36:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    5b3a:	91 c1       	rjmp	.+802    	; 0x5e5e <BLUETOOTH_SYSTEM_OPENED+0xa30>

	}
	else if('6'==data)
    5b3c:	fe 01       	movw	r30, r28
    5b3e:	ef 58       	subi	r30, 0x8F	; 143
    5b40:	ff 4f       	sbci	r31, 0xFF	; 255
    5b42:	80 81       	ld	r24, Z
    5b44:	86 33       	cpi	r24, 0x36	; 54
    5b46:	09 f0       	breq	.+2      	; 0x5b4a <BLUETOOTH_SYSTEM_OPENED+0x71c>
    5b48:	7f c0       	rjmp	.+254    	; 0x5c48 <BLUETOOTH_SYSTEM_OPENED+0x81a>
	{
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5b4a:	81 e0       	ldi	r24, 0x01	; 1
    5b4c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		HLCD_Send_String_Position_8bit("GARAGE CLOSED",LCD_GO_ROW2,0x00);
    5b50:	86 e5       	ldi	r24, 0x56	; 86
    5b52:	91 e0       	ldi	r25, 0x01	; 1
    5b54:	60 ec       	ldi	r22, 0xC0	; 192
    5b56:	40 e0       	ldi	r20, 0x00	; 0
    5b58:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
    5b5c:	80 e0       	ldi	r24, 0x00	; 0
    5b5e:	90 e0       	ldi	r25, 0x00	; 0
    5b60:	aa e7       	ldi	r26, 0x7A	; 122
    5b62:	b4 e4       	ldi	r27, 0x44	; 68
    5b64:	8f a3       	std	Y+39, r24	; 0x27
    5b66:	98 a7       	std	Y+40, r25	; 0x28
    5b68:	a9 a7       	std	Y+41, r26	; 0x29
    5b6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b6c:	6f a1       	ldd	r22, Y+39	; 0x27
    5b6e:	78 a5       	ldd	r23, Y+40	; 0x28
    5b70:	89 a5       	ldd	r24, Y+41	; 0x29
    5b72:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b74:	20 e0       	ldi	r18, 0x00	; 0
    5b76:	30 e0       	ldi	r19, 0x00	; 0
    5b78:	4a ef       	ldi	r20, 0xFA	; 250
    5b7a:	54 e4       	ldi	r21, 0x44	; 68
    5b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b80:	dc 01       	movw	r26, r24
    5b82:	cb 01       	movw	r24, r22
    5b84:	8b a3       	std	Y+35, r24	; 0x23
    5b86:	9c a3       	std	Y+36, r25	; 0x24
    5b88:	ad a3       	std	Y+37, r26	; 0x25
    5b8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5b8c:	6b a1       	ldd	r22, Y+35	; 0x23
    5b8e:	7c a1       	ldd	r23, Y+36	; 0x24
    5b90:	8d a1       	ldd	r24, Y+37	; 0x25
    5b92:	9e a1       	ldd	r25, Y+38	; 0x26
    5b94:	20 e0       	ldi	r18, 0x00	; 0
    5b96:	30 e0       	ldi	r19, 0x00	; 0
    5b98:	40 e8       	ldi	r20, 0x80	; 128
    5b9a:	5f e3       	ldi	r21, 0x3F	; 63
    5b9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ba0:	88 23       	and	r24, r24
    5ba2:	2c f4       	brge	.+10     	; 0x5bae <BLUETOOTH_SYSTEM_OPENED+0x780>
		__ticks = 1;
    5ba4:	81 e0       	ldi	r24, 0x01	; 1
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	9a a3       	std	Y+34, r25	; 0x22
    5baa:	89 a3       	std	Y+33, r24	; 0x21
    5bac:	3f c0       	rjmp	.+126    	; 0x5c2c <BLUETOOTH_SYSTEM_OPENED+0x7fe>
	else if (__tmp > 65535)
    5bae:	6b a1       	ldd	r22, Y+35	; 0x23
    5bb0:	7c a1       	ldd	r23, Y+36	; 0x24
    5bb2:	8d a1       	ldd	r24, Y+37	; 0x25
    5bb4:	9e a1       	ldd	r25, Y+38	; 0x26
    5bb6:	20 e0       	ldi	r18, 0x00	; 0
    5bb8:	3f ef       	ldi	r19, 0xFF	; 255
    5bba:	4f e7       	ldi	r20, 0x7F	; 127
    5bbc:	57 e4       	ldi	r21, 0x47	; 71
    5bbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5bc2:	18 16       	cp	r1, r24
    5bc4:	4c f5       	brge	.+82     	; 0x5c18 <BLUETOOTH_SYSTEM_OPENED+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bc6:	6f a1       	ldd	r22, Y+39	; 0x27
    5bc8:	78 a5       	ldd	r23, Y+40	; 0x28
    5bca:	89 a5       	ldd	r24, Y+41	; 0x29
    5bcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    5bce:	20 e0       	ldi	r18, 0x00	; 0
    5bd0:	30 e0       	ldi	r19, 0x00	; 0
    5bd2:	40 e2       	ldi	r20, 0x20	; 32
    5bd4:	51 e4       	ldi	r21, 0x41	; 65
    5bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bda:	dc 01       	movw	r26, r24
    5bdc:	cb 01       	movw	r24, r22
    5bde:	bc 01       	movw	r22, r24
    5be0:	cd 01       	movw	r24, r26
    5be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5be6:	dc 01       	movw	r26, r24
    5be8:	cb 01       	movw	r24, r22
    5bea:	9a a3       	std	Y+34, r25	; 0x22
    5bec:	89 a3       	std	Y+33, r24	; 0x21
    5bee:	0f c0       	rjmp	.+30     	; 0x5c0e <BLUETOOTH_SYSTEM_OPENED+0x7e0>
    5bf0:	88 ec       	ldi	r24, 0xC8	; 200
    5bf2:	90 e0       	ldi	r25, 0x00	; 0
    5bf4:	98 a3       	std	Y+32, r25	; 0x20
    5bf6:	8f 8f       	std	Y+31, r24	; 0x1f
    5bf8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5bfa:	98 a1       	ldd	r25, Y+32	; 0x20
    5bfc:	01 97       	sbiw	r24, 0x01	; 1
    5bfe:	f1 f7       	brne	.-4      	; 0x5bfc <BLUETOOTH_SYSTEM_OPENED+0x7ce>
    5c00:	98 a3       	std	Y+32, r25	; 0x20
    5c02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c04:	89 a1       	ldd	r24, Y+33	; 0x21
    5c06:	9a a1       	ldd	r25, Y+34	; 0x22
    5c08:	01 97       	sbiw	r24, 0x01	; 1
    5c0a:	9a a3       	std	Y+34, r25	; 0x22
    5c0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    5c10:	9a a1       	ldd	r25, Y+34	; 0x22
    5c12:	00 97       	sbiw	r24, 0x00	; 0
    5c14:	69 f7       	brne	.-38     	; 0x5bf0 <BLUETOOTH_SYSTEM_OPENED+0x7c2>
    5c16:	14 c0       	rjmp	.+40     	; 0x5c40 <BLUETOOTH_SYSTEM_OPENED+0x812>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c18:	6b a1       	ldd	r22, Y+35	; 0x23
    5c1a:	7c a1       	ldd	r23, Y+36	; 0x24
    5c1c:	8d a1       	ldd	r24, Y+37	; 0x25
    5c1e:	9e a1       	ldd	r25, Y+38	; 0x26
    5c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c24:	dc 01       	movw	r26, r24
    5c26:	cb 01       	movw	r24, r22
    5c28:	9a a3       	std	Y+34, r25	; 0x22
    5c2a:	89 a3       	std	Y+33, r24	; 0x21
    5c2c:	89 a1       	ldd	r24, Y+33	; 0x21
    5c2e:	9a a1       	ldd	r25, Y+34	; 0x22
    5c30:	9e 8f       	std	Y+30, r25	; 0x1e
    5c32:	8d 8f       	std	Y+29, r24	; 0x1d
    5c34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5c38:	01 97       	sbiw	r24, 0x01	; 1
    5c3a:	f1 f7       	brne	.-4      	; 0x5c38 <BLUETOOTH_SYSTEM_OPENED+0x80a>
    5c3c:	9e 8f       	std	Y+30, r25	; 0x1e
    5c3e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5c40:	81 e0       	ldi	r24, 0x01	; 1
    5c42:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    5c46:	0b c1       	rjmp	.+534    	; 0x5e5e <BLUETOOTH_SYSTEM_OPENED+0xa30>

	}
	else if('7'==data)
    5c48:	fe 01       	movw	r30, r28
    5c4a:	ef 58       	subi	r30, 0x8F	; 143
    5c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4e:	80 81       	ld	r24, Z
    5c50:	87 33       	cpi	r24, 0x37	; 55
    5c52:	09 f0       	breq	.+2      	; 0x5c56 <BLUETOOTH_SYSTEM_OPENED+0x828>
    5c54:	7f c0       	rjmp	.+254    	; 0x5d54 <BLUETOOTH_SYSTEM_OPENED+0x926>
	{
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5c56:	81 e0       	ldi	r24, 0x01	; 1
    5c58:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		HLCD_Send_String_Position_8bit("LIGHT ON",LCD_GO_ROW2,0x00);
    5c5c:	84 e6       	ldi	r24, 0x64	; 100
    5c5e:	91 e0       	ldi	r25, 0x01	; 1
    5c60:	60 ec       	ldi	r22, 0xC0	; 192
    5c62:	40 e0       	ldi	r20, 0x00	; 0
    5c64:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
    5c68:	80 e0       	ldi	r24, 0x00	; 0
    5c6a:	90 e0       	ldi	r25, 0x00	; 0
    5c6c:	aa e7       	ldi	r26, 0x7A	; 122
    5c6e:	b4 e4       	ldi	r27, 0x44	; 68
    5c70:	89 8f       	std	Y+25, r24	; 0x19
    5c72:	9a 8f       	std	Y+26, r25	; 0x1a
    5c74:	ab 8f       	std	Y+27, r26	; 0x1b
    5c76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c78:	69 8d       	ldd	r22, Y+25	; 0x19
    5c7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c80:	20 e0       	ldi	r18, 0x00	; 0
    5c82:	30 e0       	ldi	r19, 0x00	; 0
    5c84:	4a ef       	ldi	r20, 0xFA	; 250
    5c86:	54 e4       	ldi	r21, 0x44	; 68
    5c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c8c:	dc 01       	movw	r26, r24
    5c8e:	cb 01       	movw	r24, r22
    5c90:	8d 8b       	std	Y+21, r24	; 0x15
    5c92:	9e 8b       	std	Y+22, r25	; 0x16
    5c94:	af 8b       	std	Y+23, r26	; 0x17
    5c96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c98:	6d 89       	ldd	r22, Y+21	; 0x15
    5c9a:	7e 89       	ldd	r23, Y+22	; 0x16
    5c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    5c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    5ca0:	20 e0       	ldi	r18, 0x00	; 0
    5ca2:	30 e0       	ldi	r19, 0x00	; 0
    5ca4:	40 e8       	ldi	r20, 0x80	; 128
    5ca6:	5f e3       	ldi	r21, 0x3F	; 63
    5ca8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cac:	88 23       	and	r24, r24
    5cae:	2c f4       	brge	.+10     	; 0x5cba <BLUETOOTH_SYSTEM_OPENED+0x88c>
		__ticks = 1;
    5cb0:	81 e0       	ldi	r24, 0x01	; 1
    5cb2:	90 e0       	ldi	r25, 0x00	; 0
    5cb4:	9c 8b       	std	Y+20, r25	; 0x14
    5cb6:	8b 8b       	std	Y+19, r24	; 0x13
    5cb8:	3f c0       	rjmp	.+126    	; 0x5d38 <BLUETOOTH_SYSTEM_OPENED+0x90a>
	else if (__tmp > 65535)
    5cba:	6d 89       	ldd	r22, Y+21	; 0x15
    5cbc:	7e 89       	ldd	r23, Y+22	; 0x16
    5cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    5cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    5cc2:	20 e0       	ldi	r18, 0x00	; 0
    5cc4:	3f ef       	ldi	r19, 0xFF	; 255
    5cc6:	4f e7       	ldi	r20, 0x7F	; 127
    5cc8:	57 e4       	ldi	r21, 0x47	; 71
    5cca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cce:	18 16       	cp	r1, r24
    5cd0:	4c f5       	brge	.+82     	; 0x5d24 <BLUETOOTH_SYSTEM_OPENED+0x8f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cd2:	69 8d       	ldd	r22, Y+25	; 0x19
    5cd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5cd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5cd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5cda:	20 e0       	ldi	r18, 0x00	; 0
    5cdc:	30 e0       	ldi	r19, 0x00	; 0
    5cde:	40 e2       	ldi	r20, 0x20	; 32
    5ce0:	51 e4       	ldi	r21, 0x41	; 65
    5ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ce6:	dc 01       	movw	r26, r24
    5ce8:	cb 01       	movw	r24, r22
    5cea:	bc 01       	movw	r22, r24
    5cec:	cd 01       	movw	r24, r26
    5cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cf2:	dc 01       	movw	r26, r24
    5cf4:	cb 01       	movw	r24, r22
    5cf6:	9c 8b       	std	Y+20, r25	; 0x14
    5cf8:	8b 8b       	std	Y+19, r24	; 0x13
    5cfa:	0f c0       	rjmp	.+30     	; 0x5d1a <BLUETOOTH_SYSTEM_OPENED+0x8ec>
    5cfc:	88 ec       	ldi	r24, 0xC8	; 200
    5cfe:	90 e0       	ldi	r25, 0x00	; 0
    5d00:	9a 8b       	std	Y+18, r25	; 0x12
    5d02:	89 8b       	std	Y+17, r24	; 0x11
    5d04:	89 89       	ldd	r24, Y+17	; 0x11
    5d06:	9a 89       	ldd	r25, Y+18	; 0x12
    5d08:	01 97       	sbiw	r24, 0x01	; 1
    5d0a:	f1 f7       	brne	.-4      	; 0x5d08 <BLUETOOTH_SYSTEM_OPENED+0x8da>
    5d0c:	9a 8b       	std	Y+18, r25	; 0x12
    5d0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d10:	8b 89       	ldd	r24, Y+19	; 0x13
    5d12:	9c 89       	ldd	r25, Y+20	; 0x14
    5d14:	01 97       	sbiw	r24, 0x01	; 1
    5d16:	9c 8b       	std	Y+20, r25	; 0x14
    5d18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d1a:	8b 89       	ldd	r24, Y+19	; 0x13
    5d1c:	9c 89       	ldd	r25, Y+20	; 0x14
    5d1e:	00 97       	sbiw	r24, 0x00	; 0
    5d20:	69 f7       	brne	.-38     	; 0x5cfc <BLUETOOTH_SYSTEM_OPENED+0x8ce>
    5d22:	14 c0       	rjmp	.+40     	; 0x5d4c <BLUETOOTH_SYSTEM_OPENED+0x91e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d24:	6d 89       	ldd	r22, Y+21	; 0x15
    5d26:	7e 89       	ldd	r23, Y+22	; 0x16
    5d28:	8f 89       	ldd	r24, Y+23	; 0x17
    5d2a:	98 8d       	ldd	r25, Y+24	; 0x18
    5d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d30:	dc 01       	movw	r26, r24
    5d32:	cb 01       	movw	r24, r22
    5d34:	9c 8b       	std	Y+20, r25	; 0x14
    5d36:	8b 8b       	std	Y+19, r24	; 0x13
    5d38:	8b 89       	ldd	r24, Y+19	; 0x13
    5d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    5d3c:	98 8b       	std	Y+16, r25	; 0x10
    5d3e:	8f 87       	std	Y+15, r24	; 0x0f
    5d40:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d42:	98 89       	ldd	r25, Y+16	; 0x10
    5d44:	01 97       	sbiw	r24, 0x01	; 1
    5d46:	f1 f7       	brne	.-4      	; 0x5d44 <BLUETOOTH_SYSTEM_OPENED+0x916>
    5d48:	98 8b       	std	Y+16, r25	; 0x10
    5d4a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5d4c:	81 e0       	ldi	r24, 0x01	; 1
    5d4e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
    5d52:	85 c0       	rjmp	.+266    	; 0x5e5e <BLUETOOTH_SYSTEM_OPENED+0xa30>

	}
	else if('8'==data)
    5d54:	fe 01       	movw	r30, r28
    5d56:	ef 58       	subi	r30, 0x8F	; 143
    5d58:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5a:	80 81       	ld	r24, Z
    5d5c:	88 33       	cpi	r24, 0x38	; 56
    5d5e:	09 f0       	breq	.+2      	; 0x5d62 <BLUETOOTH_SYSTEM_OPENED+0x934>
    5d60:	7e c0       	rjmp	.+252    	; 0x5e5e <BLUETOOTH_SYSTEM_OPENED+0xa30>
	{
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5d62:	81 e0       	ldi	r24, 0x01	; 1
    5d64:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		HLCD_Send_String_Position_8bit("LIGHT OFF",LCD_GO_ROW2,0x00);
    5d68:	8d e6       	ldi	r24, 0x6D	; 109
    5d6a:	91 e0       	ldi	r25, 0x01	; 1
    5d6c:	60 ec       	ldi	r22, 0xC0	; 192
    5d6e:	40 e0       	ldi	r20, 0x00	; 0
    5d70:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
    5d74:	80 e0       	ldi	r24, 0x00	; 0
    5d76:	90 e0       	ldi	r25, 0x00	; 0
    5d78:	aa e7       	ldi	r26, 0x7A	; 122
    5d7a:	b4 e4       	ldi	r27, 0x44	; 68
    5d7c:	8b 87       	std	Y+11, r24	; 0x0b
    5d7e:	9c 87       	std	Y+12, r25	; 0x0c
    5d80:	ad 87       	std	Y+13, r26	; 0x0d
    5d82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d86:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d8c:	20 e0       	ldi	r18, 0x00	; 0
    5d8e:	30 e0       	ldi	r19, 0x00	; 0
    5d90:	4a ef       	ldi	r20, 0xFA	; 250
    5d92:	54 e4       	ldi	r21, 0x44	; 68
    5d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d98:	dc 01       	movw	r26, r24
    5d9a:	cb 01       	movw	r24, r22
    5d9c:	8f 83       	std	Y+7, r24	; 0x07
    5d9e:	98 87       	std	Y+8, r25	; 0x08
    5da0:	a9 87       	std	Y+9, r26	; 0x09
    5da2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5da4:	6f 81       	ldd	r22, Y+7	; 0x07
    5da6:	78 85       	ldd	r23, Y+8	; 0x08
    5da8:	89 85       	ldd	r24, Y+9	; 0x09
    5daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dac:	20 e0       	ldi	r18, 0x00	; 0
    5dae:	30 e0       	ldi	r19, 0x00	; 0
    5db0:	40 e8       	ldi	r20, 0x80	; 128
    5db2:	5f e3       	ldi	r21, 0x3F	; 63
    5db4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5db8:	88 23       	and	r24, r24
    5dba:	2c f4       	brge	.+10     	; 0x5dc6 <BLUETOOTH_SYSTEM_OPENED+0x998>
		__ticks = 1;
    5dbc:	81 e0       	ldi	r24, 0x01	; 1
    5dbe:	90 e0       	ldi	r25, 0x00	; 0
    5dc0:	9e 83       	std	Y+6, r25	; 0x06
    5dc2:	8d 83       	std	Y+5, r24	; 0x05
    5dc4:	3f c0       	rjmp	.+126    	; 0x5e44 <BLUETOOTH_SYSTEM_OPENED+0xa16>
	else if (__tmp > 65535)
    5dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    5dc8:	78 85       	ldd	r23, Y+8	; 0x08
    5dca:	89 85       	ldd	r24, Y+9	; 0x09
    5dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dce:	20 e0       	ldi	r18, 0x00	; 0
    5dd0:	3f ef       	ldi	r19, 0xFF	; 255
    5dd2:	4f e7       	ldi	r20, 0x7F	; 127
    5dd4:	57 e4       	ldi	r21, 0x47	; 71
    5dd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5dda:	18 16       	cp	r1, r24
    5ddc:	4c f5       	brge	.+82     	; 0x5e30 <BLUETOOTH_SYSTEM_OPENED+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    5de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5de6:	20 e0       	ldi	r18, 0x00	; 0
    5de8:	30 e0       	ldi	r19, 0x00	; 0
    5dea:	40 e2       	ldi	r20, 0x20	; 32
    5dec:	51 e4       	ldi	r21, 0x41	; 65
    5dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5df2:	dc 01       	movw	r26, r24
    5df4:	cb 01       	movw	r24, r22
    5df6:	bc 01       	movw	r22, r24
    5df8:	cd 01       	movw	r24, r26
    5dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dfe:	dc 01       	movw	r26, r24
    5e00:	cb 01       	movw	r24, r22
    5e02:	9e 83       	std	Y+6, r25	; 0x06
    5e04:	8d 83       	std	Y+5, r24	; 0x05
    5e06:	0f c0       	rjmp	.+30     	; 0x5e26 <BLUETOOTH_SYSTEM_OPENED+0x9f8>
    5e08:	88 ec       	ldi	r24, 0xC8	; 200
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	9c 83       	std	Y+4, r25	; 0x04
    5e0e:	8b 83       	std	Y+3, r24	; 0x03
    5e10:	8b 81       	ldd	r24, Y+3	; 0x03
    5e12:	9c 81       	ldd	r25, Y+4	; 0x04
    5e14:	01 97       	sbiw	r24, 0x01	; 1
    5e16:	f1 f7       	brne	.-4      	; 0x5e14 <BLUETOOTH_SYSTEM_OPENED+0x9e6>
    5e18:	9c 83       	std	Y+4, r25	; 0x04
    5e1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    5e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    5e20:	01 97       	sbiw	r24, 0x01	; 1
    5e22:	9e 83       	std	Y+6, r25	; 0x06
    5e24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e26:	8d 81       	ldd	r24, Y+5	; 0x05
    5e28:	9e 81       	ldd	r25, Y+6	; 0x06
    5e2a:	00 97       	sbiw	r24, 0x00	; 0
    5e2c:	69 f7       	brne	.-38     	; 0x5e08 <BLUETOOTH_SYSTEM_OPENED+0x9da>
    5e2e:	14 c0       	rjmp	.+40     	; 0x5e58 <BLUETOOTH_SYSTEM_OPENED+0xa2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e30:	6f 81       	ldd	r22, Y+7	; 0x07
    5e32:	78 85       	ldd	r23, Y+8	; 0x08
    5e34:	89 85       	ldd	r24, Y+9	; 0x09
    5e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e3c:	dc 01       	movw	r26, r24
    5e3e:	cb 01       	movw	r24, r22
    5e40:	9e 83       	std	Y+6, r25	; 0x06
    5e42:	8d 83       	std	Y+5, r24	; 0x05
    5e44:	8d 81       	ldd	r24, Y+5	; 0x05
    5e46:	9e 81       	ldd	r25, Y+6	; 0x06
    5e48:	9a 83       	std	Y+2, r25	; 0x02
    5e4a:	89 83       	std	Y+1, r24	; 0x01
    5e4c:	89 81       	ldd	r24, Y+1	; 0x01
    5e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    5e50:	01 97       	sbiw	r24, 0x01	; 1
    5e52:	f1 f7       	brne	.-4      	; 0x5e50 <BLUETOOTH_SYSTEM_OPENED+0xa22>
    5e54:	9a 83       	std	Y+2, r25	; 0x02
    5e56:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    5e58:	81 e0       	ldi	r24, 0x01	; 1
    5e5a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>

	}
}
    5e5e:	cf 58       	subi	r28, 0x8F	; 143
    5e60:	df 4f       	sbci	r29, 0xFF	; 255
    5e62:	0f b6       	in	r0, 0x3f	; 63
    5e64:	f8 94       	cli
    5e66:	de bf       	out	0x3e, r29	; 62
    5e68:	0f be       	out	0x3f, r0	; 63
    5e6a:	cd bf       	out	0x3d, r28	; 61
    5e6c:	cf 91       	pop	r28
    5e6e:	df 91       	pop	r29
    5e70:	1f 91       	pop	r17
    5e72:	0f 91       	pop	r16
    5e74:	08 95       	ret

00005e76 <READ_LDR>:

void READ_LDR(void)
{
    5e76:	df 93       	push	r29
    5e78:	cf 93       	push	r28
    5e7a:	cd b7       	in	r28, 0x3d	; 61
    5e7c:	de b7       	in	r29, 0x3e	; 62
	LDR_VAL=MADC_u16_GetVal_BLOCKING(CHANNEL_1);
    5e7e:	80 e0       	ldi	r24, 0x00	; 0
    5e80:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <MADC_u16_GetVal_BLOCKING>
    5e84:	90 93 26 03 	sts	0x0326, r25
    5e88:	80 93 25 03 	sts	0x0325, r24
	if(LDR_VAL>=512)
    5e8c:	80 91 25 03 	lds	r24, 0x0325
    5e90:	90 91 26 03 	lds	r25, 0x0326
    5e94:	22 e0       	ldi	r18, 0x02	; 2
    5e96:	80 30       	cpi	r24, 0x00	; 0
    5e98:	92 07       	cpc	r25, r18
    5e9a:	38 f0       	brcs	.+14     	; 0x5eaa <READ_LDR+0x34>
	{
		HLCD_Send_String_Position_8bit("LIGHT ON ",LCD_GO_ROW2,0x00);
    5e9c:	87 e7       	ldi	r24, 0x77	; 119
    5e9e:	91 e0       	ldi	r25, 0x01	; 1
    5ea0:	60 ec       	ldi	r22, 0xC0	; 192
    5ea2:	40 e0       	ldi	r20, 0x00	; 0
    5ea4:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
    5ea8:	06 c0       	rjmp	.+12     	; 0x5eb6 <READ_LDR+0x40>


	}
	else
	{
		HLCD_Send_String_Position_8bit("LIGHT OFF",LCD_GO_ROW2,0x00);
    5eaa:	8d e6       	ldi	r24, 0x6D	; 109
    5eac:	91 e0       	ldi	r25, 0x01	; 1
    5eae:	60 ec       	ldi	r22, 0xC0	; 192
    5eb0:	40 e0       	ldi	r20, 0x00	; 0
    5eb2:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>


	}
}
    5eb6:	cf 91       	pop	r28
    5eb8:	df 91       	pop	r29
    5eba:	08 95       	ret

00005ebc <READ_LM35>:
void READ_LM35(void)
{
    5ebc:	0f 93       	push	r16
    5ebe:	1f 93       	push	r17
    5ec0:	df 93       	push	r29
    5ec2:	cf 93       	push	r28
    5ec4:	00 d0       	rcall	.+0      	; 0x5ec6 <READ_LM35+0xa>
    5ec6:	cd b7       	in	r28, 0x3d	; 61
    5ec8:	de b7       	in	r29, 0x3e	; 62
	u16 temp;
	LM35_VAL=MADC_u16_GetVal_BLOCKING(CHANNEL_2);
    5eca:	81 e0       	ldi	r24, 0x01	; 1
    5ecc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <MADC_u16_GetVal_BLOCKING>
    5ed0:	90 93 28 03 	sts	0x0328, r25
    5ed4:	80 93 27 03 	sts	0x0327, r24
	temp=Mapping_Values(99,0,1023,0,LM35_VAL);
    5ed8:	e0 91 27 03 	lds	r30, 0x0327
    5edc:	f0 91 28 03 	lds	r31, 0x0328
    5ee0:	83 e6       	ldi	r24, 0x63	; 99
    5ee2:	90 e0       	ldi	r25, 0x00	; 0
    5ee4:	60 e0       	ldi	r22, 0x00	; 0
    5ee6:	70 e0       	ldi	r23, 0x00	; 0
    5ee8:	4f ef       	ldi	r20, 0xFF	; 255
    5eea:	53 e0       	ldi	r21, 0x03	; 3
    5eec:	20 e0       	ldi	r18, 0x00	; 0
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	8f 01       	movw	r16, r30
    5ef2:	0e 94 91 15 	call	0x2b22	; 0x2b22 <Mapping_Values>
    5ef6:	dc 01       	movw	r26, r24
    5ef8:	cb 01       	movw	r24, r22
    5efa:	bc 01       	movw	r22, r24
    5efc:	cd 01       	movw	r24, r26
    5efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f02:	dc 01       	movw	r26, r24
    5f04:	cb 01       	movw	r24, r22
    5f06:	9a 83       	std	Y+2, r25	; 0x02
    5f08:	89 83       	std	Y+1, r24	; 0x01
	if(temp>40)
    5f0a:	89 81       	ldd	r24, Y+1	; 0x01
    5f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f0e:	89 32       	cpi	r24, 0x29	; 41
    5f10:	91 05       	cpc	r25, r1
    5f12:	38 f0       	brcs	.+14     	; 0x5f22 <READ_LM35+0x66>
	{
		HLCD_Send_String_Position_8bit("FAN ON ",LCD_GO_ROW1,0x09);
    5f14:	81 e8       	ldi	r24, 0x81	; 129
    5f16:	91 e0       	ldi	r25, 0x01	; 1
    5f18:	60 e8       	ldi	r22, 0x80	; 128
    5f1a:	49 e0       	ldi	r20, 0x09	; 9
    5f1c:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
    5f20:	06 c0       	rjmp	.+12     	; 0x5f2e <READ_LM35+0x72>

	}
	else
	{
		HLCD_Send_String_Position_8bit("FAN OFF",LCD_GO_ROW1,0x09);
    5f22:	89 e8       	ldi	r24, 0x89	; 137
    5f24:	91 e0       	ldi	r25, 0x01	; 1
    5f26:	60 e8       	ldi	r22, 0x80	; 128
    5f28:	49 e0       	ldi	r20, 0x09	; 9
    5f2a:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>

	}

	HLCD_Send_String_Position_8bit("Temp=",LCD_GO_ROW1,0x00);
    5f2e:	81 e9       	ldi	r24, 0x91	; 145
    5f30:	91 e0       	ldi	r25, 0x01	; 1
    5f32:	60 e8       	ldi	r22, 0x80	; 128
    5f34:	40 e0       	ldi	r20, 0x00	; 0
    5f36:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>
	SEND_U16_8BIT(temp,LCD_GO_ROW1,0x05);
    5f3a:	89 81       	ldd	r24, Y+1	; 0x01
    5f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f3e:	60 e8       	ldi	r22, 0x80	; 128
    5f40:	45 e0       	ldi	r20, 0x05	; 5
    5f42:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <SEND_U16_8BIT>
	HLCD_Send_String_Position_8bit("C'",LCD_GO_ROW1,0x07);
    5f46:	87 e9       	ldi	r24, 0x97	; 151
    5f48:	91 e0       	ldi	r25, 0x01	; 1
    5f4a:	60 e8       	ldi	r22, 0x80	; 128
    5f4c:	47 e0       	ldi	r20, 0x07	; 7
    5f4e:	0e 94 1e 19 	call	0x323c	; 0x323c <HLCD_Send_String_Position_8bit>


}
    5f52:	0f 90       	pop	r0
    5f54:	0f 90       	pop	r0
    5f56:	cf 91       	pop	r28
    5f58:	df 91       	pop	r29
    5f5a:	1f 91       	pop	r17
    5f5c:	0f 91       	pop	r16
    5f5e:	08 95       	ret

00005f60 <RTOS_INIT>:
void RTOS_INIT(void)
{
    5f60:	df 93       	push	r29
    5f62:	cf 93       	push	r28
    5f64:	cd b7       	in	r28, 0x3d	; 61
    5f66:	de b7       	in	r29, 0x3e	; 62

	tasks_state=Create_Task(1,100,0,&BLUETOOTH_SYSTEM_OPENED);
    5f68:	27 e1       	ldi	r18, 0x17	; 23
    5f6a:	3a e2       	ldi	r19, 0x2A	; 42
    5f6c:	81 e0       	ldi	r24, 0x01	; 1
    5f6e:	64 e6       	ldi	r22, 0x64	; 100
    5f70:	70 e0       	ldi	r23, 0x00	; 0
    5f72:	40 e0       	ldi	r20, 0x00	; 0
    5f74:	0e 94 75 07 	call	0xeea	; 0xeea <Create_Task>
    5f78:	80 93 13 03 	sts	0x0313, r24
	tasks_state&=Create_Task(0,250,250,&READ_LDR);
    5f7c:	2b e3       	ldi	r18, 0x3B	; 59
    5f7e:	3f e2       	ldi	r19, 0x2F	; 47
    5f80:	80 e0       	ldi	r24, 0x00	; 0
    5f82:	6a ef       	ldi	r22, 0xFA	; 250
    5f84:	70 e0       	ldi	r23, 0x00	; 0
    5f86:	4a ef       	ldi	r20, 0xFA	; 250
    5f88:	0e 94 75 07 	call	0xeea	; 0xeea <Create_Task>
    5f8c:	98 2f       	mov	r25, r24
    5f8e:	80 91 13 03 	lds	r24, 0x0313
    5f92:	89 23       	and	r24, r25
    5f94:	80 93 13 03 	sts	0x0313, r24
	tasks_state&=Create_Task(2,250,0,&READ_LM35);
    5f98:	2e e5       	ldi	r18, 0x5E	; 94
    5f9a:	3f e2       	ldi	r19, 0x2F	; 47
    5f9c:	82 e0       	ldi	r24, 0x02	; 2
    5f9e:	6a ef       	ldi	r22, 0xFA	; 250
    5fa0:	70 e0       	ldi	r23, 0x00	; 0
    5fa2:	40 e0       	ldi	r20, 0x00	; 0
    5fa4:	0e 94 75 07 	call	0xeea	; 0xeea <Create_Task>
    5fa8:	98 2f       	mov	r25, r24
    5faa:	80 91 13 03 	lds	r24, 0x0313
    5fae:	89 23       	and	r24, r25
    5fb0:	80 93 13 03 	sts	0x0313, r24

}
    5fb4:	cf 91       	pop	r28
    5fb6:	df 91       	pop	r29
    5fb8:	08 95       	ret

00005fba <GET_NEW_PASS>:

u8 GET_NEW_PASS(void)
{
    5fba:	df 93       	push	r29
    5fbc:	cf 93       	push	r28
    5fbe:	cd b7       	in	r28, 0x3d	; 61
    5fc0:	de b7       	in	r29, 0x3e	; 62
    5fc2:	2f 97       	sbiw	r28, 0x0f	; 15
    5fc4:	0f b6       	in	r0, 0x3f	; 63
    5fc6:	f8 94       	cli
    5fc8:	de bf       	out	0x3e, r29	; 62
    5fca:	0f be       	out	0x3f, r0	; 63
    5fcc:	cd bf       	out	0x3d, r28	; 61
	static u8 S_address;
	if(USER_POS_==0)
    5fce:	80 91 10 03 	lds	r24, 0x0310
    5fd2:	88 23       	and	r24, r24
    5fd4:	61 f4       	brne	.+24     	; 0x5fee <GET_NEW_PASS+0x34>
	{
		S_address=(number_Of_user*FIRST_USER);
    5fd6:	80 91 20 03 	lds	r24, 0x0320
    5fda:	88 2f       	mov	r24, r24
    5fdc:	90 e0       	ldi	r25, 0x00	; 0
    5fde:	88 0f       	add	r24, r24
    5fe0:	99 1f       	adc	r25, r25
    5fe2:	88 0f       	add	r24, r24
    5fe4:	99 1f       	adc	r25, r25
    5fe6:	88 0f       	add	r24, r24
    5fe8:	99 1f       	adc	r25, r25
    5fea:	80 93 2d 03 	sts	0x032D, r24
	}

	u8 STATUS=USER_SETTED;
    5fee:	8c e0       	ldi	r24, 0x0C	; 12
    5ff0:	8f 87       	std	Y+15, r24	; 0x0f
	HLCD_Send_char_8bit(kp_val);
    5ff2:	80 91 0f 03 	lds	r24, 0x030F
    5ff6:	0e 94 80 18 	call	0x3100	; 0x3100 <HLCD_Send_char_8bit>
	DEF_PASSWORD[PASS_POS_]=kp_val;
    5ffa:	80 91 12 03 	lds	r24, 0x0312
    5ffe:	88 2f       	mov	r24, r24
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	20 91 0f 03 	lds	r18, 0x030F
    6006:	fc 01       	movw	r30, r24
    6008:	e4 5e       	subi	r30, 0xE4	; 228
    600a:	fc 4f       	sbci	r31, 0xFC	; 252
    600c:	20 83       	st	Z, r18
	PASS_POS_++;
    600e:	80 91 12 03 	lds	r24, 0x0312
    6012:	8f 5f       	subi	r24, 0xFF	; 255
    6014:	80 93 12 03 	sts	0x0312, r24
	if(PASS_POS_==4)
    6018:	80 91 12 03 	lds	r24, 0x0312
    601c:	84 30       	cpi	r24, 0x04	; 4
    601e:	09 f0       	breq	.+2      	; 0x6022 <GET_NEW_PASS+0x68>
    6020:	9f c0       	rjmp	.+318    	; 0x6160 <GET_NEW_PASS+0x1a6>
	{
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    6022:	81 e0       	ldi	r24, 0x01	; 1
    6024:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		HEEPROM_WRITE_STRING(&DEF_PASSWORD,4,S_address+0x04);
    6028:	80 91 2d 03 	lds	r24, 0x032D
    602c:	28 2f       	mov	r18, r24
    602e:	2c 5f       	subi	r18, 0xFC	; 252
    6030:	8c e1       	ldi	r24, 0x1C	; 28
    6032:	93 e0       	ldi	r25, 0x03	; 3
    6034:	64 e0       	ldi	r22, 0x04	; 4
    6036:	42 2f       	mov	r20, r18
    6038:	0e 94 34 23 	call	0x4668	; 0x4668 <HEEPROM_WRITE_STRING>
		PASS_POS_=0;
    603c:	10 92 12 03 	sts	0x0312, r1
		STATUS=ENTER_USER;
    6040:	84 e0       	ldi	r24, 0x04	; 4
    6042:	8f 87       	std	Y+15, r24	; 0x0f
		entry=0;
    6044:	10 92 22 03 	sts	0x0322, r1
    6048:	10 92 21 03 	sts	0x0321, r1
		++number_Of_user;
    604c:	80 91 20 03 	lds	r24, 0x0320
    6050:	8f 5f       	subi	r24, 0xFF	; 255
    6052:	80 93 20 03 	sts	0x0320, r24
		HEEPROM_WRITE(number_Of_user,0xFF);
    6056:	80 91 20 03 	lds	r24, 0x0320
    605a:	6f ef       	ldi	r22, 0xFF	; 255
    605c:	0e 94 1b 23 	call	0x4636	; 0x4636 <HEEPROM_WRITE>
		HLCD_Send_String_8bit((u8 *)"New User Has Set");
    6060:	8a e9       	ldi	r24, 0x9A	; 154
    6062:	91 e0       	ldi	r25, 0x01	; 1
    6064:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
    6068:	80 e0       	ldi	r24, 0x00	; 0
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	aa e7       	ldi	r26, 0x7A	; 122
    606e:	b4 e4       	ldi	r27, 0x44	; 68
    6070:	8b 87       	std	Y+11, r24	; 0x0b
    6072:	9c 87       	std	Y+12, r25	; 0x0c
    6074:	ad 87       	std	Y+13, r26	; 0x0d
    6076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6078:	6b 85       	ldd	r22, Y+11	; 0x0b
    607a:	7c 85       	ldd	r23, Y+12	; 0x0c
    607c:	8d 85       	ldd	r24, Y+13	; 0x0d
    607e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6080:	20 e0       	ldi	r18, 0x00	; 0
    6082:	30 e0       	ldi	r19, 0x00	; 0
    6084:	4a ef       	ldi	r20, 0xFA	; 250
    6086:	54 e4       	ldi	r21, 0x44	; 68
    6088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    608c:	dc 01       	movw	r26, r24
    608e:	cb 01       	movw	r24, r22
    6090:	8f 83       	std	Y+7, r24	; 0x07
    6092:	98 87       	std	Y+8, r25	; 0x08
    6094:	a9 87       	std	Y+9, r26	; 0x09
    6096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6098:	6f 81       	ldd	r22, Y+7	; 0x07
    609a:	78 85       	ldd	r23, Y+8	; 0x08
    609c:	89 85       	ldd	r24, Y+9	; 0x09
    609e:	9a 85       	ldd	r25, Y+10	; 0x0a
    60a0:	20 e0       	ldi	r18, 0x00	; 0
    60a2:	30 e0       	ldi	r19, 0x00	; 0
    60a4:	40 e8       	ldi	r20, 0x80	; 128
    60a6:	5f e3       	ldi	r21, 0x3F	; 63
    60a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60ac:	88 23       	and	r24, r24
    60ae:	2c f4       	brge	.+10     	; 0x60ba <GET_NEW_PASS+0x100>
		__ticks = 1;
    60b0:	81 e0       	ldi	r24, 0x01	; 1
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	9e 83       	std	Y+6, r25	; 0x06
    60b6:	8d 83       	std	Y+5, r24	; 0x05
    60b8:	3f c0       	rjmp	.+126    	; 0x6138 <GET_NEW_PASS+0x17e>
	else if (__tmp > 65535)
    60ba:	6f 81       	ldd	r22, Y+7	; 0x07
    60bc:	78 85       	ldd	r23, Y+8	; 0x08
    60be:	89 85       	ldd	r24, Y+9	; 0x09
    60c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    60c2:	20 e0       	ldi	r18, 0x00	; 0
    60c4:	3f ef       	ldi	r19, 0xFF	; 255
    60c6:	4f e7       	ldi	r20, 0x7F	; 127
    60c8:	57 e4       	ldi	r21, 0x47	; 71
    60ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60ce:	18 16       	cp	r1, r24
    60d0:	4c f5       	brge	.+82     	; 0x6124 <GET_NEW_PASS+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    60d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    60d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    60d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    60da:	20 e0       	ldi	r18, 0x00	; 0
    60dc:	30 e0       	ldi	r19, 0x00	; 0
    60de:	40 e2       	ldi	r20, 0x20	; 32
    60e0:	51 e4       	ldi	r21, 0x41	; 65
    60e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60e6:	dc 01       	movw	r26, r24
    60e8:	cb 01       	movw	r24, r22
    60ea:	bc 01       	movw	r22, r24
    60ec:	cd 01       	movw	r24, r26
    60ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60f2:	dc 01       	movw	r26, r24
    60f4:	cb 01       	movw	r24, r22
    60f6:	9e 83       	std	Y+6, r25	; 0x06
    60f8:	8d 83       	std	Y+5, r24	; 0x05
    60fa:	0f c0       	rjmp	.+30     	; 0x611a <GET_NEW_PASS+0x160>
    60fc:	88 ec       	ldi	r24, 0xC8	; 200
    60fe:	90 e0       	ldi	r25, 0x00	; 0
    6100:	9c 83       	std	Y+4, r25	; 0x04
    6102:	8b 83       	std	Y+3, r24	; 0x03
    6104:	8b 81       	ldd	r24, Y+3	; 0x03
    6106:	9c 81       	ldd	r25, Y+4	; 0x04
    6108:	01 97       	sbiw	r24, 0x01	; 1
    610a:	f1 f7       	brne	.-4      	; 0x6108 <GET_NEW_PASS+0x14e>
    610c:	9c 83       	std	Y+4, r25	; 0x04
    610e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6110:	8d 81       	ldd	r24, Y+5	; 0x05
    6112:	9e 81       	ldd	r25, Y+6	; 0x06
    6114:	01 97       	sbiw	r24, 0x01	; 1
    6116:	9e 83       	std	Y+6, r25	; 0x06
    6118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    611a:	8d 81       	ldd	r24, Y+5	; 0x05
    611c:	9e 81       	ldd	r25, Y+6	; 0x06
    611e:	00 97       	sbiw	r24, 0x00	; 0
    6120:	69 f7       	brne	.-38     	; 0x60fc <GET_NEW_PASS+0x142>
    6122:	14 c0       	rjmp	.+40     	; 0x614c <GET_NEW_PASS+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6124:	6f 81       	ldd	r22, Y+7	; 0x07
    6126:	78 85       	ldd	r23, Y+8	; 0x08
    6128:	89 85       	ldd	r24, Y+9	; 0x09
    612a:	9a 85       	ldd	r25, Y+10	; 0x0a
    612c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6130:	dc 01       	movw	r26, r24
    6132:	cb 01       	movw	r24, r22
    6134:	9e 83       	std	Y+6, r25	; 0x06
    6136:	8d 83       	std	Y+5, r24	; 0x05
    6138:	8d 81       	ldd	r24, Y+5	; 0x05
    613a:	9e 81       	ldd	r25, Y+6	; 0x06
    613c:	9a 83       	std	Y+2, r25	; 0x02
    613e:	89 83       	std	Y+1, r24	; 0x01
    6140:	89 81       	ldd	r24, Y+1	; 0x01
    6142:	9a 81       	ldd	r25, Y+2	; 0x02
    6144:	01 97       	sbiw	r24, 0x01	; 1
    6146:	f1 f7       	brne	.-4      	; 0x6144 <GET_NEW_PASS+0x18a>
    6148:	9a 83       	std	Y+2, r25	; 0x02
    614a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		entry=0;
    614c:	10 92 22 03 	sts	0x0322, r1
    6150:	10 92 21 03 	sts	0x0321, r1
		USER_POS_=0;
    6154:	10 92 10 03 	sts	0x0310, r1
		PASS_POS_=0;
    6158:	10 92 12 03 	sts	0x0312, r1
		IDLE_FRAME();
    615c:	0e 94 6e 27 	call	0x4edc	; 0x4edc <IDLE_FRAME>

	}
	return STATUS;
    6160:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    6162:	2f 96       	adiw	r28, 0x0f	; 15
    6164:	0f b6       	in	r0, 0x3f	; 63
    6166:	f8 94       	cli
    6168:	de bf       	out	0x3e, r29	; 62
    616a:	0f be       	out	0x3f, r0	; 63
    616c:	cd bf       	out	0x3d, r28	; 61
    616e:	cf 91       	pop	r28
    6170:	df 91       	pop	r29
    6172:	08 95       	ret

00006174 <GET_NEW_USER>:

u8 GET_NEW_USER(void)
{
    6174:	df 93       	push	r29
    6176:	cf 93       	push	r28
    6178:	0f 92       	push	r0
    617a:	cd b7       	in	r28, 0x3d	; 61
    617c:	de b7       	in	r29, 0x3e	; 62
	//	static u8 number_Of_user;
	static u8 S_address;
	if(USER_POS_==0)
    617e:	80 91 10 03 	lds	r24, 0x0310
    6182:	88 23       	and	r24, r24
    6184:	61 f4       	brne	.+24     	; 0x619e <GET_NEW_USER+0x2a>
	{
		S_address=(number_Of_user*FIRST_USER);
    6186:	80 91 20 03 	lds	r24, 0x0320
    618a:	88 2f       	mov	r24, r24
    618c:	90 e0       	ldi	r25, 0x00	; 0
    618e:	88 0f       	add	r24, r24
    6190:	99 1f       	adc	r25, r25
    6192:	88 0f       	add	r24, r24
    6194:	99 1f       	adc	r25, r25
    6196:	88 0f       	add	r24, r24
    6198:	99 1f       	adc	r25, r25
    619a:	80 93 2e 03 	sts	0x032E, r24
	}
	u8 STATUS=ENTER_USER;
    619e:	84 e0       	ldi	r24, 0x04	; 4
    61a0:	89 83       	std	Y+1, r24	; 0x01
	HLCD_Send_char_8bit(kp_val);
    61a2:	80 91 0f 03 	lds	r24, 0x030F
    61a6:	0e 94 80 18 	call	0x3100	; 0x3100 <HLCD_Send_char_8bit>
	DEF_USER[USER_POS_]=kp_val;
    61aa:	80 91 10 03 	lds	r24, 0x0310
    61ae:	88 2f       	mov	r24, r24
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	20 91 0f 03 	lds	r18, 0x030F
    61b6:	fc 01       	movw	r30, r24
    61b8:	ec 5e       	subi	r30, 0xEC	; 236
    61ba:	fc 4f       	sbci	r31, 0xFC	; 252
    61bc:	20 83       	st	Z, r18
	USER_POS_++;
    61be:	80 91 10 03 	lds	r24, 0x0310
    61c2:	8f 5f       	subi	r24, 0xFF	; 255
    61c4:	80 93 10 03 	sts	0x0310, r24
	if(USER_POS_==4)
    61c8:	80 91 10 03 	lds	r24, 0x0310
    61cc:	84 30       	cpi	r24, 0x04	; 4
    61ce:	b9 f4       	brne	.+46     	; 0x61fe <GET_NEW_USER+0x8a>
	{
		HEEPROM_WRITE_STRING(&DEF_USER,4,S_address);
    61d0:	20 91 2e 03 	lds	r18, 0x032E
    61d4:	84 e1       	ldi	r24, 0x14	; 20
    61d6:	93 e0       	ldi	r25, 0x03	; 3
    61d8:	64 e0       	ldi	r22, 0x04	; 4
    61da:	42 2f       	mov	r20, r18
    61dc:	0e 94 34 23 	call	0x4668	; 0x4668 <HEEPROM_WRITE_STRING>
		HLCD_Send_Command_8bit(LCD_CMD_CLEAR_DISPLAY);
    61e0:	81 e0       	ldi	r24, 0x01	; 1
    61e2:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <HLCD_Send_Command_8bit>
		HLCD_Send_String_8bit((u8 *)"ENTER PASSWORD");
    61e6:	8b ea       	ldi	r24, 0xAB	; 171
    61e8:	91 e0       	ldi	r25, 0x01	; 1
    61ea:	0e 94 35 1a 	call	0x346a	; 0x346a <HLCD_Send_String_8bit>
		HLCD_Send_CursorPosition_8bit(LCD_GO_ROW2,0x00);
    61ee:	80 ec       	ldi	r24, 0xC0	; 192
    61f0:	60 e0       	ldi	r22, 0x00	; 0
    61f2:	0e 94 85 19 	call	0x330a	; 0x330a <HLCD_Send_CursorPosition_8bit>
		USER_POS_=0;
    61f6:	10 92 10 03 	sts	0x0310, r1
		STATUS=USER_SETTED;
    61fa:	8c e0       	ldi	r24, 0x0C	; 12
    61fc:	89 83       	std	Y+1, r24	; 0x01
	}

	return STATUS;
    61fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    6200:	0f 90       	pop	r0
    6202:	cf 91       	pop	r28
    6204:	df 91       	pop	r29
    6206:	08 95       	ret

00006208 <__prologue_saves__>:
    6208:	2f 92       	push	r2
    620a:	3f 92       	push	r3
    620c:	4f 92       	push	r4
    620e:	5f 92       	push	r5
    6210:	6f 92       	push	r6
    6212:	7f 92       	push	r7
    6214:	8f 92       	push	r8
    6216:	9f 92       	push	r9
    6218:	af 92       	push	r10
    621a:	bf 92       	push	r11
    621c:	cf 92       	push	r12
    621e:	df 92       	push	r13
    6220:	ef 92       	push	r14
    6222:	ff 92       	push	r15
    6224:	0f 93       	push	r16
    6226:	1f 93       	push	r17
    6228:	cf 93       	push	r28
    622a:	df 93       	push	r29
    622c:	cd b7       	in	r28, 0x3d	; 61
    622e:	de b7       	in	r29, 0x3e	; 62
    6230:	ca 1b       	sub	r28, r26
    6232:	db 0b       	sbc	r29, r27
    6234:	0f b6       	in	r0, 0x3f	; 63
    6236:	f8 94       	cli
    6238:	de bf       	out	0x3e, r29	; 62
    623a:	0f be       	out	0x3f, r0	; 63
    623c:	cd bf       	out	0x3d, r28	; 61
    623e:	09 94       	ijmp

00006240 <__epilogue_restores__>:
    6240:	2a 88       	ldd	r2, Y+18	; 0x12
    6242:	39 88       	ldd	r3, Y+17	; 0x11
    6244:	48 88       	ldd	r4, Y+16	; 0x10
    6246:	5f 84       	ldd	r5, Y+15	; 0x0f
    6248:	6e 84       	ldd	r6, Y+14	; 0x0e
    624a:	7d 84       	ldd	r7, Y+13	; 0x0d
    624c:	8c 84       	ldd	r8, Y+12	; 0x0c
    624e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6250:	aa 84       	ldd	r10, Y+10	; 0x0a
    6252:	b9 84       	ldd	r11, Y+9	; 0x09
    6254:	c8 84       	ldd	r12, Y+8	; 0x08
    6256:	df 80       	ldd	r13, Y+7	; 0x07
    6258:	ee 80       	ldd	r14, Y+6	; 0x06
    625a:	fd 80       	ldd	r15, Y+5	; 0x05
    625c:	0c 81       	ldd	r16, Y+4	; 0x04
    625e:	1b 81       	ldd	r17, Y+3	; 0x03
    6260:	aa 81       	ldd	r26, Y+2	; 0x02
    6262:	b9 81       	ldd	r27, Y+1	; 0x01
    6264:	ce 0f       	add	r28, r30
    6266:	d1 1d       	adc	r29, r1
    6268:	0f b6       	in	r0, 0x3f	; 63
    626a:	f8 94       	cli
    626c:	de bf       	out	0x3e, r29	; 62
    626e:	0f be       	out	0x3f, r0	; 63
    6270:	cd bf       	out	0x3d, r28	; 61
    6272:	ed 01       	movw	r28, r26
    6274:	08 95       	ret

00006276 <memset>:
    6276:	dc 01       	movw	r26, r24
    6278:	01 c0       	rjmp	.+2      	; 0x627c <memset+0x6>
    627a:	6d 93       	st	X+, r22
    627c:	41 50       	subi	r20, 0x01	; 1
    627e:	50 40       	sbci	r21, 0x00	; 0
    6280:	e0 f7       	brcc	.-8      	; 0x627a <memset+0x4>
    6282:	08 95       	ret

00006284 <sprintf>:
    6284:	ae e0       	ldi	r26, 0x0E	; 14
    6286:	b0 e0       	ldi	r27, 0x00	; 0
    6288:	e8 e4       	ldi	r30, 0x48	; 72
    628a:	f1 e3       	ldi	r31, 0x31	; 49
    628c:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__prologue_saves__+0x1c>
    6290:	0d 89       	ldd	r16, Y+21	; 0x15
    6292:	1e 89       	ldd	r17, Y+22	; 0x16
    6294:	86 e0       	ldi	r24, 0x06	; 6
    6296:	8c 83       	std	Y+4, r24	; 0x04
    6298:	1a 83       	std	Y+2, r17	; 0x02
    629a:	09 83       	std	Y+1, r16	; 0x01
    629c:	8f ef       	ldi	r24, 0xFF	; 255
    629e:	9f e7       	ldi	r25, 0x7F	; 127
    62a0:	9e 83       	std	Y+6, r25	; 0x06
    62a2:	8d 83       	std	Y+5, r24	; 0x05
    62a4:	9e 01       	movw	r18, r28
    62a6:	27 5e       	subi	r18, 0xE7	; 231
    62a8:	3f 4f       	sbci	r19, 0xFF	; 255
    62aa:	ce 01       	movw	r24, r28
    62ac:	01 96       	adiw	r24, 0x01	; 1
    62ae:	6f 89       	ldd	r22, Y+23	; 0x17
    62b0:	78 8d       	ldd	r23, Y+24	; 0x18
    62b2:	a9 01       	movw	r20, r18
    62b4:	0e 94 66 31 	call	0x62cc	; 0x62cc <vfprintf>
    62b8:	2f 81       	ldd	r18, Y+7	; 0x07
    62ba:	38 85       	ldd	r19, Y+8	; 0x08
    62bc:	02 0f       	add	r16, r18
    62be:	13 1f       	adc	r17, r19
    62c0:	f8 01       	movw	r30, r16
    62c2:	10 82       	st	Z, r1
    62c4:	2e 96       	adiw	r28, 0x0e	; 14
    62c6:	e4 e0       	ldi	r30, 0x04	; 4
    62c8:	0c 94 2e 31 	jmp	0x625c	; 0x625c <__epilogue_restores__+0x1c>

000062cc <vfprintf>:
    62cc:	ab e0       	ldi	r26, 0x0B	; 11
    62ce:	b0 e0       	ldi	r27, 0x00	; 0
    62d0:	ec e6       	ldi	r30, 0x6C	; 108
    62d2:	f1 e3       	ldi	r31, 0x31	; 49
    62d4:	0c 94 04 31 	jmp	0x6208	; 0x6208 <__prologue_saves__>
    62d8:	3c 01       	movw	r6, r24
    62da:	2b 01       	movw	r4, r22
    62dc:	5a 01       	movw	r10, r20
    62de:	fc 01       	movw	r30, r24
    62e0:	17 82       	std	Z+7, r1	; 0x07
    62e2:	16 82       	std	Z+6, r1	; 0x06
    62e4:	83 81       	ldd	r24, Z+3	; 0x03
    62e6:	81 fd       	sbrc	r24, 1
    62e8:	03 c0       	rjmp	.+6      	; 0x62f0 <vfprintf+0x24>
    62ea:	6f ef       	ldi	r22, 0xFF	; 255
    62ec:	7f ef       	ldi	r23, 0xFF	; 255
    62ee:	c6 c1       	rjmp	.+908    	; 0x667c <vfprintf+0x3b0>
    62f0:	9a e0       	ldi	r25, 0x0A	; 10
    62f2:	89 2e       	mov	r8, r25
    62f4:	1e 01       	movw	r2, r28
    62f6:	08 94       	sec
    62f8:	21 1c       	adc	r2, r1
    62fa:	31 1c       	adc	r3, r1
    62fc:	f3 01       	movw	r30, r6
    62fe:	23 81       	ldd	r18, Z+3	; 0x03
    6300:	f2 01       	movw	r30, r4
    6302:	23 fd       	sbrc	r18, 3
    6304:	85 91       	lpm	r24, Z+
    6306:	23 ff       	sbrs	r18, 3
    6308:	81 91       	ld	r24, Z+
    630a:	2f 01       	movw	r4, r30
    630c:	88 23       	and	r24, r24
    630e:	09 f4       	brne	.+2      	; 0x6312 <vfprintf+0x46>
    6310:	b2 c1       	rjmp	.+868    	; 0x6676 <vfprintf+0x3aa>
    6312:	85 32       	cpi	r24, 0x25	; 37
    6314:	39 f4       	brne	.+14     	; 0x6324 <vfprintf+0x58>
    6316:	23 fd       	sbrc	r18, 3
    6318:	85 91       	lpm	r24, Z+
    631a:	23 ff       	sbrs	r18, 3
    631c:	81 91       	ld	r24, Z+
    631e:	2f 01       	movw	r4, r30
    6320:	85 32       	cpi	r24, 0x25	; 37
    6322:	29 f4       	brne	.+10     	; 0x632e <vfprintf+0x62>
    6324:	90 e0       	ldi	r25, 0x00	; 0
    6326:	b3 01       	movw	r22, r6
    6328:	0e 94 59 33 	call	0x66b2	; 0x66b2 <fputc>
    632c:	e7 cf       	rjmp	.-50     	; 0x62fc <vfprintf+0x30>
    632e:	98 2f       	mov	r25, r24
    6330:	ff 24       	eor	r15, r15
    6332:	ee 24       	eor	r14, r14
    6334:	99 24       	eor	r9, r9
    6336:	ff e1       	ldi	r31, 0x1F	; 31
    6338:	ff 15       	cp	r31, r15
    633a:	d0 f0       	brcs	.+52     	; 0x6370 <vfprintf+0xa4>
    633c:	9b 32       	cpi	r25, 0x2B	; 43
    633e:	69 f0       	breq	.+26     	; 0x635a <vfprintf+0x8e>
    6340:	9c 32       	cpi	r25, 0x2C	; 44
    6342:	28 f4       	brcc	.+10     	; 0x634e <vfprintf+0x82>
    6344:	90 32       	cpi	r25, 0x20	; 32
    6346:	59 f0       	breq	.+22     	; 0x635e <vfprintf+0x92>
    6348:	93 32       	cpi	r25, 0x23	; 35
    634a:	91 f4       	brne	.+36     	; 0x6370 <vfprintf+0xa4>
    634c:	0e c0       	rjmp	.+28     	; 0x636a <vfprintf+0x9e>
    634e:	9d 32       	cpi	r25, 0x2D	; 45
    6350:	49 f0       	breq	.+18     	; 0x6364 <vfprintf+0x98>
    6352:	90 33       	cpi	r25, 0x30	; 48
    6354:	69 f4       	brne	.+26     	; 0x6370 <vfprintf+0xa4>
    6356:	41 e0       	ldi	r20, 0x01	; 1
    6358:	24 c0       	rjmp	.+72     	; 0x63a2 <vfprintf+0xd6>
    635a:	52 e0       	ldi	r21, 0x02	; 2
    635c:	f5 2a       	or	r15, r21
    635e:	84 e0       	ldi	r24, 0x04	; 4
    6360:	f8 2a       	or	r15, r24
    6362:	28 c0       	rjmp	.+80     	; 0x63b4 <vfprintf+0xe8>
    6364:	98 e0       	ldi	r25, 0x08	; 8
    6366:	f9 2a       	or	r15, r25
    6368:	25 c0       	rjmp	.+74     	; 0x63b4 <vfprintf+0xe8>
    636a:	e0 e1       	ldi	r30, 0x10	; 16
    636c:	fe 2a       	or	r15, r30
    636e:	22 c0       	rjmp	.+68     	; 0x63b4 <vfprintf+0xe8>
    6370:	f7 fc       	sbrc	r15, 7
    6372:	29 c0       	rjmp	.+82     	; 0x63c6 <vfprintf+0xfa>
    6374:	89 2f       	mov	r24, r25
    6376:	80 53       	subi	r24, 0x30	; 48
    6378:	8a 30       	cpi	r24, 0x0A	; 10
    637a:	70 f4       	brcc	.+28     	; 0x6398 <vfprintf+0xcc>
    637c:	f6 fe       	sbrs	r15, 6
    637e:	05 c0       	rjmp	.+10     	; 0x638a <vfprintf+0xbe>
    6380:	98 9c       	mul	r9, r8
    6382:	90 2c       	mov	r9, r0
    6384:	11 24       	eor	r1, r1
    6386:	98 0e       	add	r9, r24
    6388:	15 c0       	rjmp	.+42     	; 0x63b4 <vfprintf+0xe8>
    638a:	e8 9c       	mul	r14, r8
    638c:	e0 2c       	mov	r14, r0
    638e:	11 24       	eor	r1, r1
    6390:	e8 0e       	add	r14, r24
    6392:	f0 e2       	ldi	r31, 0x20	; 32
    6394:	ff 2a       	or	r15, r31
    6396:	0e c0       	rjmp	.+28     	; 0x63b4 <vfprintf+0xe8>
    6398:	9e 32       	cpi	r25, 0x2E	; 46
    639a:	29 f4       	brne	.+10     	; 0x63a6 <vfprintf+0xda>
    639c:	f6 fc       	sbrc	r15, 6
    639e:	6b c1       	rjmp	.+726    	; 0x6676 <vfprintf+0x3aa>
    63a0:	40 e4       	ldi	r20, 0x40	; 64
    63a2:	f4 2a       	or	r15, r20
    63a4:	07 c0       	rjmp	.+14     	; 0x63b4 <vfprintf+0xe8>
    63a6:	9c 36       	cpi	r25, 0x6C	; 108
    63a8:	19 f4       	brne	.+6      	; 0x63b0 <vfprintf+0xe4>
    63aa:	50 e8       	ldi	r21, 0x80	; 128
    63ac:	f5 2a       	or	r15, r21
    63ae:	02 c0       	rjmp	.+4      	; 0x63b4 <vfprintf+0xe8>
    63b0:	98 36       	cpi	r25, 0x68	; 104
    63b2:	49 f4       	brne	.+18     	; 0x63c6 <vfprintf+0xfa>
    63b4:	f2 01       	movw	r30, r4
    63b6:	23 fd       	sbrc	r18, 3
    63b8:	95 91       	lpm	r25, Z+
    63ba:	23 ff       	sbrs	r18, 3
    63bc:	91 91       	ld	r25, Z+
    63be:	2f 01       	movw	r4, r30
    63c0:	99 23       	and	r25, r25
    63c2:	09 f0       	breq	.+2      	; 0x63c6 <vfprintf+0xfa>
    63c4:	b8 cf       	rjmp	.-144    	; 0x6336 <vfprintf+0x6a>
    63c6:	89 2f       	mov	r24, r25
    63c8:	85 54       	subi	r24, 0x45	; 69
    63ca:	83 30       	cpi	r24, 0x03	; 3
    63cc:	18 f0       	brcs	.+6      	; 0x63d4 <vfprintf+0x108>
    63ce:	80 52       	subi	r24, 0x20	; 32
    63d0:	83 30       	cpi	r24, 0x03	; 3
    63d2:	38 f4       	brcc	.+14     	; 0x63e2 <vfprintf+0x116>
    63d4:	44 e0       	ldi	r20, 0x04	; 4
    63d6:	50 e0       	ldi	r21, 0x00	; 0
    63d8:	a4 0e       	add	r10, r20
    63da:	b5 1e       	adc	r11, r21
    63dc:	5f e3       	ldi	r21, 0x3F	; 63
    63de:	59 83       	std	Y+1, r21	; 0x01
    63e0:	0f c0       	rjmp	.+30     	; 0x6400 <vfprintf+0x134>
    63e2:	93 36       	cpi	r25, 0x63	; 99
    63e4:	31 f0       	breq	.+12     	; 0x63f2 <vfprintf+0x126>
    63e6:	93 37       	cpi	r25, 0x73	; 115
    63e8:	79 f0       	breq	.+30     	; 0x6408 <vfprintf+0x13c>
    63ea:	93 35       	cpi	r25, 0x53	; 83
    63ec:	09 f0       	breq	.+2      	; 0x63f0 <vfprintf+0x124>
    63ee:	56 c0       	rjmp	.+172    	; 0x649c <vfprintf+0x1d0>
    63f0:	20 c0       	rjmp	.+64     	; 0x6432 <vfprintf+0x166>
    63f2:	f5 01       	movw	r30, r10
    63f4:	80 81       	ld	r24, Z
    63f6:	89 83       	std	Y+1, r24	; 0x01
    63f8:	42 e0       	ldi	r20, 0x02	; 2
    63fa:	50 e0       	ldi	r21, 0x00	; 0
    63fc:	a4 0e       	add	r10, r20
    63fe:	b5 1e       	adc	r11, r21
    6400:	61 01       	movw	r12, r2
    6402:	01 e0       	ldi	r16, 0x01	; 1
    6404:	10 e0       	ldi	r17, 0x00	; 0
    6406:	12 c0       	rjmp	.+36     	; 0x642c <vfprintf+0x160>
    6408:	f5 01       	movw	r30, r10
    640a:	c0 80       	ld	r12, Z
    640c:	d1 80       	ldd	r13, Z+1	; 0x01
    640e:	f6 fc       	sbrc	r15, 6
    6410:	03 c0       	rjmp	.+6      	; 0x6418 <vfprintf+0x14c>
    6412:	6f ef       	ldi	r22, 0xFF	; 255
    6414:	7f ef       	ldi	r23, 0xFF	; 255
    6416:	02 c0       	rjmp	.+4      	; 0x641c <vfprintf+0x150>
    6418:	69 2d       	mov	r22, r9
    641a:	70 e0       	ldi	r23, 0x00	; 0
    641c:	42 e0       	ldi	r20, 0x02	; 2
    641e:	50 e0       	ldi	r21, 0x00	; 0
    6420:	a4 0e       	add	r10, r20
    6422:	b5 1e       	adc	r11, r21
    6424:	c6 01       	movw	r24, r12
    6426:	0e 94 4e 33 	call	0x669c	; 0x669c <strnlen>
    642a:	8c 01       	movw	r16, r24
    642c:	5f e7       	ldi	r21, 0x7F	; 127
    642e:	f5 22       	and	r15, r21
    6430:	14 c0       	rjmp	.+40     	; 0x645a <vfprintf+0x18e>
    6432:	f5 01       	movw	r30, r10
    6434:	c0 80       	ld	r12, Z
    6436:	d1 80       	ldd	r13, Z+1	; 0x01
    6438:	f6 fc       	sbrc	r15, 6
    643a:	03 c0       	rjmp	.+6      	; 0x6442 <vfprintf+0x176>
    643c:	6f ef       	ldi	r22, 0xFF	; 255
    643e:	7f ef       	ldi	r23, 0xFF	; 255
    6440:	02 c0       	rjmp	.+4      	; 0x6446 <vfprintf+0x17a>
    6442:	69 2d       	mov	r22, r9
    6444:	70 e0       	ldi	r23, 0x00	; 0
    6446:	42 e0       	ldi	r20, 0x02	; 2
    6448:	50 e0       	ldi	r21, 0x00	; 0
    644a:	a4 0e       	add	r10, r20
    644c:	b5 1e       	adc	r11, r21
    644e:	c6 01       	movw	r24, r12
    6450:	0e 94 43 33 	call	0x6686	; 0x6686 <strnlen_P>
    6454:	8c 01       	movw	r16, r24
    6456:	50 e8       	ldi	r21, 0x80	; 128
    6458:	f5 2a       	or	r15, r21
    645a:	f3 fe       	sbrs	r15, 3
    645c:	07 c0       	rjmp	.+14     	; 0x646c <vfprintf+0x1a0>
    645e:	1a c0       	rjmp	.+52     	; 0x6494 <vfprintf+0x1c8>
    6460:	80 e2       	ldi	r24, 0x20	; 32
    6462:	90 e0       	ldi	r25, 0x00	; 0
    6464:	b3 01       	movw	r22, r6
    6466:	0e 94 59 33 	call	0x66b2	; 0x66b2 <fputc>
    646a:	ea 94       	dec	r14
    646c:	8e 2d       	mov	r24, r14
    646e:	90 e0       	ldi	r25, 0x00	; 0
    6470:	08 17       	cp	r16, r24
    6472:	19 07       	cpc	r17, r25
    6474:	a8 f3       	brcs	.-22     	; 0x6460 <vfprintf+0x194>
    6476:	0e c0       	rjmp	.+28     	; 0x6494 <vfprintf+0x1c8>
    6478:	f6 01       	movw	r30, r12
    647a:	f7 fc       	sbrc	r15, 7
    647c:	85 91       	lpm	r24, Z+
    647e:	f7 fe       	sbrs	r15, 7
    6480:	81 91       	ld	r24, Z+
    6482:	6f 01       	movw	r12, r30
    6484:	90 e0       	ldi	r25, 0x00	; 0
    6486:	b3 01       	movw	r22, r6
    6488:	0e 94 59 33 	call	0x66b2	; 0x66b2 <fputc>
    648c:	e1 10       	cpse	r14, r1
    648e:	ea 94       	dec	r14
    6490:	01 50       	subi	r16, 0x01	; 1
    6492:	10 40       	sbci	r17, 0x00	; 0
    6494:	01 15       	cp	r16, r1
    6496:	11 05       	cpc	r17, r1
    6498:	79 f7       	brne	.-34     	; 0x6478 <vfprintf+0x1ac>
    649a:	ea c0       	rjmp	.+468    	; 0x6670 <vfprintf+0x3a4>
    649c:	94 36       	cpi	r25, 0x64	; 100
    649e:	11 f0       	breq	.+4      	; 0x64a4 <vfprintf+0x1d8>
    64a0:	99 36       	cpi	r25, 0x69	; 105
    64a2:	69 f5       	brne	.+90     	; 0x64fe <vfprintf+0x232>
    64a4:	f7 fe       	sbrs	r15, 7
    64a6:	08 c0       	rjmp	.+16     	; 0x64b8 <vfprintf+0x1ec>
    64a8:	f5 01       	movw	r30, r10
    64aa:	20 81       	ld	r18, Z
    64ac:	31 81       	ldd	r19, Z+1	; 0x01
    64ae:	42 81       	ldd	r20, Z+2	; 0x02
    64b0:	53 81       	ldd	r21, Z+3	; 0x03
    64b2:	84 e0       	ldi	r24, 0x04	; 4
    64b4:	90 e0       	ldi	r25, 0x00	; 0
    64b6:	0a c0       	rjmp	.+20     	; 0x64cc <vfprintf+0x200>
    64b8:	f5 01       	movw	r30, r10
    64ba:	80 81       	ld	r24, Z
    64bc:	91 81       	ldd	r25, Z+1	; 0x01
    64be:	9c 01       	movw	r18, r24
    64c0:	44 27       	eor	r20, r20
    64c2:	37 fd       	sbrc	r19, 7
    64c4:	40 95       	com	r20
    64c6:	54 2f       	mov	r21, r20
    64c8:	82 e0       	ldi	r24, 0x02	; 2
    64ca:	90 e0       	ldi	r25, 0x00	; 0
    64cc:	a8 0e       	add	r10, r24
    64ce:	b9 1e       	adc	r11, r25
    64d0:	9f e6       	ldi	r25, 0x6F	; 111
    64d2:	f9 22       	and	r15, r25
    64d4:	57 ff       	sbrs	r21, 7
    64d6:	09 c0       	rjmp	.+18     	; 0x64ea <vfprintf+0x21e>
    64d8:	50 95       	com	r21
    64da:	40 95       	com	r20
    64dc:	30 95       	com	r19
    64de:	21 95       	neg	r18
    64e0:	3f 4f       	sbci	r19, 0xFF	; 255
    64e2:	4f 4f       	sbci	r20, 0xFF	; 255
    64e4:	5f 4f       	sbci	r21, 0xFF	; 255
    64e6:	e0 e8       	ldi	r30, 0x80	; 128
    64e8:	fe 2a       	or	r15, r30
    64ea:	ca 01       	movw	r24, r20
    64ec:	b9 01       	movw	r22, r18
    64ee:	a1 01       	movw	r20, r2
    64f0:	2a e0       	ldi	r18, 0x0A	; 10
    64f2:	30 e0       	ldi	r19, 0x00	; 0
    64f4:	0e 94 85 33 	call	0x670a	; 0x670a <__ultoa_invert>
    64f8:	d8 2e       	mov	r13, r24
    64fa:	d2 18       	sub	r13, r2
    64fc:	40 c0       	rjmp	.+128    	; 0x657e <vfprintf+0x2b2>
    64fe:	95 37       	cpi	r25, 0x75	; 117
    6500:	29 f4       	brne	.+10     	; 0x650c <vfprintf+0x240>
    6502:	1f 2d       	mov	r17, r15
    6504:	1f 7e       	andi	r17, 0xEF	; 239
    6506:	2a e0       	ldi	r18, 0x0A	; 10
    6508:	30 e0       	ldi	r19, 0x00	; 0
    650a:	1d c0       	rjmp	.+58     	; 0x6546 <vfprintf+0x27a>
    650c:	1f 2d       	mov	r17, r15
    650e:	19 7f       	andi	r17, 0xF9	; 249
    6510:	9f 36       	cpi	r25, 0x6F	; 111
    6512:	61 f0       	breq	.+24     	; 0x652c <vfprintf+0x260>
    6514:	90 37       	cpi	r25, 0x70	; 112
    6516:	20 f4       	brcc	.+8      	; 0x6520 <vfprintf+0x254>
    6518:	98 35       	cpi	r25, 0x58	; 88
    651a:	09 f0       	breq	.+2      	; 0x651e <vfprintf+0x252>
    651c:	ac c0       	rjmp	.+344    	; 0x6676 <vfprintf+0x3aa>
    651e:	0f c0       	rjmp	.+30     	; 0x653e <vfprintf+0x272>
    6520:	90 37       	cpi	r25, 0x70	; 112
    6522:	39 f0       	breq	.+14     	; 0x6532 <vfprintf+0x266>
    6524:	98 37       	cpi	r25, 0x78	; 120
    6526:	09 f0       	breq	.+2      	; 0x652a <vfprintf+0x25e>
    6528:	a6 c0       	rjmp	.+332    	; 0x6676 <vfprintf+0x3aa>
    652a:	04 c0       	rjmp	.+8      	; 0x6534 <vfprintf+0x268>
    652c:	28 e0       	ldi	r18, 0x08	; 8
    652e:	30 e0       	ldi	r19, 0x00	; 0
    6530:	0a c0       	rjmp	.+20     	; 0x6546 <vfprintf+0x27a>
    6532:	10 61       	ori	r17, 0x10	; 16
    6534:	14 fd       	sbrc	r17, 4
    6536:	14 60       	ori	r17, 0x04	; 4
    6538:	20 e1       	ldi	r18, 0x10	; 16
    653a:	30 e0       	ldi	r19, 0x00	; 0
    653c:	04 c0       	rjmp	.+8      	; 0x6546 <vfprintf+0x27a>
    653e:	14 fd       	sbrc	r17, 4
    6540:	16 60       	ori	r17, 0x06	; 6
    6542:	20 e1       	ldi	r18, 0x10	; 16
    6544:	32 e0       	ldi	r19, 0x02	; 2
    6546:	17 ff       	sbrs	r17, 7
    6548:	08 c0       	rjmp	.+16     	; 0x655a <vfprintf+0x28e>
    654a:	f5 01       	movw	r30, r10
    654c:	60 81       	ld	r22, Z
    654e:	71 81       	ldd	r23, Z+1	; 0x01
    6550:	82 81       	ldd	r24, Z+2	; 0x02
    6552:	93 81       	ldd	r25, Z+3	; 0x03
    6554:	44 e0       	ldi	r20, 0x04	; 4
    6556:	50 e0       	ldi	r21, 0x00	; 0
    6558:	08 c0       	rjmp	.+16     	; 0x656a <vfprintf+0x29e>
    655a:	f5 01       	movw	r30, r10
    655c:	80 81       	ld	r24, Z
    655e:	91 81       	ldd	r25, Z+1	; 0x01
    6560:	bc 01       	movw	r22, r24
    6562:	80 e0       	ldi	r24, 0x00	; 0
    6564:	90 e0       	ldi	r25, 0x00	; 0
    6566:	42 e0       	ldi	r20, 0x02	; 2
    6568:	50 e0       	ldi	r21, 0x00	; 0
    656a:	a4 0e       	add	r10, r20
    656c:	b5 1e       	adc	r11, r21
    656e:	a1 01       	movw	r20, r2
    6570:	0e 94 85 33 	call	0x670a	; 0x670a <__ultoa_invert>
    6574:	d8 2e       	mov	r13, r24
    6576:	d2 18       	sub	r13, r2
    6578:	8f e7       	ldi	r24, 0x7F	; 127
    657a:	f8 2e       	mov	r15, r24
    657c:	f1 22       	and	r15, r17
    657e:	f6 fe       	sbrs	r15, 6
    6580:	0b c0       	rjmp	.+22     	; 0x6598 <vfprintf+0x2cc>
    6582:	5e ef       	ldi	r21, 0xFE	; 254
    6584:	f5 22       	and	r15, r21
    6586:	d9 14       	cp	r13, r9
    6588:	38 f4       	brcc	.+14     	; 0x6598 <vfprintf+0x2cc>
    658a:	f4 fe       	sbrs	r15, 4
    658c:	07 c0       	rjmp	.+14     	; 0x659c <vfprintf+0x2d0>
    658e:	f2 fc       	sbrc	r15, 2
    6590:	05 c0       	rjmp	.+10     	; 0x659c <vfprintf+0x2d0>
    6592:	8f ee       	ldi	r24, 0xEF	; 239
    6594:	f8 22       	and	r15, r24
    6596:	02 c0       	rjmp	.+4      	; 0x659c <vfprintf+0x2d0>
    6598:	1d 2d       	mov	r17, r13
    659a:	01 c0       	rjmp	.+2      	; 0x659e <vfprintf+0x2d2>
    659c:	19 2d       	mov	r17, r9
    659e:	f4 fe       	sbrs	r15, 4
    65a0:	0d c0       	rjmp	.+26     	; 0x65bc <vfprintf+0x2f0>
    65a2:	fe 01       	movw	r30, r28
    65a4:	ed 0d       	add	r30, r13
    65a6:	f1 1d       	adc	r31, r1
    65a8:	80 81       	ld	r24, Z
    65aa:	80 33       	cpi	r24, 0x30	; 48
    65ac:	19 f4       	brne	.+6      	; 0x65b4 <vfprintf+0x2e8>
    65ae:	99 ee       	ldi	r25, 0xE9	; 233
    65b0:	f9 22       	and	r15, r25
    65b2:	08 c0       	rjmp	.+16     	; 0x65c4 <vfprintf+0x2f8>
    65b4:	1f 5f       	subi	r17, 0xFF	; 255
    65b6:	f2 fe       	sbrs	r15, 2
    65b8:	05 c0       	rjmp	.+10     	; 0x65c4 <vfprintf+0x2f8>
    65ba:	03 c0       	rjmp	.+6      	; 0x65c2 <vfprintf+0x2f6>
    65bc:	8f 2d       	mov	r24, r15
    65be:	86 78       	andi	r24, 0x86	; 134
    65c0:	09 f0       	breq	.+2      	; 0x65c4 <vfprintf+0x2f8>
    65c2:	1f 5f       	subi	r17, 0xFF	; 255
    65c4:	0f 2d       	mov	r16, r15
    65c6:	f3 fc       	sbrc	r15, 3
    65c8:	14 c0       	rjmp	.+40     	; 0x65f2 <vfprintf+0x326>
    65ca:	f0 fe       	sbrs	r15, 0
    65cc:	0f c0       	rjmp	.+30     	; 0x65ec <vfprintf+0x320>
    65ce:	1e 15       	cp	r17, r14
    65d0:	10 f0       	brcs	.+4      	; 0x65d6 <vfprintf+0x30a>
    65d2:	9d 2c       	mov	r9, r13
    65d4:	0b c0       	rjmp	.+22     	; 0x65ec <vfprintf+0x320>
    65d6:	9d 2c       	mov	r9, r13
    65d8:	9e 0c       	add	r9, r14
    65da:	91 1a       	sub	r9, r17
    65dc:	1e 2d       	mov	r17, r14
    65de:	06 c0       	rjmp	.+12     	; 0x65ec <vfprintf+0x320>
    65e0:	80 e2       	ldi	r24, 0x20	; 32
    65e2:	90 e0       	ldi	r25, 0x00	; 0
    65e4:	b3 01       	movw	r22, r6
    65e6:	0e 94 59 33 	call	0x66b2	; 0x66b2 <fputc>
    65ea:	1f 5f       	subi	r17, 0xFF	; 255
    65ec:	1e 15       	cp	r17, r14
    65ee:	c0 f3       	brcs	.-16     	; 0x65e0 <vfprintf+0x314>
    65f0:	04 c0       	rjmp	.+8      	; 0x65fa <vfprintf+0x32e>
    65f2:	1e 15       	cp	r17, r14
    65f4:	10 f4       	brcc	.+4      	; 0x65fa <vfprintf+0x32e>
    65f6:	e1 1a       	sub	r14, r17
    65f8:	01 c0       	rjmp	.+2      	; 0x65fc <vfprintf+0x330>
    65fa:	ee 24       	eor	r14, r14
    65fc:	04 ff       	sbrs	r16, 4
    65fe:	0f c0       	rjmp	.+30     	; 0x661e <vfprintf+0x352>
    6600:	80 e3       	ldi	r24, 0x30	; 48
    6602:	90 e0       	ldi	r25, 0x00	; 0
    6604:	b3 01       	movw	r22, r6
    6606:	0e 94 59 33 	call	0x66b2	; 0x66b2 <fputc>
    660a:	02 ff       	sbrs	r16, 2
    660c:	1d c0       	rjmp	.+58     	; 0x6648 <vfprintf+0x37c>
    660e:	01 fd       	sbrc	r16, 1
    6610:	03 c0       	rjmp	.+6      	; 0x6618 <vfprintf+0x34c>
    6612:	88 e7       	ldi	r24, 0x78	; 120
    6614:	90 e0       	ldi	r25, 0x00	; 0
    6616:	0e c0       	rjmp	.+28     	; 0x6634 <vfprintf+0x368>
    6618:	88 e5       	ldi	r24, 0x58	; 88
    661a:	90 e0       	ldi	r25, 0x00	; 0
    661c:	0b c0       	rjmp	.+22     	; 0x6634 <vfprintf+0x368>
    661e:	80 2f       	mov	r24, r16
    6620:	86 78       	andi	r24, 0x86	; 134
    6622:	91 f0       	breq	.+36     	; 0x6648 <vfprintf+0x37c>
    6624:	01 ff       	sbrs	r16, 1
    6626:	02 c0       	rjmp	.+4      	; 0x662c <vfprintf+0x360>
    6628:	8b e2       	ldi	r24, 0x2B	; 43
    662a:	01 c0       	rjmp	.+2      	; 0x662e <vfprintf+0x362>
    662c:	80 e2       	ldi	r24, 0x20	; 32
    662e:	f7 fc       	sbrc	r15, 7
    6630:	8d e2       	ldi	r24, 0x2D	; 45
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	b3 01       	movw	r22, r6
    6636:	0e 94 59 33 	call	0x66b2	; 0x66b2 <fputc>
    663a:	06 c0       	rjmp	.+12     	; 0x6648 <vfprintf+0x37c>
    663c:	80 e3       	ldi	r24, 0x30	; 48
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	b3 01       	movw	r22, r6
    6642:	0e 94 59 33 	call	0x66b2	; 0x66b2 <fputc>
    6646:	9a 94       	dec	r9
    6648:	d9 14       	cp	r13, r9
    664a:	c0 f3       	brcs	.-16     	; 0x663c <vfprintf+0x370>
    664c:	da 94       	dec	r13
    664e:	f1 01       	movw	r30, r2
    6650:	ed 0d       	add	r30, r13
    6652:	f1 1d       	adc	r31, r1
    6654:	80 81       	ld	r24, Z
    6656:	90 e0       	ldi	r25, 0x00	; 0
    6658:	b3 01       	movw	r22, r6
    665a:	0e 94 59 33 	call	0x66b2	; 0x66b2 <fputc>
    665e:	dd 20       	and	r13, r13
    6660:	a9 f7       	brne	.-22     	; 0x664c <vfprintf+0x380>
    6662:	06 c0       	rjmp	.+12     	; 0x6670 <vfprintf+0x3a4>
    6664:	80 e2       	ldi	r24, 0x20	; 32
    6666:	90 e0       	ldi	r25, 0x00	; 0
    6668:	b3 01       	movw	r22, r6
    666a:	0e 94 59 33 	call	0x66b2	; 0x66b2 <fputc>
    666e:	ea 94       	dec	r14
    6670:	ee 20       	and	r14, r14
    6672:	c1 f7       	brne	.-16     	; 0x6664 <vfprintf+0x398>
    6674:	43 ce       	rjmp	.-890    	; 0x62fc <vfprintf+0x30>
    6676:	f3 01       	movw	r30, r6
    6678:	66 81       	ldd	r22, Z+6	; 0x06
    667a:	77 81       	ldd	r23, Z+7	; 0x07
    667c:	cb 01       	movw	r24, r22
    667e:	2b 96       	adiw	r28, 0x0b	; 11
    6680:	e2 e1       	ldi	r30, 0x12	; 18
    6682:	0c 94 20 31 	jmp	0x6240	; 0x6240 <__epilogue_restores__>

00006686 <strnlen_P>:
    6686:	fc 01       	movw	r30, r24
    6688:	05 90       	lpm	r0, Z+
    668a:	61 50       	subi	r22, 0x01	; 1
    668c:	70 40       	sbci	r23, 0x00	; 0
    668e:	01 10       	cpse	r0, r1
    6690:	d8 f7       	brcc	.-10     	; 0x6688 <strnlen_P+0x2>
    6692:	80 95       	com	r24
    6694:	90 95       	com	r25
    6696:	8e 0f       	add	r24, r30
    6698:	9f 1f       	adc	r25, r31
    669a:	08 95       	ret

0000669c <strnlen>:
    669c:	fc 01       	movw	r30, r24
    669e:	61 50       	subi	r22, 0x01	; 1
    66a0:	70 40       	sbci	r23, 0x00	; 0
    66a2:	01 90       	ld	r0, Z+
    66a4:	01 10       	cpse	r0, r1
    66a6:	d8 f7       	brcc	.-10     	; 0x669e <strnlen+0x2>
    66a8:	80 95       	com	r24
    66aa:	90 95       	com	r25
    66ac:	8e 0f       	add	r24, r30
    66ae:	9f 1f       	adc	r25, r31
    66b0:	08 95       	ret

000066b2 <fputc>:
    66b2:	0f 93       	push	r16
    66b4:	1f 93       	push	r17
    66b6:	cf 93       	push	r28
    66b8:	df 93       	push	r29
    66ba:	8c 01       	movw	r16, r24
    66bc:	eb 01       	movw	r28, r22
    66be:	8b 81       	ldd	r24, Y+3	; 0x03
    66c0:	81 ff       	sbrs	r24, 1
    66c2:	1b c0       	rjmp	.+54     	; 0x66fa <fputc+0x48>
    66c4:	82 ff       	sbrs	r24, 2
    66c6:	0d c0       	rjmp	.+26     	; 0x66e2 <fputc+0x30>
    66c8:	2e 81       	ldd	r18, Y+6	; 0x06
    66ca:	3f 81       	ldd	r19, Y+7	; 0x07
    66cc:	8c 81       	ldd	r24, Y+4	; 0x04
    66ce:	9d 81       	ldd	r25, Y+5	; 0x05
    66d0:	28 17       	cp	r18, r24
    66d2:	39 07       	cpc	r19, r25
    66d4:	64 f4       	brge	.+24     	; 0x66ee <fputc+0x3c>
    66d6:	e8 81       	ld	r30, Y
    66d8:	f9 81       	ldd	r31, Y+1	; 0x01
    66da:	01 93       	st	Z+, r16
    66dc:	f9 83       	std	Y+1, r31	; 0x01
    66de:	e8 83       	st	Y, r30
    66e0:	06 c0       	rjmp	.+12     	; 0x66ee <fputc+0x3c>
    66e2:	e8 85       	ldd	r30, Y+8	; 0x08
    66e4:	f9 85       	ldd	r31, Y+9	; 0x09
    66e6:	80 2f       	mov	r24, r16
    66e8:	09 95       	icall
    66ea:	89 2b       	or	r24, r25
    66ec:	31 f4       	brne	.+12     	; 0x66fa <fputc+0x48>
    66ee:	8e 81       	ldd	r24, Y+6	; 0x06
    66f0:	9f 81       	ldd	r25, Y+7	; 0x07
    66f2:	01 96       	adiw	r24, 0x01	; 1
    66f4:	9f 83       	std	Y+7, r25	; 0x07
    66f6:	8e 83       	std	Y+6, r24	; 0x06
    66f8:	02 c0       	rjmp	.+4      	; 0x66fe <fputc+0x4c>
    66fa:	0f ef       	ldi	r16, 0xFF	; 255
    66fc:	1f ef       	ldi	r17, 0xFF	; 255
    66fe:	c8 01       	movw	r24, r16
    6700:	df 91       	pop	r29
    6702:	cf 91       	pop	r28
    6704:	1f 91       	pop	r17
    6706:	0f 91       	pop	r16
    6708:	08 95       	ret

0000670a <__ultoa_invert>:
    670a:	fa 01       	movw	r30, r20
    670c:	aa 27       	eor	r26, r26
    670e:	28 30       	cpi	r18, 0x08	; 8
    6710:	51 f1       	breq	.+84     	; 0x6766 <__ultoa_invert+0x5c>
    6712:	20 31       	cpi	r18, 0x10	; 16
    6714:	81 f1       	breq	.+96     	; 0x6776 <__ultoa_invert+0x6c>
    6716:	e8 94       	clt
    6718:	6f 93       	push	r22
    671a:	6e 7f       	andi	r22, 0xFE	; 254
    671c:	6e 5f       	subi	r22, 0xFE	; 254
    671e:	7f 4f       	sbci	r23, 0xFF	; 255
    6720:	8f 4f       	sbci	r24, 0xFF	; 255
    6722:	9f 4f       	sbci	r25, 0xFF	; 255
    6724:	af 4f       	sbci	r26, 0xFF	; 255
    6726:	b1 e0       	ldi	r27, 0x01	; 1
    6728:	3e d0       	rcall	.+124    	; 0x67a6 <__ultoa_invert+0x9c>
    672a:	b4 e0       	ldi	r27, 0x04	; 4
    672c:	3c d0       	rcall	.+120    	; 0x67a6 <__ultoa_invert+0x9c>
    672e:	67 0f       	add	r22, r23
    6730:	78 1f       	adc	r23, r24
    6732:	89 1f       	adc	r24, r25
    6734:	9a 1f       	adc	r25, r26
    6736:	a1 1d       	adc	r26, r1
    6738:	68 0f       	add	r22, r24
    673a:	79 1f       	adc	r23, r25
    673c:	8a 1f       	adc	r24, r26
    673e:	91 1d       	adc	r25, r1
    6740:	a1 1d       	adc	r26, r1
    6742:	6a 0f       	add	r22, r26
    6744:	71 1d       	adc	r23, r1
    6746:	81 1d       	adc	r24, r1
    6748:	91 1d       	adc	r25, r1
    674a:	a1 1d       	adc	r26, r1
    674c:	20 d0       	rcall	.+64     	; 0x678e <__ultoa_invert+0x84>
    674e:	09 f4       	brne	.+2      	; 0x6752 <__ultoa_invert+0x48>
    6750:	68 94       	set
    6752:	3f 91       	pop	r19
    6754:	2a e0       	ldi	r18, 0x0A	; 10
    6756:	26 9f       	mul	r18, r22
    6758:	11 24       	eor	r1, r1
    675a:	30 19       	sub	r19, r0
    675c:	30 5d       	subi	r19, 0xD0	; 208
    675e:	31 93       	st	Z+, r19
    6760:	de f6       	brtc	.-74     	; 0x6718 <__ultoa_invert+0xe>
    6762:	cf 01       	movw	r24, r30
    6764:	08 95       	ret
    6766:	46 2f       	mov	r20, r22
    6768:	47 70       	andi	r20, 0x07	; 7
    676a:	40 5d       	subi	r20, 0xD0	; 208
    676c:	41 93       	st	Z+, r20
    676e:	b3 e0       	ldi	r27, 0x03	; 3
    6770:	0f d0       	rcall	.+30     	; 0x6790 <__ultoa_invert+0x86>
    6772:	c9 f7       	brne	.-14     	; 0x6766 <__ultoa_invert+0x5c>
    6774:	f6 cf       	rjmp	.-20     	; 0x6762 <__ultoa_invert+0x58>
    6776:	46 2f       	mov	r20, r22
    6778:	4f 70       	andi	r20, 0x0F	; 15
    677a:	40 5d       	subi	r20, 0xD0	; 208
    677c:	4a 33       	cpi	r20, 0x3A	; 58
    677e:	18 f0       	brcs	.+6      	; 0x6786 <__ultoa_invert+0x7c>
    6780:	49 5d       	subi	r20, 0xD9	; 217
    6782:	31 fd       	sbrc	r19, 1
    6784:	40 52       	subi	r20, 0x20	; 32
    6786:	41 93       	st	Z+, r20
    6788:	02 d0       	rcall	.+4      	; 0x678e <__ultoa_invert+0x84>
    678a:	a9 f7       	brne	.-22     	; 0x6776 <__ultoa_invert+0x6c>
    678c:	ea cf       	rjmp	.-44     	; 0x6762 <__ultoa_invert+0x58>
    678e:	b4 e0       	ldi	r27, 0x04	; 4
    6790:	a6 95       	lsr	r26
    6792:	97 95       	ror	r25
    6794:	87 95       	ror	r24
    6796:	77 95       	ror	r23
    6798:	67 95       	ror	r22
    679a:	ba 95       	dec	r27
    679c:	c9 f7       	brne	.-14     	; 0x6790 <__ultoa_invert+0x86>
    679e:	00 97       	sbiw	r24, 0x00	; 0
    67a0:	61 05       	cpc	r22, r1
    67a2:	71 05       	cpc	r23, r1
    67a4:	08 95       	ret
    67a6:	9b 01       	movw	r18, r22
    67a8:	ac 01       	movw	r20, r24
    67aa:	0a 2e       	mov	r0, r26
    67ac:	06 94       	lsr	r0
    67ae:	57 95       	ror	r21
    67b0:	47 95       	ror	r20
    67b2:	37 95       	ror	r19
    67b4:	27 95       	ror	r18
    67b6:	ba 95       	dec	r27
    67b8:	c9 f7       	brne	.-14     	; 0x67ac <__ultoa_invert+0xa2>
    67ba:	62 0f       	add	r22, r18
    67bc:	73 1f       	adc	r23, r19
    67be:	84 1f       	adc	r24, r20
    67c0:	95 1f       	adc	r25, r21
    67c2:	a0 1d       	adc	r26, r0
    67c4:	08 95       	ret

000067c6 <_exit>:
    67c6:	f8 94       	cli

000067c8 <__stop_program>:
    67c8:	ff cf       	rjmp	.-2      	; 0x67c8 <__stop_program>
